/*! For license information please see index.min.js.LICENSE */
!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var n=e();for(var r in n)("object"==typeof exports?exports:t)[r]=n[r]}}(self,()=>(()=>{var t={3230:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>xe});var r=n(8973),o=n.n(r),i=(n(3233),n(4515)),l=n.n(i),s=n(5025),a=n.n(s),u=n(9385),c=n.n(u);class f extends o().Embed{static value(){}insertInto(t,e){0===t.children.length?super.insertInto(t,e):this.remove()}length(){return 0}value(){return""}}f.blotName="break",f.tagName="BR";const h=f;class p extends o().Text{}const d=p;class y extends o().Inline{static compare(t,e){let n=y.order.indexOf(t),r=y.order.indexOf(e);return n>=0||r>=0?n-r:t===e?0:t<e?-1:1}formatAt(t,e,n,r){if(y.compare(this.statics.blotName,n)<0&&o().query(n,o().Scope.BLOT)){let o=this.isolate(t,e);r&&o.wrap(n,r)}else super.formatAt(t,e,n,r)}optimize(t){if(super.optimize(t),this.parent instanceof y&&y.compare(this.statics.blotName,this.parent.statics.blotName)>0){let t=this.parent.isolate(this.offset(),this.length());this.moveChildren(t),t.wrap(this)}}}y.allowedChildren=[y,o().Embed,d],y.order=["cursor","inline","underline","strike","italic","bold","script","link","code"];const v=y;class b extends o().Embed{attach(){super.attach(),this.attributes=new(o().Attributor.Store)(this.domNode)}delta(){return(new(l())).insert(this.value(),c()(this.formats(),this.attributes.values()))}format(t,e){let n=o().query(t,o().Scope.BLOCK_ATTRIBUTE);null!=n&&this.attributes.attribute(n,e)}formatAt(t,e,n,r){this.format(n,r)}insertAt(t,e,n){if("string"==typeof e&&e.endsWith("\n")){let n=o().create(g.blotName);this.parent.insertBefore(n,0===t?this:this.next),n.insertAt(0,e.slice(0,-1))}else super.insertAt(t,e,n)}}b.scope=o().Scope.BLOCK_BLOT;class g extends o().Block{constructor(t){super(t),this.cache={}}delta(){return null==this.cache.delta&&(this.cache.delta=this.descendants(o().Leaf).reduce((t,e)=>0===e.length()?t:t.insert(e.value(),m(e)),new(l())).insert("\n",m(this))),this.cache.delta}deleteAt(t,e){super.deleteAt(t,e),this.cache={}}formatAt(t,e,n,r){e<=0||(o().query(n,o().Scope.BLOCK)?t+e===this.length()&&this.format(n,r):super.formatAt(t,Math.min(e,this.length()-t-1),n,r),this.cache={})}insertAt(t,e,n){if(null!=n)return super.insertAt(t,e,n);if(0===e.length)return;let r=e.split("\n"),o=r.shift();o.length>0&&(t<this.length()-1||null==this.children.tail?super.insertAt(Math.min(t,this.length()-1),o):this.children.tail.insertAt(this.children.tail.length(),o),this.cache={});let i=this;r.reduce((function(t,e){return i=i.split(t,!0),i.insertAt(0,e),e.length}),t+o.length)}insertBefore(t,e){let n=this.children.head;super.insertBefore(t,e),n instanceof h&&n.remove(),this.cache={}}length(){return null==this.cache.length&&(this.cache.length=super.length()+1),this.cache.length}moveChildren(t,e){super.moveChildren(t,e),this.cache={}}optimize(t){super.optimize(t),this.cache={}}path(t){return super.path(t,!0)}removeChild(t){super.removeChild(t),this.cache={}}split(t,e=!1){if(e&&(0===t||t>=this.length()-1)){let e=this.clone();return 0===t?(this.parent.insertBefore(e,this),this):(this.parent.insertBefore(e,this.next),e)}{let n=super.split(t,e);return this.cache={},n}}}function m(t,e={}){return null==t?e:("function"==typeof t.formats&&(e=c()(e,t.formats())),null==t.parent||"scroll"==t.parent.blotName||t.parent.statics.scope!==t.statics.scope?e:m(t.parent,e))}g.blotName="block",g.tagName="P",g.defaultChild="break",g.allowedChildren=[v,o().Embed,d];class x extends v{}x.blotName="code",x.tagName="CODE";class _ extends g{static create(t){let e=super.create(t);return e.setAttribute("spellcheck",!1),e}static formats(){return!0}delta(){let t=this.domNode.textContent;return t.endsWith("\n")&&(t=t.slice(0,-1)),t.split("\n").reduce((t,e)=>t.insert(e).insert("\n",this.formats()),new(l()))}format(t,e){if(t===this.statics.blotName&&e)return;let[n]=this.descendant(d,this.length()-1);null!=n&&n.deleteAt(n.length()-1,1),super.format(t,e)}formatAt(t,e,n,r){if(0===e)return;if(null==o().query(n,o().Scope.BLOCK)||n===this.statics.blotName&&r===this.statics.formats(this.domNode))return;let i=this.newlineIndex(t);if(i<0||i>=t+e)return;let l=this.newlineIndex(t,!0)+1,s=i-l+1,a=this.isolate(l,s),u=a.next;a.format(n,r),u instanceof _&&u.formatAt(0,t-l+e-s,n,r)}insertAt(t,e,n){if(null!=n)return;let[r,o]=this.descendant(d,t);r.insertAt(o,e)}length(){let t=this.domNode.textContent.length;return this.domNode.textContent.endsWith("\n")?t:t+1}newlineIndex(t,e=!1){if(e)return this.domNode.textContent.slice(0,t).lastIndexOf("\n");{let e=this.domNode.textContent.slice(t).indexOf("\n");return e>-1?t+e:-1}}optimize(t){this.domNode.textContent.endsWith("\n")||this.appendChild(o().create("text","\n")),super.optimize(t);let e=this.next;null!=e&&e.prev===this&&e.statics.blotName===this.statics.blotName&&this.statics.formats(this.domNode)===e.statics.formats(e.domNode)&&(e.optimize(t),e.moveChildren(this),e.remove())}replace(t){super.replace(t),[].slice.call(this.domNode.querySelectorAll("*")).forEach((function(t){let e=o().find(t);null==e?t.parentNode.removeChild(t):e instanceof o().Embed?e.remove():e.unwrap()}))}}_.blotName="code-block",_.tagName="PRE",_.TAB="  ";class O extends o().Embed{static value(){}constructor(t,e){super(t),this.selection=e,this.textNode=document.createTextNode(O.CONTENTS),this.domNode.appendChild(this.textNode),this._length=0}detach(){null!=this.parent&&this.parent.removeChild(this)}format(t,e){if(0!==this._length)return super.format(t,e);let n=this,r=0;for(;null!=n&&n.statics.scope!==o().Scope.BLOCK_BLOT;)r+=n.offset(n.parent),n=n.parent;null!=n&&(this._length=O.CONTENTS.length,n.optimize(),n.formatAt(r,O.CONTENTS.length,t,e),this._length=0)}index(t,e){return t===this.textNode?0:super.index(t,e)}length(){return this._length}position(){return[this.textNode,this.textNode.data.length]}remove(){super.remove(),this.parent=null}restore(){if(this.selection.composing||null==this.parent)return;let t,e,n,r=this.textNode,i=this.selection.getNativeRange();for(null!=i&&i.start.node===r&&i.end.node===r&&([t,e,n]=[r,i.start.offset,i.end.offset]);null!=this.domNode.lastChild&&this.domNode.lastChild!==this.textNode;)this.domNode.parentNode.insertBefore(this.domNode.lastChild,this.domNode);if(this.textNode.data!==O.CONTENTS){let e=this.textNode.data.split(O.CONTENTS).join("");this.next instanceof d?(t=this.next.domNode,this.next.insertAt(0,e),this.textNode.data=O.CONTENTS):(this.textNode.data=e,this.parent.insertBefore(o().create(this.textNode),this),this.textNode=document.createTextNode(O.CONTENTS),this.domNode.appendChild(this.textNode))}return this.remove(),null!=e?([e,n]=[e,n].map((function(e){return Math.max(0,Math.min(t.data.length,e-1))})),{startNode:t,startOffset:e,endNode:t,endOffset:n}):void 0}update(t,e){if(t.some(t=>"characterData"===t.type&&t.target===this.textNode)){let t=this.restore();t&&(e.range=t)}}value(){return""}}O.blotName="cursor",O.className="ql-cursor",O.tagName="span",O.CONTENTS="\ufeff";const E=O;var w=n(8138),k=n.n(w),A=n(3185),N=n.n(A);const q=/^[ -~]*$/;function T(t,e){return Object.keys(e).reduce((function(n,r){return null==t[r]||(e[r]===t[r]?n[r]=e[r]:Array.isArray(e[r])?e[r].indexOf(t[r])<0&&(n[r]=e[r].concat([t[r]])):n[r]=[e[r],t[r]]),n}),{})}const S=class{constructor(t){this.scroll=t,this.delta=this.getDelta()}applyDelta(t){let e=!1;this.scroll.update();let n=this.scroll.length();return this.scroll.batchStart(),(t=function(t){return t.reduce((function(t,e){if(1===e.insert){let n=k()(e.attributes);return delete n.image,t.insert({image:e.attributes.image},n)}if(null==e.attributes||!0!==e.attributes.list&&!0!==e.attributes.bullet||((e=k()(e)).attributes.list?e.attributes.list="ordered":(e.attributes.list="bullet",delete e.attributes.bullet)),"string"==typeof e.insert){let n=e.insert.replace(/\r\n/g,"\n").replace(/\r/g,"\n");return t.insert(n,e.attributes)}return t.push(e)}),new(l()))}(t)).reduce((t,r)=>{let i=r.retain||r.delete||r.insert.length||1,l=r.attributes||{};if(null!=r.insert){if("string"==typeof r.insert){let i=r.insert;i.endsWith("\n")&&e&&(e=!1,i=i.slice(0,-1)),t>=n&&!i.endsWith("\n")&&(e=!0),this.scroll.insertAt(t,i);let[s,u]=this.scroll.line(t),f=c()({},m(s));if(s instanceof g){let[t]=s.descendant(o().Leaf,u);f=c()(f,m(t))}l=a().attributes.diff(f,l)||{}}else if("object"==typeof r.insert){let e=Object.keys(r.insert)[0];if(null==e)return t;this.scroll.insertAt(t,e,r.insert[e])}n+=i}return Object.keys(l).forEach(e=>{this.scroll.formatAt(t,i,e,l[e])}),t+i},0),t.reduce((t,e)=>"number"==typeof e.delete?(this.scroll.deleteAt(t,e.delete),t):t+(e.retain||e.insert.length||1),0),this.scroll.batchEnd(),this.update(t)}deleteText(t,e){return this.scroll.deleteAt(t,e),this.update((new(l())).retain(t).delete(e))}formatLine(t,e,n={}){return this.scroll.update(),Object.keys(n).forEach(r=>{if(null!=this.scroll.whitelist&&!this.scroll.whitelist[r])return;let o=this.scroll.lines(t,Math.max(e,1)),i=e;o.forEach(e=>{let o=e.length();if(e instanceof _){let o=t-e.offset(this.scroll),l=e.newlineIndex(o+i)-o+1;e.formatAt(o,l,r,n[r])}else e.format(r,n[r]);i-=o})}),this.scroll.optimize(),this.update((new(l())).retain(t).retain(e,k()(n)))}formatText(t,e,n={}){return Object.keys(n).forEach(r=>{this.scroll.formatAt(t,e,r,n[r])}),this.update((new(l())).retain(t).retain(e,k()(n)))}getContents(t,e){return this.delta.slice(t,t+e)}getDelta(){return this.scroll.lines().reduce((t,e)=>t.concat(e.delta()),new(l()))}getFormat(t,e=0){let n=[],r=[];0===e?this.scroll.path(t).forEach((function(t){let[e]=t;e instanceof g?n.push(e):e instanceof o().Leaf&&r.push(e)})):(n=this.scroll.lines(t,e),r=this.scroll.descendants(o().Leaf,t,e));let i=[n,r].map((function(t){if(0===t.length)return{};let e=m(t.shift());for(;Object.keys(e).length>0;){let n=t.shift();if(null==n)return e;e=T(m(n),e)}return e}));return c().apply(c(),i)}getText(t,e){return this.getContents(t,e).filter((function(t){return"string"==typeof t.insert})).map((function(t){return t.insert})).join("")}insertEmbed(t,e,n){return this.scroll.insertAt(t,e,n),this.update((new(l())).retain(t).insert({[e]:n}))}insertText(t,e,n={}){return e=e.replace(/\r\n/g,"\n").replace(/\r/g,"\n"),this.scroll.insertAt(t,e),Object.keys(n).forEach(r=>{this.scroll.formatAt(t,e.length,r,n[r])}),this.update((new(l())).retain(t).insert(e,k()(n)))}isBlank(){if(0==this.scroll.children.length)return!0;if(this.scroll.children.length>1)return!1;let t=this.scroll.children.head;return t.statics.blotName===g.blotName&&(!(t.children.length>1)&&t.children.head instanceof h)}removeFormat(t,e){let n=this.getText(t,e),[r,o]=this.scroll.line(t+e),i=0,s=new(l());null!=r&&(i=r instanceof _?r.newlineIndex(o)-o+1:r.length()-o,s=r.delta().slice(o,o+i-1).insert("\n"));let a=this.getContents(t,e+i).diff((new(l())).insert(n).concat(s)),u=(new(l())).retain(t).concat(a);return this.applyDelta(u)}update(t,e=[],n){let r=this.delta;if(1===e.length&&"characterData"===e[0].type&&e[0].target.data.match(q)&&o().find(e[0].target)){let i=o().find(e[0].target),s=m(i),a=i.offset(this.scroll),u=e[0].oldValue.replace(E.CONTENTS,""),c=(new(l())).insert(u),f=(new(l())).insert(i.value());t=(new(l())).retain(a).concat(c.diff(f,n)).reduce((function(t,e){return e.insert?t.insert(e.insert,s):t.push(e)}),new(l())),this.delta=r.compose(t)}else this.delta=this.getDelta(),t&&N()(r.compose(t),this.delta)||(t=r.diff(this.delta,n));return t}};var j=n(161),L=n.n(j);let C=["error","warn","log","info"],P="warn";function R(t,...e){C.indexOf(t)<=C.indexOf(P)&&console[t](...e)}function I(t){return C.reduce((function(e,n){return e[n]=R.bind(console,n,t),e}),{})}R.level=I.level=function(t){P=t};const M=I;let B=M("quill:events");["selectionchange","mousedown","mouseup","click"].forEach((function(t){document.addEventListener(t,(...t)=>{[].slice.call(document.querySelectorAll(".ql-container")).forEach(e=>{e.__quill&&e.__quill.emitter&&e.__quill.emitter.handleDOM(...t)})})}));class D extends(L()){constructor(){super(),this.listeners={},this.on("error",B.error)}emit(){B.log.apply(B,arguments),super.emit.apply(this,arguments)}handleDOM(t,...e){(this.listeners[t.type]||[]).forEach((function({node:n,handler:r}){(t.target===n||n.contains(t.target))&&r(t,...e)}))}listenDOM(t,e,n){this.listeners[t]||(this.listeners[t]=[]),this.listeners[t].push({node:e,handler:n})}}D.events={EDITOR_CHANGE:"editor-change",SCROLL_BEFORE_UPDATE:"scroll-before-update",SCROLL_OPTIMIZE:"scroll-optimize",SCROLL_UPDATE:"scroll-update",SELECTION_CHANGE:"selection-change",TEXT_CHANGE:"text-change"},D.sources={API:"api",SILENT:"silent",USER:"user"};const U=D;class F{constructor(t,e={}){this.quill=t,this.options=e}}F.DEFAULTS={};const H=F;let K=M("quill:selection");class z{constructor(t,e=0){this.index=t,this.length=e}}class V{constructor(t,e){this.emitter=e,this.scroll=t,this.composing=!1,this.mouseDown=!1,this.root=this.scroll.domNode,this.cursor=o().create("cursor",this),this.lastRange=this.savedRange=new z(0,0),this.handleComposition(),this.handleDragging(),this.emitter.listenDOM("selectionchange",document,()=>{this.mouseDown||setTimeout(this.update.bind(this,U.sources.USER),1)}),this.emitter.on(U.events.EDITOR_CHANGE,(t,e)=>{t===U.events.TEXT_CHANGE&&e.length()>0&&this.update(U.sources.SILENT)}),this.emitter.on(U.events.SCROLL_BEFORE_UPDATE,()=>{if(!this.hasFocus())return;let t=this.getNativeRange();null!=t&&t.start.node!==this.cursor.textNode&&this.emitter.once(U.events.SCROLL_UPDATE,()=>{try{this.setNativeRange(t.start.node,t.start.offset,t.end.node,t.end.offset)}catch(t){}})}),this.emitter.on(U.events.SCROLL_OPTIMIZE,(t,e)=>{if(e.range){const{startNode:t,startOffset:n,endNode:r,endOffset:o}=e.range;this.setNativeRange(t,n,r,o)}}),this.update(U.sources.SILENT)}handleComposition(){this.root.addEventListener("compositionstart",()=>{this.composing=!0}),this.root.addEventListener("compositionend",()=>{if(this.composing=!1,this.cursor.parent){const t=this.cursor.restore();if(!t)return;setTimeout(()=>{this.setNativeRange(t.startNode,t.startOffset,t.endNode,t.endOffset)},1)}})}handleDragging(){this.emitter.listenDOM("mousedown",document.body,()=>{this.mouseDown=!0}),this.emitter.listenDOM("mouseup",document.body,()=>{this.mouseDown=!1,this.update(U.sources.USER)})}focus(){this.hasFocus()||(this.root.focus(),this.setRange(this.savedRange))}format(t,e){if(null!=this.scroll.whitelist&&!this.scroll.whitelist[t])return;this.scroll.update();let n=this.getNativeRange();if(null!=n&&n.native.collapsed&&!o().query(t,o().Scope.BLOCK)){if(n.start.node!==this.cursor.textNode){let t=o().find(n.start.node,!1);if(null==t)return;if(t instanceof o().Leaf){let e=t.split(n.start.offset);t.parent.insertBefore(this.cursor,e)}else t.insertBefore(this.cursor,n.start.node);this.cursor.attach()}this.cursor.format(t,e),this.scroll.optimize(),this.setNativeRange(this.cursor.textNode,this.cursor.textNode.data.length),this.update()}}getBounds(t,e=0){let n=this.scroll.length();t=Math.min(t,n-1),e=Math.min(t+e,n-1)-t;let r,[o,i]=this.scroll.leaf(t);if(null==o)return null;[r,i]=o.position(i,!0);let l=document.createRange();if(e>0)return l.setStart(r,i),[o,i]=this.scroll.leaf(t+e),null==o?null:([r,i]=o.position(i,!0),l.setEnd(r,i),l.getBoundingClientRect());{let t,e="left";return r instanceof Text?(i<r.data.length?(l.setStart(r,i),l.setEnd(r,i+1)):(l.setStart(r,i-1),l.setEnd(r,i),e="right"),t=l.getBoundingClientRect()):(t=o.domNode.getBoundingClientRect(),i>0&&(e="right")),{bottom:t.top+t.height,height:t.height,left:t[e],right:t[e],top:t.top,width:0}}}getNativeRange(){let t=document.getSelection();if(null==t||t.rangeCount<=0)return null;let e=t.getRangeAt(0);if(null==e)return null;let n=this.normalizeNative(e);return K.info("getNativeRange",n),n}getRange(){let t=this.getNativeRange();return null==t?[null,null]:[this.normalizedToRange(t),t]}hasFocus(){return document.activeElement===this.root}normalizedToRange(t){let e=[[t.start.node,t.start.offset]];t.native.collapsed||e.push([t.end.node,t.end.offset]);let n=e.map(t=>{let[e,n]=t,r=o().find(e,!0),i=r.offset(this.scroll);return 0===n?i:r instanceof o().Container?i+r.length():i+r.index(e,n)}),r=Math.min(Math.max(...n),this.scroll.length()-1),i=Math.min(r,...n);return new z(i,r-i)}normalizeNative(t){if(!Z(this.root,t.startContainer)||!t.collapsed&&!Z(this.root,t.endContainer))return null;let e={start:{node:t.startContainer,offset:t.startOffset},end:{node:t.endContainer,offset:t.endOffset},native:t};return[e.start,e.end].forEach((function(t){let e=t.node,n=t.offset;for(;!(e instanceof Text)&&e.childNodes.length>0;)if(e.childNodes.length>n)e=e.childNodes[n],n=0;else{if(e.childNodes.length!==n)break;e=e.lastChild,n=e instanceof Text?e.data.length:e.childNodes.length+1}t.node=e,t.offset=n})),e}rangeToNative(t){let e=t.collapsed?[t.index]:[t.index,t.index+t.length],n=[],r=this.scroll.length();return e.forEach((t,e)=>{t=Math.min(r-1,t);let o,[i,l]=this.scroll.leaf(t);[o,l]=i.position(l,0!==e),n.push(o,l)}),n.length<2&&(n=n.concat(n)),n}scrollIntoView(t){let e=this.lastRange;if(null==e)return;let n=this.getBounds(e.index,e.length);if(null==n)return;let r=this.scroll.length()-1,[o]=this.scroll.line(Math.min(e.index,r)),i=o;if(e.length>0&&([i]=this.scroll.line(Math.min(e.index+e.length,r))),null==o||null==i)return;let l=t.getBoundingClientRect();n.top<l.top?t.scrollTop-=l.top-n.top:n.bottom>l.bottom&&(t.scrollTop+=n.bottom-l.bottom)}setNativeRange(t,e,n=t,r=e,o=!1){if(K.info("setNativeRange",t,e,n,r),null!=t&&(null==this.root.parentNode||null==t.parentNode||null==n.parentNode))return;let i=document.getSelection();if(null!=i)if(null!=t){this.hasFocus()||this.root.focus();let l=(this.getNativeRange()||{}).native;if(null==l||o||t!==l.startContainer||e!==l.startOffset||n!==l.endContainer||r!==l.endOffset){"BR"==t.tagName&&(e=[].indexOf.call(t.parentNode.childNodes,t),t=t.parentNode),"BR"==n.tagName&&(r=[].indexOf.call(n.parentNode.childNodes,n),n=n.parentNode);let o=document.createRange();o.setStart(t,e),o.setEnd(n,r),i.removeAllRanges(),i.addRange(o)}}else i.removeAllRanges(),this.root.blur(),document.body.focus()}setRange(t,e=!1,n=U.sources.API){if("string"==typeof e&&(n=e,e=!1),K.info("setRange",t),null!=t){let n=this.rangeToNative(t);this.setNativeRange(...n,e)}else this.setNativeRange(null);this.update(n)}update(t=U.sources.USER){let e=this.lastRange,[n,r]=this.getRange();if(this.lastRange=n,null!=this.lastRange&&(this.savedRange=this.lastRange),!N()(e,this.lastRange)){!this.composing&&null!=r&&r.native.collapsed&&r.start.node!==this.cursor.textNode&&this.cursor.restore();let n=[U.events.SELECTION_CHANGE,k()(this.lastRange),k()(e),t];this.emitter.emit(U.events.EDITOR_CHANGE,...n),t!==U.sources.SILENT&&this.emitter.emit(...n)}}}function Z(t,e){try{e.parentNode}catch(t){return!1}return e instanceof Text&&(e=e.parentNode),t.contains(e)}class W{constructor(t,e){this.quill=t,this.options=e,this.modules={}}init(){Object.keys(this.options.modules).forEach(t=>{null==this.modules[t]&&this.addModule(t)})}addModule(t){let e=this.quill.constructor.import("modules/"+t);return this.modules[t]=new e(this.quill,this.options.modules[t]||{}),this.modules[t]}}W.DEFAULTS={modules:{}},W.themes={default:W};const G=W;let $=M("quill");class Y{static debug(t){!0===t&&(t="log"),M.level(t)}static find(t){return t.__quill||o().find(t)}static import(t){return null==this.imports[t]&&$.error(`Cannot import ${t}. Are you sure it was registered?`),this.imports[t]}static register(t,e,n=!1){if("string"!=typeof t){let n=t.attrName||t.blotName;"string"==typeof n?this.register("formats/"+n,t,e):Object.keys(t).forEach(n=>{this.register(n,t[n],e)})}else null==this.imports[t]||n||$.warn(`Overwriting ${t} with`,e),this.imports[t]=e,(t.startsWith("blots/")||t.startsWith("formats/"))&&"abstract"!==e.blotName?o().register(e):t.startsWith("modules")&&"function"==typeof e.register&&e.register()}constructor(t,e={}){if(this.options=function(t,e){if((e=c()(!0,{container:t,modules:{clipboard:!0,keyboard:!0,history:!0}},e)).theme&&e.theme!==Y.DEFAULTS.theme){if(e.theme=Y.import("themes/"+e.theme),null==e.theme)throw new Error(`Invalid theme ${e.theme}. Did you register it?`)}else e.theme=G;let n=c()(!0,{},e.theme.DEFAULTS);[n,e].forEach((function(t){t.modules=t.modules||{},Object.keys(t.modules).forEach((function(e){!0===t.modules[e]&&(t.modules[e]={})}))}));let r=Object.keys(n.modules).concat(Object.keys(e.modules)).reduce((function(t,e){let n=Y.import("modules/"+e);return null==n?$.error(`Cannot load ${e} module. Are you sure you registered it?`):t[e]=n.DEFAULTS||{},t}),{});null!=e.modules&&e.modules.toolbar&&e.modules.toolbar.constructor!==Object&&(e.modules.toolbar={container:e.modules.toolbar});return e=c()(!0,{},Y.DEFAULTS,{modules:r},n,e),["bounds","container","scrollingContainer"].forEach((function(t){"string"==typeof e[t]&&(e[t]=document.querySelector(e[t]))})),e.modules=Object.keys(e.modules).reduce((function(t,n){return e.modules[n]&&(t[n]=e.modules[n]),t}),{}),e}(t,e),this.container=this.options.container,null==this.container)return $.error("Invalid Quill container",t);this.options.debug&&Y.debug(this.options.debug);let n=this.container.innerHTML.trim();this.container.classList.add("ql-container"),this.container.innerHTML="",this.container.__quill=this,this.root=this.addContainer("ql-editor"),this.root.classList.add("ql-blank"),this.root.setAttribute("data-gramm",!1),this.scrollingContainer=this.options.scrollingContainer||this.root,this.emitter=new U,this.scroll=o().create(this.root,{emitter:this.emitter,whitelist:this.options.formats}),this.editor=new S(this.scroll),this.selection=new V(this.scroll,this.emitter),this.theme=new this.options.theme(this,this.options),this.keyboard=this.theme.addModule("keyboard"),this.clipboard=this.theme.addModule("clipboard"),this.history=this.theme.addModule("history"),this.theme.init(),this.emitter.on(U.events.EDITOR_CHANGE,t=>{t===U.events.TEXT_CHANGE&&this.root.classList.toggle("ql-blank",this.editor.isBlank())}),this.emitter.on(U.events.SCROLL_UPDATE,(t,e)=>{let n=this.selection.lastRange,r=n&&0===n.length?n.index:void 0;X.call(this,()=>this.editor.update(null,e,r),t)});let r=this.clipboard.convert(`<div class='ql-editor' style="white-space: normal;">${n}<p><br></p></div>`);this.setContents(r),this.history.clear(),this.options.placeholder&&this.root.setAttribute("data-placeholder",this.options.placeholder),this.options.readOnly&&this.disable()}addContainer(t,e=null){if("string"==typeof t){let e=t;(t=document.createElement("div")).classList.add(e)}return this.container.insertBefore(t,e),t}blur(){this.selection.setRange(null)}deleteText(t,e,n){return[t,e,,n]=Q(t,e,n),X.call(this,()=>this.editor.deleteText(t,e),n,t,-1*e)}disable(){this.enable(!1)}enable(t=!0){this.scroll.enable(t),this.container.classList.toggle("ql-disabled",!t)}focus(){let t=this.scrollingContainer.scrollTop;this.selection.focus(),this.scrollingContainer.scrollTop=t,this.scrollIntoView()}format(t,e,n=U.sources.API){return X.call(this,()=>{let n=this.getSelection(!0),r=new(l());if(null==n)return r;if(o().query(t,o().Scope.BLOCK))r=this.editor.formatLine(n.index,n.length,{[t]:e});else{if(0===n.length)return this.selection.format(t,e),r;r=this.editor.formatText(n.index,n.length,{[t]:e})}return this.setSelection(n,U.sources.SILENT),r},n)}formatLine(t,e,n,r,o){let i;return[t,e,i,o]=Q(t,e,n,r,o),X.call(this,()=>this.editor.formatLine(t,e,i),o,t,0)}formatText(t,e,n,r,o){let i;return[t,e,i,o]=Q(t,e,n,r,o),X.call(this,()=>this.editor.formatText(t,e,i),o,t,0)}getBounds(t,e=0){let n;n="number"==typeof t?this.selection.getBounds(t,e):this.selection.getBounds(t.index,t.length);let r=this.container.getBoundingClientRect();return{bottom:n.bottom-r.top,height:n.height,left:n.left-r.left,right:n.right-r.left,top:n.top-r.top,width:n.width}}getContents(t=0,e=this.getLength()-t){return[t,e]=Q(t,e),this.editor.getContents(t,e)}getFormat(t=this.getSelection(!0),e=0){return"number"==typeof t?this.editor.getFormat(t,e):this.editor.getFormat(t.index,t.length)}getIndex(t){return t.offset(this.scroll)}getLength(){return this.scroll.length()}getLeaf(t){return this.scroll.leaf(t)}getLine(t){return this.scroll.line(t)}getLines(t=0,e=Number.MAX_VALUE){return"number"!=typeof t?this.scroll.lines(t.index,t.length):this.scroll.lines(t,e)}getModule(t){return this.theme.modules[t]}getSelection(t=!1){return t&&this.focus(),this.update(),this.selection.getRange()[0]}getText(t=0,e=this.getLength()-t){return[t,e]=Q(t,e),this.editor.getText(t,e)}hasFocus(){return this.selection.hasFocus()}insertEmbed(t,e,n,r=Y.sources.API){return X.call(this,()=>this.editor.insertEmbed(t,e,n),r,t)}insertText(t,e,n,r,o){let i;return[t,,i,o]=Q(t,0,n,r,o),X.call(this,()=>this.editor.insertText(t,e,i),o,t,e.length)}isEnabled(){return!this.container.classList.contains("ql-disabled")}off(){return this.emitter.off.apply(this.emitter,arguments)}on(){return this.emitter.on.apply(this.emitter,arguments)}once(){return this.emitter.once.apply(this.emitter,arguments)}pasteHTML(t,e,n){this.clipboard.dangerouslyPasteHTML(t,e,n)}removeFormat(t,e,n){return[t,e,,n]=Q(t,e,n),X.call(this,()=>this.editor.removeFormat(t,e),n,t)}scrollIntoView(){this.selection.scrollIntoView(this.scrollingContainer)}setContents(t,e=U.sources.API){return X.call(this,()=>{t=new(l())(t);let e=this.getLength(),n=this.editor.deleteText(0,e),r=this.editor.applyDelta(t),o=r.ops[r.ops.length-1];return null!=o&&"string"==typeof o.insert&&"\n"===o.insert[o.insert.length-1]&&(this.editor.deleteText(this.getLength()-1,1),r.delete(1)),n.compose(r)},e)}setSelection(t,e,n){null==t?this.selection.setRange(null,e||Y.sources.API):([t,e,,n]=Q(t,e,n),this.selection.setRange(new z(t,e),n),n!==U.sources.SILENT&&this.selection.scrollIntoView(this.scrollingContainer))}setText(t,e=U.sources.API){let n=(new(l())).insert(t);return this.setContents(n,e)}update(t=U.sources.USER){let e=this.scroll.update(t);return this.selection.update(t),e}updateContents(t,e=U.sources.API){return X.call(this,()=>(t=new(l())(t),this.editor.applyDelta(t,e)),e,!0)}}function X(t,e,n,r){if(this.options.strict&&!this.isEnabled()&&e===U.sources.USER)return new(l());let o=null==n?null:this.getSelection(),i=this.editor.delta,s=t();if(null!=o&&(!0===n&&(n=o.index),null==r?o=J(o,s,e):0!==r&&(o=J(o,n,r,e)),this.setSelection(o,U.sources.SILENT)),s.length()>0){let t=[U.events.TEXT_CHANGE,s,i,e];this.emitter.emit(U.events.EDITOR_CHANGE,...t),e!==U.sources.SILENT&&this.emitter.emit(...t)}return s}function Q(t,e,n,r,o){let i={};return"number"==typeof t.index&&"number"==typeof t.length?"number"!=typeof e?(o=r,r=n,n=e,e=t.length,t=t.index):(e=t.length,t=t.index):"number"!=typeof e&&(o=r,r=n,n=e,e=0),"object"==typeof n?(i=n,o=r):"string"==typeof n&&(null!=r?i[n]=r:o=n),[t,e,i,o=o||U.sources.API]}function J(t,e,n,r){if(null==t)return null;let o,i;return e instanceof l()?[o,i]=[t.index,t.index+t.length].map((function(t){return e.transformPosition(t,r!==U.sources.USER)})):[o,i]=[t.index,t.index+t.length].map((function(t){return t<e||t===e&&r===U.sources.USER?t:n>=0?t+n:Math.max(e,t+n)})),new z(o,i-o)}Y.DEFAULTS={bounds:null,formats:null,modules:{},placeholder:"",readOnly:!1,scrollingContainer:null,strict:!0,theme:"default"},Y.events=U.events,Y.sources=U.sources,Y.version="undefined"==typeof QUILL_VERSION?"dev":QUILL_VERSION,Y.imports={delta:l(),parchment:o(),"core/module":H,"core/theme":G};class tt extends o().Container{}tt.allowedChildren=[g,b,tt];const et=tt;class nt extends o().Embed{constructor(t){super(t),this.contentNode=document.createElement("span"),this.contentNode.setAttribute("contenteditable",!1),[].slice.call(this.domNode.childNodes).forEach(t=>{this.contentNode.appendChild(t)}),this.leftGuard=document.createTextNode("\ufeff"),this.rightGuard=document.createTextNode("\ufeff"),this.domNode.appendChild(this.leftGuard),this.domNode.appendChild(this.contentNode),this.domNode.appendChild(this.rightGuard)}index(t,e){return t===this.leftGuard?0:t===this.rightGuard?1:super.index(t,e)}restore(t){let e,n,r=t.data.split("\ufeff").join("");if(t===this.leftGuard)if(this.prev instanceof d){let t=this.prev.length();this.prev.insertAt(t,r),e={startNode:this.prev.domNode,startOffset:t+r.length}}else n=document.createTextNode(r),this.parent.insertBefore(o().create(n),this),e={startNode:n,startOffset:r.length};else t===this.rightGuard&&(this.next instanceof d?(this.next.insertAt(0,r),e={startNode:this.next.domNode,startOffset:r.length}):(n=document.createTextNode(r),this.parent.insertBefore(o().create(n),this.next),e={startNode:n,startOffset:r.length}));return t.data="\ufeff",e}update(t,e){t.forEach(t=>{if("characterData"===t.type&&(t.target===this.leftGuard||t.target===this.rightGuard)){let n=this.restore(t.target);n&&(e.range=n)}})}}const rt=nt;function ot(t){return t instanceof g||t instanceof b}class it extends o().Scroll{constructor(t,e){super(t),this.emitter=e.emitter,Array.isArray(e.whitelist)&&(this.whitelist=e.whitelist.reduce((function(t,e){return t[e]=!0,t}),{})),this.domNode.addEventListener("DOMNodeInserted",(function(){})),this.optimize(),this.enable()}batchStart(){this.batch=!0}batchEnd(){this.batch=!1,this.optimize()}deleteAt(t,e){let[n,r]=this.line(t),[o]=this.line(t+e);if(super.deleteAt(t,e),null!=o&&n!==o&&r>0){if(n instanceof b||o instanceof b)return void this.optimize();if(n instanceof _){let t=n.newlineIndex(n.length(),!0);if(t>-1&&(n=n.split(t+1),n===o))return void this.optimize()}else if(o instanceof _){let t=o.newlineIndex(0);t>-1&&o.split(t+1)}let t=o.children.head instanceof h?null:o.children.head;n.moveChildren(o,t),n.remove()}this.optimize()}enable(t=!0){this.domNode.setAttribute("contenteditable",t)}formatAt(t,e,n,r){(null==this.whitelist||this.whitelist[n])&&(super.formatAt(t,e,n,r),this.optimize())}insertAt(t,e,n){if(null==n||null==this.whitelist||this.whitelist[e]){if(t>=this.length())if(null==n||null==o().query(e,o().Scope.BLOCK)){let t=o().create(this.statics.defaultChild);this.appendChild(t),null==n&&e.endsWith("\n")&&(e=e.slice(0,-1)),t.insertAt(0,e,n)}else{let t=o().create(e,n);this.appendChild(t)}else super.insertAt(t,e,n);this.optimize()}}insertBefore(t,e){if(t.statics.scope===o().Scope.INLINE_BLOT){let e=o().create(this.statics.defaultChild);e.appendChild(t),t=e}super.insertBefore(t,e)}leaf(t){return this.path(t).pop()||[null,-1]}line(t){return t===this.length()?this.line(t-1):this.descendant(ot,t)}lines(t=0,e=Number.MAX_VALUE){let n=(t,e,r)=>{let i=[],l=r;return t.children.forEachAt(e,r,(function(t,e,r){ot(t)?i.push(t):t instanceof o().Container&&(i=i.concat(n(t,e,l))),l-=r})),i};return n(this,t,e)}optimize(t=[],e={}){!0!==this.batch&&(super.optimize(t,e),t.length>0&&this.emitter.emit(U.events.SCROLL_OPTIMIZE,t,e))}path(t){return super.path(t).slice(1)}update(t){if(!0===this.batch)return;let e=U.sources.USER;"string"==typeof t&&(e=t),Array.isArray(t)||(t=this.observer.takeRecords()),t.length>0&&this.emitter.emit(U.events.SCROLL_BEFORE_UPDATE,e,t),super.update(t.concat([])),t.length>0&&this.emitter.emit(U.events.SCROLL_UPDATE,e,t)}}it.blotName="scroll",it.className="ql-editor",it.tagName="DIV",it.defaultChild="block",it.allowedChildren=[g,b,et];const lt=it;let st={scope:o().Scope.BLOCK,whitelist:["right","center","justify"]},at=new(o().Attributor.Attribute)("align","align",st),ut=(new(o().Attributor.Class)("align","ql-align",st),new(o().Attributor.Style)("align","text-align",st));class ct extends o().Attributor.Style{value(t){let e=super.value(t);return e.startsWith("rgb(")?(e=e.replace(/^[^\d]+/,"").replace(/[^\d]+$/,""),"#"+e.split(",").map((function(t){return("00"+parseInt(t).toString(16)).slice(-2)})).join("")):e}}new(o().Attributor.Class)("color","ql-color",{scope:o().Scope.INLINE});let ft=new ct("color","color",{scope:o().Scope.INLINE}),ht=(new(o().Attributor.Class)("background","ql-bg",{scope:o().Scope.INLINE}),new ct("background","background-color",{scope:o().Scope.INLINE})),pt={scope:o().Scope.BLOCK,whitelist:["rtl"]},dt=new(o().Attributor.Attribute)("direction","dir",pt),yt=(new(o().Attributor.Class)("direction","ql-direction",pt),new(o().Attributor.Style)("direction","direction",pt)),vt={scope:o().Scope.INLINE,whitelist:["serif","monospace"]};new(o().Attributor.Class)("font","ql-font",vt);class bt extends o().Attributor.Style{value(t){return super.value(t).replace(/["']/g,"")}}let gt=new bt("font","font-family",vt),mt=(new(o().Attributor.Class)("size","ql-size",{scope:o().Scope.INLINE,whitelist:["small","large","huge"]}),new(o().Attributor.Style)("size","font-size",{scope:o().Scope.INLINE,whitelist:["10px","18px","32px"]})),xt=M("quill:clipboard");const _t="__ql-matcher",Ot=[[Node.TEXT_NODE,function(t,e){let n=t.data;if("O:P"===t.parentNode.tagName)return e.insert(n.trim());if(0===n.trim().length&&t.parentNode.classList.contains("ql-clipboard"))return e;if(!Nt(t.parentNode).whiteSpace.startsWith("pre")){let e=function(t,e){return(e=e.replace(/[^\u00a0]/g,"")).length<1&&t?" ":e};n=n.replace(/\r\n/g," ").replace(/\n/g," "),n=n.replace(/\s\s+/g,e.bind(e,!0)),(null==t.previousSibling&&Tt(t.parentNode)||null!=t.previousSibling&&Tt(t.previousSibling))&&(n=n.replace(/^\s+/,e.bind(e,!1))),(null==t.nextSibling&&Tt(t.parentNode)||null!=t.nextSibling&&Tt(t.nextSibling))&&(n=n.replace(/\s+$/,e.bind(e,!1)))}return e.insert(n)}],[Node.TEXT_NODE,jt],["br",function(t,e){qt(e,"\n")||e.insert("\n");return e}],[Node.ELEMENT_NODE,jt],[Node.ELEMENT_NODE,function(t,e){let n=o().query(t);if(null==n)return e;if(n.prototype instanceof o().Embed){let r={},o=n.value(t);null!=o&&(r[n.blotName]=o,e=(new(l())).insert(r,n.formats(t)))}else"function"==typeof n.formats&&(e=At(e,n.blotName,n.formats(t)));return e}],[Node.ELEMENT_NODE,Lt],[Node.ELEMENT_NODE,function(t,e){let n=o().Attributor.Attribute.keys(t),r=o().Attributor.Class.keys(t),i=o().Attributor.Style.keys(t),l={};n.concat(r).concat(i).forEach(e=>{let n=o().query(e,o().Scope.ATTRIBUTE);null!=n&&(l[n.attrName]=n.value(t),l[n.attrName])||(n=Et[e],null==n||n.attrName!==e&&n.keyName!==e||(l[n.attrName]=n.value(t)||void 0),n=wt[e],null==n||n.attrName!==e&&n.keyName!==e||(n=wt[e],l[n.attrName]=n.value(t)||void 0))}),Object.keys(l).length>0&&(e=At(e,l));return e}],[Node.ELEMENT_NODE,function(t,e){let n={},r=t.style||{};r.fontStyle&&"italic"===Nt(t).fontStyle&&(n.italic=!0);r.fontWeight&&(Nt(t).fontWeight.startsWith("bold")||parseInt(Nt(t).fontWeight)>=700)&&(n.bold=!0);Object.keys(n).length>0&&(e=At(e,n));parseFloat(r.textIndent||0)>0&&(e=(new(l())).insert("\t").concat(e));return e}],["li",function(t,e){let n=o().query(t);if(null==n||"list-item"!==n.blotName||!qt(e,"\n"))return e;let r=-1,i=t.parentNode;for(;!i.classList.contains("ql-clipboard");)"list"===(o().query(i)||{}).blotName&&(r+=1),i=i.parentNode;return r<=0?e:e.compose((new(l())).retain(e.length()-1).retain(1,{indent:r}))}],["b",St.bind(St,"bold")],["i",St.bind(St,"italic")],["style",function(){return new(l())}]],Et=[at,dt].reduce((function(t,e){return t[e.keyName]=e,t}),{}),wt=[ut,ht,ft,yt,gt,mt].reduce((function(t,e){return t[e.keyName]=e,t}),{});class kt extends H{constructor(t,e){super(t,e),this.quill.root.addEventListener("paste",this.onPaste.bind(this)),this.container=this.quill.addContainer("ql-clipboard"),this.container.setAttribute("contenteditable",!0),this.container.setAttribute("tabindex",-1),this.matchers=[],Ot.concat(this.options.matchers).forEach(([t,n])=>{(e.matchVisual||n!==Lt)&&this.addMatcher(t,n)})}addMatcher(t,e){this.matchers.push([t,e])}convert(t){if("string"==typeof t)return this.container.innerHTML=t.replace(/\>\r?\n +\</g,"><"),this.convert();const e=this.quill.getFormat(this.quill.selection.savedRange.index);if(e[_.blotName]){const t=this.container.innerText;return this.container.innerHTML="",(new(l())).insert(t,{[_.blotName]:e[_.blotName]})}let[n,r]=this.prepareMatching(),o=function t(e,n,r){return e.nodeType===e.TEXT_NODE?r.reduce((function(t,n){return n(e,t)}),new(l())):e.nodeType===e.ELEMENT_NODE?[].reduce.call(e.childNodes||[],(o,i)=>{let l=t(i,n,r);return i.nodeType===e.ELEMENT_NODE&&(l=n.reduce((function(t,e){return e(i,t)}),l),l=(i[_t]||[]).reduce((function(t,e){return e(i,t)}),l)),o.concat(l)},new(l())):new(l())}(this.container,n,r);return qt(o,"\n")&&null==o.ops[o.ops.length-1].attributes&&(o=o.compose((new(l())).retain(o.length()-1).delete(1))),xt.log("convert",this.container.innerHTML,o),this.container.innerHTML="",o}dangerouslyPasteHTML(t,e,n=Y.sources.API){if("string"==typeof t)this.quill.setContents(this.convert(t),e),this.quill.setSelection(0,Y.sources.SILENT);else{let r=this.convert(e);this.quill.updateContents((new(l())).retain(t).concat(r),n),this.quill.setSelection(t+r.length(),Y.sources.SILENT)}}onPaste(t){if(t.defaultPrevented||!this.quill.isEnabled())return;let e=this.quill.getSelection(),n=(new(l())).retain(e.index),r=this.quill.scrollingContainer.scrollTop;this.container.focus(),this.quill.selection.update(Y.sources.SILENT),setTimeout(()=>{n=n.concat(this.convert()).delete(e.length),this.quill.updateContents(n,Y.sources.USER),this.quill.setSelection(n.length()-e.length,Y.sources.SILENT),this.quill.scrollingContainer.scrollTop=r,this.quill.focus()},1)}prepareMatching(){let t=[],e=[];return this.matchers.forEach(n=>{let[r,o]=n;switch(r){case Node.TEXT_NODE:e.push(o);break;case Node.ELEMENT_NODE:t.push(o);break;default:[].forEach.call(this.container.querySelectorAll(r),t=>{t[_t]=t[_t]||[],t[_t].push(o)})}}),[t,e]}}function At(t,e,n){return"object"==typeof e?Object.keys(e).reduce((function(t,n){return At(t,n,e[n])}),t):t.reduce((function(t,r){return r.attributes&&r.attributes[e]?t.push(r):t.insert(r.insert,c()({},{[e]:n},r.attributes))}),new(l()))}function Nt(t){if(t.nodeType!==Node.ELEMENT_NODE)return{};return t["__ql-computed-style"]||(t["__ql-computed-style"]=window.getComputedStyle(t))}function qt(t,e){let n="";for(let r=t.ops.length-1;r>=0&&n.length<e.length;--r){let e=t.ops[r];if("string"!=typeof e.insert)break;n=e.insert+n}return n.slice(-1*e.length)===e}function Tt(t){if(0===t.childNodes.length)return!1;let e=Nt(t);return["block","list-item"].indexOf(e.display)>-1}function St(t,e,n){return At(n,t,!0)}function jt(t,e){return qt(e,"\n")||(Tt(t)||e.length()>0&&t.nextSibling&&Tt(t.nextSibling))&&e.insert("\n"),e}function Lt(t,e){if(Tt(t)&&null!=t.nextElementSibling&&!qt(e,"\n\n")){let n=t.offsetHeight+parseFloat(Nt(t).marginTop)+parseFloat(Nt(t).marginBottom);t.nextElementSibling.offsetTop>t.offsetTop+1.5*n&&e.insert("\n")}return e}kt.DEFAULTS={matchers:[],matchVisual:!0};class Ct extends H{constructor(t,e){super(t,e),this.lastRecorded=0,this.ignoreChange=!1,this.clear(),this.quill.on(Y.events.EDITOR_CHANGE,(t,e,n,r)=>{t!==Y.events.TEXT_CHANGE||this.ignoreChange||(this.options.userOnly&&r!==Y.sources.USER?this.transform(e):this.record(e,n))}),this.quill.keyboard.addBinding({key:"Z",shortKey:!0},this.undo.bind(this)),this.quill.keyboard.addBinding({key:"Z",shortKey:!0,shiftKey:!0},this.redo.bind(this)),/Win/i.test(navigator.platform)&&this.quill.keyboard.addBinding({key:"Y",shortKey:!0},this.redo.bind(this))}change(t,e){if(0===this.stack[t].length)return;let n=this.stack[t].pop();this.stack[e].push(n),this.lastRecorded=0,this.ignoreChange=!0,this.quill.updateContents(n[t],Y.sources.USER),this.ignoreChange=!1;let r=function(t){let e=t.reduce((function(t,e){return t+=e.delete||0}),0),n=t.length()-e;(function(t){let e=t.ops[t.ops.length-1];if(null==e)return!1;if(null!=e.insert)return"string"==typeof e.insert&&e.insert.endsWith("\n");if(null!=e.attributes)return Object.keys(e.attributes).some((function(t){return null!=o().query(t,o().Scope.BLOCK)}));return!1})(t)&&(n-=1);return n}(n[t]);this.quill.setSelection(r)}clear(){this.stack={undo:[],redo:[]}}cutoff(){this.lastRecorded=0}record(t,e){if(0===t.ops.length)return;this.stack.redo=[];let n=this.quill.getContents().diff(e),r=Date.now();if(this.lastRecorded+this.options.delay>r&&this.stack.undo.length>0){let e=this.stack.undo.pop();n=n.compose(e.undo),t=e.redo.compose(t)}else this.lastRecorded=r;this.stack.undo.push({redo:t,undo:n}),this.stack.undo.length>this.options.maxStack&&this.stack.undo.shift()}redo(){this.change("redo","undo")}transform(t){this.stack.undo.forEach((function(e){e.undo=t.transform(e.undo,!0),e.redo=t.transform(e.redo,!0)})),this.stack.redo.forEach((function(e){e.undo=t.transform(e.undo,!0),e.redo=t.transform(e.redo,!0)}))}undo(){this.change("undo","redo")}}Ct.DEFAULTS={delay:1e3,maxStack:100,userOnly:!1};let Pt=M("quill:keyboard");const Rt=/Mac/i.test(navigator.platform)?"metaKey":"ctrlKey";class It extends H{static match(t,e){return e=zt(e),!["altKey","ctrlKey","metaKey","shiftKey"].some((function(n){return!!e[n]!==t[n]&&null!==e[n]}))&&e.key===(t.which||t.keyCode)}constructor(t,e){super(t,e),this.bindings={},Object.keys(this.options.bindings).forEach(e=>{("list autofill"!==e||null==t.scroll.whitelist||t.scroll.whitelist.list)&&this.options.bindings[e]&&this.addBinding(this.options.bindings[e])}),this.addBinding({key:It.keys.ENTER,shiftKey:null},Ft),this.addBinding({key:It.keys.ENTER,metaKey:null,ctrlKey:null,altKey:null},(function(){})),/Firefox/i.test(navigator.userAgent)?(this.addBinding({key:It.keys.BACKSPACE},{collapsed:!0},Bt),this.addBinding({key:It.keys.DELETE},{collapsed:!0},Dt)):(this.addBinding({key:It.keys.BACKSPACE},{collapsed:!0,prefix:/^.?$/},Bt),this.addBinding({key:It.keys.DELETE},{collapsed:!0,suffix:/^.?$/},Dt)),this.addBinding({key:It.keys.BACKSPACE},{collapsed:!1},Ut),this.addBinding({key:It.keys.DELETE},{collapsed:!1},Ut),this.addBinding({key:It.keys.BACKSPACE,altKey:null,ctrlKey:null,metaKey:null,shiftKey:null},{collapsed:!0,offset:0},Bt),this.listen()}addBinding(t,e={},n={}){let r=zt(t);if(null==r||null==r.key)return Pt.warn("Attempted to add invalid keyboard binding",r);"function"==typeof e&&(e={handler:e}),"function"==typeof n&&(n={handler:n}),r=c()(r,e,n),this.bindings[r.key]=this.bindings[r.key]||[],this.bindings[r.key].push(r)}listen(){this.quill.root.addEventListener("keydown",t=>{if(t.defaultPrevented)return;let e=t.which||t.keyCode,n=(this.bindings[e]||[]).filter((function(e){return It.match(t,e)}));if(0===n.length)return;let r=this.quill.getSelection();if(null==r||!this.quill.hasFocus())return;let[i,l]=this.quill.getLine(r.index),[s,a]=this.quill.getLeaf(r.index),[u,c]=0===r.length?[s,a]:this.quill.getLeaf(r.index+r.length),f=s instanceof o().Text?s.value().slice(0,a):"",h=u instanceof o().Text?u.value().slice(c):"",p={collapsed:0===r.length,empty:0===r.length&&i.length()<=1,format:this.quill.getFormat(r),offset:l,prefix:f,suffix:h};n.some(t=>{if(null!=t.collapsed&&t.collapsed!==p.collapsed)return!1;if(null!=t.empty&&t.empty!==p.empty)return!1;if(null!=t.offset&&t.offset!==p.offset)return!1;if(Array.isArray(t.format)){if(t.format.every((function(t){return null==p.format[t]})))return!1}else if("object"==typeof t.format&&!Object.keys(t.format).every((function(e){return!0===t.format[e]?null!=p.format[e]:!1===t.format[e]?null==p.format[e]:N()(t.format[e],p.format[e])})))return!1;return!(null!=t.prefix&&!t.prefix.test(p.prefix))&&(!(null!=t.suffix&&!t.suffix.test(p.suffix))&&!0!==t.handler.call(this,r,p))})&&t.preventDefault()})}}function Mt(t,e){const n=t===It.keys.LEFT?"prefix":"suffix";return{key:t,shiftKey:e,altKey:null,[n]:/^$/,handler:function(n){let r=n.index;t===It.keys.RIGHT&&(r+=n.length+1);const[i]=this.quill.getLeaf(r);return!(i instanceof o().Embed)||(t===It.keys.LEFT?e?this.quill.setSelection(n.index-1,n.length+1,Y.sources.USER):this.quill.setSelection(n.index-1,Y.sources.USER):e?this.quill.setSelection(n.index,n.length+1,Y.sources.USER):this.quill.setSelection(n.index+n.length+1,Y.sources.USER),!1)}}}function Bt(t,e){if(0===t.index||this.quill.getLength()<=1)return;let[n]=this.quill.getLine(t.index),r={};if(0===e.offset){let[e]=this.quill.getLine(t.index-1);if(null!=e&&e.length()>1){let e=n.formats(),o=this.quill.getFormat(t.index-1,1);r=a().attributes.diff(e,o)||{}}}let o=/[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(e.prefix)?2:1;this.quill.deleteText(t.index-o,o,Y.sources.USER),Object.keys(r).length>0&&this.quill.formatLine(t.index-o,o,r,Y.sources.USER),this.quill.focus()}function Dt(t,e){let n=/^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(e.suffix)?2:1;if(t.index>=this.quill.getLength()-n)return;let r={},o=0,[i]=this.quill.getLine(t.index);if(e.offset>=i.length()-1){let[e]=this.quill.getLine(t.index+1);if(e){let n=i.formats(),l=this.quill.getFormat(t.index,1);r=a().attributes.diff(n,l)||{},o=e.length()}}this.quill.deleteText(t.index,n,Y.sources.USER),Object.keys(r).length>0&&this.quill.formatLine(t.index+o-1,n,r,Y.sources.USER)}function Ut(t){let e=this.quill.getLines(t),n={};if(e.length>1){let t=e[0].formats(),r=e[e.length-1].formats();n=a().attributes.diff(r,t)||{}}this.quill.deleteText(t,Y.sources.USER),Object.keys(n).length>0&&this.quill.formatLine(t.index,1,n,Y.sources.USER),this.quill.setSelection(t.index,Y.sources.SILENT),this.quill.focus()}function Ft(t,e){t.length>0&&this.quill.scroll.deleteAt(t.index,t.length);let n=Object.keys(e.format).reduce((function(t,n){return o().query(n,o().Scope.BLOCK)&&!Array.isArray(e.format[n])&&(t[n]=e.format[n]),t}),{});this.quill.insertText(t.index,"\n",n,Y.sources.USER),this.quill.setSelection(t.index+1,Y.sources.SILENT),this.quill.focus(),Object.keys(e.format).forEach(t=>{null==n[t]&&(Array.isArray(e.format[t])||"link"!==t&&this.quill.format(t,e.format[t],Y.sources.USER))})}function Ht(t){return{key:It.keys.TAB,shiftKey:!t,format:{"code-block":!0},handler:function(e){let n=o().query("code-block"),r=e.index,i=e.length,[l,s]=this.quill.scroll.descendant(n,r);if(null==l)return;let a=this.quill.getIndex(l),u=l.newlineIndex(s,!0)+1,c=l.newlineIndex(a+s+i),f=l.domNode.textContent.slice(u,c).split("\n");s=0,f.forEach((e,o)=>{t?(l.insertAt(u+s,n.TAB),s+=n.TAB.length,0===o?r+=n.TAB.length:i+=n.TAB.length):e.startsWith(n.TAB)&&(l.deleteAt(u+s,n.TAB.length),s-=n.TAB.length,0===o?r-=n.TAB.length:i-=n.TAB.length),s+=e.length+1}),this.quill.update(Y.sources.USER),this.quill.setSelection(r,i,Y.sources.SILENT)}}}function Kt(t){return{key:t[0].toUpperCase(),shortKey:!0,handler:function(e,n){this.quill.format(t,!n.format[t],Y.sources.USER)}}}function zt(t){if("string"==typeof t||"number"==typeof t)return zt({key:t});if("object"==typeof t&&(t=k()(t,!1)),"string"==typeof t.key)if(null!=It.keys[t.key.toUpperCase()])t.key=It.keys[t.key.toUpperCase()];else{if(1!==t.key.length)return null;t.key=t.key.toUpperCase().charCodeAt(0)}return t.shortKey&&(t[Rt]=t.shortKey,delete t.shortKey),t}It.keys={BACKSPACE:8,TAB:9,ENTER:13,ESCAPE:27,LEFT:37,UP:38,RIGHT:39,DOWN:40,DELETE:46},It.DEFAULTS={bindings:{bold:Kt("bold"),italic:Kt("italic"),underline:Kt("underline"),indent:{key:It.keys.TAB,format:["blockquote","indent","list"],handler:function(t,e){if(e.collapsed&&0!==e.offset)return!0;this.quill.format("indent","+1",Y.sources.USER)}},outdent:{key:It.keys.TAB,shiftKey:!0,format:["blockquote","indent","list"],handler:function(t,e){if(e.collapsed&&0!==e.offset)return!0;this.quill.format("indent","-1",Y.sources.USER)}},"outdent backspace":{key:It.keys.BACKSPACE,collapsed:!0,shiftKey:null,metaKey:null,ctrlKey:null,altKey:null,format:["indent","list"],offset:0,handler:function(t,e){null!=e.format.indent?this.quill.format("indent","-1",Y.sources.USER):null!=e.format.list&&this.quill.format("list",!1,Y.sources.USER)}},"indent code-block":Ht(!0),"outdent code-block":Ht(!1),"remove tab":{key:It.keys.TAB,shiftKey:!0,collapsed:!0,prefix:/\t$/,handler:function(t){this.quill.deleteText(t.index-1,1,Y.sources.USER)}},tab:{key:It.keys.TAB,handler:function(t){this.quill.history.cutoff();let e=(new(l())).retain(t.index).delete(t.length).insert("\t");this.quill.updateContents(e,Y.sources.USER),this.quill.history.cutoff(),this.quill.setSelection(t.index+1,Y.sources.SILENT)}},"list empty enter":{key:It.keys.ENTER,collapsed:!0,format:["list"],empty:!0,handler:function(t,e){this.quill.format("list",!1,Y.sources.USER),e.format.indent&&this.quill.format("indent",!1,Y.sources.USER)}},"checklist enter":{key:It.keys.ENTER,collapsed:!0,format:{list:"checked"},handler:function(t){let[e,n]=this.quill.getLine(t.index),r=c()({},e.formats(),{list:"checked"}),o=(new(l())).retain(t.index).insert("\n",r).retain(e.length()-n-1).retain(1,{list:"unchecked"});this.quill.updateContents(o,Y.sources.USER),this.quill.setSelection(t.index+1,Y.sources.SILENT),this.quill.scrollIntoView()}},"header enter":{key:It.keys.ENTER,collapsed:!0,format:["header"],suffix:/^$/,handler:function(t,e){let[n,r]=this.quill.getLine(t.index),o=(new(l())).retain(t.index).insert("\n",e.format).retain(n.length()-r-1).retain(1,{header:null});this.quill.updateContents(o,Y.sources.USER),this.quill.setSelection(t.index+1,Y.sources.SILENT),this.quill.scrollIntoView()}},"list autofill":{key:" ",collapsed:!0,format:{list:!1},prefix:/^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,handler:function(t,e){let n,r=e.prefix.length,[o,i]=this.quill.getLine(t.index);if(i>r)return!0;switch(e.prefix.trim()){case"[]":case"[ ]":n="unchecked";break;case"[x]":n="checked";break;case"-":case"*":n="bullet";break;default:n="ordered"}this.quill.insertText(t.index," ",Y.sources.USER),this.quill.history.cutoff();let s=(new(l())).retain(t.index-i).delete(r+1).retain(o.length()-2-i).retain(1,{list:n});this.quill.updateContents(s,Y.sources.USER),this.quill.history.cutoff(),this.quill.setSelection(t.index-r,Y.sources.SILENT)}},"code exit":{key:It.keys.ENTER,collapsed:!0,format:["code-block"],prefix:/\n\n$/,suffix:/^\s+$/,handler:function(t){const[e,n]=this.quill.getLine(t.index),r=(new(l())).retain(t.index+e.length()-n-2).retain(1,{"code-block":null}).delete(1);this.quill.updateContents(r,Y.sources.USER)}},"embed left":Mt(It.keys.LEFT,!1),"embed left shift":Mt(It.keys.LEFT,!0),"embed right":Mt(It.keys.RIGHT,!1),"embed right shift":Mt(It.keys.RIGHT,!0)}},Y.register({"blots/block":g,"blots/block/embed":b,"blots/break":h,"blots/container":et,"blots/cursor":E,"blots/embed":rt,"blots/inline":v,"blots/scroll":lt,"blots/text":d,"modules/clipboard":kt,"modules/history":Ct,"modules/keyboard":It}),o().register(g,h,E,v,lt,d);const Vt=Y;var Zt=n(4562),Wt=n.n(Zt);let Gt=M("quill:toolbar");class $t extends H{constructor(t,e){if(super(t,e),Array.isArray(this.options.container)){let e=document.createElement("div");!function(t,e){Array.isArray(e[0])||(e=[e]);e.forEach((function(e){let n=document.createElement("span");n.classList.add("ql-formats"),e.forEach((function(t){if("string"==typeof t)Yt(n,t);else{let e=Object.keys(t)[0],r=t[e];Array.isArray(r)?function(t,e,n){let r=document.createElement("select");r.classList.add("ql-"+e),n.forEach((function(t){let e=document.createElement("option");!1!==t?e.setAttribute("value",t):e.setAttribute("selected","selected"),r.appendChild(e)})),t.appendChild(r)}(n,e,r):Yt(n,e,r)}})),t.appendChild(n)}))}(e,this.options.container),t.container.parentNode.insertBefore(e,t.container),this.container=e}else"string"==typeof this.options.container?this.container=document.querySelector(this.options.container):this.container=this.options.container;if(!(this.container instanceof HTMLElement))return Gt.error("Container required for toolbar",this.options);this.container.classList.add("ql-toolbar"),this.controls=[],this.handlers={},Object.keys(this.options.handlers).forEach(t=>{this.addHandler(t,this.options.handlers[t])}),[].forEach.call(this.container.querySelectorAll("button, select"),t=>{this.attach(t)}),this.quill.on(Y.events.EDITOR_CHANGE,(t,e)=>{t===Y.events.SELECTION_CHANGE&&this.update(e)}),this.quill.on(Y.events.SCROLL_OPTIMIZE,()=>{let[t]=this.quill.selection.getRange();this.update(t)})}addHandler(t,e){this.handlers[t]=e}attach(t){let e=[].find.call(t.classList,t=>0===t.indexOf("ql-"));if(!e)return;if(e=e.slice("ql-".length),"BUTTON"===t.tagName&&t.setAttribute("type","button"),null==this.handlers[e]){if(null!=this.quill.scroll.whitelist&&null==this.quill.scroll.whitelist[e])return void Gt.warn("ignoring attaching to disabled format",e,t);if(null==o().query(e))return void Gt.warn("ignoring attaching to nonexistent format",e,t)}let n="SELECT"===t.tagName?"change":"click";t.addEventListener(n,n=>{let r;if("SELECT"===t.tagName){if(t.selectedIndex<0)return;let e=t.options[t.selectedIndex];r=!e.hasAttribute("selected")&&(e.value||!1)}else r=!t.classList.contains("ql-active")&&(t.value||!t.hasAttribute("value")),n.preventDefault();this.quill.focus();let[i]=this.quill.selection.getRange();if(null!=this.handlers[e])this.handlers[e].call(this,r);else if(o().query(e).prototype instanceof o().Embed){if(r=prompt("Enter "+e),!r)return;this.quill.updateContents((new(l())).retain(i.index).delete(i.length).insert({[e]:r}),Y.sources.USER)}else this.quill.format(e,r,Y.sources.USER);this.update(i)}),this.controls.push([e,t])}update(t){let e=null==t?{}:this.quill.getFormat(t);this.controls.forEach((function(n){let[r,o]=n;if("SELECT"===o.tagName){let n;if(null==t)n=null;else if(null==e[r])n=o.querySelector("option[selected]");else if(!Array.isArray(e[r])){let t=e[r];"string"==typeof t&&(t=t.replace(/\"/g,'\\"')),n=o.querySelector(`option[value="${t}"]`)}null==n?(o.value="",o.selectedIndex=-1):n.selected=!0}else if(null==t)o.classList.remove("ql-active");else if(o.hasAttribute("value")){let t=e[r]===o.getAttribute("value")||null!=e[r]&&e[r].toString()===o.getAttribute("value")||null==e[r]&&!o.getAttribute("value");o.classList.toggle("ql-active",t)}else o.classList.toggle("ql-active",null!=e[r])}))}}function Yt(t,e,n){let r=document.createElement("button");r.setAttribute("type","button"),r.classList.add("ql-"+e),null!=n&&(r.value=n),t.appendChild(r)}$t.DEFAULTS={},$t.DEFAULTS={container:null,handlers:{clean:function(){let t=this.quill.getSelection();if(null!=t)if(0==t.length){let t=this.quill.getFormat();Object.keys(t).forEach(t=>{null!=o().query(t,o().Scope.INLINE)&&this.quill.format(t,!1)})}else this.quill.removeFormat(t,Y.sources.USER)},direction:function(t){let e=this.quill.getFormat().align;"rtl"===t&&null==e?this.quill.format("align","right",Y.sources.USER):t||"right"!==e||this.quill.format("align",!1,Y.sources.USER),this.quill.format("direction",t,Y.sources.USER)},indent:function(t){let e=this.quill.getSelection(),n=this.quill.getFormat(e),r=parseInt(n.indent||0);if("+1"===t||"-1"===t){let e="+1"===t?1:-1;"rtl"===n.direction&&(e*=-1),this.quill.format("indent",r+e,Y.sources.USER)}},link:function(t){!0===t&&(t=prompt("Enter link URL:")),this.quill.format("link",t,Y.sources.USER)},list:function(t){let e=this.quill.getSelection(),n=this.quill.getFormat(e);"check"===t?"checked"===n.list||"unchecked"===n.list?this.quill.format("list",!1,Y.sources.USER):this.quill.format("list","unchecked",Y.sources.USER):this.quill.format("list",t,Y.sources.USER)}}};var Xt=n(7288),Qt=n.n(Xt);let Jt=0;function te(t,e){t.setAttribute(e,!("true"===t.getAttribute(e)))}const ee=class{constructor(t){this.select=t,this.container=document.createElement("span"),this.buildPicker(),this.select.style.display="none",this.select.parentNode.insertBefore(this.container,this.select),this.label.addEventListener("mousedown",()=>{this.togglePicker()}),this.label.addEventListener("keydown",t=>{switch(t.keyCode){case It.keys.ENTER:this.togglePicker();break;case It.keys.ESCAPE:this.escape(),t.preventDefault()}}),this.select.addEventListener("change",this.update.bind(this))}togglePicker(){this.container.classList.toggle("ql-expanded"),te(this.label,"aria-expanded"),te(this.options,"aria-hidden")}buildItem(t){let e=document.createElement("span");return e.tabIndex="0",e.setAttribute("role","button"),e.classList.add("ql-picker-item"),t.hasAttribute("value")&&e.setAttribute("data-value",t.getAttribute("value")),t.textContent&&e.setAttribute("data-label",t.textContent),e.addEventListener("click",()=>{this.selectItem(e,!0)}),e.addEventListener("keydown",t=>{switch(t.keyCode){case It.keys.ENTER:this.selectItem(e,!0),t.preventDefault();break;case It.keys.ESCAPE:this.escape(),t.preventDefault()}}),e}buildLabel(){let t=document.createElement("span");return t.classList.add("ql-picker-label"),t.innerHTML=Qt(),t.tabIndex="0",t.setAttribute("role","button"),t.setAttribute("aria-expanded","false"),this.container.appendChild(t),t}buildOptions(){let t=document.createElement("span");t.classList.add("ql-picker-options"),t.setAttribute("aria-hidden","true"),t.tabIndex="-1",t.id="ql-picker-options-"+Jt,Jt+=1,this.label.setAttribute("aria-controls",t.id),this.options=t,[].slice.call(this.select.options).forEach(e=>{let n=this.buildItem(e);t.appendChild(n),!0===e.selected&&this.selectItem(n)}),this.container.appendChild(t)}buildPicker(){[].slice.call(this.select.attributes).forEach(t=>{this.container.setAttribute(t.name,t.value)}),this.container.classList.add("ql-picker"),this.label=this.buildLabel(),this.buildOptions()}escape(){this.close(),setTimeout(()=>this.label.focus(),1)}close(){this.container.classList.remove("ql-expanded"),this.label.setAttribute("aria-expanded","false"),this.options.setAttribute("aria-hidden","true")}selectItem(t,e=!1){let n=this.container.querySelector(".ql-selected");if(t!==n&&(null!=n&&n.classList.remove("ql-selected"),null!=t&&(t.classList.add("ql-selected"),this.select.selectedIndex=[].indexOf.call(t.parentNode.children,t),t.hasAttribute("data-value")?this.label.setAttribute("data-value",t.getAttribute("data-value")):this.label.removeAttribute("data-value"),t.hasAttribute("data-label")?this.label.setAttribute("data-label",t.getAttribute("data-label")):this.label.removeAttribute("data-label"),e))){if("function"==typeof Event)this.select.dispatchEvent(new Event("change"));else if("object"==typeof Event){let t=document.createEvent("Event");t.initEvent("change",!0,!0),this.select.dispatchEvent(t)}this.close()}}update(){let t;if(this.select.selectedIndex>-1){let e=this.container.querySelector(".ql-picker-options").children[this.select.selectedIndex];t=this.select.options[this.select.selectedIndex],this.selectItem(e)}else this.selectItem(null);let e=null!=t&&t!==this.select.querySelector("option[selected]");this.label.classList.toggle("ql-active",e)}};const ne=class extends ee{constructor(t,e){super(t),this.label.innerHTML=e,this.container.classList.add("ql-color-picker"),[].slice.call(this.container.querySelectorAll(".ql-picker-item"),0,7).forEach((function(t){t.classList.add("ql-primary")}))}buildItem(t){let e=super.buildItem(t);return e.style.backgroundColor=t.getAttribute("value")||"",e}selectItem(t,e){super.selectItem(t,e);let n=this.label.querySelector(".ql-color-label"),r=t&&t.getAttribute("data-value")||"";n&&("line"===n.tagName?n.style.stroke=r:n.style.fill=r)}};const re=class extends ee{constructor(t,e){super(t),this.container.classList.add("ql-icon-picker"),[].forEach.call(this.container.querySelectorAll(".ql-picker-item"),t=>{t.innerHTML=e[t.getAttribute("data-value")||""]}),this.defaultItem=this.container.querySelector(".ql-selected"),this.selectItem(this.defaultItem)}selectItem(t,e){super.selectItem(t,e),t=t||this.defaultItem,this.label.innerHTML=t.innerHTML}};const oe=class{constructor(t,e){this.quill=t,this.boundsContainer=e||document.body,this.root=t.addContainer("ql-tooltip"),this.root.innerHTML=this.constructor.TEMPLATE,this.quill.root===this.quill.scrollingContainer&&this.quill.root.addEventListener("scroll",()=>{this.root.style.marginTop=-1*this.quill.root.scrollTop+"px"}),this.hide()}hide(){this.root.classList.add("ql-hidden")}position(t){let e=t.left+t.width/2-this.root.offsetWidth/2,n=t.bottom+this.quill.root.scrollTop;this.root.style.left=e+"px",this.root.style.top=n+"px",this.root.classList.remove("ql-flip");let r=this.boundsContainer.getBoundingClientRect(),o=this.root.getBoundingClientRect(),i=0;if(o.right>r.right&&(i=r.right-o.right,this.root.style.left=e+i+"px"),o.left<r.left&&(i=r.left-o.left,this.root.style.left=e+i+"px"),o.bottom>r.bottom){let e=o.bottom-o.top,r=t.bottom-t.top+e;this.root.style.top=n-r+"px",this.root.classList.add("ql-flip")}return i}show(){this.root.classList.remove("ql-editing"),this.root.classList.remove("ql-hidden")}},ie=[!1,"center","right","justify"],le=["#000000","#e60000","#ff9900","#ffff00","#008a00","#0066cc","#9933ff","#ffffff","#facccc","#ffebcc","#ffffcc","#cce8cc","#cce0f5","#ebd6ff","#bbbbbb","#f06666","#ffc266","#ffff66","#66b966","#66a3e0","#c285ff","#888888","#a10000","#b26b00","#b2b200","#006100","#0047b2","#6b24b2","#444444","#5c0000","#663d00","#666600","#003700","#002966","#3d1466"],se=[!1,"serif","monospace"],ae=["1","2","3",!1],ue=["small",!1,"large","huge"];class ce extends G{constructor(t,e){super(t,e);let n=e=>{if(!document.body.contains(t.root))return document.body.removeEventListener("click",n);null==this.tooltip||this.tooltip.root.contains(e.target)||document.activeElement===this.tooltip.textbox||this.quill.hasFocus()||this.tooltip.hide(),null!=this.pickers&&this.pickers.forEach((function(t){t.container.contains(e.target)||t.close()}))};t.emitter.listenDOM("click",document.body,n)}addModule(t){let e=super.addModule(t);return"toolbar"===t&&this.extendToolbar(e),e}buildButtons(t,e){t.forEach(t=>{(t.getAttribute("class")||"").split(/\s+/).forEach(n=>{if(n.startsWith("ql-")&&(n=n.slice("ql-".length),null!=e[n]))if("direction"===n)t.innerHTML=e[n][""]+e[n].rtl;else if("string"==typeof e[n])t.innerHTML=e[n];else{let r=t.value||"";null!=r&&e[n][r]&&(t.innerHTML=e[n][r])}})})}buildPickers(t,e){this.pickers=t.map(t=>{if(t.classList.contains("ql-align"))return null==t.querySelector("option")&&he(t,ie),new re(t,e.align);if(t.classList.contains("ql-background")||t.classList.contains("ql-color")){let n=t.classList.contains("ql-background")?"background":"color";return null==t.querySelector("option")&&he(t,le,"background"===n?"#ffffff":"#000000"),new ne(t,e[n])}return null==t.querySelector("option")&&(t.classList.contains("ql-font")?he(t,se):t.classList.contains("ql-header")?he(t,ae):t.classList.contains("ql-size")&&he(t,ue)),new ee(t)});this.quill.on(U.events.EDITOR_CHANGE,()=>{this.pickers.forEach((function(t){t.update()}))})}}ce.DEFAULTS=c()(!0,{},G.DEFAULTS,{modules:{toolbar:{handlers:{formula:function(){this.quill.theme.tooltip.edit("formula")},image:function(){let t=this.container.querySelector("input.ql-image[type=file]");null==t&&(t=document.createElement("input"),t.setAttribute("type","file"),t.setAttribute("accept","image/png, image/gif, image/jpeg, image/bmp, image/x-icon"),t.classList.add("ql-image"),t.addEventListener("change",()=>{if(null!=t.files&&null!=t.files[0]){let e=new FileReader;e.onload=e=>{let n=this.quill.getSelection(!0);this.quill.updateContents((new(l())).retain(n.index).delete(n.length).insert({image:e.target.result}),U.sources.USER),this.quill.setSelection(n.index+1,U.sources.SILENT),t.value=""},e.readAsDataURL(t.files[0])}}),this.container.appendChild(t)),t.click()},video:function(){this.quill.theme.tooltip.edit("video")}}}}});class fe extends oe{constructor(t,e){super(t,e),this.textbox=this.root.querySelector('input[type="text"]'),this.listen()}listen(){this.textbox.addEventListener("keydown",t=>{It.match(t,"enter")?(this.save(),t.preventDefault()):It.match(t,"escape")&&(this.cancel(),t.preventDefault())})}cancel(){this.hide()}edit(t="link",e=null){this.root.classList.remove("ql-hidden"),this.root.classList.add("ql-editing"),null!=e?this.textbox.value=e:t!==this.root.getAttribute("data-mode")&&(this.textbox.value=""),this.position(this.quill.getBounds(this.quill.selection.savedRange)),this.textbox.select(),this.textbox.setAttribute("placeholder",this.textbox.getAttribute("data-"+t)||""),this.root.setAttribute("data-mode",t)}restoreFocus(){let t=this.quill.scrollingContainer.scrollTop;this.quill.focus(),this.quill.scrollingContainer.scrollTop=t}save(){let t=this.textbox.value;switch(this.root.getAttribute("data-mode")){case"link":{let e=this.quill.root.scrollTop;this.linkRange?(this.quill.formatText(this.linkRange,"link",t,U.sources.USER),delete this.linkRange):(this.restoreFocus(),this.quill.format("link",t,U.sources.USER)),this.quill.root.scrollTop=e;break}case"video":t=function(t){let e=t.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/)||t.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);if(e)return(e[1]||"https")+"://www.youtube.com/embed/"+e[2]+"?showinfo=0";if(e=t.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/))return(e[1]||"https")+"://player.vimeo.com/video/"+e[2]+"/";return t}(t);case"formula":{if(!t)break;let e=this.quill.getSelection(!0);if(null!=e){let n=e.index+e.length;this.quill.insertEmbed(n,this.root.getAttribute("data-mode"),t,U.sources.USER),"formula"===this.root.getAttribute("data-mode")&&this.quill.insertText(n+1," ",U.sources.USER),this.quill.setSelection(n+2,U.sources.USER)}break}}this.textbox.value="",this.hide()}}function he(t,e,n=!1){e.forEach((function(e){let r=document.createElement("option");e===n?r.setAttribute("selected","selected"):r.setAttribute("value",e),t.appendChild(r)}))}class pe extends v{static create(t){let e=super.create(t);return t=this.sanitize(t),e.setAttribute("href",t),e.setAttribute("rel","noopener noreferrer"),e.setAttribute("target","_blank"),e}static formats(t){return t.getAttribute("href")}static sanitize(t){return function(t,e){let n=document.createElement("a");n.href=t;let r=n.href.slice(0,n.href.indexOf(":"));return e.indexOf(r)>-1}(t,this.PROTOCOL_WHITELIST)?t:this.SANITIZED_URL}format(t,e){if(t!==this.statics.blotName||!e)return super.format(t,e);e=this.constructor.sanitize(e),this.domNode.setAttribute("href",e)}}pe.blotName="link",pe.tagName="A",pe.SANITIZED_URL="about:blank",pe.PROTOCOL_WHITELIST=["http","https","mailto","tel"];var de=n(9962),ye=n.n(de);const ve=[[{header:["1","2","3",!1]}],["bold","italic","underline","link"],[{list:"ordered"},{list:"bullet"}],["clean"]];class be extends ce{constructor(t,e){null!=e.modules.toolbar&&null==e.modules.toolbar.container&&(e.modules.toolbar.container=ve),super(t,e),this.quill.container.classList.add("ql-snow")}extendToolbar(t){t.container.classList.add("ql-snow"),this.buildButtons([].slice.call(t.container.querySelectorAll("button")),ye()),this.buildPickers([].slice.call(t.container.querySelectorAll("select")),ye()),this.tooltip=new ge(this.quill,this.options.bounds),t.container.querySelector(".ql-link")&&this.quill.keyboard.addBinding({key:"K",shortKey:!0},(function(e,n){t.handlers.link.call(t,!n.format.link)}))}}be.DEFAULTS=c()(!0,{},ce.DEFAULTS,{modules:{toolbar:{handlers:{link:function(t){if(t){let t=this.quill.getSelection();if(null==t||0==t.length)return;let e=this.quill.getText(t);/^\S+@\S+\.\S+$/.test(e)&&0!==e.indexOf("mailto:")&&(e="mailto:"+e),this.quill.theme.tooltip.edit("link",e)}else this.quill.format("link",!1)}}}}});class ge extends fe{constructor(t,e){super(t,e),this.preview=this.root.querySelector("a.ql-preview")}listen(){super.listen(),this.root.querySelector("a.ql-action").addEventListener("click",t=>{this.root.classList.contains("ql-editing")?this.save():this.edit("link",this.preview.textContent),t.preventDefault()}),this.root.querySelector("a.ql-remove").addEventListener("click",t=>{if(null!=this.linkRange){let t=this.linkRange;this.restoreFocus(),this.quill.formatText(t,"link",!1,U.sources.USER),delete this.linkRange}t.preventDefault(),this.hide()}),this.quill.on(U.events.SELECTION_CHANGE,(t,e,n)=>{if(null!=t){if(0===t.length&&n===U.sources.USER){let[e,n]=this.quill.scroll.descendant(pe,t.index);if(null!=e){this.linkRange=new z(t.index-n,e.length());let r=pe.formats(e.domNode);return this.preview.textContent=r,this.preview.setAttribute("href",r),this.show(),void this.position(this.quill.getBounds(this.linkRange))}}else delete this.linkRange;this.hide()}})}show(){super.show(),this.root.removeAttribute("data-mode")}}ge.TEMPLATE=['<a class="ql-preview" rel="noopener noreferrer" target="_blank" href="about:blank"></a>','<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">','<a class="ql-action"></a>','<a class="ql-remove"></a>'].join("");const me=be;Vt.register({"modules/toolbar":$t,"themes/snow":me}),Vt.register("modules/htmlEditButton",Wt());const xe=Vt},2680:(t,e,n)=>{"use strict";var r=n(7286),o=n(9429),i=o(r("String.prototype.indexOf"));t.exports=function(t,e){var n=r(t,!!e);return"function"==typeof n&&i(t,".prototype.")>-1?o(n):n}},9429:(t,e,n)=>{"use strict";var r=n(4090),o=n(7286),i=n(7669),l=o("%TypeError%"),s=o("%Function.prototype.apply%"),a=o("%Function.prototype.call%"),u=o("%Reflect.apply%",!0)||r.call(a,s),c=o("%Object.defineProperty%",!0),f=o("%Math.max%");if(c)try{c({},"a",{value:1})}catch(t){c=null}t.exports=function(t){if("function"!=typeof t)throw new l("a function is required");var e=u(r,a,arguments);return i(e,1+f(0,t.length-(arguments.length-1)),!0)};var h=function(){return u(r,s,arguments)};c?c(t.exports,"apply",{value:h}):t.exports.apply=h},8138:t=>{var e=function(){"use strict";function t(t,e){return null!=e&&t instanceof e}var e,n,r;try{e=Map}catch(t){e=function(){}}try{n=Set}catch(t){n=function(){}}try{r=Promise}catch(t){r=function(){}}function o(i,s,a,u,c){"object"==typeof s&&(a=s.depth,u=s.prototype,c=s.includeNonEnumerable,s=s.circular);var f=[],h=[],p="undefined"!=typeof Buffer;return void 0===s&&(s=!0),void 0===a&&(a=1/0),function i(a,d){if(null===a)return null;if(0===d)return a;var y,v;if("object"!=typeof a)return a;if(t(a,e))y=new e;else if(t(a,n))y=new n;else if(t(a,r))y=new r((function(t,e){a.then((function(e){t(i(e,d-1))}),(function(t){e(i(t,d-1))}))}));else if(o.__isArray(a))y=[];else if(o.__isRegExp(a))y=new RegExp(a.source,l(a)),a.lastIndex&&(y.lastIndex=a.lastIndex);else if(o.__isDate(a))y=new Date(a.getTime());else{if(p&&Buffer.isBuffer(a))return y=Buffer.allocUnsafe?Buffer.allocUnsafe(a.length):new Buffer(a.length),a.copy(y),y;t(a,Error)?y=Object.create(a):void 0===u?(v=Object.getPrototypeOf(a),y=Object.create(v)):(y=Object.create(u),v=u)}if(s){var b=f.indexOf(a);if(-1!=b)return h[b];f.push(a),h.push(y)}for(var g in t(a,e)&&a.forEach((function(t,e){var n=i(e,d-1),r=i(t,d-1);y.set(n,r)})),t(a,n)&&a.forEach((function(t){var e=i(t,d-1);y.add(e)})),a){var m;v&&(m=Object.getOwnPropertyDescriptor(v,g)),m&&null==m.set||(y[g]=i(a[g],d-1))}if(Object.getOwnPropertySymbols){var x=Object.getOwnPropertySymbols(a);for(g=0;g<x.length;g++){var _=x[g];(!(E=Object.getOwnPropertyDescriptor(a,_))||E.enumerable||c)&&(y[_]=i(a[_],d-1),E.enumerable||Object.defineProperty(y,_,{enumerable:!1}))}}if(c){var O=Object.getOwnPropertyNames(a);for(g=0;g<O.length;g++){var E,w=O[g];(E=Object.getOwnPropertyDescriptor(a,w))&&E.enumerable||(y[w]=i(a[w],d-1),Object.defineProperty(y,w,{enumerable:!1}))}}return y}(i,a)}function i(t){return Object.prototype.toString.call(t)}function l(t){var e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),e}return o.clonePrototype=function(t){if(null===t)return null;var e=function(){};return e.prototype=t,new e},o.__objToStr=i,o.__isDate=function(t){return"object"==typeof t&&"[object Date]"===i(t)},o.__isArray=function(t){return"object"==typeof t&&"[object Array]"===i(t)},o.__isRegExp=function(t){return"object"==typeof t&&"[object RegExp]"===i(t)},o.__getRegExpFlags=l,o}();t.exports&&(t.exports=e)},9231:(t,e,n)=>{(t.exports=n(3965)(!1)).push([t.id,".ql-html-overlayContainer {\n  background: #0000007d;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 9999;\n}\n\n.ql-html-popupContainer {\n  background: #ddd;\n  position: absolute;\n  top: 5%;\n  left: 5%;\n  right: 5%;\n  bottom: 5%;\n  border-radius: 10px;\n}\n\n.ql-html-textContainer {\n  position: relative;\n  height: calc(100% - 40px);\n  padding: 20px;\n}\n\n.ql-html-textArea {\n  background: #fff;\n  position: absolute;\n  left: 15px;\n  width: calc(100% - 30px);\n  height: calc(100% - 60px) !important;\n}\n\n.ql-html-textArea .ql-syntax {\n  word-break: break-all;\n  white-space: pre-wrap;\n}\n\n.ql-html-buttonCancel {\n  margin-right: 20px;\n}\n\n.ql-html-popupTitle {\n  margin: 0;\n  display: block;\n  font-style: italic;\n}\n\n.ql-html-buttonGroup {\n  position: absolute;\n  bottom: 20px;\n  transform: scale(1.5);\n  left: calc(50% - 60px);\n}\n",""])},3965:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=(l=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(l))))+" */"),i=r.sources.map((function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"}));return[n].concat(i).concat([o]).join("\n")}var l;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n})).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<t.length;o++){var l=t[o];"number"==typeof l[0]&&r[l[0]]||(n&&!l[2]?l[2]=n:n&&(l[2]="("+l[2]+") and ("+n+")"),e.push(l))}},e}},3185:(t,e,n)=>{var r=n(3464),o=n(2635),i=n(4679),l=n(8786),s=n(2201),a=n(4277),u=Date.prototype.getTime;function c(t,e,n){var p=n||{};return!!(p.strict?i(t,e):t===e)||(!t||!e||"object"!=typeof t&&"object"!=typeof e?p.strict?i(t,e):t==e:function(t,e,n){var i,p;if(typeof t!=typeof e)return!1;if(f(t)||f(e))return!1;if(t.prototype!==e.prototype)return!1;if(o(t)!==o(e))return!1;var d=l(t),y=l(e);if(d!==y)return!1;if(d||y)return t.source===e.source&&s(t)===s(e);if(a(t)&&a(e))return u.call(t)===u.call(e);var v=h(t),b=h(e);if(v!==b)return!1;if(v||b){if(t.length!==e.length)return!1;for(i=0;i<t.length;i++)if(t[i]!==e[i])return!1;return!0}if(typeof t!=typeof e)return!1;try{var g=r(t),m=r(e)}catch(t){return!1}if(g.length!==m.length)return!1;for(g.sort(),m.sort(),i=g.length-1;i>=0;i--)if(g[i]!=m[i])return!1;for(i=g.length-1;i>=0;i--)if(p=g[i],!c(t[p],e[p],n))return!1;return!0}(t,e,p))}function f(t){return null==t}function h(t){return!(!t||"object"!=typeof t||"number"!=typeof t.length)&&("function"==typeof t.copy&&"function"==typeof t.slice&&!(t.length>0&&"number"!=typeof t[0]))}t.exports=c},5195:(t,e,n)=>{"use strict";var r=n(1181)(),o=n(7286),i=r&&o("%Object.defineProperty%",!0);if(i)try{i({},"a",{value:1})}catch(t){i=!1}var l=o("%SyntaxError%"),s=o("%TypeError%"),a=n(326);t.exports=function(t,e,n){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new s("`obj` must be an object or a function`");if("string"!=typeof e&&"symbol"!=typeof e)throw new s("`property` must be a string or a symbol`");if(arguments.length>3&&"boolean"!=typeof arguments[3]&&null!==arguments[3])throw new s("`nonEnumerable`, if provided, must be a boolean or null");if(arguments.length>4&&"boolean"!=typeof arguments[4]&&null!==arguments[4])throw new s("`nonWritable`, if provided, must be a boolean or null");if(arguments.length>5&&"boolean"!=typeof arguments[5]&&null!==arguments[5])throw new s("`nonConfigurable`, if provided, must be a boolean or null");if(arguments.length>6&&"boolean"!=typeof arguments[6])throw new s("`loose`, if provided, must be a boolean");var r=arguments.length>3?arguments[3]:null,o=arguments.length>4?arguments[4]:null,u=arguments.length>5?arguments[5]:null,c=arguments.length>6&&arguments[6],f=!!a&&a(t,e);if(i)i(t,e,{configurable:null===u&&f?f.configurable:!u,enumerable:null===r&&f?f.enumerable:!r,value:n,writable:null===o&&f?f.writable:!o});else{if(!c&&(r||o||u))throw new l("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");t[e]=n}}},4926:(t,e,n)=>{"use strict";var r=n(3464),o="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),i=Object.prototype.toString,l=Array.prototype.concat,s=n(5195),a=n(1181)(),u=function(t,e,n,r){if(e in t)if(!0===r){if(t[e]===n)return}else if("function"!=typeof(o=r)||"[object Function]"!==i.call(o)||!r())return;var o;a?s(t,e,n,!0):s(t,e,n)},c=function(t,e){var n=arguments.length>2?arguments[2]:{},i=r(e);o&&(i=l.call(i,Object.getOwnPropertySymbols(e)));for(var s=0;s<i.length;s+=1)u(t,i[s],e[i[s]],n[i[s]])};c.supportsDescriptors=!!a,t.exports=c},161:t=>{"use strict";var e=Object.prototype.hasOwnProperty,n="~";function r(){}function o(t,e,n){this.fn=t,this.context=e,this.once=n||!1}function i(){this._events=new r,this._eventsCount=0}Object.create&&(r.prototype=Object.create(null),(new r).__proto__||(n=!1)),i.prototype.eventNames=function(){var t,r,o=[];if(0===this._eventsCount)return o;for(r in t=this._events)e.call(t,r)&&o.push(n?r.slice(1):r);return Object.getOwnPropertySymbols?o.concat(Object.getOwnPropertySymbols(t)):o},i.prototype.listeners=function(t,e){var r=n?n+t:t,o=this._events[r];if(e)return!!o;if(!o)return[];if(o.fn)return[o.fn];for(var i=0,l=o.length,s=new Array(l);i<l;i++)s[i]=o[i].fn;return s},i.prototype.emit=function(t,e,r,o,i,l){var s=n?n+t:t;if(!this._events[s])return!1;var a,u,c=this._events[s],f=arguments.length;if(c.fn){switch(c.once&&this.removeListener(t,c.fn,void 0,!0),f){case 1:return c.fn.call(c.context),!0;case 2:return c.fn.call(c.context,e),!0;case 3:return c.fn.call(c.context,e,r),!0;case 4:return c.fn.call(c.context,e,r,o),!0;case 5:return c.fn.call(c.context,e,r,o,i),!0;case 6:return c.fn.call(c.context,e,r,o,i,l),!0}for(u=1,a=new Array(f-1);u<f;u++)a[u-1]=arguments[u];c.fn.apply(c.context,a)}else{var h,p=c.length;for(u=0;u<p;u++)switch(c[u].once&&this.removeListener(t,c[u].fn,void 0,!0),f){case 1:c[u].fn.call(c[u].context);break;case 2:c[u].fn.call(c[u].context,e);break;case 3:c[u].fn.call(c[u].context,e,r);break;case 4:c[u].fn.call(c[u].context,e,r,o);break;default:if(!a)for(h=1,a=new Array(f-1);h<f;h++)a[h-1]=arguments[h];c[u].fn.apply(c[u].context,a)}}return!0},i.prototype.on=function(t,e,r){var i=new o(e,r||this),l=n?n+t:t;return this._events[l]?this._events[l].fn?this._events[l]=[this._events[l],i]:this._events[l].push(i):(this._events[l]=i,this._eventsCount++),this},i.prototype.once=function(t,e,r){var i=new o(e,r||this,!0),l=n?n+t:t;return this._events[l]?this._events[l].fn?this._events[l]=[this._events[l],i]:this._events[l].push(i):(this._events[l]=i,this._eventsCount++),this},i.prototype.removeListener=function(t,e,o,i){var l=n?n+t:t;if(!this._events[l])return this;if(!e)return 0==--this._eventsCount?this._events=new r:delete this._events[l],this;var s=this._events[l];if(s.fn)s.fn!==e||i&&!s.once||o&&s.context!==o||(0==--this._eventsCount?this._events=new r:delete this._events[l]);else{for(var a=0,u=[],c=s.length;a<c;a++)(s[a].fn!==e||i&&!s[a].once||o&&s[a].context!==o)&&u.push(s[a]);u.length?this._events[l]=1===u.length?u[0]:u:0==--this._eventsCount?this._events=new r:delete this._events[l]}return this},i.prototype.removeAllListeners=function(t){var e;return t?(e=n?n+t:t,this._events[e]&&(0==--this._eventsCount?this._events=new r:delete this._events[e])):(this._events=new r,this._eventsCount=0),this},i.prototype.off=i.prototype.removeListener,i.prototype.addListener=i.prototype.on,i.prototype.setMaxListeners=function(){return this},i.prefixed=n,i.EventEmitter=i,t.exports=i},9385:t=>{"use strict";var e=Object.prototype.hasOwnProperty,n=Object.prototype.toString,r=Object.defineProperty,o=Object.getOwnPropertyDescriptor,i=function(t){return"function"==typeof Array.isArray?Array.isArray(t):"[object Array]"===n.call(t)},l=function(t){if(!t||"[object Object]"!==n.call(t))return!1;var r,o=e.call(t,"constructor"),i=t.constructor&&t.constructor.prototype&&e.call(t.constructor.prototype,"isPrototypeOf");if(t.constructor&&!o&&!i)return!1;for(r in t);return void 0===r||e.call(t,r)},s=function(t,e){r&&"__proto__"===e.name?r(t,e.name,{enumerable:!0,configurable:!0,value:e.newValue,writable:!0}):t[e.name]=e.newValue},a=function(t,n){if("__proto__"===n){if(!e.call(t,n))return;if(o)return o(t,n).value}return t[n]};t.exports=function t(){var e,n,r,o,u,c,f=arguments[0],h=1,p=arguments.length,d=!1;for("boolean"==typeof f&&(d=f,f=arguments[1]||{},h=2),(null==f||"object"!=typeof f&&"function"!=typeof f)&&(f={});h<p;++h)if(null!=(e=arguments[h]))for(n in e)r=a(f,n),f!==(o=a(e,n))&&(d&&o&&(l(o)||(u=i(o)))?(u?(u=!1,c=r&&i(r)?r:[]):c=r&&l(r)?r:{},s(f,{name:n,newValue:t(d,c,o)})):void 0!==o&&s(f,{name:n,newValue:o}));return f}},9661:t=>{function e(t,i,s){if(t==i)return t?[[0,t]]:[];(s<0||t.length<s)&&(s=null);var a=r(t,i),u=t.substring(0,a);a=o(t=t.substring(a),i=i.substring(a));var c=t.substring(t.length-a),f=function(t,i){var l;if(!t)return[[1,i]];if(!i)return[[-1,t]];var s=t.length>i.length?t:i,a=t.length>i.length?i:t,u=s.indexOf(a);if(-1!=u)return l=[[1,s.substring(0,u)],[0,a],[1,s.substring(u+a.length)]],t.length>i.length&&(l[0][0]=l[2][0]=-1),l;if(1==a.length)return[[-1,t],[1,i]];var c=function(t,e){var n=t.length>e.length?t:e,i=t.length>e.length?e:t;if(n.length<4||2*i.length<n.length)return null;function l(t,e,n){for(var i,l,s,a,u=t.substring(n,n+Math.floor(t.length/4)),c=-1,f="";-1!=(c=e.indexOf(u,c+1));){var h=r(t.substring(n),e.substring(c)),p=o(t.substring(0,n),e.substring(0,c));f.length<p+h&&(f=e.substring(c-p,c)+e.substring(c,c+h),i=t.substring(0,n-p),l=t.substring(n+h),s=e.substring(0,c-p),a=e.substring(c+h))}return 2*f.length>=t.length?[i,l,s,a,f]:null}var s,a,u,c,f,h=l(n,i,Math.ceil(n.length/4)),p=l(n,i,Math.ceil(n.length/2));if(!h&&!p)return null;s=p?h&&h[4].length>p[4].length?h:p:h;t.length>e.length?(a=s[0],u=s[1],c=s[2],f=s[3]):(c=s[0],f=s[1],a=s[2],u=s[3]);var d=s[4];return[a,u,c,f,d]}(t,i);if(c){var f=c[0],h=c[1],p=c[2],d=c[3],y=c[4],v=e(f,p),b=e(h,d);return v.concat([[0,y]],b)}return function(t,e){for(var r=t.length,o=e.length,i=Math.ceil((r+o)/2),l=i,s=2*i,a=new Array(s),u=new Array(s),c=0;c<s;c++)a[c]=-1,u[c]=-1;a[l+1]=0,u[l+1]=0;for(var f=r-o,h=f%2!=0,p=0,d=0,y=0,v=0,b=0;b<i;b++){for(var g=-b+p;g<=b-d;g+=2){for(var m=l+g,x=(k=g==-b||g!=b&&a[m-1]<a[m+1]?a[m+1]:a[m-1]+1)-g;k<r&&x<o&&t.charAt(k)==e.charAt(x);)k++,x++;if(a[m]=k,k>r)d+=2;else if(x>o)p+=2;else if(h){if((E=l+f-g)>=0&&E<s&&-1!=u[E]){var _=r-u[E];if(k>=_)return n(t,e,k,x)}}}for(var O=-b+y;O<=b-v;O+=2){for(var E=l+O,w=(_=O==-b||O!=b&&u[E-1]<u[E+1]?u[E+1]:u[E-1]+1)-O;_<r&&w<o&&t.charAt(r-_-1)==e.charAt(o-w-1);)_++,w++;if(u[E]=_,_>r)v+=2;else if(w>o)y+=2;else if(!h){if((m=l+f-O)>=0&&m<s&&-1!=a[m]){var k=a[m];x=l+k-m;if(k>=(_=r-_))return n(t,e,k,x)}}}}return[[-1,t],[1,e]]}(t,i)}(t=t.substring(0,t.length-a),i=i.substring(0,i.length-a));return u&&f.unshift([0,u]),c&&f.push([0,c]),function t(e){e.push([0,""]);var n,i=0,l=0,s=0,a="",u="";for(;i<e.length;)switch(e[i][0]){case 1:s++,u+=e[i][1],i++;break;case-1:l++,a+=e[i][1],i++;break;case 0:l+s>1?(0!==l&&0!==s&&(0!==(n=r(u,a))&&(i-l-s>0&&0==e[i-l-s-1][0]?e[i-l-s-1][1]+=u.substring(0,n):(e.splice(0,0,[0,u.substring(0,n)]),i++),u=u.substring(n),a=a.substring(n)),0!==(n=o(u,a))&&(e[i][1]=u.substring(u.length-n)+e[i][1],u=u.substring(0,u.length-n),a=a.substring(0,a.length-n))),0===l?e.splice(i-s,l+s,[1,u]):0===s?e.splice(i-l,l+s,[-1,a]):e.splice(i-l-s,l+s,[-1,a],[1,u]),i=i-l-s+(l?1:0)+(s?1:0)+1):0!==i&&0==e[i-1][0]?(e[i-1][1]+=e[i][1],e.splice(i,1)):i++,s=0,l=0,a="",u=""}""===e[e.length-1][1]&&e.pop();var c=!1;i=1;for(;i<e.length-1;)0==e[i-1][0]&&0==e[i+1][0]&&(e[i][1].substring(e[i][1].length-e[i-1][1].length)==e[i-1][1]?(e[i][1]=e[i-1][1]+e[i][1].substring(0,e[i][1].length-e[i-1][1].length),e[i+1][1]=e[i-1][1]+e[i+1][1],e.splice(i-1,1),c=!0):e[i][1].substring(0,e[i+1][1].length)==e[i+1][1]&&(e[i-1][1]+=e[i+1][1],e[i][1]=e[i][1].substring(e[i+1][1].length)+e[i+1][1],e.splice(i+1,1),c=!0)),i++;c&&t(e)}(f),null!=s&&(f=function(t,e){var n=function(t,e){if(0===e)return[0,t];for(var n=0,r=0;r<t.length;r++){var o=t[r];if(-1===o[0]||0===o[0]){var i=n+o[1].length;if(e===i)return[r+1,t];if(e<i){t=t.slice();var l=e-n,s=[o[0],o[1].slice(0,l)],a=[o[0],o[1].slice(l)];return t.splice(r,1,s,a),[r+1,t]}n=i}}throw new Error("cursor_pos is out of bounds!")}(t,e),r=n[1],o=n[0],i=r[o],s=r[o+1];if(null==i)return t;if(0!==i[0])return t;if(null!=s&&i[1]+s[1]===s[1]+i[1])return r.splice(o,2,s,i),l(r,o,2);if(null!=s&&0===s[1].indexOf(i[1])){r.splice(o,2,[s[0],i[1]],[0,i[1]]);var a=s[1].slice(i[1].length);return a.length>0&&r.splice(o+2,0,[s[0],a]),l(r,o,3)}return t}(f,s)),f=function(t){for(var e=!1,n=function(t){return t.charCodeAt(0)>=56320&&t.charCodeAt(0)<=57343},r=2;r<t.length;r+=1)0===t[r-2][0]&&((o=t[r-2][1]).charCodeAt(o.length-1)>=55296&&o.charCodeAt(o.length-1)<=56319)&&-1===t[r-1][0]&&n(t[r-1][1])&&1===t[r][0]&&n(t[r][1])&&(e=!0,t[r-1][1]=t[r-2][1].slice(-1)+t[r-1][1],t[r][1]=t[r-2][1].slice(-1)+t[r][1],t[r-2][1]=t[r-2][1].slice(0,-1));var o;if(!e)return t;var i=[];for(r=0;r<t.length;r+=1)t[r][1].length>0&&i.push(t[r]);return i}(f)}function n(t,n,r,o){var i=t.substring(0,r),l=n.substring(0,o),s=t.substring(r),a=n.substring(o),u=e(i,l),c=e(s,a);return u.concat(c)}function r(t,e){if(!t||!e||t.charAt(0)!=e.charAt(0))return 0;for(var n=0,r=Math.min(t.length,e.length),o=r,i=0;n<o;)t.substring(i,o)==e.substring(i,o)?i=n=o:r=o,o=Math.floor((r-n)/2+n);return o}function o(t,e){if(!t||!e||t.charAt(t.length-1)!=e.charAt(e.length-1))return 0;for(var n=0,r=Math.min(t.length,e.length),o=r,i=0;n<o;)t.substring(t.length-o,t.length-i)==e.substring(e.length-o,e.length-i)?i=n=o:r=o,o=Math.floor((r-n)/2+n);return o}var i=e;function l(t,e,n){for(var r=e+n-1;r>=0&&r>=e-1;r--)if(r+1<t.length){var o=t[r],i=t[r+1];o[0]===i[1]&&t.splice(r,2,[o[0],o[1]+i[1]])}return t}i.INSERT=1,i.DELETE=-1,i.EQUAL=0,t.exports=i},7795:t=>{"use strict";var e="Function.prototype.bind called on incompatible ",n=Object.prototype.toString,r=Math.max,o=function(t,e){for(var n=[],r=0;r<t.length;r+=1)n[r]=t[r];for(var o=0;o<e.length;o+=1)n[o+t.length]=e[o];return n},i=function(t,e){for(var n=[],r=e||0,o=0;r<t.length;r+=1,o+=1)n[o]=t[r];return n},l=function(t,e){for(var n="",r=0;r<t.length;r+=1)n+=t[r],r+1<t.length&&(n+=e);return n};t.exports=function(t){var s=this;if("function"!=typeof s||"[object Function]"!==n.apply(s))throw new TypeError(e+s);for(var a,u=i(arguments,1),c=function(){if(this instanceof a){var e=s.apply(this,o(u,arguments));return Object(e)===e?e:this}return s.apply(t,o(u,arguments))},f=r(0,s.length-u.length),h=[],p=0;p<f;p++)h[p]="$"+p;if(a=Function("binder","return function ("+l(h,",")+"){ return binder.apply(this,arguments); }")(c),s.prototype){var d=function(){};d.prototype=s.prototype,a.prototype=new d,d.prototype=null}return a}},4090:(t,e,n)=>{"use strict";var r=n(7795);t.exports=Function.prototype.bind||r},8462:t=>{"use strict";var e=function(){return"string"==typeof function(){}.name},n=Object.getOwnPropertyDescriptor;if(n)try{n([],"length")}catch(t){n=null}e.functionsHaveConfigurableNames=function(){if(!e()||!n)return!1;var t=n((function(){}),"name");return!!t&&!!t.configurable};var r=Function.prototype.bind;e.boundFunctionsHaveNames=function(){return e()&&"function"==typeof r&&""!==function(){}.bind().name},t.exports=e},7286:(t,e,n)=>{"use strict";var r=SyntaxError,o=Function,i=TypeError,l=function(t){try{return o('"use strict"; return ('+t+").constructor;")()}catch(t){}},s=Object.getOwnPropertyDescriptor;if(s)try{s({},"")}catch(t){s=null}var a=function(){throw new i},u=s?function(){try{return a}catch(t){try{return s(arguments,"callee").get}catch(t){return a}}}():a,c=n(2636)(),f=n(8486)(),h=Object.getPrototypeOf||(f?function(t){return t.__proto__}:null),p={},d="undefined"!=typeof Uint8Array&&h?h(Uint8Array):void 0,y={"%AggregateError%":"undefined"==typeof AggregateError?void 0:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer,"%ArrayIteratorPrototype%":c&&h?h([][Symbol.iterator]()):void 0,"%AsyncFromSyncIteratorPrototype%":void 0,"%AsyncFunction%":p,"%AsyncGenerator%":p,"%AsyncGeneratorFunction%":p,"%AsyncIteratorPrototype%":p,"%Atomics%":"undefined"==typeof Atomics?void 0:Atomics,"%BigInt%":"undefined"==typeof BigInt?void 0:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?void 0:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?void 0:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?void 0:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?void 0:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?void 0:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?void 0:FinalizationRegistry,"%Function%":o,"%GeneratorFunction%":p,"%Int8Array%":"undefined"==typeof Int8Array?void 0:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?void 0:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?void 0:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":c&&h?h(h([][Symbol.iterator]())):void 0,"%JSON%":"object"==typeof JSON?JSON:void 0,"%Map%":"undefined"==typeof Map?void 0:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&c&&h?h((new Map)[Symbol.iterator]()):void 0,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?void 0:Promise,"%Proxy%":"undefined"==typeof Proxy?void 0:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?void 0:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?void 0:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&c&&h?h((new Set)[Symbol.iterator]()):void 0,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":c&&h?h(""[Symbol.iterator]()):void 0,"%Symbol%":c?Symbol:void 0,"%SyntaxError%":r,"%ThrowTypeError%":u,"%TypedArray%":d,"%TypeError%":i,"%Uint8Array%":"undefined"==typeof Uint8Array?void 0:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?void 0:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?void 0:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?void 0:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?void 0:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?void 0:WeakSet};if(h)try{null.error}catch(t){var v=h(h(t));y["%Error.prototype%"]=v}var b={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},g=n(4090),m=n(2196),x=g.call(Function.call,Array.prototype.concat),_=g.call(Function.apply,Array.prototype.splice),O=g.call(Function.call,String.prototype.replace),E=g.call(Function.call,String.prototype.slice),w=g.call(Function.call,RegExp.prototype.exec),k=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,A=/\\(\\)?/g,N=function(t){var e=E(t,0,1),n=E(t,-1);if("%"===e&&"%"!==n)throw new r("invalid intrinsic syntax, expected closing `%`");if("%"===n&&"%"!==e)throw new r("invalid intrinsic syntax, expected opening `%`");var o=[];return O(t,k,(function(t,e,n,r){o[o.length]=n?O(r,A,"$1"):e||t})),o},q=function(t,e){var n,o=t;if(m(b,o)&&(o="%"+(n=b[o])[0]+"%"),m(y,o)){var s=y[o];if(s===p&&(s=function t(e){var n;if("%AsyncFunction%"===e)n=l("async function () {}");else if("%GeneratorFunction%"===e)n=l("function* () {}");else if("%AsyncGeneratorFunction%"===e)n=l("async function* () {}");else if("%AsyncGenerator%"===e){var r=t("%AsyncGeneratorFunction%");r&&(n=r.prototype)}else if("%AsyncIteratorPrototype%"===e){var o=t("%AsyncGenerator%");o&&h&&(n=h(o.prototype))}return y[e]=n,n}(o)),void 0===s&&!e)throw new i("intrinsic "+t+" exists, but is not available. Please file an issue!");return{alias:n,name:o,value:s}}throw new r("intrinsic "+t+" does not exist!")};t.exports=function(t,e){if("string"!=typeof t||0===t.length)throw new i("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof e)throw new i('"allowMissing" argument must be a boolean');if(null===w(/^%?[^%]*%?$/,t))throw new r("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var n=N(t),o=n.length>0?n[0]:"",l=q("%"+o+"%",e),a=l.name,u=l.value,c=!1,f=l.alias;f&&(o=f[0],_(n,x([0,1],f)));for(var h=1,p=!0;h<n.length;h+=1){var d=n[h],v=E(d,0,1),b=E(d,-1);if(('"'===v||"'"===v||"`"===v||'"'===b||"'"===b||"`"===b)&&v!==b)throw new r("property names with quotes must have matching quotes");if("constructor"!==d&&p||(c=!0),m(y,a="%"+(o+="."+d)+"%"))u=y[a];else if(null!=u){if(!(d in u)){if(!e)throw new i("base intrinsic for "+t+" exists, but the property is not available.");return}if(s&&h+1>=n.length){var g=s(u,d);u=(p=!!g)&&"get"in g&&!("originalValue"in g.get)?g.get:u[d]}else p=m(u,d),u=u[d];p&&!c&&(y[a]=u)}}return u}},326:(t,e,n)=>{"use strict";var r=n(7286)("%Object.getOwnPropertyDescriptor%",!0);if(r)try{r([],"length")}catch(t){r=null}t.exports=r},1181:(t,e,n)=>{"use strict";var r=n(7286)("%Object.defineProperty%",!0),o=function(){if(r)try{return r({},"a",{value:1}),!0}catch(t){return!1}return!1};o.hasArrayLengthDefineBug=function(){if(!o())return null;try{return 1!==r([],"length",{value:1}).length}catch(t){return!0}},t.exports=o},8486:t=>{"use strict";var e={foo:{}},n=Object;t.exports=function(){return{__proto__:e}.foo===e.foo&&!({__proto__:null}instanceof n)}},2636:(t,e,n)=>{"use strict";var r="undefined"!=typeof Symbol&&Symbol,o=n(6679);t.exports=function(){return"function"==typeof r&&("function"==typeof Symbol&&("symbol"==typeof r("foo")&&("symbol"==typeof Symbol("bar")&&o())))}},6679:t=>{"use strict";t.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var t={},e=Symbol("test"),n=Object(e);if("string"==typeof e)return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;for(e in t[e]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var r=Object.getOwnPropertySymbols(t);if(1!==r.length||r[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(t,e);if(42!==o.value||!0!==o.enumerable)return!1}return!0}},7226:(t,e,n)=>{"use strict";var r=n(6679);t.exports=function(){return r()&&!!Symbol.toStringTag}},2196:(t,e,n)=>{"use strict";var r=Function.prototype.call,o=Object.prototype.hasOwnProperty,i=n(4090);t.exports=i.call(r,o)},7871:t=>{t.exports='<svg viewbox="0 0 18 18"> <line class="ql-stroke" x1="15" x2="3" y1="9" y2="9"></line> <line class="ql-stroke" x1="14" x2="4" y1="14" y2="14"></line> <line class="ql-stroke" x1="12" x2="6" y1="4" y2="4"></line> </svg>'},4175:t=>{t.exports='<svg viewbox="0 0 18 18"> <line class="ql-stroke" x1="15" x2="3" y1="9" y2="9"></line> <line class="ql-stroke" x1="15" x2="3" y1="14" y2="14"></line> <line class="ql-stroke" x1="15" x2="3" y1="4" y2="4"></line> </svg>'},481:t=>{t.exports='<svg viewbox="0 0 18 18"> <line class="ql-stroke" x1="3" x2="15" y1="9" y2="9"></line> <line class="ql-stroke" x1="3" x2="13" y1="14" y2="14"></line> <line class="ql-stroke" x1="3" x2="9" y1="4" y2="4"></line> </svg>'},4123:t=>{t.exports='<svg viewbox="0 0 18 18"> <line class="ql-stroke" x1="15" x2="3" y1="9" y2="9"></line> <line class="ql-stroke" x1="15" x2="5" y1="14" y2="14"></line> <line class="ql-stroke" x1="15" x2="9" y1="4" y2="4"></line> </svg>'},659:t=>{t.exports='<svg viewbox="0 0 18 18"> <g class="ql-fill ql-color-label"> <polygon points="6 6.868 6 6 5 6 5 7 5.942 7 6 6.868"></polygon> <rect height="1" width="1" x="4" y="4"></rect> <polygon points="6.817 5 6 5 6 6 6.38 6 6.817 5"></polygon> <rect height="1" width="1" x="2" y="6"></rect> <rect height="1" width="1" x="3" y="5"></rect> <rect height="1" width="1" x="4" y="7"></rect> <polygon points="4 11.439 4 11 3 11 3 12 3.755 12 4 11.439"></polygon> <rect height="1" width="1" x="2" y="12"></rect> <rect height="1" width="1" x="2" y="9"></rect> <rect height="1" width="1" x="2" y="15"></rect> <polygon points="4.63 10 4 10 4 11 4.192 11 4.63 10"></polygon> <rect height="1" width="1" x="3" y="8"></rect> <path d="M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z"></path> <path d="M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z"></path> <path d="M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z"></path> <rect height="1" width="1" x="12" y="2"></rect> <rect height="1" width="1" x="11" y="3"></rect> <path d="M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z"></path> <rect height="1" width="1" x="2" y="3"></rect> <rect height="1" width="1" x="6" y="2"></rect> <rect height="1" width="1" x="3" y="2"></rect> <rect height="1" width="1" x="5" y="3"></rect> <rect height="1" width="1" x="9" y="2"></rect> <rect height="1" width="1" x="15" y="14"></rect> <polygon points="13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174"></polygon> <rect height="1" width="1" x="13" y="7"></rect> <rect height="1" width="1" x="15" y="5"></rect> <rect height="1" width="1" x="14" y="6"></rect> <rect height="1" width="1" x="15" y="8"></rect> <rect height="1" width="1" x="14" y="9"></rect> <path d="M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z"></path> <rect height="1" width="1" x="14" y="3"></rect> <polygon points="12 6.868 12 6 11.62 6 12 6.868"></polygon> <rect height="1" width="1" x="15" y="2"></rect> <rect height="1" width="1" x="12" y="5"></rect> <rect height="1" width="1" x="13" y="4"></rect> <polygon points="12.933 9 13 9 13 8 12.495 8 12.933 9"></polygon> <rect height="1" width="1" x="9" y="14"></rect> <rect height="1" width="1" x="8" y="15"></rect> <path d="M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z"></path> <rect height="1" width="1" x="5" y="15"></rect> <path d="M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z"></path> <rect height="1" width="1" x="11" y="15"></rect> <path d="M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z"></path> <rect height="1" width="1" x="14" y="15"></rect> <rect height="1" width="1" x="15" y="11"></rect> </g> <polyline class="ql-stroke" points="5.5 13 9 5 12.5 13"></polyline> <line class="ql-stroke" x1="11.63" x2="6.38" y1="11" y2="11"></line> </svg>'},7131:t=>{t.exports='<svg viewbox="0 0 18 18"> <rect class="ql-fill ql-stroke" height="3" width="3" x="4" y="5"></rect> <rect class="ql-fill ql-stroke" height="3" width="3" x="11" y="5"></rect> <path class="ql-even ql-fill ql-stroke" d="M7,8c0,4.031-3,5-3,5"></path> <path class="ql-even ql-fill ql-stroke" d="M14,8c0,4.031-3,5-3,5"></path> </svg>'},2179:t=>{t.exports='<svg viewbox="0 0 18 18"> <path class="ql-stroke" d="M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z"></path> <path class="ql-stroke" d="M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z"></path> </svg>'},3529:t=>{t.exports='<svg class="" viewbox="0 0 18 18"> <line class="ql-stroke" x1="5" x2="13" y1="3" y2="3"></line> <line class="ql-stroke" x1="6" x2="9.35" y1="12" y2="3"></line> <line class="ql-stroke" x1="11" x2="15" y1="11" y2="15"></line> <line class="ql-stroke" x1="15" x2="11" y1="11" y2="15"></line> <rect class="ql-fill" height="1" rx="0.5" ry="0.5" width="7" x="2" y="14"></rect> </svg>'},7074:t=>{t.exports='<svg viewbox="0 0 18 18"> <polyline class="ql-even ql-stroke" points="5 7 3 9 5 11"></polyline> <polyline class="ql-even ql-stroke" points="13 7 15 9 13 11"></polyline> <line class="ql-stroke" x1="10" x2="8" y1="5" y2="13"></line> </svg>'},8090:t=>{t.exports='<svg viewbox="0 0 18 18"> <line class="ql-color-label ql-stroke ql-transparent" x1="3" x2="15" y1="15" y2="15"></line> <polyline class="ql-stroke" points="5.5 11 9 3 12.5 11"></polyline> <line class="ql-stroke" x1="11.63" x2="6.38" y1="9" y2="9"></line> </svg>'},3829:t=>{t.exports='<svg viewbox="0 0 18 18"> <polygon class="ql-stroke ql-fill" points="3 11 5 9 3 7 3 11"></polygon> <line class="ql-stroke ql-fill" x1="15" x2="11" y1="4" y2="4"></line> <path class="ql-fill" d="M11,3a3,3,0,0,0,0,6h1V3H11Z"></path> <rect class="ql-fill" height="11" width="1" x="11" y="4"></rect> <rect class="ql-fill" height="11" width="1" x="13" y="4"></rect> </svg>'},5738:t=>{t.exports='<svg viewbox="0 0 18 18"> <polygon class="ql-stroke ql-fill" points="15 12 13 10 15 8 15 12"></polygon> <line class="ql-stroke ql-fill" x1="9" x2="5" y1="4" y2="4"></line> <path class="ql-fill" d="M5,3A3,3,0,0,0,5,9H6V3H5Z"></path> <rect class="ql-fill" height="11" width="1" x="5" y="4"></rect> <rect class="ql-fill" height="11" width="1" x="7" y="4"></rect> </svg>'},7288:t=>{t.exports='<svg viewbox="0 0 18 18"> <polygon class="ql-stroke" points="7 11 9 13 11 11 7 11"></polygon> <polygon class="ql-stroke" points="7 7 9 5 11 7 7 7"></polygon> </svg>'},2452:t=>{t.exports='<svg viewbox="0 0 18 18"> <path class="ql-fill" d="M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z"/> <path class="ql-fill" d="M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z"/> <rect class="ql-fill" x="3" y="6" width="12" height="6" rx="1" ry="1"/> </svg>'},3143:t=>{t.exports='<svg viewbox="0 0 18 18"> <path class="ql-fill" d="M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z"/> <path class="ql-fill" d="M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z"/> <rect class="ql-fill" x="2" y="6" width="14" height="6" rx="1" ry="1"/> </svg>'},3700:t=>{t.exports='<svg viewbox="0 0 18 18"> <path class="ql-fill" d="M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z"/> <path class="ql-fill" d="M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z"/> <path class="ql-fill" d="M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z"/> <path class="ql-fill" d="M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z"/> <rect class="ql-fill" x="2" y="6" width="8" height="6" rx="1" ry="1"/> </svg>'},9148:t=>{t.exports='<svg viewbox="0 0 18 18"> <path class="ql-fill" d="M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z"/> <path class="ql-fill" d="M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z"/> <path class="ql-fill" d="M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z"/> <path class="ql-fill" d="M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z"/> <rect class="ql-fill" x="8" y="6" width="8" height="6" rx="1" ry="1" transform="translate(24 18) rotate(-180)"/> </svg>'},8829:t=>{t.exports='<svg viewbox="0 0 18 18"> <path class="ql-fill" d="M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z"></path> <rect class="ql-fill" height="1.6" rx="0.8" ry="0.8" width="5" x="5.15" y="6.2"></rect> <path class="ql-fill" d="M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z"></path> </svg>'},2629:t=>{t.exports='<svg viewBox="0 0 18 18"> <path class="ql-fill" d="M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z"/> </svg>'},3946:t=>{t.exports='<svg viewBox="0 0 18 18"> <path class="ql-fill" d="M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z"/> </svg>'},658:t=>{t.exports='<svg viewbox="0 0 18 18"> <rect class="ql-stroke" height="10" width="12" x="3" y="4"></rect> <circle class="ql-fill" cx="6" cy="7" r="1"></circle> <polyline class="ql-even ql-fill" points="5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12"></polyline> </svg>'},404:t=>{t.exports='<svg viewbox="0 0 18 18"> <line class="ql-stroke" x1="3" x2="15" y1="14" y2="14"></line> <line class="ql-stroke" x1="3" x2="15" y1="4" y2="4"></line> <line class="ql-stroke" x1="9" x2="15" y1="9" y2="9"></line> <polyline class="ql-fill ql-stroke" points="3 7 3 11 5 9 3 7"></polyline> </svg>'},3621:t=>{t.exports='<svg viewbox="0 0 18 18"> <line class="ql-stroke" x1="7" x2="13" y1="4" y2="4"></line> <line class="ql-stroke" x1="5" x2="11" y1="14" y2="14"></line> <line class="ql-stroke" x1="8" x2="10" y1="14" y2="4"></line> </svg>'},9601:t=>{t.exports='<svg viewbox="0 0 18 18"> <line class="ql-stroke" x1="7" x2="11" y1="7" y2="11"></line> <path class="ql-even ql-stroke" d="M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z"></path> <path class="ql-even ql-stroke" d="M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z"></path> </svg>'},3117:t=>{t.exports='<svg viewbox="0 0 18 18"> <line class="ql-stroke" x1="6" x2="15" y1="4" y2="4"></line> <line class="ql-stroke" x1="6" x2="15" y1="9" y2="9"></line> <line class="ql-stroke" x1="6" x2="15" y1="14" y2="14"></line> <line class="ql-stroke" x1="3" x2="3" y1="4" y2="4"></line> <line class="ql-stroke" x1="3" x2="3" y1="9" y2="9"></line> <line class="ql-stroke" x1="3" x2="3" y1="14" y2="14"></line> </svg>'},6626:t=>{t.exports='<svg class="" viewbox="0 0 18 18"> <line class="ql-stroke" x1="9" x2="15" y1="4" y2="4"></line> <polyline class="ql-stroke" points="3 4 4 5 6 3"></polyline> <line class="ql-stroke" x1="9" x2="15" y1="14" y2="14"></line> <polyline class="ql-stroke" points="3 14 4 15 6 13"></polyline> <line class="ql-stroke" x1="9" x2="15" y1="9" y2="9"></line> <polyline class="ql-stroke" points="3 9 4 10 6 8"></polyline> </svg>'},7347:t=>{t.exports='<svg viewbox="0 0 18 18"> <line class="ql-stroke" x1="7" x2="15" y1="4" y2="4"></line> <line class="ql-stroke" x1="7" x2="15" y1="9" y2="9"></line> <line class="ql-stroke" x1="7" x2="15" y1="14" y2="14"></line> <line class="ql-stroke ql-thin" x1="2.5" x2="4.5" y1="5.5" y2="5.5"></line> <path class="ql-fill" d="M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z"></path> <path class="ql-stroke ql-thin" d="M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156"></path> <path class="ql-stroke ql-thin" d="M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109"></path> </svg>'},2872:t=>{t.exports='<svg viewbox="0 0 18 18"> <line class="ql-stroke" x1="3" x2="15" y1="14" y2="14"></line> <line class="ql-stroke" x1="3" x2="15" y1="4" y2="4"></line> <line class="ql-stroke" x1="9" x2="15" y1="9" y2="9"></line> <polyline class="ql-stroke" points="5 7 5 11 3 9 5 7"></polyline> </svg>'},8134:t=>{t.exports='<svg viewbox="0 0 18 18"> <line class="ql-stroke ql-thin" x1="15.5" x2="2.5" y1="8.5" y2="9.5"></line> <path class="ql-fill" d="M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z"></path> <path class="ql-fill" d="M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z"></path> </svg>'},2441:t=>{t.exports='<svg viewbox="0 0 18 18"> <path class="ql-fill" d="M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z"/> <path class="ql-fill" d="M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z"/> </svg>'},6005:t=>{t.exports='<svg viewbox="0 0 18 18"> <path class="ql-fill" d="M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z"/> <path class="ql-fill" d="M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z"/> </svg>'},2173:t=>{t.exports='<svg viewbox="0 0 18 18"> <path class="ql-stroke" d="M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3"></path> <rect class="ql-fill" height="1" rx="0.5" ry="0.5" width="12" x="3" y="15"></rect> </svg>'},6345:t=>{t.exports='<svg viewbox="0 0 18 18"> <rect class="ql-stroke" height="12" width="12" x="3" y="3"></rect> <rect class="ql-fill" height="12" width="1" x="5" y="3"></rect> <rect class="ql-fill" height="12" width="1" x="12" y="3"></rect> <rect class="ql-fill" height="2" width="8" x="5" y="8"></rect> <rect class="ql-fill" height="1" width="3" x="3" y="5"></rect> <rect class="ql-fill" height="1" width="3" x="3" y="7"></rect> <rect class="ql-fill" height="1" width="3" x="3" y="10"></rect> <rect class="ql-fill" height="1" width="3" x="3" y="12"></rect> <rect class="ql-fill" height="1" width="3" x="12" y="5"></rect> <rect class="ql-fill" height="1" width="3" x="12" y="7"></rect> <rect class="ql-fill" height="1" width="3" x="12" y="10"></rect> <rect class="ql-fill" height="1" width="3" x="12" y="12"></rect> </svg>'},2635:(t,e,n)=>{"use strict";var r=n(7226)(),o=n(2680)("Object.prototype.toString"),i=function(t){return!(r&&t&&"object"==typeof t&&Symbol.toStringTag in t)&&"[object Arguments]"===o(t)},l=function(t){return!!i(t)||null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Array]"!==o(t)&&"[object Function]"===o(t.callee)},s=function(){return i(arguments)}();i.isLegacyArguments=l,t.exports=s?i:l},4277:(t,e,n)=>{"use strict";var r=Date.prototype.getDay,o=Object.prototype.toString,i=n(7226)();t.exports=function(t){return"object"==typeof t&&null!==t&&(i?function(t){try{return r.call(t),!0}catch(t){return!1}}(t):"[object Date]"===o.call(t))}},8786:(t,e,n)=>{"use strict";var r,o,i,l,s=n(2680),a=n(7226)();if(a){r=s("Object.prototype.hasOwnProperty"),o=s("RegExp.prototype.exec"),i={};var u=function(){throw i};l={toString:u,valueOf:u},"symbol"==typeof Symbol.toPrimitive&&(l[Symbol.toPrimitive]=u)}var c=s("Object.prototype.toString"),f=Object.getOwnPropertyDescriptor;t.exports=a?function(t){if(!t||"object"!=typeof t)return!1;var e=f(t,"lastIndex");if(!(e&&r(e,"value")))return!1;try{o(t,l)}catch(t){return t===i}}:function(t){return!(!t||"object"!=typeof t&&"function"!=typeof t)&&"[object RegExp]"===c(t)}},8169:t=>{"use strict";var e=function(t){return t!=t};t.exports=function(t,n){return 0===t&&0===n?1/t==1/n:t===n||!(!e(t)||!e(n))}},4679:(t,e,n)=>{"use strict";var r=n(4926),o=n(9429),i=n(8169),l=n(8070),s=n(191),a=o(l(),Object);r(a,{getPolyfill:l,implementation:i,shim:s}),t.exports=a},8070:(t,e,n)=>{"use strict";var r=n(8169);t.exports=function(){return"function"==typeof Object.is?Object.is:r}},191:(t,e,n)=>{"use strict";var r=n(8070),o=n(4926);t.exports=function(){var t=r();return o(Object,{is:t},{is:function(){return Object.is!==t}}),t}},5691:(t,e,n)=>{"use strict";var r;if(!Object.keys){var o=Object.prototype.hasOwnProperty,i=Object.prototype.toString,l=n(801),s=Object.prototype.propertyIsEnumerable,a=!s.call({toString:null},"toString"),u=s.call((function(){}),"prototype"),c=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],f=function(t){var e=t.constructor;return e&&e.prototype===t},h={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},p=function(){if("undefined"==typeof window)return!1;for(var t in window)try{if(!h["$"+t]&&o.call(window,t)&&null!==window[t]&&"object"==typeof window[t])try{f(window[t])}catch(t){return!0}}catch(t){return!0}return!1}();r=function(t){var e=null!==t&&"object"==typeof t,n="[object Function]"===i.call(t),r=l(t),s=e&&"[object String]"===i.call(t),h=[];if(!e&&!n&&!r)throw new TypeError("Object.keys called on a non-object");var d=u&&n;if(s&&t.length>0&&!o.call(t,0))for(var y=0;y<t.length;++y)h.push(String(y));if(r&&t.length>0)for(var v=0;v<t.length;++v)h.push(String(v));else for(var b in t)d&&"prototype"===b||!o.call(t,b)||h.push(String(b));if(a)for(var g=function(t){if("undefined"==typeof window||!p)return f(t);try{return f(t)}catch(t){return!1}}(t),m=0;m<c.length;++m)g&&"constructor"===c[m]||!o.call(t,c[m])||h.push(c[m]);return h}}t.exports=r},3464:(t,e,n)=>{"use strict";var r=Array.prototype.slice,o=n(801),i=Object.keys,l=i?function(t){return i(t)}:n(5691),s=Object.keys;l.shim=function(){Object.keys?function(){var t=Object.keys(arguments);return t&&t.length===arguments.length}(1,2)||(Object.keys=function(t){return o(t)?s(r.call(t)):s(t)}):Object.keys=l;return Object.keys||l},t.exports=l},801:t=>{"use strict";var e=Object.prototype.toString;t.exports=function(t){var n=e.call(t),r="[object Arguments]"===n;return r||(r="[object Array]"!==n&&null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Function]"===e.call(t.callee)),r}},8973:function(t){var e;"undefined"!=typeof self&&self,e=function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=9)}([function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e){var n=this;return e="[Parchment] "+e,(n=t.call(this,e)||this).message=e,n.name=n.constructor.name,n}return o(e,t),e}(Error);e.ParchmentError=i;var l,s={},a={},u={},c={};function f(t,e){var n;if(void 0===e&&(e=l.ANY),"string"==typeof t)n=c[t]||s[t];else if(t instanceof Text||t.nodeType===Node.TEXT_NODE)n=c.text;else if("number"==typeof t)t&l.LEVEL&l.BLOCK?n=c.block:t&l.LEVEL&l.INLINE&&(n=c.inline);else if(t instanceof HTMLElement){var r=(t.getAttribute("class")||"").split(/\s+/);for(var o in r)if(n=a[r[o]])break;n=n||u[t.tagName]}return null==n?null:e&l.LEVEL&n.scope&&e&l.TYPE&n.scope?n:null}e.DATA_KEY="__blot",function(t){t[t.TYPE=3]="TYPE",t[t.LEVEL=12]="LEVEL",t[t.ATTRIBUTE=13]="ATTRIBUTE",t[t.BLOT=14]="BLOT",t[t.INLINE=7]="INLINE",t[t.BLOCK=11]="BLOCK",t[t.BLOCK_BLOT=10]="BLOCK_BLOT",t[t.INLINE_BLOT=6]="INLINE_BLOT",t[t.BLOCK_ATTRIBUTE=9]="BLOCK_ATTRIBUTE",t[t.INLINE_ATTRIBUTE=5]="INLINE_ATTRIBUTE",t[t.ANY=15]="ANY"}(l=e.Scope||(e.Scope={})),e.create=function(t,e){var n=f(t);if(null==n)throw new i("Unable to create "+t+" blot");var r=n,o=t instanceof Node||t.nodeType===Node.TEXT_NODE?t:r.create(e);return new r(o,e)},e.find=function t(n,r){return void 0===r&&(r=!1),null==n?null:null!=n[e.DATA_KEY]?n[e.DATA_KEY].blot:r?t(n.parentNode,r):null},e.query=f,e.register=function t(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];if(e.length>1)return e.map((function(e){return t(e)}));var r=e[0];if("string"!=typeof r.blotName&&"string"!=typeof r.attrName)throw new i("Invalid definition");if("abstract"===r.blotName)throw new i("Cannot register abstract class");if(c[r.blotName||r.attrName]=r,"string"==typeof r.keyName)s[r.keyName]=r;else if(null!=r.className&&(a[r.className]=r),null!=r.tagName){Array.isArray(r.tagName)?r.tagName=r.tagName.map((function(t){return t.toUpperCase()})):r.tagName=r.tagName.toUpperCase();var o=Array.isArray(r.tagName)?r.tagName:[r.tagName];o.forEach((function(t){null!=u[t]&&null!=r.className||(u[t]=r)}))}return r}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),o=function(){function t(t,e,n){void 0===n&&(n={}),this.attrName=t,this.keyName=e;var o=r.Scope.TYPE&r.Scope.ATTRIBUTE;null!=n.scope?this.scope=n.scope&r.Scope.LEVEL|o:this.scope=r.Scope.ATTRIBUTE,null!=n.whitelist&&(this.whitelist=n.whitelist)}return t.keys=function(t){return[].map.call(t.attributes,(function(t){return t.name}))},t.prototype.add=function(t,e){return!!this.canAdd(t,e)&&(t.setAttribute(this.keyName,e),!0)},t.prototype.canAdd=function(t,e){return null!=r.query(t,r.Scope.BLOT&(this.scope|r.Scope.TYPE))&&(null==this.whitelist||("string"==typeof e?this.whitelist.indexOf(e.replace(/["']/g,""))>-1:this.whitelist.indexOf(e)>-1))},t.prototype.remove=function(t){t.removeAttribute(this.keyName)},t.prototype.value=function(t){var e=t.getAttribute(this.keyName);return this.canAdd(t,e)&&e?e:""},t}();e.default=o},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(11),l=n(5),s=n(0),a=function(t){function e(e){var n=t.call(this,e)||this;return n.build(),n}return o(e,t),e.prototype.appendChild=function(t){this.insertBefore(t)},e.prototype.attach=function(){t.prototype.attach.call(this),this.children.forEach((function(t){t.attach()}))},e.prototype.build=function(){var t=this;this.children=new i.default,[].slice.call(this.domNode.childNodes).reverse().forEach((function(e){try{var n=u(e);t.insertBefore(n,t.children.head||void 0)}catch(t){if(t instanceof s.ParchmentError)return;throw t}}))},e.prototype.deleteAt=function(t,e){if(0===t&&e===this.length())return this.remove();this.children.forEachAt(t,e,(function(t,e,n){t.deleteAt(e,n)}))},e.prototype.descendant=function(t,n){var r=this.children.find(n),o=r[0],i=r[1];return null==t.blotName&&t(o)||null!=t.blotName&&o instanceof t?[o,i]:o instanceof e?o.descendant(t,i):[null,-1]},e.prototype.descendants=function(t,n,r){void 0===n&&(n=0),void 0===r&&(r=Number.MAX_VALUE);var o=[],i=r;return this.children.forEachAt(n,r,(function(n,r,l){(null==t.blotName&&t(n)||null!=t.blotName&&n instanceof t)&&o.push(n),n instanceof e&&(o=o.concat(n.descendants(t,r,i))),i-=l})),o},e.prototype.detach=function(){this.children.forEach((function(t){t.detach()})),t.prototype.detach.call(this)},e.prototype.formatAt=function(t,e,n,r){this.children.forEachAt(t,e,(function(t,e,o){t.formatAt(e,o,n,r)}))},e.prototype.insertAt=function(t,e,n){var r=this.children.find(t),o=r[0],i=r[1];if(o)o.insertAt(i,e,n);else{var l=null==n?s.create("text",e):s.create(e,n);this.appendChild(l)}},e.prototype.insertBefore=function(t,e){if(null!=this.statics.allowedChildren&&!this.statics.allowedChildren.some((function(e){return t instanceof e})))throw new s.ParchmentError("Cannot insert "+t.statics.blotName+" into "+this.statics.blotName);t.insertInto(this,e)},e.prototype.length=function(){return this.children.reduce((function(t,e){return t+e.length()}),0)},e.prototype.moveChildren=function(t,e){this.children.forEach((function(n){t.insertBefore(n,e)}))},e.prototype.optimize=function(e){if(t.prototype.optimize.call(this,e),0===this.children.length)if(null!=this.statics.defaultChild){var n=s.create(this.statics.defaultChild);this.appendChild(n),n.optimize(e)}else this.remove()},e.prototype.path=function(t,n){void 0===n&&(n=!1);var r=this.children.find(t,n),o=r[0],i=r[1],l=[[this,t]];return o instanceof e?l.concat(o.path(i,n)):(null!=o&&l.push([o,i]),l)},e.prototype.removeChild=function(t){this.children.remove(t)},e.prototype.replace=function(n){n instanceof e&&n.moveChildren(this),t.prototype.replace.call(this,n)},e.prototype.split=function(t,e){if(void 0===e&&(e=!1),!e){if(0===t)return this;if(t===this.length())return this.next}var n=this.clone();return this.parent.insertBefore(n,this.next),this.children.forEachAt(t,this.length(),(function(t,r,o){t=t.split(r,e),n.appendChild(t)})),n},e.prototype.unwrap=function(){this.moveChildren(this.parent,this.next),this.remove()},e.prototype.update=function(t,e){var n=this,r=[],o=[];t.forEach((function(t){t.target===n.domNode&&"childList"===t.type&&(r.push.apply(r,t.addedNodes),o.push.apply(o,t.removedNodes))})),o.forEach((function(t){if(!(null!=t.parentNode&&"IFRAME"!==t.tagName&&document.body.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_CONTAINED_BY)){var e=s.find(t);null!=e&&(null!=e.domNode.parentNode&&e.domNode.parentNode!==n.domNode||e.detach())}})),r.filter((function(t){return t.parentNode==n.domNode})).sort((function(t,e){return t===e?0:t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING?1:-1})).forEach((function(t){var e=null;null!=t.nextSibling&&(e=s.find(t.nextSibling));var r=u(t);r.next==e&&null!=r.next||(null!=r.parent&&r.parent.removeChild(n),n.insertBefore(r,e||void 0))}))},e}(l.default);function u(t){var e=s.find(t);if(null==e)try{e=s.create(t)}catch(n){e=s.create(s.Scope.INLINE),[].slice.call(t.childNodes).forEach((function(t){e.domNode.appendChild(t)})),t.parentNode&&t.parentNode.replaceChild(e.domNode,t),e.attach()}return e}e.default=a},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(1),l=n(6),s=n(2),a=n(0),u=function(t){function e(e){var n=t.call(this,e)||this;return n.attributes=new l.default(n.domNode),n}return o(e,t),e.formats=function(t){return"string"==typeof this.tagName||(Array.isArray(this.tagName)?t.tagName.toLowerCase():void 0)},e.prototype.format=function(t,e){var n=a.query(t);n instanceof i.default?this.attributes.attribute(n,e):e&&(null==n||t===this.statics.blotName&&this.formats()[t]===e||this.replaceWith(t,e))},e.prototype.formats=function(){var t=this.attributes.values(),e=this.statics.formats(this.domNode);return null!=e&&(t[this.statics.blotName]=e),t},e.prototype.replaceWith=function(e,n){var r=t.prototype.replaceWith.call(this,e,n);return this.attributes.copy(r),r},e.prototype.update=function(e,n){var r=this;t.prototype.update.call(this,e,n),e.some((function(t){return t.target===r.domNode&&"attributes"===t.type}))&&this.attributes.build()},e.prototype.wrap=function(n,r){var o=t.prototype.wrap.call(this,n,r);return o instanceof e&&o.statics.scope===this.statics.scope&&this.attributes.move(o),o},e}(s.default);e.default=u},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(5),l=n(0),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.value=function(t){return!0},e.prototype.index=function(t,e){return this.domNode===t||this.domNode.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_CONTAINED_BY?Math.min(e,1):-1},e.prototype.position=function(t,e){var n=[].indexOf.call(this.parent.domNode.childNodes,this.domNode);return t>0&&(n+=1),[this.parent.domNode,n]},e.prototype.value=function(){return(t={})[this.statics.blotName]=this.statics.value(this.domNode)||!0,t;var t},e.scope=l.Scope.INLINE_BLOT,e}(i.default);e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),o=function(){function t(t){this.domNode=t,this.domNode[r.DATA_KEY]={blot:this}}return Object.defineProperty(t.prototype,"statics",{get:function(){return this.constructor},enumerable:!0,configurable:!0}),t.create=function(t){if(null==this.tagName)throw new r.ParchmentError("Blot definition missing tagName");var e;return Array.isArray(this.tagName)?("string"==typeof t&&(t=t.toUpperCase(),parseInt(t).toString()===t&&(t=parseInt(t))),e="number"==typeof t?document.createElement(this.tagName[t-1]):this.tagName.indexOf(t)>-1?document.createElement(t):document.createElement(this.tagName[0])):e=document.createElement(this.tagName),this.className&&e.classList.add(this.className),e},t.prototype.attach=function(){null!=this.parent&&(this.scroll=this.parent.scroll)},t.prototype.clone=function(){var t=this.domNode.cloneNode(!1);return r.create(t)},t.prototype.detach=function(){null!=this.parent&&this.parent.removeChild(this),delete this.domNode[r.DATA_KEY]},t.prototype.deleteAt=function(t,e){this.isolate(t,e).remove()},t.prototype.formatAt=function(t,e,n,o){var i=this.isolate(t,e);if(null!=r.query(n,r.Scope.BLOT)&&o)i.wrap(n,o);else if(null!=r.query(n,r.Scope.ATTRIBUTE)){var l=r.create(this.statics.scope);i.wrap(l),l.format(n,o)}},t.prototype.insertAt=function(t,e,n){var o=null==n?r.create("text",e):r.create(e,n),i=this.split(t);this.parent.insertBefore(o,i)},t.prototype.insertInto=function(t,e){void 0===e&&(e=null),null!=this.parent&&this.parent.children.remove(this);var n=null;t.children.insertBefore(this,e),null!=e&&(n=e.domNode),this.domNode.parentNode==t.domNode&&this.domNode.nextSibling==n||t.domNode.insertBefore(this.domNode,n),this.parent=t,this.attach()},t.prototype.isolate=function(t,e){var n=this.split(t);return n.split(e),n},t.prototype.length=function(){return 1},t.prototype.offset=function(t){return void 0===t&&(t=this.parent),null==this.parent||this==t?0:this.parent.children.offset(this)+this.parent.offset(t)},t.prototype.optimize=function(t){null!=this.domNode[r.DATA_KEY]&&delete this.domNode[r.DATA_KEY].mutations},t.prototype.remove=function(){null!=this.domNode.parentNode&&this.domNode.parentNode.removeChild(this.domNode),this.detach()},t.prototype.replace=function(t){null!=t.parent&&(t.parent.insertBefore(this,t.next),t.remove())},t.prototype.replaceWith=function(t,e){var n="string"==typeof t?r.create(t,e):t;return n.replace(this),n},t.prototype.split=function(t,e){return 0===t?this:this.next},t.prototype.update=function(t,e){},t.prototype.wrap=function(t,e){var n="string"==typeof t?r.create(t,e):t;return null!=this.parent&&this.parent.insertBefore(n,this.next),n.appendChild(this),n},t.blotName="abstract",t}();e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1),o=n(7),i=n(8),l=n(0),s=function(){function t(t){this.attributes={},this.domNode=t,this.build()}return t.prototype.attribute=function(t,e){e?t.add(this.domNode,e)&&(null!=t.value(this.domNode)?this.attributes[t.attrName]=t:delete this.attributes[t.attrName]):(t.remove(this.domNode),delete this.attributes[t.attrName])},t.prototype.build=function(){var t=this;this.attributes={};var e=r.default.keys(this.domNode),n=o.default.keys(this.domNode),s=i.default.keys(this.domNode);e.concat(n).concat(s).forEach((function(e){var n=l.query(e,l.Scope.ATTRIBUTE);n instanceof r.default&&(t.attributes[n.attrName]=n)}))},t.prototype.copy=function(t){var e=this;Object.keys(this.attributes).forEach((function(n){var r=e.attributes[n].value(e.domNode);t.format(n,r)}))},t.prototype.move=function(t){var e=this;this.copy(t),Object.keys(this.attributes).forEach((function(t){e.attributes[t].remove(e.domNode)})),this.attributes={}},t.prototype.values=function(){var t=this;return Object.keys(this.attributes).reduce((function(e,n){return e[n]=t.attributes[n].value(t.domNode),e}),{})},t}();e.default=s},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});function i(t,e){return(t.getAttribute("class")||"").split(/\s+/).filter((function(t){return 0===t.indexOf(e+"-")}))}Object.defineProperty(e,"__esModule",{value:!0});var l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.keys=function(t){return(t.getAttribute("class")||"").split(/\s+/).map((function(t){return t.split("-").slice(0,-1).join("-")}))},e.prototype.add=function(t,e){return!!this.canAdd(t,e)&&(this.remove(t),t.classList.add(this.keyName+"-"+e),!0)},e.prototype.remove=function(t){i(t,this.keyName).forEach((function(e){t.classList.remove(e)})),0===t.classList.length&&t.removeAttribute("class")},e.prototype.value=function(t){var e=(i(t,this.keyName)[0]||"").slice(this.keyName.length+1);return this.canAdd(t,e)?e:""},e}(n(1).default);e.default=l},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});function i(t){var e=t.split("-"),n=e.slice(1).map((function(t){return t[0].toUpperCase()+t.slice(1)})).join("");return e[0]+n}Object.defineProperty(e,"__esModule",{value:!0});var l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.keys=function(t){return(t.getAttribute("style")||"").split(";").map((function(t){return t.split(":")[0].trim()}))},e.prototype.add=function(t,e){return!!this.canAdd(t,e)&&(t.style[i(this.keyName)]=e,!0)},e.prototype.remove=function(t){t.style[i(this.keyName)]="",t.getAttribute("style")||t.removeAttribute("style")},e.prototype.value=function(t){var e=t.style[i(this.keyName)];return this.canAdd(t,e)?e:""},e}(n(1).default);e.default=l},function(t,e,n){t.exports=n(10)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(2),o=n(3),i=n(4),l=n(12),s=n(13),a=n(14),u=n(15),c=n(16),f=n(1),h=n(7),p=n(8),d=n(6),y=n(0),v={Scope:y.Scope,create:y.create,find:y.find,query:y.query,register:y.register,Container:r.default,Format:o.default,Leaf:i.default,Embed:u.default,Scroll:l.default,Block:a.default,Inline:s.default,Text:c.default,Attributor:{Attribute:f.default,Class:h.default,Style:p.default,Store:d.default}};e.default=v},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){this.head=this.tail=null,this.length=0}return t.prototype.append=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this.insertBefore(t[0],null),t.length>1&&this.append.apply(this,t.slice(1))},t.prototype.contains=function(t){for(var e,n=this.iterator();e=n();)if(e===t)return!0;return!1},t.prototype.insertBefore=function(t,e){t&&(t.next=e,null!=e?(t.prev=e.prev,null!=e.prev&&(e.prev.next=t),e.prev=t,e===this.head&&(this.head=t)):null!=this.tail?(this.tail.next=t,t.prev=this.tail,this.tail=t):(t.prev=null,this.head=this.tail=t),this.length+=1)},t.prototype.offset=function(t){for(var e=0,n=this.head;null!=n;){if(n===t)return e;e+=n.length(),n=n.next}return-1},t.prototype.remove=function(t){this.contains(t)&&(null!=t.prev&&(t.prev.next=t.next),null!=t.next&&(t.next.prev=t.prev),t===this.head&&(this.head=t.next),t===this.tail&&(this.tail=t.prev),this.length-=1)},t.prototype.iterator=function(t){return void 0===t&&(t=this.head),function(){var e=t;return null!=t&&(t=t.next),e}},t.prototype.find=function(t,e){void 0===e&&(e=!1);for(var n,r=this.iterator();n=r();){var o=n.length();if(t<o||e&&t===o&&(null==n.next||0!==n.next.length()))return[n,t];t-=o}return[null,0]},t.prototype.forEach=function(t){for(var e,n=this.iterator();e=n();)t(e)},t.prototype.forEachAt=function(t,e,n){if(!(e<=0))for(var r,o=this.find(t),i=o[0],l=t-o[1],s=this.iterator(i);(r=s())&&l<t+e;){var a=r.length();t>l?n(r,t-l,Math.min(e,l+a-t)):n(r,0,Math.min(a,t+e-l)),l+=a}},t.prototype.map=function(t){return this.reduce((function(e,n){return e.push(t(n)),e}),[])},t.prototype.reduce=function(t,e){for(var n,r=this.iterator();n=r();)e=t(e,n);return e},t}();e.default=r},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(2),l=n(0),s={attributes:!0,characterData:!0,characterDataOldValue:!0,childList:!0,subtree:!0},a=function(t){function e(e){var n=t.call(this,e)||this;return n.scroll=n,n.observer=new MutationObserver((function(t){n.update(t)})),n.observer.observe(n.domNode,s),n.attach(),n}return o(e,t),e.prototype.detach=function(){t.prototype.detach.call(this),this.observer.disconnect()},e.prototype.deleteAt=function(e,n){this.update(),0===e&&n===this.length()?this.children.forEach((function(t){t.remove()})):t.prototype.deleteAt.call(this,e,n)},e.prototype.formatAt=function(e,n,r,o){this.update(),t.prototype.formatAt.call(this,e,n,r,o)},e.prototype.insertAt=function(e,n,r){this.update(),t.prototype.insertAt.call(this,e,n,r)},e.prototype.optimize=function(e,n){var r=this;void 0===e&&(e=[]),void 0===n&&(n={}),t.prototype.optimize.call(this,n);for(var o=[].slice.call(this.observer.takeRecords());o.length>0;)e.push(o.pop());for(var s=function(t,e){void 0===e&&(e=!0),null!=t&&t!==r&&null!=t.domNode.parentNode&&(null==t.domNode[l.DATA_KEY].mutations&&(t.domNode[l.DATA_KEY].mutations=[]),e&&s(t.parent))},a=function(t){null!=t.domNode[l.DATA_KEY]&&null!=t.domNode[l.DATA_KEY].mutations&&(t instanceof i.default&&t.children.forEach(a),t.optimize(n))},u=e,c=0;u.length>0;c+=1){if(c>=100)throw new Error("[Parchment] Maximum optimize iterations reached");for(u.forEach((function(t){var e=l.find(t.target,!0);null!=e&&(e.domNode===t.target&&("childList"===t.type?(s(l.find(t.previousSibling,!1)),[].forEach.call(t.addedNodes,(function(t){var e=l.find(t,!1);s(e,!1),e instanceof i.default&&e.children.forEach((function(t){s(t,!1)}))}))):"attributes"===t.type&&s(e.prev)),s(e))})),this.children.forEach(a),o=(u=[].slice.call(this.observer.takeRecords())).slice();o.length>0;)e.push(o.pop())}},e.prototype.update=function(e,n){var r=this;void 0===n&&(n={}),(e=e||this.observer.takeRecords()).map((function(t){var e=l.find(t.target,!0);return null==e?null:null==e.domNode[l.DATA_KEY].mutations?(e.domNode[l.DATA_KEY].mutations=[t],e):(e.domNode[l.DATA_KEY].mutations.push(t),null)})).forEach((function(t){null!=t&&t!==r&&null!=t.domNode[l.DATA_KEY]&&t.update(t.domNode[l.DATA_KEY].mutations||[],n)})),null!=this.domNode[l.DATA_KEY].mutations&&t.prototype.update.call(this,this.domNode[l.DATA_KEY].mutations,n),this.optimize(e,n)},e.blotName="scroll",e.defaultChild="block",e.scope=l.Scope.BLOCK_BLOT,e.tagName="DIV",e}(i.default);e.default=a},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(3),l=n(0),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.formats=function(n){if(n.tagName!==e.tagName)return t.formats.call(this,n)},e.prototype.format=function(n,r){var o=this;n!==this.statics.blotName||r?t.prototype.format.call(this,n,r):(this.children.forEach((function(t){t instanceof i.default||(t=t.wrap(e.blotName,!0)),o.attributes.copy(t)})),this.unwrap())},e.prototype.formatAt=function(e,n,r,o){null!=this.formats()[r]||l.query(r,l.Scope.ATTRIBUTE)?this.isolate(e,n).format(r,o):t.prototype.formatAt.call(this,e,n,r,o)},e.prototype.optimize=function(n){t.prototype.optimize.call(this,n);var r=this.formats();if(0===Object.keys(r).length)return this.unwrap();var o=this.next;o instanceof e&&o.prev===this&&function(t,e){if(Object.keys(t).length!==Object.keys(e).length)return!1;for(var n in t)if(t[n]!==e[n])return!1;return!0}(r,o.formats())&&(o.moveChildren(this),o.remove())},e.blotName="inline",e.scope=l.Scope.INLINE_BLOT,e.tagName="SPAN",e}(i.default);e.default=s},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(3),l=n(0),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.formats=function(n){var r=l.query(e.blotName).tagName;if(n.tagName!==r)return t.formats.call(this,n)},e.prototype.format=function(n,r){null!=l.query(n,l.Scope.BLOCK)&&(n!==this.statics.blotName||r?t.prototype.format.call(this,n,r):this.replaceWith(e.blotName))},e.prototype.formatAt=function(e,n,r,o){null!=l.query(r,l.Scope.BLOCK)?this.format(r,o):t.prototype.formatAt.call(this,e,n,r,o)},e.prototype.insertAt=function(e,n,r){if(null==r||null!=l.query(n,l.Scope.INLINE))t.prototype.insertAt.call(this,e,n,r);else{var o=this.split(e),i=l.create(n,r);o.parent.insertBefore(i,o)}},e.prototype.update=function(e,n){navigator.userAgent.match(/Trident/)?this.build():t.prototype.update.call(this,e,n)},e.blotName="block",e.scope=l.Scope.BLOCK_BLOT,e.tagName="P",e}(i.default);e.default=s},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.formats=function(t){},e.prototype.format=function(e,n){t.prototype.formatAt.call(this,0,this.length(),e,n)},e.prototype.formatAt=function(e,n,r,o){0===e&&n===this.length()?this.format(r,o):t.prototype.formatAt.call(this,e,n,r,o)},e.prototype.formats=function(){return this.statics.formats(this.domNode)},e}(n(4).default);e.default=i},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(4),l=n(0),s=function(t){function e(e){var n=t.call(this,e)||this;return n.text=n.statics.value(n.domNode),n}return o(e,t),e.create=function(t){return document.createTextNode(t)},e.value=function(t){var e=t.data;return e.normalize&&(e=e.normalize()),e},e.prototype.deleteAt=function(t,e){this.domNode.data=this.text=this.text.slice(0,t)+this.text.slice(t+e)},e.prototype.index=function(t,e){return this.domNode===t?e:-1},e.prototype.insertAt=function(e,n,r){null==r?(this.text=this.text.slice(0,e)+n+this.text.slice(e),this.domNode.data=this.text):t.prototype.insertAt.call(this,e,n,r)},e.prototype.length=function(){return this.text.length},e.prototype.optimize=function(n){t.prototype.optimize.call(this,n),this.text=this.statics.value(this.domNode),0===this.text.length?this.remove():this.next instanceof e&&this.next.prev===this&&(this.insertAt(this.length(),this.next.value()),this.next.remove())},e.prototype.position=function(t,e){return void 0===e&&(e=!1),[this.domNode,t]},e.prototype.split=function(t,e){if(void 0===e&&(e=!1),!e){if(0===t)return this;if(t===this.length())return this.next}var n=l.create(this.domNode.splitText(t));return this.parent.insertBefore(n,this.next),this.text=this.statics.value(this.domNode),n},e.prototype.update=function(t,e){var n=this;t.some((function(t){return"characterData"===t.type&&t.target===n.domNode}))&&(this.text=this.statics.value(this.domNode))},e.prototype.value=function(){return this.text},e.blotName="text",e.scope=l.Scope.INLINE_BLOT,e}(i.default);e.default=s}])},t.exports=e()},4515:(t,e,n)=>{var r=n(9661),o=n(3185),i=n(9385),l=n(5025),s=String.fromCharCode(0),a=function(t){Array.isArray(t)?this.ops=t:null!=t&&Array.isArray(t.ops)?this.ops=t.ops:this.ops=[]};a.prototype.insert=function(t,e){var n={};return 0===t.length?this:(n.insert=t,null!=e&&"object"==typeof e&&Object.keys(e).length>0&&(n.attributes=e),this.push(n))},a.prototype.delete=function(t){return t<=0?this:this.push({delete:t})},a.prototype.retain=function(t,e){if(t<=0)return this;var n={retain:t};return null!=e&&"object"==typeof e&&Object.keys(e).length>0&&(n.attributes=e),this.push(n)},a.prototype.push=function(t){var e=this.ops.length,n=this.ops[e-1];if(t=i(!0,{},t),"object"==typeof n){if("number"==typeof t.delete&&"number"==typeof n.delete)return this.ops[e-1]={delete:n.delete+t.delete},this;if("number"==typeof n.delete&&null!=t.insert&&(e-=1,"object"!=typeof(n=this.ops[e-1])))return this.ops.unshift(t),this;if(o(t.attributes,n.attributes)){if("string"==typeof t.insert&&"string"==typeof n.insert)return this.ops[e-1]={insert:n.insert+t.insert},"object"==typeof t.attributes&&(this.ops[e-1].attributes=t.attributes),this;if("number"==typeof t.retain&&"number"==typeof n.retain)return this.ops[e-1]={retain:n.retain+t.retain},"object"==typeof t.attributes&&(this.ops[e-1].attributes=t.attributes),this}}return e===this.ops.length?this.ops.push(t):this.ops.splice(e,0,t),this},a.prototype.chop=function(){var t=this.ops[this.ops.length-1];return t&&t.retain&&!t.attributes&&this.ops.pop(),this},a.prototype.filter=function(t){return this.ops.filter(t)},a.prototype.forEach=function(t){this.ops.forEach(t)},a.prototype.map=function(t){return this.ops.map(t)},a.prototype.partition=function(t){var e=[],n=[];return this.forEach((function(r){(t(r)?e:n).push(r)})),[e,n]},a.prototype.reduce=function(t,e){return this.ops.reduce(t,e)},a.prototype.changeLength=function(){return this.reduce((function(t,e){return e.insert?t+l.length(e):e.delete?t-e.delete:t}),0)},a.prototype.length=function(){return this.reduce((function(t,e){return t+l.length(e)}),0)},a.prototype.slice=function(t,e){t=t||0,"number"!=typeof e&&(e=1/0);for(var n=[],r=l.iterator(this.ops),o=0;o<e&&r.hasNext();){var i;o<t?i=r.next(t-o):(i=r.next(e-o),n.push(i)),o+=l.length(i)}return new a(n)},a.prototype.compose=function(t){var e=l.iterator(this.ops),n=l.iterator(t.ops),r=[],i=n.peek();if(null!=i&&"number"==typeof i.retain&&null==i.attributes){for(var s=i.retain;"insert"===e.peekType()&&e.peekLength()<=s;)s-=e.peekLength(),r.push(e.next());i.retain-s>0&&n.next(i.retain-s)}for(var u=new a(r);e.hasNext()||n.hasNext();)if("insert"===n.peekType())u.push(n.next());else if("delete"===e.peekType())u.push(e.next());else{var c=Math.min(e.peekLength(),n.peekLength()),f=e.next(c),h=n.next(c);if("number"==typeof h.retain){var p={};"number"==typeof f.retain?p.retain=c:p.insert=f.insert;var d=l.attributes.compose(f.attributes,h.attributes,"number"==typeof f.retain);if(d&&(p.attributes=d),u.push(p),!n.hasNext()&&o(u.ops[u.ops.length-1],p)){var y=new a(e.rest());return u.concat(y).chop()}}else"number"==typeof h.delete&&"number"==typeof f.retain&&u.push(h)}return u.chop()},a.prototype.concat=function(t){var e=new a(this.ops.slice());return t.ops.length>0&&(e.push(t.ops[0]),e.ops=e.ops.concat(t.ops.slice(1))),e},a.prototype.diff=function(t,e){if(this.ops===t.ops)return new a;var n=[this,t].map((function(e){return e.map((function(n){if(null!=n.insert)return"string"==typeof n.insert?n.insert:s;throw new Error("diff() called "+(e===t?"on":"with")+" non-document")})).join("")})),i=new a,u=r(n[0],n[1],e),c=l.iterator(this.ops),f=l.iterator(t.ops);return u.forEach((function(t){for(var e=t[1].length;e>0;){var n=0;switch(t[0]){case r.INSERT:n=Math.min(f.peekLength(),e),i.push(f.next(n));break;case r.DELETE:n=Math.min(e,c.peekLength()),c.next(n),i.delete(n);break;case r.EQUAL:n=Math.min(c.peekLength(),f.peekLength(),e);var s=c.next(n),a=f.next(n);o(s.insert,a.insert)?i.retain(n,l.attributes.diff(s.attributes,a.attributes)):i.push(a).delete(n)}e-=n}})),i.chop()},a.prototype.eachLine=function(t,e){e=e||"\n";for(var n=l.iterator(this.ops),r=new a,o=0;n.hasNext();){if("insert"!==n.peekType())return;var i=n.peek(),s=l.length(i)-n.peekLength(),u="string"==typeof i.insert?i.insert.indexOf(e,s)-s:-1;if(u<0)r.push(n.next());else if(u>0)r.push(n.next(u));else{if(!1===t(r,n.next(1).attributes||{},o))return;o+=1,r=new a}}r.length()>0&&t(r,{},o)},a.prototype.transform=function(t,e){if(e=!!e,"number"==typeof t)return this.transformPosition(t,e);for(var n=l.iterator(this.ops),r=l.iterator(t.ops),o=new a;n.hasNext()||r.hasNext();)if("insert"!==n.peekType()||!e&&"insert"===r.peekType())if("insert"===r.peekType())o.push(r.next());else{var i=Math.min(n.peekLength(),r.peekLength()),s=n.next(i),u=r.next(i);if(s.delete)continue;u.delete?o.push(u):o.retain(i,l.attributes.transform(s.attributes,u.attributes,e))}else o.retain(l.length(n.next()));return o.chop()},a.prototype.transformPosition=function(t,e){e=!!e;for(var n=l.iterator(this.ops),r=0;n.hasNext()&&r<=t;){var o=n.peekLength(),i=n.peekType();n.next(),"delete"!==i?("insert"===i&&(r<t||!e)&&(t+=o),r+=o):t-=Math.min(o,t-r)}return t},t.exports=a},5025:(t,e,n)=>{var r=n(3185),o=n(9385),i={attributes:{compose:function(t,e,n){"object"!=typeof t&&(t={}),"object"!=typeof e&&(e={});var r=o(!0,{},e);for(var i in n||(r=Object.keys(r).reduce((function(t,e){return null!=r[e]&&(t[e]=r[e]),t}),{})),t)void 0!==t[i]&&void 0===e[i]&&(r[i]=t[i]);return Object.keys(r).length>0?r:void 0},diff:function(t,e){"object"!=typeof t&&(t={}),"object"!=typeof e&&(e={});var n=Object.keys(t).concat(Object.keys(e)).reduce((function(n,o){return r(t[o],e[o])||(n[o]=void 0===e[o]?null:e[o]),n}),{});return Object.keys(n).length>0?n:void 0},transform:function(t,e,n){if("object"!=typeof t)return e;if("object"==typeof e){if(!n)return e;var r=Object.keys(e).reduce((function(n,r){return void 0===t[r]&&(n[r]=e[r]),n}),{});return Object.keys(r).length>0?r:void 0}}},iterator:function(t){return new l(t)},length:function(t){return"number"==typeof t.delete?t.delete:"number"==typeof t.retain?t.retain:"string"==typeof t.insert?t.insert.length:1}};function l(t){this.ops=t,this.index=0,this.offset=0}l.prototype.hasNext=function(){return this.peekLength()<1/0},l.prototype.next=function(t){t||(t=1/0);var e=this.ops[this.index];if(e){var n=this.offset,r=i.length(e);if(t>=r-n?(t=r-n,this.index+=1,this.offset=0):this.offset+=t,"number"==typeof e.delete)return{delete:t};var o={};return e.attributes&&(o.attributes=e.attributes),"number"==typeof e.retain?o.retain=t:"string"==typeof e.insert?o.insert=e.insert.substr(n,t):o.insert=e.insert,o}return{retain:1/0}},l.prototype.peek=function(){return this.ops[this.index]},l.prototype.peekLength=function(){return this.ops[this.index]?i.length(this.ops[this.index])-this.offset:1/0},l.prototype.peekType=function(){return this.ops[this.index]?"number"==typeof this.ops[this.index].delete?"delete":"number"==typeof this.ops[this.index].retain?"retain":"insert":"retain"},l.prototype.rest=function(){if(this.hasNext()){if(0===this.offset)return this.ops.slice(this.index);var t=this.offset,e=this.index,n=this.next(),r=this.ops.slice(this.index);return this.offset=t,this.index=e,[n].concat(r)}return[]},t.exports=i},3233:()=>{let t=document.createElement("div");if(t.classList.toggle("test-class",!1),t.classList.contains("test-class")){let t=DOMTokenList.prototype.toggle;DOMTokenList.prototype.toggle=function(e,n){return arguments.length>1&&!this.contains(e)==!n?n:t.call(this,e)}}String.prototype.startsWith||(String.prototype.startsWith=function(t,e){return e=e||0,this.substr(e,t.length)===t}),String.prototype.endsWith||(String.prototype.endsWith=function(t,e){var n=this.toString();("number"!=typeof e||!isFinite(e)||Math.floor(e)!==e||e>n.length)&&(e=n.length),e-=t.length;var r=n.indexOf(t,e);return-1!==r&&r===e}),Array.prototype.find||Object.defineProperty(Array.prototype,"find",{value:function(t){if(null===this)throw new TypeError("Array.prototype.find called on null or undefined");if("function"!=typeof t)throw new TypeError("predicate must be a function");for(var e,n=Object(this),r=n.length>>>0,o=arguments[1],i=0;i<r;i++)if(e=n[i],t.call(o,e,i,n))return e}}),document.addEventListener("DOMContentLoaded",(function(){document.execCommand("enableObjectResizing",!1,!1),document.execCommand("autoUrlDetect",!1,!1)}))},779:function(t){var e;"undefined"!=typeof self&&self,e=function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=109)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(17),o=n(18),i=n(19),l=n(45),s=n(46),a=n(47),u=n(48),c=n(49),f=n(12),h=n(32),p=n(33),d=n(31),y=n(1),v={Scope:y.Scope,create:y.create,find:y.find,query:y.query,register:y.register,Container:r.default,Format:o.default,Leaf:i.default,Embed:u.default,Scroll:l.default,Block:a.default,Inline:s.default,Text:c.default,Attributor:{Attribute:f.default,Class:h.default,Style:p.default,Store:d.default}};e.default=v},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e){var n=this;return e="[Parchment] "+e,(n=t.call(this,e)||this).message=e,n.name=n.constructor.name,n}return o(e,t),e}(Error);e.ParchmentError=i;var l,s={},a={},u={},c={};function f(t,e){var n;if(void 0===e&&(e=l.ANY),"string"==typeof t)n=c[t]||s[t];else if(t instanceof Text||t.nodeType===Node.TEXT_NODE)n=c.text;else if("number"==typeof t)t&l.LEVEL&l.BLOCK?n=c.block:t&l.LEVEL&l.INLINE&&(n=c.inline);else if(t instanceof HTMLElement){var r=(t.getAttribute("class")||"").split(/\s+/);for(var o in r)if(n=a[r[o]])break;n=n||u[t.tagName]}return null==n?null:e&l.LEVEL&n.scope&&e&l.TYPE&n.scope?n:null}e.DATA_KEY="__blot",function(t){t[t.TYPE=3]="TYPE",t[t.LEVEL=12]="LEVEL",t[t.ATTRIBUTE=13]="ATTRIBUTE",t[t.BLOT=14]="BLOT",t[t.INLINE=7]="INLINE",t[t.BLOCK=11]="BLOCK",t[t.BLOCK_BLOT=10]="BLOCK_BLOT",t[t.INLINE_BLOT=6]="INLINE_BLOT",t[t.BLOCK_ATTRIBUTE=9]="BLOCK_ATTRIBUTE",t[t.INLINE_ATTRIBUTE=5]="INLINE_ATTRIBUTE",t[t.ANY=15]="ANY"}(l=e.Scope||(e.Scope={})),e.create=function(t,e){var n=f(t);if(null==n)throw new i("Unable to create "+t+" blot");var r=n,o=t instanceof Node||t.nodeType===Node.TEXT_NODE?t:r.create(e);return new r(o,e)},e.find=function t(n,r){return void 0===r&&(r=!1),null==n?null:null!=n[e.DATA_KEY]?n[e.DATA_KEY].blot:r?t(n.parentNode,r):null},e.query=f,e.register=function t(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];if(e.length>1)return e.map((function(e){return t(e)}));var r=e[0];if("string"!=typeof r.blotName&&"string"!=typeof r.attrName)throw new i("Invalid definition");if("abstract"===r.blotName)throw new i("Cannot register abstract class");if(c[r.blotName||r.attrName]=r,"string"==typeof r.keyName)s[r.keyName]=r;else if(null!=r.className&&(a[r.className]=r),null!=r.tagName){Array.isArray(r.tagName)?r.tagName=r.tagName.map((function(t){return t.toUpperCase()})):r.tagName=r.tagName.toUpperCase();var o=Array.isArray(r.tagName)?r.tagName:[r.tagName];o.forEach((function(t){null!=u[t]&&null!=r.className||(u[t]=r)}))}return r}},function(t,e,n){var r=n(51),o=n(11),i=n(3),l=n(20),s=String.fromCharCode(0),a=function(t){Array.isArray(t)?this.ops=t:null!=t&&Array.isArray(t.ops)?this.ops=t.ops:this.ops=[]};a.prototype.insert=function(t,e){var n={};return 0===t.length?this:(n.insert=t,null!=e&&"object"==typeof e&&Object.keys(e).length>0&&(n.attributes=e),this.push(n))},a.prototype.delete=function(t){return t<=0?this:this.push({delete:t})},a.prototype.retain=function(t,e){if(t<=0)return this;var n={retain:t};return null!=e&&"object"==typeof e&&Object.keys(e).length>0&&(n.attributes=e),this.push(n)},a.prototype.push=function(t){var e=this.ops.length,n=this.ops[e-1];if(t=i(!0,{},t),"object"==typeof n){if("number"==typeof t.delete&&"number"==typeof n.delete)return this.ops[e-1]={delete:n.delete+t.delete},this;if("number"==typeof n.delete&&null!=t.insert&&(e-=1,"object"!=typeof(n=this.ops[e-1])))return this.ops.unshift(t),this;if(o(t.attributes,n.attributes)){if("string"==typeof t.insert&&"string"==typeof n.insert)return this.ops[e-1]={insert:n.insert+t.insert},"object"==typeof t.attributes&&(this.ops[e-1].attributes=t.attributes),this;if("number"==typeof t.retain&&"number"==typeof n.retain)return this.ops[e-1]={retain:n.retain+t.retain},"object"==typeof t.attributes&&(this.ops[e-1].attributes=t.attributes),this}}return e===this.ops.length?this.ops.push(t):this.ops.splice(e,0,t),this},a.prototype.chop=function(){var t=this.ops[this.ops.length-1];return t&&t.retain&&!t.attributes&&this.ops.pop(),this},a.prototype.filter=function(t){return this.ops.filter(t)},a.prototype.forEach=function(t){this.ops.forEach(t)},a.prototype.map=function(t){return this.ops.map(t)},a.prototype.partition=function(t){var e=[],n=[];return this.forEach((function(r){(t(r)?e:n).push(r)})),[e,n]},a.prototype.reduce=function(t,e){return this.ops.reduce(t,e)},a.prototype.changeLength=function(){return this.reduce((function(t,e){return e.insert?t+l.length(e):e.delete?t-e.delete:t}),0)},a.prototype.length=function(){return this.reduce((function(t,e){return t+l.length(e)}),0)},a.prototype.slice=function(t,e){t=t||0,"number"!=typeof e&&(e=1/0);for(var n=[],r=l.iterator(this.ops),o=0;o<e&&r.hasNext();){var i;o<t?i=r.next(t-o):(i=r.next(e-o),n.push(i)),o+=l.length(i)}return new a(n)},a.prototype.compose=function(t){var e=l.iterator(this.ops),n=l.iterator(t.ops),r=[],i=n.peek();if(null!=i&&"number"==typeof i.retain&&null==i.attributes){for(var s=i.retain;"insert"===e.peekType()&&e.peekLength()<=s;)s-=e.peekLength(),r.push(e.next());i.retain-s>0&&n.next(i.retain-s)}for(var u=new a(r);e.hasNext()||n.hasNext();)if("insert"===n.peekType())u.push(n.next());else if("delete"===e.peekType())u.push(e.next());else{var c=Math.min(e.peekLength(),n.peekLength()),f=e.next(c),h=n.next(c);if("number"==typeof h.retain){var p={};"number"==typeof f.retain?p.retain=c:p.insert=f.insert;var d=l.attributes.compose(f.attributes,h.attributes,"number"==typeof f.retain);if(d&&(p.attributes=d),u.push(p),!n.hasNext()&&o(u.ops[u.ops.length-1],p)){var y=new a(e.rest());return u.concat(y).chop()}}else"number"==typeof h.delete&&"number"==typeof f.retain&&u.push(h)}return u.chop()},a.prototype.concat=function(t){var e=new a(this.ops.slice());return t.ops.length>0&&(e.push(t.ops[0]),e.ops=e.ops.concat(t.ops.slice(1))),e},a.prototype.diff=function(t,e){if(this.ops===t.ops)return new a;var n=[this,t].map((function(e){return e.map((function(n){if(null!=n.insert)return"string"==typeof n.insert?n.insert:s;throw new Error("diff() called "+(e===t?"on":"with")+" non-document")})).join("")})),i=new a,u=r(n[0],n[1],e),c=l.iterator(this.ops),f=l.iterator(t.ops);return u.forEach((function(t){for(var e=t[1].length;e>0;){var n=0;switch(t[0]){case r.INSERT:n=Math.min(f.peekLength(),e),i.push(f.next(n));break;case r.DELETE:n=Math.min(e,c.peekLength()),c.next(n),i.delete(n);break;case r.EQUAL:n=Math.min(c.peekLength(),f.peekLength(),e);var s=c.next(n),a=f.next(n);o(s.insert,a.insert)?i.retain(n,l.attributes.diff(s.attributes,a.attributes)):i.push(a).delete(n)}e-=n}})),i.chop()},a.prototype.eachLine=function(t,e){e=e||"\n";for(var n=l.iterator(this.ops),r=new a,o=0;n.hasNext();){if("insert"!==n.peekType())return;var i=n.peek(),s=l.length(i)-n.peekLength(),u="string"==typeof i.insert?i.insert.indexOf(e,s)-s:-1;if(u<0)r.push(n.next());else if(u>0)r.push(n.next(u));else{if(!1===t(r,n.next(1).attributes||{},o))return;o+=1,r=new a}}r.length()>0&&t(r,{},o)},a.prototype.transform=function(t,e){if(e=!!e,"number"==typeof t)return this.transformPosition(t,e);for(var n=l.iterator(this.ops),r=l.iterator(t.ops),o=new a;n.hasNext()||r.hasNext();)if("insert"!==n.peekType()||!e&&"insert"===r.peekType())if("insert"===r.peekType())o.push(r.next());else{var i=Math.min(n.peekLength(),r.peekLength()),s=n.next(i),u=r.next(i);if(s.delete)continue;u.delete?o.push(u):o.retain(i,l.attributes.transform(s.attributes,u.attributes,e))}else o.retain(l.length(n.next()));return o.chop()},a.prototype.transformPosition=function(t,e){e=!!e;for(var n=l.iterator(this.ops),r=0;n.hasNext()&&r<=t;){var o=n.peekLength(),i=n.peekType();n.next(),"delete"!==i?("insert"===i&&(r<t||!e)&&(t+=o),r+=o):t-=Math.min(o,t-r)}return t},t.exports=a},function(t,e){"use strict";var n=Object.prototype.hasOwnProperty,r=Object.prototype.toString,o=Object.defineProperty,i=Object.getOwnPropertyDescriptor,l=function(t){return"function"==typeof Array.isArray?Array.isArray(t):"[object Array]"===r.call(t)},s=function(t){if(!t||"[object Object]"!==r.call(t))return!1;var e,o=n.call(t,"constructor"),i=t.constructor&&t.constructor.prototype&&n.call(t.constructor.prototype,"isPrototypeOf");if(t.constructor&&!o&&!i)return!1;for(e in t);return void 0===e||n.call(t,e)},a=function(t,e){o&&"__proto__"===e.name?o(t,e.name,{enumerable:!0,configurable:!0,value:e.newValue,writable:!0}):t[e.name]=e.newValue},u=function(t,e){if("__proto__"===e){if(!n.call(t,e))return;if(i)return i(t,e).value}return t[e]};t.exports=function t(){var e,n,r,o,i,c,f=arguments[0],h=1,p=arguments.length,d=!1;for("boolean"==typeof f&&(d=f,f=arguments[1]||{},h=2),(null==f||"object"!=typeof f&&"function"!=typeof f)&&(f={});h<p;++h)if(null!=(e=arguments[h]))for(n in e)r=u(f,n),f!==(o=u(e,n))&&(d&&o&&(s(o)||(i=l(o)))?(i?(i=!1,c=r&&l(r)?r:[]):c=r&&s(r)?r:{},a(f,{name:n,newValue:t(d,c,o)})):void 0!==o&&a(f,{name:n,newValue:o}));return f}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.BlockEmbed=e.bubbleFormats=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0},i=f(n(3)),l=f(n(2)),s=f(n(0)),a=f(n(16)),u=f(n(6)),c=f(n(7));function f(t){return t&&t.__esModule?t:{default:t}}function h(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function p(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function d(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var y=function(t){function e(){return h(this,e),p(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return d(e,t),r(e,[{key:"attach",value:function(){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"attach",this).call(this),this.attributes=new s.default.Attributor.Store(this.domNode)}},{key:"delta",value:function(){return(new l.default).insert(this.value(),(0,i.default)(this.formats(),this.attributes.values()))}},{key:"format",value:function(t,e){var n=s.default.query(t,s.default.Scope.BLOCK_ATTRIBUTE);null!=n&&this.attributes.attribute(n,e)}},{key:"formatAt",value:function(t,e,n,r){this.format(n,r)}},{key:"insertAt",value:function(t,n,r){if("string"==typeof n&&n.endsWith("\n")){var i=s.default.create(v.blotName);this.parent.insertBefore(i,0===t?this:this.next),i.insertAt(0,n.slice(0,-1))}else o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertAt",this).call(this,t,n,r)}}]),e}(s.default.Embed);y.scope=s.default.Scope.BLOCK_BLOT;var v=function(t){function e(t){h(this,e);var n=p(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.cache={},n}return d(e,t),r(e,[{key:"delta",value:function(){return null==this.cache.delta&&(this.cache.delta=this.descendants(s.default.Leaf).reduce((function(t,e){return 0===e.length()?t:t.insert(e.value(),b(e))}),new l.default).insert("\n",b(this))),this.cache.delta}},{key:"deleteAt",value:function(t,n){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"deleteAt",this).call(this,t,n),this.cache={}}},{key:"formatAt",value:function(t,n,r,i){n<=0||(s.default.query(r,s.default.Scope.BLOCK)?t+n===this.length()&&this.format(r,i):o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"formatAt",this).call(this,t,Math.min(n,this.length()-t-1),r,i),this.cache={})}},{key:"insertAt",value:function(t,n,r){if(null!=r)return o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertAt",this).call(this,t,n,r);if(0!==n.length){var i=n.split("\n"),l=i.shift();l.length>0&&(t<this.length()-1||null==this.children.tail?o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertAt",this).call(this,Math.min(t,this.length()-1),l):this.children.tail.insertAt(this.children.tail.length(),l),this.cache={});var s=this;i.reduce((function(t,e){return(s=s.split(t,!0)).insertAt(0,e),e.length}),t+l.length)}}},{key:"insertBefore",value:function(t,n){var r=this.children.head;o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertBefore",this).call(this,t,n),r instanceof a.default&&r.remove(),this.cache={}}},{key:"length",value:function(){return null==this.cache.length&&(this.cache.length=o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"length",this).call(this)+1),this.cache.length}},{key:"moveChildren",value:function(t,n){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"moveChildren",this).call(this,t,n),this.cache={}}},{key:"optimize",value:function(t){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"optimize",this).call(this,t),this.cache={}}},{key:"path",value:function(t){return o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"path",this).call(this,t,!0)}},{key:"removeChild",value:function(t){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"removeChild",this).call(this,t),this.cache={}}},{key:"split",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(n&&(0===t||t>=this.length()-1)){var r=this.clone();return 0===t?(this.parent.insertBefore(r,this),this):(this.parent.insertBefore(r,this.next),r)}var i=o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"split",this).call(this,t,n);return this.cache={},i}}]),e}(s.default.Block);function b(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return null==t?e:("function"==typeof t.formats&&(e=(0,i.default)(e,t.formats())),null==t.parent||"scroll"==t.parent.blotName||t.parent.statics.scope!==t.statics.scope?e:b(t.parent,e))}v.blotName="block",v.tagName="P",v.defaultChild="break",v.allowedChildren=[u.default,s.default.Embed,c.default],e.bubbleFormats=b,e.BlockEmbed=y,e.default=v},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.overload=e.expandConfig=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var l,s=t[Symbol.iterator]();!(r=(l=s.next()).done)&&(n.push(l.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")},i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();n(50);var l=v(n(2)),s=v(n(14)),a=v(n(8)),u=v(n(9)),c=v(n(0)),f=n(15),h=v(f),p=v(n(3)),d=v(n(10)),y=v(n(34));function v(t){return t&&t.__esModule?t:{default:t}}function b(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function g(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var m=(0,d.default)("quill"),x=function(){function t(e){var n=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(g(this,t),this.options=_(e,r),this.container=this.options.container,null==this.container)return m.error("Invalid Quill container",e);this.options.debug&&t.debug(this.options.debug);var o=this.container.innerHTML.trim();this.container.classList.add("ql-container"),this.container.innerHTML="",this.container.__quill=this,this.root=this.addContainer("ql-editor"),this.root.classList.add("ql-blank"),this.root.setAttribute("data-gramm",!1),this.scrollingContainer=this.options.scrollingContainer||this.root,this.emitter=new a.default,this.scroll=c.default.create(this.root,{emitter:this.emitter,whitelist:this.options.formats}),this.editor=new s.default(this.scroll),this.selection=new h.default(this.scroll,this.emitter),this.theme=new this.options.theme(this,this.options),this.keyboard=this.theme.addModule("keyboard"),this.clipboard=this.theme.addModule("clipboard"),this.history=this.theme.addModule("history"),this.theme.init(),this.emitter.on(a.default.events.EDITOR_CHANGE,(function(t){t===a.default.events.TEXT_CHANGE&&n.root.classList.toggle("ql-blank",n.editor.isBlank())})),this.emitter.on(a.default.events.SCROLL_UPDATE,(function(t,e){var r=n.selection.lastRange,o=r&&0===r.length?r.index:void 0;O.call(n,(function(){return n.editor.update(null,e,o)}),t)}));var i=this.clipboard.convert("<div class='ql-editor' style=\"white-space: normal;\">"+o+"<p><br></p></div>");this.setContents(i),this.history.clear(),this.options.placeholder&&this.root.setAttribute("data-placeholder",this.options.placeholder),this.options.readOnly&&this.disable()}return i(t,null,[{key:"debug",value:function(t){!0===t&&(t="log"),d.default.level(t)}},{key:"find",value:function(t){return t.__quill||c.default.find(t)}},{key:"import",value:function(t){return null==this.imports[t]&&m.error("Cannot import "+t+". Are you sure it was registered?"),this.imports[t]}},{key:"register",value:function(t,e){var n=this,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if("string"!=typeof t){var o=t.attrName||t.blotName;"string"==typeof o?this.register("formats/"+o,t,e):Object.keys(t).forEach((function(r){n.register(r,t[r],e)}))}else null==this.imports[t]||r||m.warn("Overwriting "+t+" with",e),this.imports[t]=e,(t.startsWith("blots/")||t.startsWith("formats/"))&&"abstract"!==e.blotName?c.default.register(e):t.startsWith("modules")&&"function"==typeof e.register&&e.register()}}]),i(t,[{key:"addContainer",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if("string"==typeof t){var n=t;(t=document.createElement("div")).classList.add(n)}return this.container.insertBefore(t,e),t}},{key:"blur",value:function(){this.selection.setRange(null)}},{key:"deleteText",value:function(t,e,n){var r=this,i=E(t,e,n),l=o(i,4);return t=l[0],e=l[1],n=l[3],O.call(this,(function(){return r.editor.deleteText(t,e)}),n,t,-1*e)}},{key:"disable",value:function(){this.enable(!1)}},{key:"enable",value:function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];this.scroll.enable(t),this.container.classList.toggle("ql-disabled",!t)}},{key:"focus",value:function(){var t=this.scrollingContainer.scrollTop;this.selection.focus(),this.scrollingContainer.scrollTop=t,this.scrollIntoView()}},{key:"format",value:function(t,e){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a.default.sources.API;return O.call(this,(function(){var r=n.getSelection(!0),o=new l.default;if(null==r)return o;if(c.default.query(t,c.default.Scope.BLOCK))o=n.editor.formatLine(r.index,r.length,b({},t,e));else{if(0===r.length)return n.selection.format(t,e),o;o=n.editor.formatText(r.index,r.length,b({},t,e))}return n.setSelection(r,a.default.sources.SILENT),o}),r)}},{key:"formatLine",value:function(t,e,n,r,i){var l,s=this,a=E(t,e,n,r,i),u=o(a,4);return t=u[0],e=u[1],l=u[2],i=u[3],O.call(this,(function(){return s.editor.formatLine(t,e,l)}),i,t,0)}},{key:"formatText",value:function(t,e,n,r,i){var l,s=this,a=E(t,e,n,r,i),u=o(a,4);return t=u[0],e=u[1],l=u[2],i=u[3],O.call(this,(function(){return s.editor.formatText(t,e,l)}),i,t,0)}},{key:"getBounds",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=void 0;n="number"==typeof t?this.selection.getBounds(t,e):this.selection.getBounds(t.index,t.length);var r=this.container.getBoundingClientRect();return{bottom:n.bottom-r.top,height:n.height,left:n.left-r.left,right:n.right-r.left,top:n.top-r.top,width:n.width}}},{key:"getContents",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.getLength()-t,n=E(t,e),r=o(n,2);return t=r[0],e=r[1],this.editor.getContents(t,e)}},{key:"getFormat",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.getSelection(!0),e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return"number"==typeof t?this.editor.getFormat(t,e):this.editor.getFormat(t.index,t.length)}},{key:"getIndex",value:function(t){return t.offset(this.scroll)}},{key:"getLength",value:function(){return this.scroll.length()}},{key:"getLeaf",value:function(t){return this.scroll.leaf(t)}},{key:"getLine",value:function(t){return this.scroll.line(t)}},{key:"getLines",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Number.MAX_VALUE;return"number"!=typeof t?this.scroll.lines(t.index,t.length):this.scroll.lines(t,e)}},{key:"getModule",value:function(t){return this.theme.modules[t]}},{key:"getSelection",value:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return t&&this.focus(),this.update(),this.selection.getRange()[0]}},{key:"getText",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.getLength()-t,n=E(t,e),r=o(n,2);return t=r[0],e=r[1],this.editor.getText(t,e)}},{key:"hasFocus",value:function(){return this.selection.hasFocus()}},{key:"insertEmbed",value:function(e,n,r){var o=this,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t.sources.API;return O.call(this,(function(){return o.editor.insertEmbed(e,n,r)}),i,e)}},{key:"insertText",value:function(t,e,n,r,i){var l,s=this,a=E(t,0,n,r,i),u=o(a,4);return t=u[0],l=u[2],i=u[3],O.call(this,(function(){return s.editor.insertText(t,e,l)}),i,t,e.length)}},{key:"isEnabled",value:function(){return!this.container.classList.contains("ql-disabled")}},{key:"off",value:function(){return this.emitter.off.apply(this.emitter,arguments)}},{key:"on",value:function(){return this.emitter.on.apply(this.emitter,arguments)}},{key:"once",value:function(){return this.emitter.once.apply(this.emitter,arguments)}},{key:"pasteHTML",value:function(t,e,n){this.clipboard.dangerouslyPasteHTML(t,e,n)}},{key:"removeFormat",value:function(t,e,n){var r=this,i=E(t,e,n),l=o(i,4);return t=l[0],e=l[1],n=l[3],O.call(this,(function(){return r.editor.removeFormat(t,e)}),n,t)}},{key:"scrollIntoView",value:function(){this.selection.scrollIntoView(this.scrollingContainer)}},{key:"setContents",value:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a.default.sources.API;return O.call(this,(function(){t=new l.default(t);var n=e.getLength(),r=e.editor.deleteText(0,n),o=e.editor.applyDelta(t),i=o.ops[o.ops.length-1];return null!=i&&"string"==typeof i.insert&&"\n"===i.insert[i.insert.length-1]&&(e.editor.deleteText(e.getLength()-1,1),o.delete(1)),r.compose(o)}),n)}},{key:"setSelection",value:function(e,n,r){if(null==e)this.selection.setRange(null,n||t.sources.API);else{var i=E(e,n,r),l=o(i,4);e=l[0],n=l[1],r=l[3],this.selection.setRange(new f.Range(e,n),r),r!==a.default.sources.SILENT&&this.selection.scrollIntoView(this.scrollingContainer)}}},{key:"setText",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a.default.sources.API,n=(new l.default).insert(t);return this.setContents(n,e)}},{key:"update",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:a.default.sources.USER,e=this.scroll.update(t);return this.selection.update(t),e}},{key:"updateContents",value:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a.default.sources.API;return O.call(this,(function(){return t=new l.default(t),e.editor.applyDelta(t,n)}),n,!0)}}]),t}();function _(t,e){if((e=(0,p.default)(!0,{container:t,modules:{clipboard:!0,keyboard:!0,history:!0}},e)).theme&&e.theme!==x.DEFAULTS.theme){if(e.theme=x.import("themes/"+e.theme),null==e.theme)throw new Error("Invalid theme "+e.theme+". Did you register it?")}else e.theme=y.default;var n=(0,p.default)(!0,{},e.theme.DEFAULTS);[n,e].forEach((function(t){t.modules=t.modules||{},Object.keys(t.modules).forEach((function(e){!0===t.modules[e]&&(t.modules[e]={})}))}));var r=Object.keys(n.modules).concat(Object.keys(e.modules)).reduce((function(t,e){var n=x.import("modules/"+e);return null==n?m.error("Cannot load "+e+" module. Are you sure you registered it?"):t[e]=n.DEFAULTS||{},t}),{});return null!=e.modules&&e.modules.toolbar&&e.modules.toolbar.constructor!==Object&&(e.modules.toolbar={container:e.modules.toolbar}),e=(0,p.default)(!0,{},x.DEFAULTS,{modules:r},n,e),["bounds","container","scrollingContainer"].forEach((function(t){"string"==typeof e[t]&&(e[t]=document.querySelector(e[t]))})),e.modules=Object.keys(e.modules).reduce((function(t,n){return e.modules[n]&&(t[n]=e.modules[n]),t}),{}),e}function O(t,e,n,r){if(this.options.strict&&!this.isEnabled()&&e===a.default.sources.USER)return new l.default;var o=null==n?null:this.getSelection(),i=this.editor.delta,s=t();if(null!=o&&(!0===n&&(n=o.index),null==r?o=w(o,s,e):0!==r&&(o=w(o,n,r,e)),this.setSelection(o,a.default.sources.SILENT)),s.length()>0){var u,c,f=[a.default.events.TEXT_CHANGE,s,i,e];(u=this.emitter).emit.apply(u,[a.default.events.EDITOR_CHANGE].concat(f)),e!==a.default.sources.SILENT&&(c=this.emitter).emit.apply(c,f)}return s}function E(t,e,n,o,i){var l={};return"number"==typeof t.index&&"number"==typeof t.length?"number"!=typeof e?(i=o,o=n,n=e,e=t.length,t=t.index):(e=t.length,t=t.index):"number"!=typeof e&&(i=o,o=n,n=e,e=0),"object"===(void 0===n?"undefined":r(n))?(l=n,i=o):"string"==typeof n&&(null!=o?l[n]=o:i=n),[t,e,l,i=i||a.default.sources.API]}function w(t,e,n,r){if(null==t)return null;var i=void 0,s=void 0;if(e instanceof l.default){var u=[t.index,t.index+t.length].map((function(t){return e.transformPosition(t,r!==a.default.sources.USER)})),c=o(u,2);i=c[0],s=c[1]}else{var h=[t.index,t.index+t.length].map((function(t){return t<e||t===e&&r===a.default.sources.USER?t:n>=0?t+n:Math.max(e,t+n)})),p=o(h,2);i=p[0],s=p[1]}return new f.Range(i,s-i)}x.DEFAULTS={bounds:null,formats:null,modules:{},placeholder:"",readOnly:!1,scrollingContainer:null,strict:!0,theme:"default"},x.events=a.default.events,x.sources=a.default.sources,x.version="1.3.7",x.imports={delta:l.default,parchment:c.default,"core/module":u.default,"core/theme":y.default},e.expandConfig=_,e.overload=E,e.default=x},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0},i=s(n(7)),l=s(n(0));function s(t){return t&&t.__esModule?t:{default:t}}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function u(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var c=function(t){function e(){return a(this,e),u(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),r(e,[{key:"formatAt",value:function(t,n,r,i){if(e.compare(this.statics.blotName,r)<0&&l.default.query(r,l.default.Scope.BLOT)){var s=this.isolate(t,n);i&&s.wrap(r,i)}else o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"formatAt",this).call(this,t,n,r,i)}},{key:"optimize",value:function(t){if(o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"optimize",this).call(this,t),this.parent instanceof e&&e.compare(this.statics.blotName,this.parent.statics.blotName)>0){var n=this.parent.isolate(this.offset(),this.length());this.moveChildren(n),n.wrap(this)}}}],[{key:"compare",value:function(t,n){var r=e.order.indexOf(t),o=e.order.indexOf(n);return r>=0||o>=0?r-o:t===n?0:t<n?-1:1}}]),e}(l.default.Inline);c.allowedChildren=[c,l.default.Embed,i.default],c.order=["cursor","inline","underline","strike","italic","bold","script","link","code"],e.default=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(0);function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var s=function(t){function e(){return i(this,e),l(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e}(((r=o)&&r.__esModule?r:{default:r}).default.Text);e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0},i=l(n(54));function l(t){return t&&t.__esModule?t:{default:t}}var s=(0,l(n(10)).default)("quill:events");["selectionchange","mousedown","mouseup","click"].forEach((function(t){document.addEventListener(t,(function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];[].slice.call(document.querySelectorAll(".ql-container")).forEach((function(t){var n;t.__quill&&t.__quill.emitter&&(n=t.__quill.emitter).handleDOM.apply(n,e)}))}))}));var a=function(t){function e(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var t=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return t.listeners={},t.on("error",s.error),t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),r(e,[{key:"emit",value:function(){s.log.apply(s,arguments),o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"emit",this).apply(this,arguments)}},{key:"handleDOM",value:function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];(this.listeners[t.type]||[]).forEach((function(e){var r=e.node,o=e.handler;(t.target===r||r.contains(t.target))&&o.apply(void 0,[t].concat(n))}))}},{key:"listenDOM",value:function(t,e,n){this.listeners[t]||(this.listeners[t]=[]),this.listeners[t].push({node:e,handler:n})}}]),e}(i.default);a.events={EDITOR_CHANGE:"editor-change",SCROLL_BEFORE_UPDATE:"scroll-before-update",SCROLL_OPTIMIZE:"scroll-optimize",SCROLL_UPDATE:"scroll-update",SELECTION_CHANGE:"selection-change",TEXT_CHANGE:"text-change"},a.sources={API:"api",SILENT:"silent",USER:"user"},e.default=a},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};r(this,t),this.quill=e,this.options=n};o.DEFAULTS={},e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=["error","warn","log","info"],o="warn";function i(t){if(r.indexOf(t)<=r.indexOf(o)){for(var e,n=arguments.length,i=Array(n>1?n-1:0),l=1;l<n;l++)i[l-1]=arguments[l];(e=console)[t].apply(e,i)}}function l(t){return r.reduce((function(e,n){return e[n]=i.bind(console,n,t),e}),{})}i.level=l.level=function(t){o=t},e.default=l},function(t,e,n){var r=Array.prototype.slice,o=n(52),i=n(53),l=t.exports=function(t,e,n){return n||(n={}),t===e||(t instanceof Date&&e instanceof Date?t.getTime()===e.getTime():!t||!e||"object"!=typeof t&&"object"!=typeof e?n.strict?t===e:t==e:function(t,e,n){var u,c;if(s(t)||s(e))return!1;if(t.prototype!==e.prototype)return!1;if(i(t))return!!i(e)&&(t=r.call(t),e=r.call(e),l(t,e,n));if(a(t)){if(!a(e))return!1;if(t.length!==e.length)return!1;for(u=0;u<t.length;u++)if(t[u]!==e[u])return!1;return!0}try{var f=o(t),h=o(e)}catch(t){return!1}if(f.length!=h.length)return!1;for(f.sort(),h.sort(),u=f.length-1;u>=0;u--)if(f[u]!=h[u])return!1;for(u=f.length-1;u>=0;u--)if(c=f[u],!l(t[c],e[c],n))return!1;return typeof t==typeof e}(t,e,n))};function s(t){return null==t}function a(t){return!(!t||"object"!=typeof t||"number"!=typeof t.length||"function"!=typeof t.copy||"function"!=typeof t.slice||t.length>0&&"number"!=typeof t[0])}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1),o=function(){function t(t,e,n){void 0===n&&(n={}),this.attrName=t,this.keyName=e;var o=r.Scope.TYPE&r.Scope.ATTRIBUTE;null!=n.scope?this.scope=n.scope&r.Scope.LEVEL|o:this.scope=r.Scope.ATTRIBUTE,null!=n.whitelist&&(this.whitelist=n.whitelist)}return t.keys=function(t){return[].map.call(t.attributes,(function(t){return t.name}))},t.prototype.add=function(t,e){return!!this.canAdd(t,e)&&(t.setAttribute(this.keyName,e),!0)},t.prototype.canAdd=function(t,e){return null!=r.query(t,r.Scope.BLOT&(this.scope|r.Scope.TYPE))&&(null==this.whitelist||("string"==typeof e?this.whitelist.indexOf(e.replace(/["']/g,""))>-1:this.whitelist.indexOf(e)>-1))},t.prototype.remove=function(t){t.removeAttribute(this.keyName)},t.prototype.value=function(t){var e=t.getAttribute(this.keyName);return this.canAdd(t,e)&&e?e:""},t}();e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.Code=void 0;var r=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var l,s=t[Symbol.iterator]();!(r=(l=s.next()).done)&&(n.push(l.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")},o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0},l=f(n(2)),s=f(n(0)),a=f(n(4)),u=f(n(6)),c=f(n(7));function f(t){return t&&t.__esModule?t:{default:t}}function h(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function p(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function d(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var y=function(t){function e(){return h(this,e),p(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return d(e,t),e}(u.default);y.blotName="code",y.tagName="CODE";var v=function(t){function e(){return h(this,e),p(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return d(e,t),o(e,[{key:"delta",value:function(){var t=this,e=this.domNode.textContent;return e.endsWith("\n")&&(e=e.slice(0,-1)),e.split("\n").reduce((function(e,n){return e.insert(n).insert("\n",t.formats())}),new l.default)}},{key:"format",value:function(t,n){if(t!==this.statics.blotName||!n){var o=this.descendant(c.default,this.length()-1),l=r(o,1)[0];null!=l&&l.deleteAt(l.length()-1,1),i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"format",this).call(this,t,n)}}},{key:"formatAt",value:function(t,n,r,o){if(0!==n&&null!=s.default.query(r,s.default.Scope.BLOCK)&&(r!==this.statics.blotName||o!==this.statics.formats(this.domNode))){var i=this.newlineIndex(t);if(!(i<0||i>=t+n)){var l=this.newlineIndex(t,!0)+1,a=i-l+1,u=this.isolate(l,a),c=u.next;u.format(r,o),c instanceof e&&c.formatAt(0,t-l+n-a,r,o)}}}},{key:"insertAt",value:function(t,e,n){if(null==n){var o=this.descendant(c.default,t),i=r(o,2),l=i[0],s=i[1];l.insertAt(s,e)}}},{key:"length",value:function(){var t=this.domNode.textContent.length;return this.domNode.textContent.endsWith("\n")?t:t+1}},{key:"newlineIndex",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(e)return this.domNode.textContent.slice(0,t).lastIndexOf("\n");var n=this.domNode.textContent.slice(t).indexOf("\n");return n>-1?t+n:-1}},{key:"optimize",value:function(t){this.domNode.textContent.endsWith("\n")||this.appendChild(s.default.create("text","\n")),i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"optimize",this).call(this,t);var n=this.next;null!=n&&n.prev===this&&n.statics.blotName===this.statics.blotName&&this.statics.formats(this.domNode)===n.statics.formats(n.domNode)&&(n.optimize(t),n.moveChildren(this),n.remove())}},{key:"replace",value:function(t){i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"replace",this).call(this,t),[].slice.call(this.domNode.querySelectorAll("*")).forEach((function(t){var e=s.default.find(t);null==e?t.parentNode.removeChild(t):e instanceof s.default.Embed?e.remove():e.unwrap()}))}}],[{key:"create",value:function(t){var n=i(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this,t);return n.setAttribute("spellcheck",!1),n}},{key:"formats",value:function(){return!0}}]),e}(a.default);v.blotName="code-block",v.tagName="PRE",v.TAB="  ",e.Code=y,e.default=v},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var l,s=t[Symbol.iterator]();!(r=(l=s.next()).done)&&(n.push(l.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")},i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),l=b(n(2)),s=b(n(20)),a=b(n(0)),u=b(n(13)),c=b(n(24)),f=n(4),h=b(f),p=b(n(16)),d=b(n(21)),y=b(n(11)),v=b(n(3));function b(t){return t&&t.__esModule?t:{default:t}}var g=/^[ -~]*$/,m=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.scroll=e,this.delta=this.getDelta()}return i(t,[{key:"applyDelta",value:function(t){var e=this,n=!1;this.scroll.update();var i=this.scroll.length();return this.scroll.batchStart(),(t=function(t){return t.reduce((function(t,e){if(1===e.insert){var n=(0,d.default)(e.attributes);return delete n.image,t.insert({image:e.attributes.image},n)}if(null==e.attributes||!0!==e.attributes.list&&!0!==e.attributes.bullet||((e=(0,d.default)(e)).attributes.list?e.attributes.list="ordered":(e.attributes.list="bullet",delete e.attributes.bullet)),"string"==typeof e.insert){var r=e.insert.replace(/\r\n/g,"\n").replace(/\r/g,"\n");return t.insert(r,e.attributes)}return t.push(e)}),new l.default)}(t)).reduce((function(t,l){var u=l.retain||l.delete||l.insert.length||1,c=l.attributes||{};if(null!=l.insert){if("string"==typeof l.insert){var p=l.insert;p.endsWith("\n")&&n&&(n=!1,p=p.slice(0,-1)),t>=i&&!p.endsWith("\n")&&(n=!0),e.scroll.insertAt(t,p);var d=e.scroll.line(t),y=o(d,2),b=y[0],g=y[1],m=(0,v.default)({},(0,f.bubbleFormats)(b));if(b instanceof h.default){var x=b.descendant(a.default.Leaf,g),_=o(x,1)[0];m=(0,v.default)(m,(0,f.bubbleFormats)(_))}c=s.default.attributes.diff(m,c)||{}}else if("object"===r(l.insert)){var O=Object.keys(l.insert)[0];if(null==O)return t;e.scroll.insertAt(t,O,l.insert[O])}i+=u}return Object.keys(c).forEach((function(n){e.scroll.formatAt(t,u,n,c[n])})),t+u}),0),t.reduce((function(t,n){return"number"==typeof n.delete?(e.scroll.deleteAt(t,n.delete),t):t+(n.retain||n.insert.length||1)}),0),this.scroll.batchEnd(),this.update(t)}},{key:"deleteText",value:function(t,e){return this.scroll.deleteAt(t,e),this.update((new l.default).retain(t).delete(e))}},{key:"formatLine",value:function(t,e){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.scroll.update(),Object.keys(r).forEach((function(o){if(null==n.scroll.whitelist||n.scroll.whitelist[o]){var i=n.scroll.lines(t,Math.max(e,1)),l=e;i.forEach((function(e){var i=e.length();if(e instanceof u.default){var s=t-e.offset(n.scroll),a=e.newlineIndex(s+l)-s+1;e.formatAt(s,a,o,r[o])}else e.format(o,r[o]);l-=i}))}})),this.scroll.optimize(),this.update((new l.default).retain(t).retain(e,(0,d.default)(r)))}},{key:"formatText",value:function(t,e){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return Object.keys(r).forEach((function(o){n.scroll.formatAt(t,e,o,r[o])})),this.update((new l.default).retain(t).retain(e,(0,d.default)(r)))}},{key:"getContents",value:function(t,e){return this.delta.slice(t,t+e)}},{key:"getDelta",value:function(){return this.scroll.lines().reduce((function(t,e){return t.concat(e.delta())}),new l.default)}},{key:"getFormat",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=[],r=[];0===e?this.scroll.path(t).forEach((function(t){var e=o(t,1)[0];e instanceof h.default?n.push(e):e instanceof a.default.Leaf&&r.push(e)})):(n=this.scroll.lines(t,e),r=this.scroll.descendants(a.default.Leaf,t,e));var i=[n,r].map((function(t){if(0===t.length)return{};for(var e=(0,f.bubbleFormats)(t.shift());Object.keys(e).length>0;){var n=t.shift();if(null==n)return e;e=x((0,f.bubbleFormats)(n),e)}return e}));return v.default.apply(v.default,i)}},{key:"getText",value:function(t,e){return this.getContents(t,e).filter((function(t){return"string"==typeof t.insert})).map((function(t){return t.insert})).join("")}},{key:"insertEmbed",value:function(t,e,n){return this.scroll.insertAt(t,e,n),this.update((new l.default).retain(t).insert(function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}({},e,n)))}},{key:"insertText",value:function(t,e){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return e=e.replace(/\r\n/g,"\n").replace(/\r/g,"\n"),this.scroll.insertAt(t,e),Object.keys(r).forEach((function(o){n.scroll.formatAt(t,e.length,o,r[o])})),this.update((new l.default).retain(t).insert(e,(0,d.default)(r)))}},{key:"isBlank",value:function(){if(0==this.scroll.children.length)return!0;if(this.scroll.children.length>1)return!1;var t=this.scroll.children.head;return t.statics.blotName===h.default.blotName&&!(t.children.length>1)&&t.children.head instanceof p.default}},{key:"removeFormat",value:function(t,e){var n=this.getText(t,e),r=this.scroll.line(t+e),i=o(r,2),s=i[0],a=i[1],c=0,f=new l.default;null!=s&&(c=s instanceof u.default?s.newlineIndex(a)-a+1:s.length()-a,f=s.delta().slice(a,a+c-1).insert("\n"));var h=this.getContents(t,e+c).diff((new l.default).insert(n).concat(f)),p=(new l.default).retain(t).concat(h);return this.applyDelta(p)}},{key:"update",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,r=this.delta;if(1===e.length&&"characterData"===e[0].type&&e[0].target.data.match(g)&&a.default.find(e[0].target)){var o=a.default.find(e[0].target),i=(0,f.bubbleFormats)(o),s=o.offset(this.scroll),u=e[0].oldValue.replace(c.default.CONTENTS,""),h=(new l.default).insert(u),p=(new l.default).insert(o.value()),d=(new l.default).retain(s).concat(h.diff(p,n));t=d.reduce((function(t,e){return e.insert?t.insert(e.insert,i):t.push(e)}),new l.default),this.delta=r.compose(t)}else this.delta=this.getDelta(),t&&(0,y.default)(r.compose(t),this.delta)||(t=r.diff(this.delta,n));return t}}]),t}();function x(t,e){return Object.keys(e).reduce((function(n,r){return null==t[r]||(e[r]===t[r]?n[r]=e[r]:Array.isArray(e[r])?e[r].indexOf(t[r])<0&&(n[r]=e[r].concat([t[r]])):n[r]=[e[r],t[r]]),n}),{})}e.default=m},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.Range=void 0;var r=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var l,s=t[Symbol.iterator]();!(r=(l=s.next()).done)&&(n.push(l.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")},o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=u(n(0)),l=u(n(21)),s=u(n(11)),a=u(n(8));function u(t){return t&&t.__esModule?t:{default:t}}function c(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}function f(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var h=(0,u(n(10)).default)("quill:selection"),p=function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;f(this,t),this.index=e,this.length=n},d=function(){function t(e,n){var r=this;f(this,t),this.emitter=n,this.scroll=e,this.composing=!1,this.mouseDown=!1,this.root=this.scroll.domNode,this.cursor=i.default.create("cursor",this),this.lastRange=this.savedRange=new p(0,0),this.handleComposition(),this.handleDragging(),this.emitter.listenDOM("selectionchange",document,(function(){r.mouseDown||setTimeout(r.update.bind(r,a.default.sources.USER),1)})),this.emitter.on(a.default.events.EDITOR_CHANGE,(function(t,e){t===a.default.events.TEXT_CHANGE&&e.length()>0&&r.update(a.default.sources.SILENT)})),this.emitter.on(a.default.events.SCROLL_BEFORE_UPDATE,(function(){if(r.hasFocus()){var t=r.getNativeRange();null!=t&&t.start.node!==r.cursor.textNode&&r.emitter.once(a.default.events.SCROLL_UPDATE,(function(){try{r.setNativeRange(t.start.node,t.start.offset,t.end.node,t.end.offset)}catch(t){}}))}})),this.emitter.on(a.default.events.SCROLL_OPTIMIZE,(function(t,e){if(e.range){var n=e.range,o=n.startNode,i=n.startOffset,l=n.endNode,s=n.endOffset;r.setNativeRange(o,i,l,s)}})),this.update(a.default.sources.SILENT)}return o(t,[{key:"handleComposition",value:function(){var t=this;this.root.addEventListener("compositionstart",(function(){t.composing=!0})),this.root.addEventListener("compositionend",(function(){if(t.composing=!1,t.cursor.parent){var e=t.cursor.restore();if(!e)return;setTimeout((function(){t.setNativeRange(e.startNode,e.startOffset,e.endNode,e.endOffset)}),1)}}))}},{key:"handleDragging",value:function(){var t=this;this.emitter.listenDOM("mousedown",document.body,(function(){t.mouseDown=!0})),this.emitter.listenDOM("mouseup",document.body,(function(){t.mouseDown=!1,t.update(a.default.sources.USER)}))}},{key:"focus",value:function(){this.hasFocus()||(this.root.focus(),this.setRange(this.savedRange))}},{key:"format",value:function(t,e){if(null==this.scroll.whitelist||this.scroll.whitelist[t]){this.scroll.update();var n=this.getNativeRange();if(null!=n&&n.native.collapsed&&!i.default.query(t,i.default.Scope.BLOCK)){if(n.start.node!==this.cursor.textNode){var r=i.default.find(n.start.node,!1);if(null==r)return;if(r instanceof i.default.Leaf){var o=r.split(n.start.offset);r.parent.insertBefore(this.cursor,o)}else r.insertBefore(this.cursor,n.start.node);this.cursor.attach()}this.cursor.format(t,e),this.scroll.optimize(),this.setNativeRange(this.cursor.textNode,this.cursor.textNode.data.length),this.update()}}}},{key:"getBounds",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=this.scroll.length();t=Math.min(t,n-1),e=Math.min(t+e,n-1)-t;var o=void 0,i=this.scroll.leaf(t),l=r(i,2),s=l[0],a=l[1];if(null==s)return null;var u=s.position(a,!0),c=r(u,2);o=c[0],a=c[1];var f=document.createRange();if(e>0){f.setStart(o,a);var h=this.scroll.leaf(t+e),p=r(h,2);if(s=p[0],a=p[1],null==s)return null;var d=s.position(a,!0),y=r(d,2);return o=y[0],a=y[1],f.setEnd(o,a),f.getBoundingClientRect()}var v="left",b=void 0;return o instanceof Text?(a<o.data.length?(f.setStart(o,a),f.setEnd(o,a+1)):(f.setStart(o,a-1),f.setEnd(o,a),v="right"),b=f.getBoundingClientRect()):(b=s.domNode.getBoundingClientRect(),a>0&&(v="right")),{bottom:b.top+b.height,height:b.height,left:b[v],right:b[v],top:b.top,width:0}}},{key:"getNativeRange",value:function(){var t=document.getSelection();if(null==t||t.rangeCount<=0)return null;var e=t.getRangeAt(0);if(null==e)return null;var n=this.normalizeNative(e);return h.info("getNativeRange",n),n}},{key:"getRange",value:function(){var t=this.getNativeRange();return null==t?[null,null]:[this.normalizedToRange(t),t]}},{key:"hasFocus",value:function(){return document.activeElement===this.root}},{key:"normalizedToRange",value:function(t){var e=this,n=[[t.start.node,t.start.offset]];t.native.collapsed||n.push([t.end.node,t.end.offset]);var o=n.map((function(t){var n=r(t,2),o=n[0],l=n[1],s=i.default.find(o,!0),a=s.offset(e.scroll);return 0===l?a:s instanceof i.default.Container?a+s.length():a+s.index(o,l)})),l=Math.min(Math.max.apply(Math,c(o)),this.scroll.length()-1),s=Math.min.apply(Math,[l].concat(c(o)));return new p(s,l-s)}},{key:"normalizeNative",value:function(t){if(!y(this.root,t.startContainer)||!t.collapsed&&!y(this.root,t.endContainer))return null;var e={start:{node:t.startContainer,offset:t.startOffset},end:{node:t.endContainer,offset:t.endOffset},native:t};return[e.start,e.end].forEach((function(t){for(var e=t.node,n=t.offset;!(e instanceof Text)&&e.childNodes.length>0;)if(e.childNodes.length>n)e=e.childNodes[n],n=0;else{if(e.childNodes.length!==n)break;n=(e=e.lastChild)instanceof Text?e.data.length:e.childNodes.length+1}t.node=e,t.offset=n})),e}},{key:"rangeToNative",value:function(t){var e=this,n=t.collapsed?[t.index]:[t.index,t.index+t.length],o=[],i=this.scroll.length();return n.forEach((function(t,n){t=Math.min(i-1,t);var l,s=e.scroll.leaf(t),a=r(s,2),u=a[0],c=a[1],f=u.position(c,0!==n),h=r(f,2);l=h[0],c=h[1],o.push(l,c)})),o.length<2&&(o=o.concat(o)),o}},{key:"scrollIntoView",value:function(t){var e=this.lastRange;if(null!=e){var n=this.getBounds(e.index,e.length);if(null!=n){var o=this.scroll.length()-1,i=this.scroll.line(Math.min(e.index,o)),l=r(i,1)[0],s=l;if(e.length>0){var a=this.scroll.line(Math.min(e.index+e.length,o));s=r(a,1)[0]}if(null!=l&&null!=s){var u=t.getBoundingClientRect();n.top<u.top?t.scrollTop-=u.top-n.top:n.bottom>u.bottom&&(t.scrollTop+=n.bottom-u.bottom)}}}}},{key:"setNativeRange",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:e,o=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(h.info("setNativeRange",t,e,n,r),null==t||null!=this.root.parentNode&&null!=t.parentNode&&null!=n.parentNode){var i=document.getSelection();if(null!=i)if(null!=t){this.hasFocus()||this.root.focus();var l=(this.getNativeRange()||{}).native;if(null==l||o||t!==l.startContainer||e!==l.startOffset||n!==l.endContainer||r!==l.endOffset){"BR"==t.tagName&&(e=[].indexOf.call(t.parentNode.childNodes,t),t=t.parentNode),"BR"==n.tagName&&(r=[].indexOf.call(n.parentNode.childNodes,n),n=n.parentNode);var s=document.createRange();s.setStart(t,e),s.setEnd(n,r),i.removeAllRanges(),i.addRange(s)}}else i.removeAllRanges(),this.root.blur(),document.body.focus()}}},{key:"setRange",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a.default.sources.API;if("string"==typeof e&&(n=e,e=!1),h.info("setRange",t),null!=t){var r=this.rangeToNative(t);this.setNativeRange.apply(this,c(r).concat([e]))}else this.setNativeRange(null);this.update(n)}},{key:"update",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:a.default.sources.USER,e=this.lastRange,n=this.getRange(),o=r(n,2),i=o[0],u=o[1];if(this.lastRange=i,null!=this.lastRange&&(this.savedRange=this.lastRange),!(0,s.default)(e,this.lastRange)){var c;!this.composing&&null!=u&&u.native.collapsed&&u.start.node!==this.cursor.textNode&&this.cursor.restore();var f,h=[a.default.events.SELECTION_CHANGE,(0,l.default)(this.lastRange),(0,l.default)(e),t];(c=this.emitter).emit.apply(c,[a.default.events.EDITOR_CHANGE].concat(h)),t!==a.default.sources.SILENT&&(f=this.emitter).emit.apply(f,h)}}}]),t}();function y(t,e){try{e.parentNode}catch(t){return!1}return e instanceof Text&&(e=e.parentNode),t.contains(e)}e.Range=p,e.default=d},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(0);function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var a=function(t){function e(){return l(this,e),s(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),o(e,[{key:"insertInto",value:function(t,n){0===t.children.length?function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertInto",this).call(this,t,n):this.remove()}},{key:"length",value:function(){return 0}},{key:"value",value:function(){return""}}],[{key:"value",value:function(){}}]),e}(((r=i)&&r.__esModule?r:{default:r}).default.Embed);a.blotName="break",a.tagName="BR",e.default=a},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(44),l=n(30),s=n(1),a=function(t){function e(e){var n=t.call(this,e)||this;return n.build(),n}return o(e,t),e.prototype.appendChild=function(t){this.insertBefore(t)},e.prototype.attach=function(){t.prototype.attach.call(this),this.children.forEach((function(t){t.attach()}))},e.prototype.build=function(){var t=this;this.children=new i.default,[].slice.call(this.domNode.childNodes).reverse().forEach((function(e){try{var n=u(e);t.insertBefore(n,t.children.head||void 0)}catch(t){if(t instanceof s.ParchmentError)return;throw t}}))},e.prototype.deleteAt=function(t,e){if(0===t&&e===this.length())return this.remove();this.children.forEachAt(t,e,(function(t,e,n){t.deleteAt(e,n)}))},e.prototype.descendant=function(t,n){var r=this.children.find(n),o=r[0],i=r[1];return null==t.blotName&&t(o)||null!=t.blotName&&o instanceof t?[o,i]:o instanceof e?o.descendant(t,i):[null,-1]},e.prototype.descendants=function(t,n,r){void 0===n&&(n=0),void 0===r&&(r=Number.MAX_VALUE);var o=[],i=r;return this.children.forEachAt(n,r,(function(n,r,l){(null==t.blotName&&t(n)||null!=t.blotName&&n instanceof t)&&o.push(n),n instanceof e&&(o=o.concat(n.descendants(t,r,i))),i-=l})),o},e.prototype.detach=function(){this.children.forEach((function(t){t.detach()})),t.prototype.detach.call(this)},e.prototype.formatAt=function(t,e,n,r){this.children.forEachAt(t,e,(function(t,e,o){t.formatAt(e,o,n,r)}))},e.prototype.insertAt=function(t,e,n){var r=this.children.find(t),o=r[0],i=r[1];if(o)o.insertAt(i,e,n);else{var l=null==n?s.create("text",e):s.create(e,n);this.appendChild(l)}},e.prototype.insertBefore=function(t,e){if(null!=this.statics.allowedChildren&&!this.statics.allowedChildren.some((function(e){return t instanceof e})))throw new s.ParchmentError("Cannot insert "+t.statics.blotName+" into "+this.statics.blotName);t.insertInto(this,e)},e.prototype.length=function(){return this.children.reduce((function(t,e){return t+e.length()}),0)},e.prototype.moveChildren=function(t,e){this.children.forEach((function(n){t.insertBefore(n,e)}))},e.prototype.optimize=function(e){if(t.prototype.optimize.call(this,e),0===this.children.length)if(null!=this.statics.defaultChild){var n=s.create(this.statics.defaultChild);this.appendChild(n),n.optimize(e)}else this.remove()},e.prototype.path=function(t,n){void 0===n&&(n=!1);var r=this.children.find(t,n),o=r[0],i=r[1],l=[[this,t]];return o instanceof e?l.concat(o.path(i,n)):(null!=o&&l.push([o,i]),l)},e.prototype.removeChild=function(t){this.children.remove(t)},e.prototype.replace=function(n){n instanceof e&&n.moveChildren(this),t.prototype.replace.call(this,n)},e.prototype.split=function(t,e){if(void 0===e&&(e=!1),!e){if(0===t)return this;if(t===this.length())return this.next}var n=this.clone();return this.parent.insertBefore(n,this.next),this.children.forEachAt(t,this.length(),(function(t,r,o){t=t.split(r,e),n.appendChild(t)})),n},e.prototype.unwrap=function(){this.moveChildren(this.parent,this.next),this.remove()},e.prototype.update=function(t,e){var n=this,r=[],o=[];t.forEach((function(t){t.target===n.domNode&&"childList"===t.type&&(r.push.apply(r,t.addedNodes),o.push.apply(o,t.removedNodes))})),o.forEach((function(t){if(!(null!=t.parentNode&&"IFRAME"!==t.tagName&&document.body.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_CONTAINED_BY)){var e=s.find(t);null!=e&&(null!=e.domNode.parentNode&&e.domNode.parentNode!==n.domNode||e.detach())}})),r.filter((function(t){return t.parentNode==n.domNode})).sort((function(t,e){return t===e?0:t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING?1:-1})).forEach((function(t){var e=null;null!=t.nextSibling&&(e=s.find(t.nextSibling));var r=u(t);r.next==e&&null!=r.next||(null!=r.parent&&r.parent.removeChild(n),n.insertBefore(r,e||void 0))}))},e}(l.default);function u(t){var e=s.find(t);if(null==e)try{e=s.create(t)}catch(n){e=s.create(s.Scope.INLINE),[].slice.call(t.childNodes).forEach((function(t){e.domNode.appendChild(t)})),t.parentNode&&t.parentNode.replaceChild(e.domNode,t),e.attach()}return e}e.default=a},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(12),l=n(31),s=n(17),a=n(1),u=function(t){function e(e){var n=t.call(this,e)||this;return n.attributes=new l.default(n.domNode),n}return o(e,t),e.formats=function(t){return"string"==typeof this.tagName||(Array.isArray(this.tagName)?t.tagName.toLowerCase():void 0)},e.prototype.format=function(t,e){var n=a.query(t);n instanceof i.default?this.attributes.attribute(n,e):e&&(null==n||t===this.statics.blotName&&this.formats()[t]===e||this.replaceWith(t,e))},e.prototype.formats=function(){var t=this.attributes.values(),e=this.statics.formats(this.domNode);return null!=e&&(t[this.statics.blotName]=e),t},e.prototype.replaceWith=function(e,n){var r=t.prototype.replaceWith.call(this,e,n);return this.attributes.copy(r),r},e.prototype.update=function(e,n){var r=this;t.prototype.update.call(this,e,n),e.some((function(t){return t.target===r.domNode&&"attributes"===t.type}))&&this.attributes.build()},e.prototype.wrap=function(n,r){var o=t.prototype.wrap.call(this,n,r);return o instanceof e&&o.statics.scope===this.statics.scope&&this.attributes.move(o),o},e}(s.default);e.default=u},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(30),l=n(1),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.value=function(t){return!0},e.prototype.index=function(t,e){return this.domNode===t||this.domNode.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_CONTAINED_BY?Math.min(e,1):-1},e.prototype.position=function(t,e){var n=[].indexOf.call(this.parent.domNode.childNodes,this.domNode);return t>0&&(n+=1),[this.parent.domNode,n]},e.prototype.value=function(){var t;return(t={})[this.statics.blotName]=this.statics.value(this.domNode)||!0,t},e.scope=l.Scope.INLINE_BLOT,e}(i.default);e.default=s},function(t,e,n){var r=n(11),o=n(3),i={attributes:{compose:function(t,e,n){"object"!=typeof t&&(t={}),"object"!=typeof e&&(e={});var r=o(!0,{},e);for(var i in n||(r=Object.keys(r).reduce((function(t,e){return null!=r[e]&&(t[e]=r[e]),t}),{})),t)void 0!==t[i]&&void 0===e[i]&&(r[i]=t[i]);return Object.keys(r).length>0?r:void 0},diff:function(t,e){"object"!=typeof t&&(t={}),"object"!=typeof e&&(e={});var n=Object.keys(t).concat(Object.keys(e)).reduce((function(n,o){return r(t[o],e[o])||(n[o]=void 0===e[o]?null:e[o]),n}),{});return Object.keys(n).length>0?n:void 0},transform:function(t,e,n){if("object"!=typeof t)return e;if("object"==typeof e){if(!n)return e;var r=Object.keys(e).reduce((function(n,r){return void 0===t[r]&&(n[r]=e[r]),n}),{});return Object.keys(r).length>0?r:void 0}}},iterator:function(t){return new l(t)},length:function(t){return"number"==typeof t.delete?t.delete:"number"==typeof t.retain?t.retain:"string"==typeof t.insert?t.insert.length:1}};function l(t){this.ops=t,this.index=0,this.offset=0}l.prototype.hasNext=function(){return this.peekLength()<1/0},l.prototype.next=function(t){t||(t=1/0);var e=this.ops[this.index];if(e){var n=this.offset,r=i.length(e);if(t>=r-n?(t=r-n,this.index+=1,this.offset=0):this.offset+=t,"number"==typeof e.delete)return{delete:t};var o={};return e.attributes&&(o.attributes=e.attributes),"number"==typeof e.retain?o.retain=t:"string"==typeof e.insert?o.insert=e.insert.substr(n,t):o.insert=e.insert,o}return{retain:1/0}},l.prototype.peek=function(){return this.ops[this.index]},l.prototype.peekLength=function(){return this.ops[this.index]?i.length(this.ops[this.index])-this.offset:1/0},l.prototype.peekType=function(){return this.ops[this.index]?"number"==typeof this.ops[this.index].delete?"delete":"number"==typeof this.ops[this.index].retain?"retain":"insert":"retain"},l.prototype.rest=function(){if(this.hasNext()){if(0===this.offset)return this.ops.slice(this.index);var t=this.offset,e=this.index,n=this.next(),r=this.ops.slice(this.index);return this.offset=t,this.index=e,[n].concat(r)}return[]},t.exports=i},function(t,e){var n=function(){"use strict";function t(t,e){return null!=e&&t instanceof e}var e,n,r;try{e=Map}catch(t){e=function(){}}try{n=Set}catch(t){n=function(){}}try{r=Promise}catch(t){r=function(){}}function o(i,s,a,u,c){"object"==typeof s&&(a=s.depth,u=s.prototype,c=s.includeNonEnumerable,s=s.circular);var f=[],h=[],p="undefined"!=typeof Buffer;return void 0===s&&(s=!0),void 0===a&&(a=1/0),function i(a,d){if(null===a)return null;if(0===d)return a;var y,v;if("object"!=typeof a)return a;if(t(a,e))y=new e;else if(t(a,n))y=new n;else if(t(a,r))y=new r((function(t,e){a.then((function(e){t(i(e,d-1))}),(function(t){e(i(t,d-1))}))}));else if(o.__isArray(a))y=[];else if(o.__isRegExp(a))y=new RegExp(a.source,l(a)),a.lastIndex&&(y.lastIndex=a.lastIndex);else if(o.__isDate(a))y=new Date(a.getTime());else{if(p&&Buffer.isBuffer(a))return y=Buffer.allocUnsafe?Buffer.allocUnsafe(a.length):new Buffer(a.length),a.copy(y),y;t(a,Error)?y=Object.create(a):void 0===u?(v=Object.getPrototypeOf(a),y=Object.create(v)):(y=Object.create(u),v=u)}if(s){var b=f.indexOf(a);if(-1!=b)return h[b];f.push(a),h.push(y)}for(var g in t(a,e)&&a.forEach((function(t,e){var n=i(e,d-1),r=i(t,d-1);y.set(n,r)})),t(a,n)&&a.forEach((function(t){var e=i(t,d-1);y.add(e)})),a){var m;v&&(m=Object.getOwnPropertyDescriptor(v,g)),m&&null==m.set||(y[g]=i(a[g],d-1))}if(Object.getOwnPropertySymbols){var x=Object.getOwnPropertySymbols(a);for(g=0;g<x.length;g++){var _=x[g];(!(E=Object.getOwnPropertyDescriptor(a,_))||E.enumerable||c)&&(y[_]=i(a[_],d-1),E.enumerable||Object.defineProperty(y,_,{enumerable:!1}))}}if(c){var O=Object.getOwnPropertyNames(a);for(g=0;g<O.length;g++){var E,w=O[g];(E=Object.getOwnPropertyDescriptor(a,w))&&E.enumerable||(y[w]=i(a[w],d-1),Object.defineProperty(y,w,{enumerable:!1}))}}return y}(i,a)}function i(t){return Object.prototype.toString.call(t)}function l(t){var e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),e}return o.clonePrototype=function(t){if(null===t)return null;var e=function(){};return e.prototype=t,new e},o.__objToStr=i,o.__isDate=function(t){return"object"==typeof t&&"[object Date]"===i(t)},o.__isArray=function(t){return"object"==typeof t&&"[object Array]"===i(t)},o.__isRegExp=function(t){return"object"==typeof t&&"[object RegExp]"===i(t)},o.__getRegExpFlags=l,o}();"object"==typeof t&&t.exports&&(t.exports=n)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var l,s=t[Symbol.iterator]();!(r=(l=s.next()).done)&&(n.push(l.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")},o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0},l=p(n(0)),s=p(n(8)),a=n(4),u=p(a),c=p(n(16)),f=p(n(13)),h=p(n(25));function p(t){return t&&t.__esModule?t:{default:t}}function d(t){return t instanceof u.default||t instanceof a.BlockEmbed}var y=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return r.emitter=n.emitter,Array.isArray(n.whitelist)&&(r.whitelist=n.whitelist.reduce((function(t,e){return t[e]=!0,t}),{})),r.domNode.addEventListener("DOMNodeInserted",(function(){})),r.optimize(),r.enable(),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),o(e,[{key:"batchStart",value:function(){this.batch=!0}},{key:"batchEnd",value:function(){this.batch=!1,this.optimize()}},{key:"deleteAt",value:function(t,n){var o=this.line(t),l=r(o,2),s=l[0],u=l[1],h=this.line(t+n),p=r(h,1)[0];if(i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"deleteAt",this).call(this,t,n),null!=p&&s!==p&&u>0){if(s instanceof a.BlockEmbed||p instanceof a.BlockEmbed)return void this.optimize();if(s instanceof f.default){var d=s.newlineIndex(s.length(),!0);if(d>-1&&(s=s.split(d+1))===p)return void this.optimize()}else if(p instanceof f.default){var y=p.newlineIndex(0);y>-1&&p.split(y+1)}var v=p.children.head instanceof c.default?null:p.children.head;s.moveChildren(p,v),s.remove()}this.optimize()}},{key:"enable",value:function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];this.domNode.setAttribute("contenteditable",t)}},{key:"formatAt",value:function(t,n,r,o){(null==this.whitelist||this.whitelist[r])&&(i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"formatAt",this).call(this,t,n,r,o),this.optimize())}},{key:"insertAt",value:function(t,n,r){if(null==r||null==this.whitelist||this.whitelist[n]){if(t>=this.length())if(null==r||null==l.default.query(n,l.default.Scope.BLOCK)){var o=l.default.create(this.statics.defaultChild);this.appendChild(o),null==r&&n.endsWith("\n")&&(n=n.slice(0,-1)),o.insertAt(0,n,r)}else{var s=l.default.create(n,r);this.appendChild(s)}else i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertAt",this).call(this,t,n,r);this.optimize()}}},{key:"insertBefore",value:function(t,n){if(t.statics.scope===l.default.Scope.INLINE_BLOT){var r=l.default.create(this.statics.defaultChild);r.appendChild(t),t=r}i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertBefore",this).call(this,t,n)}},{key:"leaf",value:function(t){return this.path(t).pop()||[null,-1]}},{key:"line",value:function(t){return t===this.length()?this.line(t-1):this.descendant(d,t)}},{key:"lines",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Number.MAX_VALUE,n=function t(e,n,r){var o=[],i=r;return e.children.forEachAt(n,r,(function(e,n,r){d(e)?o.push(e):e instanceof l.default.Container&&(o=o.concat(t(e,n,i))),i-=r})),o};return n(this,t,e)}},{key:"optimize",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};!0!==this.batch&&(i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"optimize",this).call(this,t,n),t.length>0&&this.emitter.emit(s.default.events.SCROLL_OPTIMIZE,t,n))}},{key:"path",value:function(t){return i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"path",this).call(this,t).slice(1)}},{key:"update",value:function(t){if(!0!==this.batch){var n=s.default.sources.USER;"string"==typeof t&&(n=t),Array.isArray(t)||(t=this.observer.takeRecords()),t.length>0&&this.emitter.emit(s.default.events.SCROLL_BEFORE_UPDATE,n,t),i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"update",this).call(this,t.concat([])),t.length>0&&this.emitter.emit(s.default.events.SCROLL_UPDATE,n,t)}}}]),e}(l.default.Scroll);y.blotName="scroll",y.className="ql-editor",y.tagName="DIV",y.defaultChild="block",y.allowedChildren=[u.default,a.BlockEmbed,h.default],e.default=y},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SHORTKEY=e.default=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var l,s=t[Symbol.iterator]();!(r=(l=s.next()).done)&&(n.push(l.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")},i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),l=y(n(21)),s=y(n(11)),a=y(n(3)),u=y(n(2)),c=y(n(20)),f=y(n(0)),h=y(n(5)),p=y(n(10)),d=y(n(9));function y(t){return t&&t.__esModule?t:{default:t}}function v(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var b=(0,p.default)("quill:keyboard"),g=/Mac/i.test(navigator.platform)?"metaKey":"ctrlKey",m=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.bindings={},Object.keys(r.options.bindings).forEach((function(e){("list autofill"!==e||null==t.scroll.whitelist||t.scroll.whitelist.list)&&r.options.bindings[e]&&r.addBinding(r.options.bindings[e])})),r.addBinding({key:e.keys.ENTER,shiftKey:null},w),r.addBinding({key:e.keys.ENTER,metaKey:null,ctrlKey:null,altKey:null},(function(){})),/Firefox/i.test(navigator.userAgent)?(r.addBinding({key:e.keys.BACKSPACE},{collapsed:!0},_),r.addBinding({key:e.keys.DELETE},{collapsed:!0},O)):(r.addBinding({key:e.keys.BACKSPACE},{collapsed:!0,prefix:/^.?$/},_),r.addBinding({key:e.keys.DELETE},{collapsed:!0,suffix:/^.?$/},O)),r.addBinding({key:e.keys.BACKSPACE},{collapsed:!1},E),r.addBinding({key:e.keys.DELETE},{collapsed:!1},E),r.addBinding({key:e.keys.BACKSPACE,altKey:null,ctrlKey:null,metaKey:null,shiftKey:null},{collapsed:!0,offset:0},_),r.listen(),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),i(e,null,[{key:"match",value:function(t,e){return e=N(e),!["altKey","ctrlKey","metaKey","shiftKey"].some((function(n){return!!e[n]!==t[n]&&null!==e[n]}))&&e.key===(t.which||t.keyCode)}}]),i(e,[{key:"addBinding",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=N(t);if(null==r||null==r.key)return b.warn("Attempted to add invalid keyboard binding",r);"function"==typeof e&&(e={handler:e}),"function"==typeof n&&(n={handler:n}),r=(0,a.default)(r,e,n),this.bindings[r.key]=this.bindings[r.key]||[],this.bindings[r.key].push(r)}},{key:"listen",value:function(){var t=this;this.quill.root.addEventListener("keydown",(function(n){if(!n.defaultPrevented){var i=n.which||n.keyCode,l=(t.bindings[i]||[]).filter((function(t){return e.match(n,t)}));if(0!==l.length){var a=t.quill.getSelection();if(null!=a&&t.quill.hasFocus()){var u=t.quill.getLine(a.index),c=o(u,2),h=c[0],p=c[1],d=t.quill.getLeaf(a.index),y=o(d,2),v=y[0],b=y[1],g=0===a.length?[v,b]:t.quill.getLeaf(a.index+a.length),m=o(g,2),x=m[0],_=m[1],O=v instanceof f.default.Text?v.value().slice(0,b):"",E=x instanceof f.default.Text?x.value().slice(_):"",w={collapsed:0===a.length,empty:0===a.length&&h.length()<=1,format:t.quill.getFormat(a),offset:p,prefix:O,suffix:E};l.some((function(e){if(null!=e.collapsed&&e.collapsed!==w.collapsed)return!1;if(null!=e.empty&&e.empty!==w.empty)return!1;if(null!=e.offset&&e.offset!==w.offset)return!1;if(Array.isArray(e.format)){if(e.format.every((function(t){return null==w.format[t]})))return!1}else if("object"===r(e.format)&&!Object.keys(e.format).every((function(t){return!0===e.format[t]?null!=w.format[t]:!1===e.format[t]?null==w.format[t]:(0,s.default)(e.format[t],w.format[t])})))return!1;return!(null!=e.prefix&&!e.prefix.test(w.prefix)||null!=e.suffix&&!e.suffix.test(w.suffix)||!0===e.handler.call(t,a,w))}))&&n.preventDefault()}}}}))}}]),e}(d.default);function x(t,e){var n,r=t===m.keys.LEFT?"prefix":"suffix";return v(n={key:t,shiftKey:e,altKey:null},r,/^$/),v(n,"handler",(function(n){var r=n.index;t===m.keys.RIGHT&&(r+=n.length+1);var i=this.quill.getLeaf(r);return!(o(i,1)[0]instanceof f.default.Embed&&(t===m.keys.LEFT?e?this.quill.setSelection(n.index-1,n.length+1,h.default.sources.USER):this.quill.setSelection(n.index-1,h.default.sources.USER):e?this.quill.setSelection(n.index,n.length+1,h.default.sources.USER):this.quill.setSelection(n.index+n.length+1,h.default.sources.USER),1))})),n}function _(t,e){if(!(0===t.index||this.quill.getLength()<=1)){var n=this.quill.getLine(t.index),r=o(n,1)[0],i={};if(0===e.offset){var l=this.quill.getLine(t.index-1),s=o(l,1)[0];if(null!=s&&s.length()>1){var a=r.formats(),u=this.quill.getFormat(t.index-1,1);i=c.default.attributes.diff(a,u)||{}}}var f=/[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(e.prefix)?2:1;this.quill.deleteText(t.index-f,f,h.default.sources.USER),Object.keys(i).length>0&&this.quill.formatLine(t.index-f,f,i,h.default.sources.USER),this.quill.focus()}}function O(t,e){var n=/^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(e.suffix)?2:1;if(!(t.index>=this.quill.getLength()-n)){var r={},i=0,l=this.quill.getLine(t.index),s=o(l,1)[0];if(e.offset>=s.length()-1){var a=this.quill.getLine(t.index+1),u=o(a,1)[0];if(u){var f=s.formats(),p=this.quill.getFormat(t.index,1);r=c.default.attributes.diff(f,p)||{},i=u.length()}}this.quill.deleteText(t.index,n,h.default.sources.USER),Object.keys(r).length>0&&this.quill.formatLine(t.index+i-1,n,r,h.default.sources.USER)}}function E(t){var e=this.quill.getLines(t),n={};if(e.length>1){var r=e[0].formats(),o=e[e.length-1].formats();n=c.default.attributes.diff(o,r)||{}}this.quill.deleteText(t,h.default.sources.USER),Object.keys(n).length>0&&this.quill.formatLine(t.index,1,n,h.default.sources.USER),this.quill.setSelection(t.index,h.default.sources.SILENT),this.quill.focus()}function w(t,e){var n=this;t.length>0&&this.quill.scroll.deleteAt(t.index,t.length);var r=Object.keys(e.format).reduce((function(t,n){return f.default.query(n,f.default.Scope.BLOCK)&&!Array.isArray(e.format[n])&&(t[n]=e.format[n]),t}),{});this.quill.insertText(t.index,"\n",r,h.default.sources.USER),this.quill.setSelection(t.index+1,h.default.sources.SILENT),this.quill.focus(),Object.keys(e.format).forEach((function(t){null==r[t]&&(Array.isArray(e.format[t])||"link"!==t&&n.quill.format(t,e.format[t],h.default.sources.USER))}))}function k(t){return{key:m.keys.TAB,shiftKey:!t,format:{"code-block":!0},handler:function(e){var n=f.default.query("code-block"),r=e.index,i=e.length,l=this.quill.scroll.descendant(n,r),s=o(l,2),a=s[0],u=s[1];if(null!=a){var c=this.quill.getIndex(a),p=a.newlineIndex(u,!0)+1,d=a.newlineIndex(c+u+i),y=a.domNode.textContent.slice(p,d).split("\n");u=0,y.forEach((function(e,o){t?(a.insertAt(p+u,n.TAB),u+=n.TAB.length,0===o?r+=n.TAB.length:i+=n.TAB.length):e.startsWith(n.TAB)&&(a.deleteAt(p+u,n.TAB.length),u-=n.TAB.length,0===o?r-=n.TAB.length:i-=n.TAB.length),u+=e.length+1})),this.quill.update(h.default.sources.USER),this.quill.setSelection(r,i,h.default.sources.SILENT)}}}}function A(t){return{key:t[0].toUpperCase(),shortKey:!0,handler:function(e,n){this.quill.format(t,!n.format[t],h.default.sources.USER)}}}function N(t){if("string"==typeof t||"number"==typeof t)return N({key:t});if("object"===(void 0===t?"undefined":r(t))&&(t=(0,l.default)(t,!1)),"string"==typeof t.key)if(null!=m.keys[t.key.toUpperCase()])t.key=m.keys[t.key.toUpperCase()];else{if(1!==t.key.length)return null;t.key=t.key.toUpperCase().charCodeAt(0)}return t.shortKey&&(t[g]=t.shortKey,delete t.shortKey),t}m.keys={BACKSPACE:8,TAB:9,ENTER:13,ESCAPE:27,LEFT:37,UP:38,RIGHT:39,DOWN:40,DELETE:46},m.DEFAULTS={bindings:{bold:A("bold"),italic:A("italic"),underline:A("underline"),indent:{key:m.keys.TAB,format:["blockquote","indent","list"],handler:function(t,e){if(e.collapsed&&0!==e.offset)return!0;this.quill.format("indent","+1",h.default.sources.USER)}},outdent:{key:m.keys.TAB,shiftKey:!0,format:["blockquote","indent","list"],handler:function(t,e){if(e.collapsed&&0!==e.offset)return!0;this.quill.format("indent","-1",h.default.sources.USER)}},"outdent backspace":{key:m.keys.BACKSPACE,collapsed:!0,shiftKey:null,metaKey:null,ctrlKey:null,altKey:null,format:["indent","list"],offset:0,handler:function(t,e){null!=e.format.indent?this.quill.format("indent","-1",h.default.sources.USER):null!=e.format.list&&this.quill.format("list",!1,h.default.sources.USER)}},"indent code-block":k(!0),"outdent code-block":k(!1),"remove tab":{key:m.keys.TAB,shiftKey:!0,collapsed:!0,prefix:/\t$/,handler:function(t){this.quill.deleteText(t.index-1,1,h.default.sources.USER)}},tab:{key:m.keys.TAB,handler:function(t){this.quill.history.cutoff();var e=(new u.default).retain(t.index).delete(t.length).insert("\t");this.quill.updateContents(e,h.default.sources.USER),this.quill.history.cutoff(),this.quill.setSelection(t.index+1,h.default.sources.SILENT)}},"list empty enter":{key:m.keys.ENTER,collapsed:!0,format:["list"],empty:!0,handler:function(t,e){this.quill.format("list",!1,h.default.sources.USER),e.format.indent&&this.quill.format("indent",!1,h.default.sources.USER)}},"checklist enter":{key:m.keys.ENTER,collapsed:!0,format:{list:"checked"},handler:function(t){var e=this.quill.getLine(t.index),n=o(e,2),r=n[0],i=n[1],l=(0,a.default)({},r.formats(),{list:"checked"}),s=(new u.default).retain(t.index).insert("\n",l).retain(r.length()-i-1).retain(1,{list:"unchecked"});this.quill.updateContents(s,h.default.sources.USER),this.quill.setSelection(t.index+1,h.default.sources.SILENT),this.quill.scrollIntoView()}},"header enter":{key:m.keys.ENTER,collapsed:!0,format:["header"],suffix:/^$/,handler:function(t,e){var n=this.quill.getLine(t.index),r=o(n,2),i=r[0],l=r[1],s=(new u.default).retain(t.index).insert("\n",e.format).retain(i.length()-l-1).retain(1,{header:null});this.quill.updateContents(s,h.default.sources.USER),this.quill.setSelection(t.index+1,h.default.sources.SILENT),this.quill.scrollIntoView()}},"list autofill":{key:" ",collapsed:!0,format:{list:!1},prefix:/^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,handler:function(t,e){var n=e.prefix.length,r=this.quill.getLine(t.index),i=o(r,2),l=i[0],s=i[1];if(s>n)return!0;var a=void 0;switch(e.prefix.trim()){case"[]":case"[ ]":a="unchecked";break;case"[x]":a="checked";break;case"-":case"*":a="bullet";break;default:a="ordered"}this.quill.insertText(t.index," ",h.default.sources.USER),this.quill.history.cutoff();var c=(new u.default).retain(t.index-s).delete(n+1).retain(l.length()-2-s).retain(1,{list:a});this.quill.updateContents(c,h.default.sources.USER),this.quill.history.cutoff(),this.quill.setSelection(t.index-n,h.default.sources.SILENT)}},"code exit":{key:m.keys.ENTER,collapsed:!0,format:["code-block"],prefix:/\n\n$/,suffix:/^\s+$/,handler:function(t){var e=this.quill.getLine(t.index),n=o(e,2),r=n[0],i=n[1],l=(new u.default).retain(t.index+r.length()-i-2).retain(1,{"code-block":null}).delete(1);this.quill.updateContents(l,h.default.sources.USER)}},"embed left":x(m.keys.LEFT,!1),"embed left shift":x(m.keys.LEFT,!0),"embed right":x(m.keys.RIGHT,!1),"embed right shift":x(m.keys.RIGHT,!0)}},e.default=m,e.SHORTKEY=g},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var l,s=t[Symbol.iterator]();!(r=(l=s.next()).done)&&(n.push(l.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")},o=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0},i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),l=a(n(0)),s=a(n(7));function a(t){return t&&t.__esModule?t:{default:t}}var u=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return r.selection=n,r.textNode=document.createTextNode(e.CONTENTS),r.domNode.appendChild(r.textNode),r._length=0,r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),i(e,null,[{key:"value",value:function(){}}]),i(e,[{key:"detach",value:function(){null!=this.parent&&this.parent.removeChild(this)}},{key:"format",value:function(t,n){if(0!==this._length)return o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"format",this).call(this,t,n);for(var r=this,i=0;null!=r&&r.statics.scope!==l.default.Scope.BLOCK_BLOT;)i+=r.offset(r.parent),r=r.parent;null!=r&&(this._length=e.CONTENTS.length,r.optimize(),r.formatAt(i,e.CONTENTS.length,t,n),this._length=0)}},{key:"index",value:function(t,n){return t===this.textNode?0:o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"index",this).call(this,t,n)}},{key:"length",value:function(){return this._length}},{key:"position",value:function(){return[this.textNode,this.textNode.data.length]}},{key:"remove",value:function(){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"remove",this).call(this),this.parent=null}},{key:"restore",value:function(){if(!this.selection.composing&&null!=this.parent){var t=this.textNode,n=this.selection.getNativeRange(),o=void 0,i=void 0,a=void 0;if(null!=n&&n.start.node===t&&n.end.node===t){var u=[t,n.start.offset,n.end.offset];o=u[0],i=u[1],a=u[2]}for(;null!=this.domNode.lastChild&&this.domNode.lastChild!==this.textNode;)this.domNode.parentNode.insertBefore(this.domNode.lastChild,this.domNode);if(this.textNode.data!==e.CONTENTS){var c=this.textNode.data.split(e.CONTENTS).join("");this.next instanceof s.default?(o=this.next.domNode,this.next.insertAt(0,c),this.textNode.data=e.CONTENTS):(this.textNode.data=c,this.parent.insertBefore(l.default.create(this.textNode),this),this.textNode=document.createTextNode(e.CONTENTS),this.domNode.appendChild(this.textNode))}if(this.remove(),null!=i){var f=[i,a].map((function(t){return Math.max(0,Math.min(o.data.length,t-1))})),h=r(f,2);return i=h[0],a=h[1],{startNode:o,startOffset:i,endNode:o,endOffset:a}}}}},{key:"update",value:function(t,e){var n=this;if(t.some((function(t){return"characterData"===t.type&&t.target===n.textNode}))){var r=this.restore();r&&(e.range=r)}}},{key:"value",value:function(){return""}}]),e}(l.default.Embed);u.blotName="cursor",u.className="ql-cursor",u.tagName="span",u.CONTENTS="\ufeff",e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=l(n(0)),o=n(4),i=l(o);function l(t){return t&&t.__esModule?t:{default:t}}function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var u=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e}(r.default.Container);u.allowedChildren=[i.default,o.BlockEmbed,u],e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ColorStyle=e.ColorClass=e.ColorAttributor=void 0;var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(0),l=(r=i)&&r.__esModule?r:{default:r};function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var u=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),o(e,[{key:"value",value:function(t){var n=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"value",this).call(this,t);return n.startsWith("rgb(")?(n=n.replace(/^[^\d]+/,"").replace(/[^\d]+$/,""),"#"+n.split(",").map((function(t){return("00"+parseInt(t).toString(16)).slice(-2)})).join("")):n}}]),e}(l.default.Attributor.Style),c=new l.default.Attributor.Class("color","ql-color",{scope:l.default.Scope.INLINE}),f=new u("color","color",{scope:l.default.Scope.INLINE});e.ColorAttributor=u,e.ColorClass=c,e.ColorStyle=f},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.sanitize=e.default=void 0;var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0},l=n(6);function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var u=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),o(e,[{key:"format",value:function(t,n){if(t!==this.statics.blotName||!n)return i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"format",this).call(this,t,n);n=this.constructor.sanitize(n),this.domNode.setAttribute("href",n)}}],[{key:"create",value:function(t){var n=i(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this,t);return t=this.sanitize(t),n.setAttribute("href",t),n.setAttribute("rel","noopener noreferrer"),n.setAttribute("target","_blank"),n}},{key:"formats",value:function(t){return t.getAttribute("href")}},{key:"sanitize",value:function(t){return c(t,this.PROTOCOL_WHITELIST)?t:this.SANITIZED_URL}}]),e}(((r=l)&&r.__esModule?r:{default:r}).default);function c(t,e){var n=document.createElement("a");n.href=t;var r=n.href.slice(0,n.href.indexOf(":"));return e.indexOf(r)>-1}u.blotName="link",u.tagName="A",u.SANITIZED_URL="about:blank",u.PROTOCOL_WHITELIST=["http","https","mailto","tel"],e.default=u,e.sanitize=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=s(n(23)),l=s(n(107));function s(t){return t&&t.__esModule?t:{default:t}}var a=0;function u(t,e){t.setAttribute(e,!("true"===t.getAttribute(e)))}var c=function(){function t(e){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.select=e,this.container=document.createElement("span"),this.buildPicker(),this.select.style.display="none",this.select.parentNode.insertBefore(this.container,this.select),this.label.addEventListener("mousedown",(function(){n.togglePicker()})),this.label.addEventListener("keydown",(function(t){switch(t.keyCode){case i.default.keys.ENTER:n.togglePicker();break;case i.default.keys.ESCAPE:n.escape(),t.preventDefault()}})),this.select.addEventListener("change",this.update.bind(this))}return o(t,[{key:"togglePicker",value:function(){this.container.classList.toggle("ql-expanded"),u(this.label,"aria-expanded"),u(this.options,"aria-hidden")}},{key:"buildItem",value:function(t){var e=this,n=document.createElement("span");return n.tabIndex="0",n.setAttribute("role","button"),n.classList.add("ql-picker-item"),t.hasAttribute("value")&&n.setAttribute("data-value",t.getAttribute("value")),t.textContent&&n.setAttribute("data-label",t.textContent),n.addEventListener("click",(function(){e.selectItem(n,!0)})),n.addEventListener("keydown",(function(t){switch(t.keyCode){case i.default.keys.ENTER:e.selectItem(n,!0),t.preventDefault();break;case i.default.keys.ESCAPE:e.escape(),t.preventDefault()}})),n}},{key:"buildLabel",value:function(){var t=document.createElement("span");return t.classList.add("ql-picker-label"),t.innerHTML=l.default,t.tabIndex="0",t.setAttribute("role","button"),t.setAttribute("aria-expanded","false"),this.container.appendChild(t),t}},{key:"buildOptions",value:function(){var t=this,e=document.createElement("span");e.classList.add("ql-picker-options"),e.setAttribute("aria-hidden","true"),e.tabIndex="-1",e.id="ql-picker-options-"+a,a+=1,this.label.setAttribute("aria-controls",e.id),this.options=e,[].slice.call(this.select.options).forEach((function(n){var r=t.buildItem(n);e.appendChild(r),!0===n.selected&&t.selectItem(r)})),this.container.appendChild(e)}},{key:"buildPicker",value:function(){var t=this;[].slice.call(this.select.attributes).forEach((function(e){t.container.setAttribute(e.name,e.value)})),this.container.classList.add("ql-picker"),this.label=this.buildLabel(),this.buildOptions()}},{key:"escape",value:function(){var t=this;this.close(),setTimeout((function(){return t.label.focus()}),1)}},{key:"close",value:function(){this.container.classList.remove("ql-expanded"),this.label.setAttribute("aria-expanded","false"),this.options.setAttribute("aria-hidden","true")}},{key:"selectItem",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=this.container.querySelector(".ql-selected");if(t!==n&&(null!=n&&n.classList.remove("ql-selected"),null!=t&&(t.classList.add("ql-selected"),this.select.selectedIndex=[].indexOf.call(t.parentNode.children,t),t.hasAttribute("data-value")?this.label.setAttribute("data-value",t.getAttribute("data-value")):this.label.removeAttribute("data-value"),t.hasAttribute("data-label")?this.label.setAttribute("data-label",t.getAttribute("data-label")):this.label.removeAttribute("data-label"),e))){if("function"==typeof Event)this.select.dispatchEvent(new Event("change"));else if("object"===("undefined"==typeof Event?"undefined":r(Event))){var o=document.createEvent("Event");o.initEvent("change",!0,!0),this.select.dispatchEvent(o)}this.close()}}},{key:"update",value:function(){var t=void 0;if(this.select.selectedIndex>-1){var e=this.container.querySelector(".ql-picker-options").children[this.select.selectedIndex];t=this.select.options[this.select.selectedIndex],this.selectItem(e)}else this.selectItem(null);var n=null!=t&&t!==this.select.querySelector("option[selected]");this.label.classList.toggle("ql-active",n)}}]),t}();e.default=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=b(n(0)),o=b(n(5)),i=n(4),l=b(i),s=b(n(16)),a=b(n(25)),u=b(n(24)),c=b(n(35)),f=b(n(6)),h=b(n(22)),p=b(n(7)),d=b(n(55)),y=b(n(42)),v=b(n(23));function b(t){return t&&t.__esModule?t:{default:t}}o.default.register({"blots/block":l.default,"blots/block/embed":i.BlockEmbed,"blots/break":s.default,"blots/container":a.default,"blots/cursor":u.default,"blots/embed":c.default,"blots/inline":f.default,"blots/scroll":h.default,"blots/text":p.default,"modules/clipboard":d.default,"modules/history":y.default,"modules/keyboard":v.default}),r.default.register(l.default,s.default,u.default,f.default,h.default,p.default),e.default=o.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1),o=function(){function t(t){this.domNode=t,this.domNode[r.DATA_KEY]={blot:this}}return Object.defineProperty(t.prototype,"statics",{get:function(){return this.constructor},enumerable:!0,configurable:!0}),t.create=function(t){if(null==this.tagName)throw new r.ParchmentError("Blot definition missing tagName");var e;return Array.isArray(this.tagName)?("string"==typeof t&&(t=t.toUpperCase(),parseInt(t).toString()===t&&(t=parseInt(t))),e="number"==typeof t?document.createElement(this.tagName[t-1]):this.tagName.indexOf(t)>-1?document.createElement(t):document.createElement(this.tagName[0])):e=document.createElement(this.tagName),this.className&&e.classList.add(this.className),e},t.prototype.attach=function(){null!=this.parent&&(this.scroll=this.parent.scroll)},t.prototype.clone=function(){var t=this.domNode.cloneNode(!1);return r.create(t)},t.prototype.detach=function(){null!=this.parent&&this.parent.removeChild(this),delete this.domNode[r.DATA_KEY]},t.prototype.deleteAt=function(t,e){this.isolate(t,e).remove()},t.prototype.formatAt=function(t,e,n,o){var i=this.isolate(t,e);if(null!=r.query(n,r.Scope.BLOT)&&o)i.wrap(n,o);else if(null!=r.query(n,r.Scope.ATTRIBUTE)){var l=r.create(this.statics.scope);i.wrap(l),l.format(n,o)}},t.prototype.insertAt=function(t,e,n){var o=null==n?r.create("text",e):r.create(e,n),i=this.split(t);this.parent.insertBefore(o,i)},t.prototype.insertInto=function(t,e){void 0===e&&(e=null),null!=this.parent&&this.parent.children.remove(this);var n=null;t.children.insertBefore(this,e),null!=e&&(n=e.domNode),this.domNode.parentNode==t.domNode&&this.domNode.nextSibling==n||t.domNode.insertBefore(this.domNode,n),this.parent=t,this.attach()},t.prototype.isolate=function(t,e){var n=this.split(t);return n.split(e),n},t.prototype.length=function(){return 1},t.prototype.offset=function(t){return void 0===t&&(t=this.parent),null==this.parent||this==t?0:this.parent.children.offset(this)+this.parent.offset(t)},t.prototype.optimize=function(t){null!=this.domNode[r.DATA_KEY]&&delete this.domNode[r.DATA_KEY].mutations},t.prototype.remove=function(){null!=this.domNode.parentNode&&this.domNode.parentNode.removeChild(this.domNode),this.detach()},t.prototype.replace=function(t){null!=t.parent&&(t.parent.insertBefore(this,t.next),t.remove())},t.prototype.replaceWith=function(t,e){var n="string"==typeof t?r.create(t,e):t;return n.replace(this),n},t.prototype.split=function(t,e){return 0===t?this:this.next},t.prototype.update=function(t,e){},t.prototype.wrap=function(t,e){var n="string"==typeof t?r.create(t,e):t;return null!=this.parent&&this.parent.insertBefore(n,this.next),n.appendChild(this),n},t.blotName="abstract",t}();e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(12),o=n(32),i=n(33),l=n(1),s=function(){function t(t){this.attributes={},this.domNode=t,this.build()}return t.prototype.attribute=function(t,e){e?t.add(this.domNode,e)&&(null!=t.value(this.domNode)?this.attributes[t.attrName]=t:delete this.attributes[t.attrName]):(t.remove(this.domNode),delete this.attributes[t.attrName])},t.prototype.build=function(){var t=this;this.attributes={};var e=r.default.keys(this.domNode),n=o.default.keys(this.domNode),s=i.default.keys(this.domNode);e.concat(n).concat(s).forEach((function(e){var n=l.query(e,l.Scope.ATTRIBUTE);n instanceof r.default&&(t.attributes[n.attrName]=n)}))},t.prototype.copy=function(t){var e=this;Object.keys(this.attributes).forEach((function(n){var r=e.attributes[n].value(e.domNode);t.format(n,r)}))},t.prototype.move=function(t){var e=this;this.copy(t),Object.keys(this.attributes).forEach((function(t){e.attributes[t].remove(e.domNode)})),this.attributes={}},t.prototype.values=function(){var t=this;return Object.keys(this.attributes).reduce((function(e,n){return e[n]=t.attributes[n].value(t.domNode),e}),{})},t}();e.default=s},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});function i(t,e){return(t.getAttribute("class")||"").split(/\s+/).filter((function(t){return 0===t.indexOf(e+"-")}))}Object.defineProperty(e,"__esModule",{value:!0});var l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.keys=function(t){return(t.getAttribute("class")||"").split(/\s+/).map((function(t){return t.split("-").slice(0,-1).join("-")}))},e.prototype.add=function(t,e){return!!this.canAdd(t,e)&&(this.remove(t),t.classList.add(this.keyName+"-"+e),!0)},e.prototype.remove=function(t){i(t,this.keyName).forEach((function(e){t.classList.remove(e)})),0===t.classList.length&&t.removeAttribute("class")},e.prototype.value=function(t){var e=(i(t,this.keyName)[0]||"").slice(this.keyName.length+1);return this.canAdd(t,e)?e:""},e}(n(12).default);e.default=l},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});function i(t){var e=t.split("-"),n=e.slice(1).map((function(t){return t[0].toUpperCase()+t.slice(1)})).join("");return e[0]+n}Object.defineProperty(e,"__esModule",{value:!0});var l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.keys=function(t){return(t.getAttribute("style")||"").split(";").map((function(t){return t.split(":")[0].trim()}))},e.prototype.add=function(t,e){return!!this.canAdd(t,e)&&(t.style[i(this.keyName)]=e,!0)},e.prototype.remove=function(t){t.style[i(this.keyName)]="",t.getAttribute("style")||t.removeAttribute("style")},e.prototype.value=function(t){var e=t.style[i(this.keyName)];return this.canAdd(t,e)?e:""},e}(n(12).default);e.default=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.quill=e,this.options=n,this.modules={}}return r(t,[{key:"init",value:function(){var t=this;Object.keys(this.options.modules).forEach((function(e){null==t.modules[e]&&t.addModule(e)}))}},{key:"addModule",value:function(t){var e=this.quill.constructor.import("modules/"+t);return this.modules[t]=new e(this.quill,this.options.modules[t]||{}),this.modules[t]}}]),t}();o.DEFAULTS={modules:{}},o.themes={default:o},e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=l(n(0)),i=l(n(7));function l(t){return t&&t.__esModule?t:{default:t}}var s=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.contentNode=document.createElement("span"),n.contentNode.setAttribute("contenteditable",!1),[].slice.call(n.domNode.childNodes).forEach((function(t){n.contentNode.appendChild(t)})),n.leftGuard=document.createTextNode("\ufeff"),n.rightGuard=document.createTextNode("\ufeff"),n.domNode.appendChild(n.leftGuard),n.domNode.appendChild(n.contentNode),n.domNode.appendChild(n.rightGuard),n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),r(e,[{key:"index",value:function(t,n){return t===this.leftGuard?0:t===this.rightGuard?1:function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"index",this).call(this,t,n)}},{key:"restore",value:function(t){var e=void 0,n=void 0,r=t.data.split("\ufeff").join("");if(t===this.leftGuard)if(this.prev instanceof i.default){var l=this.prev.length();this.prev.insertAt(l,r),e={startNode:this.prev.domNode,startOffset:l+r.length}}else n=document.createTextNode(r),this.parent.insertBefore(o.default.create(n),this),e={startNode:n,startOffset:r.length};else t===this.rightGuard&&(this.next instanceof i.default?(this.next.insertAt(0,r),e={startNode:this.next.domNode,startOffset:r.length}):(n=document.createTextNode(r),this.parent.insertBefore(o.default.create(n),this.next),e={startNode:n,startOffset:r.length}));return t.data="\ufeff",e}},{key:"update",value:function(t,e){var n=this;t.forEach((function(t){if("characterData"===t.type&&(t.target===n.leftGuard||t.target===n.rightGuard)){var r=n.restore(t.target);r&&(e.range=r)}}))}}]),e}(o.default.Embed);e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AlignStyle=e.AlignClass=e.AlignAttribute=void 0;var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r},l={scope:i.default.Scope.BLOCK,whitelist:["right","center","justify"]},s=new i.default.Attributor.Attribute("align","align",l),a=new i.default.Attributor.Class("align","ql-align",l),u=new i.default.Attributor.Style("align","text-align",l);e.AlignAttribute=s,e.AlignClass=a,e.AlignStyle=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BackgroundStyle=e.BackgroundClass=void 0;var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r},l=n(26),s=new i.default.Attributor.Class("background","ql-bg",{scope:i.default.Scope.INLINE}),a=new l.ColorAttributor("background","background-color",{scope:i.default.Scope.INLINE});e.BackgroundClass=s,e.BackgroundStyle=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DirectionStyle=e.DirectionClass=e.DirectionAttribute=void 0;var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r},l={scope:i.default.Scope.BLOCK,whitelist:["rtl"]},s=new i.default.Attributor.Attribute("direction","dir",l),a=new i.default.Attributor.Class("direction","ql-direction",l),u=new i.default.Attributor.Style("direction","direction",l);e.DirectionAttribute=s,e.DirectionClass=a,e.DirectionStyle=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FontClass=e.FontStyle=void 0;var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(0),l=(r=i)&&r.__esModule?r:{default:r};function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var u={scope:l.default.Scope.INLINE,whitelist:["serif","monospace"]},c=new l.default.Attributor.Class("font","ql-font",u),f=new(function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),o(e,[{key:"value",value:function(t){return function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"value",this).call(this,t).replace(/["']/g,"")}}]),e}(l.default.Attributor.Style))("font","font-family",u);e.FontStyle=f,e.FontClass=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SizeStyle=e.SizeClass=void 0;var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r},l=new i.default.Attributor.Class("size","ql-size",{scope:i.default.Scope.INLINE,whitelist:["small","large","huge"]}),s=new i.default.Attributor.Style("size","font-size",{scope:i.default.Scope.INLINE,whitelist:["10px","18px","32px"]});e.SizeClass=l,e.SizeStyle=s},function(t,e,n){"use strict";t.exports={align:{"":n(76),center:n(77),right:n(78),justify:n(79)},background:n(80),blockquote:n(81),bold:n(82),clean:n(83),code:n(58),"code-block":n(58),color:n(84),direction:{"":n(85),rtl:n(86)},float:{center:n(87),full:n(88),left:n(89),right:n(90)},formula:n(91),header:{1:n(92),2:n(93)},italic:n(94),image:n(95),indent:{"+1":n(96),"-1":n(97)},link:n(98),list:{ordered:n(99),bullet:n(100),check:n(101)},script:{sub:n(102),super:n(103)},strike:n(104),underline:n(105),video:n(106)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getLastChangeIndex=e.default=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=l(n(0)),i=l(n(5));function l(t){return t&&t.__esModule?t:{default:t}}var s=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.lastRecorded=0,r.ignoreChange=!1,r.clear(),r.quill.on(i.default.events.EDITOR_CHANGE,(function(t,e,n,o){t!==i.default.events.TEXT_CHANGE||r.ignoreChange||(r.options.userOnly&&o!==i.default.sources.USER?r.transform(e):r.record(e,n))})),r.quill.keyboard.addBinding({key:"Z",shortKey:!0},r.undo.bind(r)),r.quill.keyboard.addBinding({key:"Z",shortKey:!0,shiftKey:!0},r.redo.bind(r)),/Win/i.test(navigator.platform)&&r.quill.keyboard.addBinding({key:"Y",shortKey:!0},r.redo.bind(r)),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),r(e,[{key:"change",value:function(t,e){if(0!==this.stack[t].length){var n=this.stack[t].pop();this.stack[e].push(n),this.lastRecorded=0,this.ignoreChange=!0,this.quill.updateContents(n[t],i.default.sources.USER),this.ignoreChange=!1;var r=a(n[t]);this.quill.setSelection(r)}}},{key:"clear",value:function(){this.stack={undo:[],redo:[]}}},{key:"cutoff",value:function(){this.lastRecorded=0}},{key:"record",value:function(t,e){if(0!==t.ops.length){this.stack.redo=[];var n=this.quill.getContents().diff(e),r=Date.now();if(this.lastRecorded+this.options.delay>r&&this.stack.undo.length>0){var o=this.stack.undo.pop();n=n.compose(o.undo),t=o.redo.compose(t)}else this.lastRecorded=r;this.stack.undo.push({redo:t,undo:n}),this.stack.undo.length>this.options.maxStack&&this.stack.undo.shift()}}},{key:"redo",value:function(){this.change("redo","undo")}},{key:"transform",value:function(t){this.stack.undo.forEach((function(e){e.undo=t.transform(e.undo,!0),e.redo=t.transform(e.redo,!0)})),this.stack.redo.forEach((function(e){e.undo=t.transform(e.undo,!0),e.redo=t.transform(e.redo,!0)}))}},{key:"undo",value:function(){this.change("undo","redo")}}]),e}(l(n(9)).default);function a(t){var e=t.reduce((function(t,e){return t+=e.delete||0}),0),n=t.length()-e;return function(t){var e=t.ops[t.ops.length-1];return null!=e&&(null!=e.insert?"string"==typeof e.insert&&e.insert.endsWith("\n"):null!=e.attributes&&Object.keys(e.attributes).some((function(t){return null!=o.default.query(t,o.default.Scope.BLOCK)})))}(t)&&(n-=1),n}s.DEFAULTS={delay:1e3,maxStack:100,userOnly:!1},e.default=s,e.getLastChangeIndex=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.BaseTooltip=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=p(n(3)),i=p(n(2)),l=p(n(8)),s=p(n(23)),a=p(n(34)),u=p(n(59)),c=p(n(60)),f=p(n(28)),h=p(n(61));function p(t){return t&&t.__esModule?t:{default:t}}function d(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function y(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function v(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var b=[!1,"center","right","justify"],g=["#000000","#e60000","#ff9900","#ffff00","#008a00","#0066cc","#9933ff","#ffffff","#facccc","#ffebcc","#ffffcc","#cce8cc","#cce0f5","#ebd6ff","#bbbbbb","#f06666","#ffc266","#ffff66","#66b966","#66a3e0","#c285ff","#888888","#a10000","#b26b00","#b2b200","#006100","#0047b2","#6b24b2","#444444","#5c0000","#663d00","#666600","#003700","#002966","#3d1466"],m=[!1,"serif","monospace"],x=["1","2","3",!1],_=["small",!1,"large","huge"],O=function(t){function e(t,n){d(this,e);var r=y(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return t.emitter.listenDOM("click",document.body,(function e(n){if(!document.body.contains(t.root))return document.body.removeEventListener("click",e);null==r.tooltip||r.tooltip.root.contains(n.target)||document.activeElement===r.tooltip.textbox||r.quill.hasFocus()||r.tooltip.hide(),null!=r.pickers&&r.pickers.forEach((function(t){t.container.contains(n.target)||t.close()}))})),r}return v(e,t),r(e,[{key:"addModule",value:function(t){var n=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"addModule",this).call(this,t);return"toolbar"===t&&this.extendToolbar(n),n}},{key:"buildButtons",value:function(t,e){t.forEach((function(t){(t.getAttribute("class")||"").split(/\s+/).forEach((function(n){if(n.startsWith("ql-")&&(n=n.slice("ql-".length),null!=e[n]))if("direction"===n)t.innerHTML=e[n][""]+e[n].rtl;else if("string"==typeof e[n])t.innerHTML=e[n];else{var r=t.value||"";null!=r&&e[n][r]&&(t.innerHTML=e[n][r])}}))}))}},{key:"buildPickers",value:function(t,e){var n=this;this.pickers=t.map((function(t){if(t.classList.contains("ql-align"))return null==t.querySelector("option")&&w(t,b),new c.default(t,e.align);if(t.classList.contains("ql-background")||t.classList.contains("ql-color")){var n=t.classList.contains("ql-background")?"background":"color";return null==t.querySelector("option")&&w(t,g,"background"===n?"#ffffff":"#000000"),new u.default(t,e[n])}return null==t.querySelector("option")&&(t.classList.contains("ql-font")?w(t,m):t.classList.contains("ql-header")?w(t,x):t.classList.contains("ql-size")&&w(t,_)),new f.default(t)})),this.quill.on(l.default.events.EDITOR_CHANGE,(function(){n.pickers.forEach((function(t){t.update()}))}))}}]),e}(a.default);O.DEFAULTS=(0,o.default)(!0,{},a.default.DEFAULTS,{modules:{toolbar:{handlers:{formula:function(){this.quill.theme.tooltip.edit("formula")},image:function(){var t=this,e=this.container.querySelector("input.ql-image[type=file]");null==e&&((e=document.createElement("input")).setAttribute("type","file"),e.setAttribute("accept","image/png, image/gif, image/jpeg, image/bmp, image/x-icon"),e.classList.add("ql-image"),e.addEventListener("change",(function(){if(null!=e.files&&null!=e.files[0]){var n=new FileReader;n.onload=function(n){var r=t.quill.getSelection(!0);t.quill.updateContents((new i.default).retain(r.index).delete(r.length).insert({image:n.target.result}),l.default.sources.USER),t.quill.setSelection(r.index+1,l.default.sources.SILENT),e.value=""},n.readAsDataURL(e.files[0])}})),this.container.appendChild(e)),e.click()},video:function(){this.quill.theme.tooltip.edit("video")}}}}});var E=function(t){function e(t,n){d(this,e);var r=y(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.textbox=r.root.querySelector('input[type="text"]'),r.listen(),r}return v(e,t),r(e,[{key:"listen",value:function(){var t=this;this.textbox.addEventListener("keydown",(function(e){s.default.match(e,"enter")?(t.save(),e.preventDefault()):s.default.match(e,"escape")&&(t.cancel(),e.preventDefault())}))}},{key:"cancel",value:function(){this.hide()}},{key:"edit",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"link",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;this.root.classList.remove("ql-hidden"),this.root.classList.add("ql-editing"),null!=e?this.textbox.value=e:t!==this.root.getAttribute("data-mode")&&(this.textbox.value=""),this.position(this.quill.getBounds(this.quill.selection.savedRange)),this.textbox.select(),this.textbox.setAttribute("placeholder",this.textbox.getAttribute("data-"+t)||""),this.root.setAttribute("data-mode",t)}},{key:"restoreFocus",value:function(){var t=this.quill.scrollingContainer.scrollTop;this.quill.focus(),this.quill.scrollingContainer.scrollTop=t}},{key:"save",value:function(){var t,e,n=this.textbox.value;switch(this.root.getAttribute("data-mode")){case"link":var r=this.quill.root.scrollTop;this.linkRange?(this.quill.formatText(this.linkRange,"link",n,l.default.sources.USER),delete this.linkRange):(this.restoreFocus(),this.quill.format("link",n,l.default.sources.USER)),this.quill.root.scrollTop=r;break;case"video":e=(t=n).match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/)||t.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/),n=e?(e[1]||"https")+"://www.youtube.com/embed/"+e[2]+"?showinfo=0":(e=t.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/))?(e[1]||"https")+"://player.vimeo.com/video/"+e[2]+"/":t;case"formula":if(!n)break;var o=this.quill.getSelection(!0);if(null!=o){var i=o.index+o.length;this.quill.insertEmbed(i,this.root.getAttribute("data-mode"),n,l.default.sources.USER),"formula"===this.root.getAttribute("data-mode")&&this.quill.insertText(i+1," ",l.default.sources.USER),this.quill.setSelection(i+2,l.default.sources.USER)}}this.textbox.value="",this.hide()}}]),e}(h.default);function w(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];e.forEach((function(e){var r=document.createElement("option");e===n?r.setAttribute("selected","selected"):r.setAttribute("value",e),t.appendChild(r)}))}e.BaseTooltip=E,e.default=O},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){this.head=this.tail=null,this.length=0}return t.prototype.append=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this.insertBefore(t[0],null),t.length>1&&this.append.apply(this,t.slice(1))},t.prototype.contains=function(t){for(var e,n=this.iterator();e=n();)if(e===t)return!0;return!1},t.prototype.insertBefore=function(t,e){t&&(t.next=e,null!=e?(t.prev=e.prev,null!=e.prev&&(e.prev.next=t),e.prev=t,e===this.head&&(this.head=t)):null!=this.tail?(this.tail.next=t,t.prev=this.tail,this.tail=t):(t.prev=null,this.head=this.tail=t),this.length+=1)},t.prototype.offset=function(t){for(var e=0,n=this.head;null!=n;){if(n===t)return e;e+=n.length(),n=n.next}return-1},t.prototype.remove=function(t){this.contains(t)&&(null!=t.prev&&(t.prev.next=t.next),null!=t.next&&(t.next.prev=t.prev),t===this.head&&(this.head=t.next),t===this.tail&&(this.tail=t.prev),this.length-=1)},t.prototype.iterator=function(t){return void 0===t&&(t=this.head),function(){var e=t;return null!=t&&(t=t.next),e}},t.prototype.find=function(t,e){void 0===e&&(e=!1);for(var n,r=this.iterator();n=r();){var o=n.length();if(t<o||e&&t===o&&(null==n.next||0!==n.next.length()))return[n,t];t-=o}return[null,0]},t.prototype.forEach=function(t){for(var e,n=this.iterator();e=n();)t(e)},t.prototype.forEachAt=function(t,e,n){if(!(e<=0))for(var r,o=this.find(t),i=o[0],l=t-o[1],s=this.iterator(i);(r=s())&&l<t+e;){var a=r.length();t>l?n(r,t-l,Math.min(e,l+a-t)):n(r,0,Math.min(a,t+e-l)),l+=a}},t.prototype.map=function(t){return this.reduce((function(e,n){return e.push(t(n)),e}),[])},t.prototype.reduce=function(t,e){for(var n,r=this.iterator();n=r();)e=t(e,n);return e},t}();e.default=r},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(17),l=n(1),s={attributes:!0,characterData:!0,characterDataOldValue:!0,childList:!0,subtree:!0},a=function(t){function e(e){var n=t.call(this,e)||this;return n.scroll=n,n.observer=new MutationObserver((function(t){n.update(t)})),n.observer.observe(n.domNode,s),n.attach(),n}return o(e,t),e.prototype.detach=function(){t.prototype.detach.call(this),this.observer.disconnect()},e.prototype.deleteAt=function(e,n){this.update(),0===e&&n===this.length()?this.children.forEach((function(t){t.remove()})):t.prototype.deleteAt.call(this,e,n)},e.prototype.formatAt=function(e,n,r,o){this.update(),t.prototype.formatAt.call(this,e,n,r,o)},e.prototype.insertAt=function(e,n,r){this.update(),t.prototype.insertAt.call(this,e,n,r)},e.prototype.optimize=function(e,n){var r=this;void 0===e&&(e=[]),void 0===n&&(n={}),t.prototype.optimize.call(this,n);for(var o=[].slice.call(this.observer.takeRecords());o.length>0;)e.push(o.pop());for(var s=function(t,e){void 0===e&&(e=!0),null!=t&&t!==r&&null!=t.domNode.parentNode&&(null==t.domNode[l.DATA_KEY].mutations&&(t.domNode[l.DATA_KEY].mutations=[]),e&&s(t.parent))},a=function(t){null!=t.domNode[l.DATA_KEY]&&null!=t.domNode[l.DATA_KEY].mutations&&(t instanceof i.default&&t.children.forEach(a),t.optimize(n))},u=e,c=0;u.length>0;c+=1){if(c>=100)throw new Error("[Parchment] Maximum optimize iterations reached");for(u.forEach((function(t){var e=l.find(t.target,!0);null!=e&&(e.domNode===t.target&&("childList"===t.type?(s(l.find(t.previousSibling,!1)),[].forEach.call(t.addedNodes,(function(t){var e=l.find(t,!1);s(e,!1),e instanceof i.default&&e.children.forEach((function(t){s(t,!1)}))}))):"attributes"===t.type&&s(e.prev)),s(e))})),this.children.forEach(a),o=(u=[].slice.call(this.observer.takeRecords())).slice();o.length>0;)e.push(o.pop())}},e.prototype.update=function(e,n){var r=this;void 0===n&&(n={}),(e=e||this.observer.takeRecords()).map((function(t){var e=l.find(t.target,!0);return null==e?null:null==e.domNode[l.DATA_KEY].mutations?(e.domNode[l.DATA_KEY].mutations=[t],e):(e.domNode[l.DATA_KEY].mutations.push(t),null)})).forEach((function(t){null!=t&&t!==r&&null!=t.domNode[l.DATA_KEY]&&t.update(t.domNode[l.DATA_KEY].mutations||[],n)})),null!=this.domNode[l.DATA_KEY].mutations&&t.prototype.update.call(this,this.domNode[l.DATA_KEY].mutations,n),this.optimize(e,n)},e.blotName="scroll",e.defaultChild="block",e.scope=l.Scope.BLOCK_BLOT,e.tagName="DIV",e}(i.default);e.default=a},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(18),l=n(1),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.formats=function(n){if(n.tagName!==e.tagName)return t.formats.call(this,n)},e.prototype.format=function(n,r){var o=this;n!==this.statics.blotName||r?t.prototype.format.call(this,n,r):(this.children.forEach((function(t){t instanceof i.default||(t=t.wrap(e.blotName,!0)),o.attributes.copy(t)})),this.unwrap())},e.prototype.formatAt=function(e,n,r,o){null!=this.formats()[r]||l.query(r,l.Scope.ATTRIBUTE)?this.isolate(e,n).format(r,o):t.prototype.formatAt.call(this,e,n,r,o)},e.prototype.optimize=function(n){t.prototype.optimize.call(this,n);var r=this.formats();if(0===Object.keys(r).length)return this.unwrap();var o=this.next;o instanceof e&&o.prev===this&&function(t,e){if(Object.keys(t).length!==Object.keys(e).length)return!1;for(var n in t)if(t[n]!==e[n])return!1;return!0}(r,o.formats())&&(o.moveChildren(this),o.remove())},e.blotName="inline",e.scope=l.Scope.INLINE_BLOT,e.tagName="SPAN",e}(i.default);e.default=s},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(18),l=n(1),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.formats=function(n){var r=l.query(e.blotName).tagName;if(n.tagName!==r)return t.formats.call(this,n)},e.prototype.format=function(n,r){null!=l.query(n,l.Scope.BLOCK)&&(n!==this.statics.blotName||r?t.prototype.format.call(this,n,r):this.replaceWith(e.blotName))},e.prototype.formatAt=function(e,n,r,o){null!=l.query(r,l.Scope.BLOCK)?this.format(r,o):t.prototype.formatAt.call(this,e,n,r,o)},e.prototype.insertAt=function(e,n,r){if(null==r||null!=l.query(n,l.Scope.INLINE))t.prototype.insertAt.call(this,e,n,r);else{var o=this.split(e),i=l.create(n,r);o.parent.insertBefore(i,o)}},e.prototype.update=function(e,n){navigator.userAgent.match(/Trident/)?this.build():t.prototype.update.call(this,e,n)},e.blotName="block",e.scope=l.Scope.BLOCK_BLOT,e.tagName="P",e}(i.default);e.default=s},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.formats=function(t){},e.prototype.format=function(e,n){t.prototype.formatAt.call(this,0,this.length(),e,n)},e.prototype.formatAt=function(e,n,r,o){0===e&&n===this.length()?this.format(r,o):t.prototype.formatAt.call(this,e,n,r,o)},e.prototype.formats=function(){return this.statics.formats(this.domNode)},e}(n(19).default);e.default=i},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(19),l=n(1),s=function(t){function e(e){var n=t.call(this,e)||this;return n.text=n.statics.value(n.domNode),n}return o(e,t),e.create=function(t){return document.createTextNode(t)},e.value=function(t){var e=t.data;return e.normalize&&(e=e.normalize()),e},e.prototype.deleteAt=function(t,e){this.domNode.data=this.text=this.text.slice(0,t)+this.text.slice(t+e)},e.prototype.index=function(t,e){return this.domNode===t?e:-1},e.prototype.insertAt=function(e,n,r){null==r?(this.text=this.text.slice(0,e)+n+this.text.slice(e),this.domNode.data=this.text):t.prototype.insertAt.call(this,e,n,r)},e.prototype.length=function(){return this.text.length},e.prototype.optimize=function(n){t.prototype.optimize.call(this,n),this.text=this.statics.value(this.domNode),0===this.text.length?this.remove():this.next instanceof e&&this.next.prev===this&&(this.insertAt(this.length(),this.next.value()),this.next.remove())},e.prototype.position=function(t,e){return void 0===e&&(e=!1),[this.domNode,t]},e.prototype.split=function(t,e){if(void 0===e&&(e=!1),!e){if(0===t)return this;if(t===this.length())return this.next}var n=l.create(this.domNode.splitText(t));return this.parent.insertBefore(n,this.next),this.text=this.statics.value(this.domNode),n},e.prototype.update=function(t,e){var n=this;t.some((function(t){return"characterData"===t.type&&t.target===n.domNode}))&&(this.text=this.statics.value(this.domNode))},e.prototype.value=function(){return this.text},e.blotName="text",e.scope=l.Scope.INLINE_BLOT,e}(i.default);e.default=s},function(t,e,n){"use strict";var r=document.createElement("div");if(r.classList.toggle("test-class",!1),r.classList.contains("test-class")){var o=DOMTokenList.prototype.toggle;DOMTokenList.prototype.toggle=function(t,e){return arguments.length>1&&!this.contains(t)==!e?e:o.call(this,t)}}String.prototype.startsWith||(String.prototype.startsWith=function(t,e){return e=e||0,this.substr(e,t.length)===t}),String.prototype.endsWith||(String.prototype.endsWith=function(t,e){var n=this.toString();("number"!=typeof e||!isFinite(e)||Math.floor(e)!==e||e>n.length)&&(e=n.length),e-=t.length;var r=n.indexOf(t,e);return-1!==r&&r===e}),Array.prototype.find||Object.defineProperty(Array.prototype,"find",{value:function(t){if(null===this)throw new TypeError("Array.prototype.find called on null or undefined");if("function"!=typeof t)throw new TypeError("predicate must be a function");for(var e,n=Object(this),r=n.length>>>0,o=arguments[1],i=0;i<r;i++)if(e=n[i],t.call(o,e,i,n))return e}}),document.addEventListener("DOMContentLoaded",(function(){document.execCommand("enableObjectResizing",!1,!1),document.execCommand("autoUrlDetect",!1,!1)}))},function(t,e){function n(t,e,l){if(t==e)return t?[[0,t]]:[];(l<0||t.length<l)&&(l=null);var a=o(t,e),u=t.substring(0,a);a=i(t=t.substring(a),e=e.substring(a));var c=t.substring(t.length-a),f=function(t,e){var l;if(!t)return[[1,e]];if(!e)return[[-1,t]];var s=t.length>e.length?t:e,a=t.length>e.length?e:t,u=s.indexOf(a);if(-1!=u)return l=[[1,s.substring(0,u)],[0,a],[1,s.substring(u+a.length)]],t.length>e.length&&(l[0][0]=l[2][0]=-1),l;if(1==a.length)return[[-1,t],[1,e]];var c=function(t,e){var n=t.length>e.length?t:e,r=t.length>e.length?e:t;if(n.length<4||2*r.length<n.length)return null;function l(t,e,n){for(var r,l,s,a,u=t.substring(n,n+Math.floor(t.length/4)),c=-1,f="";-1!=(c=e.indexOf(u,c+1));){var h=o(t.substring(n),e.substring(c)),p=i(t.substring(0,n),e.substring(0,c));f.length<p+h&&(f=e.substring(c-p,c)+e.substring(c,c+h),r=t.substring(0,n-p),l=t.substring(n+h),s=e.substring(0,c-p),a=e.substring(c+h))}return 2*f.length>=t.length?[r,l,s,a,f]:null}var s,a,u,c,f,h=l(n,r,Math.ceil(n.length/4)),p=l(n,r,Math.ceil(n.length/2));if(!h&&!p)return null;s=p?h&&h[4].length>p[4].length?h:p:h,t.length>e.length?(a=s[0],u=s[1],c=s[2],f=s[3]):(c=s[0],f=s[1],a=s[2],u=s[3]);var d=s[4];return[a,u,c,f,d]}(t,e);if(c){var f=c[0],h=c[1],p=c[2],d=c[3],y=c[4],v=n(f,p),b=n(h,d);return v.concat([[0,y]],b)}return function(t,e){for(var n=t.length,o=e.length,i=Math.ceil((n+o)/2),l=i,s=2*i,a=new Array(s),u=new Array(s),c=0;c<s;c++)a[c]=-1,u[c]=-1;a[l+1]=0,u[l+1]=0;for(var f=n-o,h=f%2!=0,p=0,d=0,y=0,v=0,b=0;b<i;b++){for(var g=-b+p;g<=b-d;g+=2){for(var m=l+g,x=(k=g==-b||g!=b&&a[m-1]<a[m+1]?a[m+1]:a[m-1]+1)-g;k<n&&x<o&&t.charAt(k)==e.charAt(x);)k++,x++;if(a[m]=k,k>n)d+=2;else if(x>o)p+=2;else if(h&&(E=l+f-g)>=0&&E<s&&-1!=u[E]){var _=n-u[E];if(k>=_)return r(t,e,k,x)}}for(var O=-b+y;O<=b-v;O+=2){for(var E=l+O,w=(_=O==-b||O!=b&&u[E-1]<u[E+1]?u[E+1]:u[E-1]+1)-O;_<n&&w<o&&t.charAt(n-_-1)==e.charAt(o-w-1);)_++,w++;if(u[E]=_,_>n)v+=2;else if(w>o)y+=2;else if(!h&&(m=l+f-O)>=0&&m<s&&-1!=a[m]){var k=a[m];if(x=l+k-m,k>=(_=n-_))return r(t,e,k,x)}}}return[[-1,t],[1,e]]}(t,e)}(t=t.substring(0,t.length-a),e=e.substring(0,e.length-a));return u&&f.unshift([0,u]),c&&f.push([0,c]),function t(e){e.push([0,""]);for(var n,r=0,l=0,s=0,a="",u="";r<e.length;)switch(e[r][0]){case 1:s++,u+=e[r][1],r++;break;case-1:l++,a+=e[r][1],r++;break;case 0:l+s>1?(0!==l&&0!==s&&(0!==(n=o(u,a))&&(r-l-s>0&&0==e[r-l-s-1][0]?e[r-l-s-1][1]+=u.substring(0,n):(e.splice(0,0,[0,u.substring(0,n)]),r++),u=u.substring(n),a=a.substring(n)),0!==(n=i(u,a))&&(e[r][1]=u.substring(u.length-n)+e[r][1],u=u.substring(0,u.length-n),a=a.substring(0,a.length-n))),0===l?e.splice(r-s,l+s,[1,u]):0===s?e.splice(r-l,l+s,[-1,a]):e.splice(r-l-s,l+s,[-1,a],[1,u]),r=r-l-s+(l?1:0)+(s?1:0)+1):0!==r&&0==e[r-1][0]?(e[r-1][1]+=e[r][1],e.splice(r,1)):r++,s=0,l=0,a="",u=""}""===e[e.length-1][1]&&e.pop();var c=!1;for(r=1;r<e.length-1;)0==e[r-1][0]&&0==e[r+1][0]&&(e[r][1].substring(e[r][1].length-e[r-1][1].length)==e[r-1][1]?(e[r][1]=e[r-1][1]+e[r][1].substring(0,e[r][1].length-e[r-1][1].length),e[r+1][1]=e[r-1][1]+e[r+1][1],e.splice(r-1,1),c=!0):e[r][1].substring(0,e[r+1][1].length)==e[r+1][1]&&(e[r-1][1]+=e[r+1][1],e[r][1]=e[r][1].substring(e[r+1][1].length)+e[r+1][1],e.splice(r+1,1),c=!0)),r++;c&&t(e)}(f),null!=l&&(f=function(t,e){var n=function(t,e){if(0===e)return[0,t];for(var n=0,r=0;r<t.length;r++){var o=t[r];if(-1===o[0]||0===o[0]){var i=n+o[1].length;if(e===i)return[r+1,t];if(e<i){t=t.slice();var l=e-n,s=[o[0],o[1].slice(0,l)],a=[o[0],o[1].slice(l)];return t.splice(r,1,s,a),[r+1,t]}n=i}}throw new Error("cursor_pos is out of bounds!")}(t,e),r=n[1],o=n[0],i=r[o],l=r[o+1];if(null==i)return t;if(0!==i[0])return t;if(null!=l&&i[1]+l[1]===l[1]+i[1])return r.splice(o,2,l,i),s(r,o,2);if(null!=l&&0===l[1].indexOf(i[1])){r.splice(o,2,[l[0],i[1]],[0,i[1]]);var a=l[1].slice(i[1].length);return a.length>0&&r.splice(o+2,0,[l[0],a]),s(r,o,3)}return t}(f,l)),f=function(t){for(var e=!1,n=function(t){return t.charCodeAt(0)>=56320&&t.charCodeAt(0)<=57343},r=2;r<t.length;r+=1)0===t[r-2][0]&&(o=t[r-2][1]).charCodeAt(o.length-1)>=55296&&o.charCodeAt(o.length-1)<=56319&&-1===t[r-1][0]&&n(t[r-1][1])&&1===t[r][0]&&n(t[r][1])&&(e=!0,t[r-1][1]=t[r-2][1].slice(-1)+t[r-1][1],t[r][1]=t[r-2][1].slice(-1)+t[r][1],t[r-2][1]=t[r-2][1].slice(0,-1));var o;if(!e)return t;var i=[];for(r=0;r<t.length;r+=1)t[r][1].length>0&&i.push(t[r]);return i}(f)}function r(t,e,r,o){var i=t.substring(0,r),l=e.substring(0,o),s=t.substring(r),a=e.substring(o),u=n(i,l),c=n(s,a);return u.concat(c)}function o(t,e){if(!t||!e||t.charAt(0)!=e.charAt(0))return 0;for(var n=0,r=Math.min(t.length,e.length),o=r,i=0;n<o;)t.substring(i,o)==e.substring(i,o)?i=n=o:r=o,o=Math.floor((r-n)/2+n);return o}function i(t,e){if(!t||!e||t.charAt(t.length-1)!=e.charAt(e.length-1))return 0;for(var n=0,r=Math.min(t.length,e.length),o=r,i=0;n<o;)t.substring(t.length-o,t.length-i)==e.substring(e.length-o,e.length-i)?i=n=o:r=o,o=Math.floor((r-n)/2+n);return o}var l=n;function s(t,e,n){for(var r=e+n-1;r>=0&&r>=e-1;r--)if(r+1<t.length){var o=t[r],i=t[r+1];o[0]===i[1]&&t.splice(r,2,[o[0],o[1]+i[1]])}return t}l.INSERT=1,l.DELETE=-1,l.EQUAL=0,t.exports=l},function(t,e){function n(t){var e=[];for(var n in t)e.push(n);return e}(t.exports="function"==typeof Object.keys?Object.keys:n).shim=n},function(t,e){var n="[object Arguments]"==function(){return Object.prototype.toString.call(arguments)}();function r(t){return"[object Arguments]"==Object.prototype.toString.call(t)}function o(t){return t&&"object"==typeof t&&"number"==typeof t.length&&Object.prototype.hasOwnProperty.call(t,"callee")&&!Object.prototype.propertyIsEnumerable.call(t,"callee")||!1}(e=t.exports=n?r:o).supported=r,e.unsupported=o},function(t,e){"use strict";var n=Object.prototype.hasOwnProperty,r="~";function o(){}function i(t,e,n){this.fn=t,this.context=e,this.once=n||!1}function l(){this._events=new o,this._eventsCount=0}Object.create&&(o.prototype=Object.create(null),(new o).__proto__||(r=!1)),l.prototype.eventNames=function(){var t,e,o=[];if(0===this._eventsCount)return o;for(e in t=this._events)n.call(t,e)&&o.push(r?e.slice(1):e);return Object.getOwnPropertySymbols?o.concat(Object.getOwnPropertySymbols(t)):o},l.prototype.listeners=function(t,e){var n=r?r+t:t,o=this._events[n];if(e)return!!o;if(!o)return[];if(o.fn)return[o.fn];for(var i=0,l=o.length,s=new Array(l);i<l;i++)s[i]=o[i].fn;return s},l.prototype.emit=function(t,e,n,o,i,l){var s=r?r+t:t;if(!this._events[s])return!1;var a,u,c=this._events[s],f=arguments.length;if(c.fn){switch(c.once&&this.removeListener(t,c.fn,void 0,!0),f){case 1:return c.fn.call(c.context),!0;case 2:return c.fn.call(c.context,e),!0;case 3:return c.fn.call(c.context,e,n),!0;case 4:return c.fn.call(c.context,e,n,o),!0;case 5:return c.fn.call(c.context,e,n,o,i),!0;case 6:return c.fn.call(c.context,e,n,o,i,l),!0}for(u=1,a=new Array(f-1);u<f;u++)a[u-1]=arguments[u];c.fn.apply(c.context,a)}else{var h,p=c.length;for(u=0;u<p;u++)switch(c[u].once&&this.removeListener(t,c[u].fn,void 0,!0),f){case 1:c[u].fn.call(c[u].context);break;case 2:c[u].fn.call(c[u].context,e);break;case 3:c[u].fn.call(c[u].context,e,n);break;case 4:c[u].fn.call(c[u].context,e,n,o);break;default:if(!a)for(h=1,a=new Array(f-1);h<f;h++)a[h-1]=arguments[h];c[u].fn.apply(c[u].context,a)}}return!0},l.prototype.on=function(t,e,n){var o=new i(e,n||this),l=r?r+t:t;return this._events[l]?this._events[l].fn?this._events[l]=[this._events[l],o]:this._events[l].push(o):(this._events[l]=o,this._eventsCount++),this},l.prototype.once=function(t,e,n){var o=new i(e,n||this,!0),l=r?r+t:t;return this._events[l]?this._events[l].fn?this._events[l]=[this._events[l],o]:this._events[l].push(o):(this._events[l]=o,this._eventsCount++),this},l.prototype.removeListener=function(t,e,n,i){var l=r?r+t:t;if(!this._events[l])return this;if(!e)return 0==--this._eventsCount?this._events=new o:delete this._events[l],this;var s=this._events[l];if(s.fn)s.fn!==e||i&&!s.once||n&&s.context!==n||(0==--this._eventsCount?this._events=new o:delete this._events[l]);else{for(var a=0,u=[],c=s.length;a<c;a++)(s[a].fn!==e||i&&!s[a].once||n&&s[a].context!==n)&&u.push(s[a]);u.length?this._events[l]=1===u.length?u[0]:u:0==--this._eventsCount?this._events=new o:delete this._events[l]}return this},l.prototype.removeAllListeners=function(t){var e;return t?(e=r?r+t:t,this._events[e]&&(0==--this._eventsCount?this._events=new o:delete this._events[e])):(this._events=new o,this._eventsCount=0),this},l.prototype.off=l.prototype.removeListener,l.prototype.addListener=l.prototype.on,l.prototype.setMaxListeners=function(){return this},l.prefixed=r,l.EventEmitter=l,void 0!==t&&(t.exports=l)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.matchText=e.matchSpacing=e.matchNewline=e.matchBlot=e.matchAttributor=e.default=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var l,s=t[Symbol.iterator]();!(r=(l=s.next()).done)&&(n.push(l.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")},i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),l=m(n(3)),s=m(n(2)),a=m(n(0)),u=m(n(5)),c=m(n(10)),f=m(n(9)),h=n(36),p=n(37),d=m(n(13)),y=n(26),v=n(38),b=n(39),g=n(40);function m(t){return t&&t.__esModule?t:{default:t}}function x(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var _=(0,c.default)("quill:clipboard"),O="__ql-matcher",E=[[Node.TEXT_NODE,I],[Node.TEXT_NODE,P],["br",function(t,e){return T(e,"\n")||e.insert("\n"),e}],[Node.ELEMENT_NODE,P],[Node.ELEMENT_NODE,C],[Node.ELEMENT_NODE,R],[Node.ELEMENT_NODE,L],[Node.ELEMENT_NODE,function(t,e){var n={},r=t.style||{};return r.fontStyle&&"italic"===q(t).fontStyle&&(n.italic=!0),r.fontWeight&&(q(t).fontWeight.startsWith("bold")||parseInt(q(t).fontWeight)>=700)&&(n.bold=!0),Object.keys(n).length>0&&(e=N(e,n)),parseFloat(r.textIndent||0)>0&&(e=(new s.default).insert("\t").concat(e)),e}],["li",function(t,e){var n=a.default.query(t);if(null==n||"list-item"!==n.blotName||!T(e,"\n"))return e;for(var r=-1,o=t.parentNode;!o.classList.contains("ql-clipboard");)"list"===(a.default.query(o)||{}).blotName&&(r+=1),o=o.parentNode;return r<=0?e:e.compose((new s.default).retain(e.length()-1).retain(1,{indent:r}))}],["b",j.bind(j,"bold")],["i",j.bind(j,"italic")],["style",function(){return new s.default}]],w=[h.AlignAttribute,v.DirectionAttribute].reduce((function(t,e){return t[e.keyName]=e,t}),{}),k=[h.AlignStyle,p.BackgroundStyle,y.ColorStyle,v.DirectionStyle,b.FontStyle,g.SizeStyle].reduce((function(t,e){return t[e.keyName]=e,t}),{}),A=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.quill.root.addEventListener("paste",r.onPaste.bind(r)),r.container=r.quill.addContainer("ql-clipboard"),r.container.setAttribute("contenteditable",!0),r.container.setAttribute("tabindex",-1),r.matchers=[],E.concat(r.options.matchers).forEach((function(t){var e=o(t,2),i=e[0],l=e[1];(n.matchVisual||l!==R)&&r.addMatcher(i,l)})),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),i(e,[{key:"addMatcher",value:function(t,e){this.matchers.push([t,e])}},{key:"convert",value:function(t){if("string"==typeof t)return this.container.innerHTML=t.replace(/\>\r?\n +\</g,"><"),this.convert();var e=this.quill.getFormat(this.quill.selection.savedRange.index);if(e[d.default.blotName]){var n=this.container.innerText;return this.container.innerHTML="",(new s.default).insert(n,x({},d.default.blotName,e[d.default.blotName]))}var r=this.prepareMatching(),i=o(r,2),l=i[0],a=i[1],u=function t(e,n,r){return e.nodeType===e.TEXT_NODE?r.reduce((function(t,n){return n(e,t)}),new s.default):e.nodeType===e.ELEMENT_NODE?[].reduce.call(e.childNodes||[],(function(o,i){var l=t(i,n,r);return i.nodeType===e.ELEMENT_NODE&&(l=n.reduce((function(t,e){return e(i,t)}),l),l=(i[O]||[]).reduce((function(t,e){return e(i,t)}),l)),o.concat(l)}),new s.default):new s.default}(this.container,l,a);return T(u,"\n")&&null==u.ops[u.ops.length-1].attributes&&(u=u.compose((new s.default).retain(u.length()-1).delete(1))),_.log("convert",this.container.innerHTML,u),this.container.innerHTML="",u}},{key:"dangerouslyPasteHTML",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:u.default.sources.API;if("string"==typeof t)this.quill.setContents(this.convert(t),e),this.quill.setSelection(0,u.default.sources.SILENT);else{var r=this.convert(e);this.quill.updateContents((new s.default).retain(t).concat(r),n),this.quill.setSelection(t+r.length(),u.default.sources.SILENT)}}},{key:"onPaste",value:function(t){var e=this;if(!t.defaultPrevented&&this.quill.isEnabled()){var n=this.quill.getSelection(),r=(new s.default).retain(n.index),o=this.quill.scrollingContainer.scrollTop;this.container.focus(),this.quill.selection.update(u.default.sources.SILENT),setTimeout((function(){r=r.concat(e.convert()).delete(n.length),e.quill.updateContents(r,u.default.sources.USER),e.quill.setSelection(r.length()-n.length,u.default.sources.SILENT),e.quill.scrollingContainer.scrollTop=o,e.quill.focus()}),1)}}},{key:"prepareMatching",value:function(){var t=this,e=[],n=[];return this.matchers.forEach((function(r){var i=o(r,2),l=i[0],s=i[1];switch(l){case Node.TEXT_NODE:n.push(s);break;case Node.ELEMENT_NODE:e.push(s);break;default:[].forEach.call(t.container.querySelectorAll(l),(function(t){t[O]=t[O]||[],t[O].push(s)}))}})),[e,n]}}]),e}(f.default);function N(t,e,n){return"object"===(void 0===e?"undefined":r(e))?Object.keys(e).reduce((function(t,n){return N(t,n,e[n])}),t):t.reduce((function(t,r){return r.attributes&&r.attributes[e]?t.push(r):t.insert(r.insert,(0,l.default)({},x({},e,n),r.attributes))}),new s.default)}function q(t){return t.nodeType!==Node.ELEMENT_NODE?{}:t["__ql-computed-style"]||(t["__ql-computed-style"]=window.getComputedStyle(t))}function T(t,e){for(var n="",r=t.ops.length-1;r>=0&&n.length<e.length;--r){var o=t.ops[r];if("string"!=typeof o.insert)break;n=o.insert+n}return n.slice(-1*e.length)===e}function S(t){if(0===t.childNodes.length)return!1;var e=q(t);return["block","list-item"].indexOf(e.display)>-1}function j(t,e,n){return N(n,t,!0)}function L(t,e){var n=a.default.Attributor.Attribute.keys(t),r=a.default.Attributor.Class.keys(t),o=a.default.Attributor.Style.keys(t),i={};return n.concat(r).concat(o).forEach((function(e){var n=a.default.query(e,a.default.Scope.ATTRIBUTE);null!=n&&(i[n.attrName]=n.value(t),i[n.attrName])||(null==(n=w[e])||n.attrName!==e&&n.keyName!==e||(i[n.attrName]=n.value(t)||void 0),null==(n=k[e])||n.attrName!==e&&n.keyName!==e||(n=k[e],i[n.attrName]=n.value(t)||void 0))})),Object.keys(i).length>0&&(e=N(e,i)),e}function C(t,e){var n=a.default.query(t);if(null==n)return e;if(n.prototype instanceof a.default.Embed){var r={},o=n.value(t);null!=o&&(r[n.blotName]=o,e=(new s.default).insert(r,n.formats(t)))}else"function"==typeof n.formats&&(e=N(e,n.blotName,n.formats(t)));return e}function P(t,e){return T(e,"\n")||(S(t)||e.length()>0&&t.nextSibling&&S(t.nextSibling))&&e.insert("\n"),e}function R(t,e){if(S(t)&&null!=t.nextElementSibling&&!T(e,"\n\n")){var n=t.offsetHeight+parseFloat(q(t).marginTop)+parseFloat(q(t).marginBottom);t.nextElementSibling.offsetTop>t.offsetTop+1.5*n&&e.insert("\n")}return e}function I(t,e){var n=t.data;if("O:P"===t.parentNode.tagName)return e.insert(n.trim());if(0===n.trim().length&&t.parentNode.classList.contains("ql-clipboard"))return e;if(!q(t.parentNode).whiteSpace.startsWith("pre")){var r=function(t,e){return(e=e.replace(/[^\u00a0]/g,"")).length<1&&t?" ":e};n=(n=n.replace(/\r\n/g," ").replace(/\n/g," ")).replace(/\s\s+/g,r.bind(r,!0)),(null==t.previousSibling&&S(t.parentNode)||null!=t.previousSibling&&S(t.previousSibling))&&(n=n.replace(/^\s+/,r.bind(r,!1))),(null==t.nextSibling&&S(t.parentNode)||null!=t.nextSibling&&S(t.nextSibling))&&(n=n.replace(/\s+$/,r.bind(r,!1)))}return e.insert(n)}A.DEFAULTS={matchers:[],matchVisual:!0},e.default=A,e.matchAttributor=L,e.matchBlot=C,e.matchNewline=P,e.matchSpacing=R,e.matchText=I},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0},l=n(6);function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var u=function(t){function e(){return s(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),o(e,[{key:"optimize",value:function(t){i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"optimize",this).call(this,t),this.domNode.tagName!==this.statics.tagName[0]&&this.replaceWith(this.statics.blotName)}}],[{key:"create",value:function(){return i(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this)}},{key:"formats",value:function(){return!0}}]),e}(((r=l)&&r.__esModule?r:{default:r}).default);u.blotName="bold",u.tagName=["STRONG","B"],e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.addControls=e.default=void 0;var r=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var l,s=t[Symbol.iterator]();!(r=(l=s.next()).done)&&(n.push(l.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")},o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=c(n(2)),l=c(n(0)),s=c(n(5)),a=c(n(10)),u=c(n(9));function c(t){return t&&t.__esModule?t:{default:t}}function f(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var h=(0,a.default)("quill:toolbar"),p=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var o,i=f(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));if(Array.isArray(i.options.container)){var l=document.createElement("div");y(l,i.options.container),t.container.parentNode.insertBefore(l,t.container),i.container=l}else"string"==typeof i.options.container?i.container=document.querySelector(i.options.container):i.container=i.options.container;return i.container instanceof HTMLElement?(i.container.classList.add("ql-toolbar"),i.controls=[],i.handlers={},Object.keys(i.options.handlers).forEach((function(t){i.addHandler(t,i.options.handlers[t])})),[].forEach.call(i.container.querySelectorAll("button, select"),(function(t){i.attach(t)})),i.quill.on(s.default.events.EDITOR_CHANGE,(function(t,e){t===s.default.events.SELECTION_CHANGE&&i.update(e)})),i.quill.on(s.default.events.SCROLL_OPTIMIZE,(function(){var t=i.quill.selection.getRange(),e=r(t,1)[0];i.update(e)})),i):(o=h.error("Container required for toolbar",i.options),f(i,o))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),o(e,[{key:"addHandler",value:function(t,e){this.handlers[t]=e}},{key:"attach",value:function(t){var e=this,n=[].find.call(t.classList,(function(t){return 0===t.indexOf("ql-")}));if(n){if(n=n.slice("ql-".length),"BUTTON"===t.tagName&&t.setAttribute("type","button"),null==this.handlers[n]){if(null!=this.quill.scroll.whitelist&&null==this.quill.scroll.whitelist[n])return void h.warn("ignoring attaching to disabled format",n,t);if(null==l.default.query(n))return void h.warn("ignoring attaching to nonexistent format",n,t)}var o="SELECT"===t.tagName?"change":"click";t.addEventListener(o,(function(o){var a=void 0;if("SELECT"===t.tagName){if(t.selectedIndex<0)return;var u=t.options[t.selectedIndex];a=!u.hasAttribute("selected")&&(u.value||!1)}else a=!t.classList.contains("ql-active")&&(t.value||!t.hasAttribute("value")),o.preventDefault();e.quill.focus();var c=e.quill.selection.getRange(),f=r(c,1)[0];if(null!=e.handlers[n])e.handlers[n].call(e,a);else if(l.default.query(n).prototype instanceof l.default.Embed){if(!(a=prompt("Enter "+n)))return;e.quill.updateContents((new i.default).retain(f.index).delete(f.length).insert(function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}({},n,a)),s.default.sources.USER)}else e.quill.format(n,a,s.default.sources.USER);e.update(f)})),this.controls.push([n,t])}}},{key:"update",value:function(t){var e=null==t?{}:this.quill.getFormat(t);this.controls.forEach((function(n){var o=r(n,2),i=o[0],l=o[1];if("SELECT"===l.tagName){var s=void 0;if(null==t)s=null;else if(null==e[i])s=l.querySelector("option[selected]");else if(!Array.isArray(e[i])){var a=e[i];"string"==typeof a&&(a=a.replace(/\"/g,'\\"')),s=l.querySelector('option[value="'+a+'"]')}null==s?(l.value="",l.selectedIndex=-1):s.selected=!0}else if(null==t)l.classList.remove("ql-active");else if(l.hasAttribute("value")){var u=e[i]===l.getAttribute("value")||null!=e[i]&&e[i].toString()===l.getAttribute("value")||null==e[i]&&!l.getAttribute("value");l.classList.toggle("ql-active",u)}else l.classList.toggle("ql-active",null!=e[i])}))}}]),e}(u.default);function d(t,e,n){var r=document.createElement("button");r.setAttribute("type","button"),r.classList.add("ql-"+e),null!=n&&(r.value=n),t.appendChild(r)}function y(t,e){Array.isArray(e[0])||(e=[e]),e.forEach((function(e){var n=document.createElement("span");n.classList.add("ql-formats"),e.forEach((function(t){if("string"==typeof t)d(n,t);else{var e=Object.keys(t)[0],r=t[e];Array.isArray(r)?function(t,e,n){var r=document.createElement("select");r.classList.add("ql-"+e),n.forEach((function(t){var e=document.createElement("option");!1!==t?e.setAttribute("value",t):e.setAttribute("selected","selected"),r.appendChild(e)})),t.appendChild(r)}(n,e,r):d(n,e,r)}})),t.appendChild(n)}))}p.DEFAULTS={},p.DEFAULTS={container:null,handlers:{clean:function(){var t=this,e=this.quill.getSelection();if(null!=e)if(0==e.length){var n=this.quill.getFormat();Object.keys(n).forEach((function(e){null!=l.default.query(e,l.default.Scope.INLINE)&&t.quill.format(e,!1)}))}else this.quill.removeFormat(e,s.default.sources.USER)},direction:function(t){var e=this.quill.getFormat().align;"rtl"===t&&null==e?this.quill.format("align","right",s.default.sources.USER):t||"right"!==e||this.quill.format("align",!1,s.default.sources.USER),this.quill.format("direction",t,s.default.sources.USER)},indent:function(t){var e=this.quill.getSelection(),n=this.quill.getFormat(e),r=parseInt(n.indent||0);if("+1"===t||"-1"===t){var o="+1"===t?1:-1;"rtl"===n.direction&&(o*=-1),this.quill.format("indent",r+o,s.default.sources.USER)}},link:function(t){!0===t&&(t=prompt("Enter link URL:")),this.quill.format("link",t,s.default.sources.USER)},list:function(t){var e=this.quill.getSelection(),n=this.quill.getFormat(e);"check"===t?"checked"===n.list||"unchecked"===n.list?this.quill.format("list",!1,s.default.sources.USER):this.quill.format("list","unchecked",s.default.sources.USER):this.quill.format("list",t,s.default.sources.USER)}}},e.default=p,e.addControls=y},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <polyline class="ql-even ql-stroke" points="5 7 3 9 5 11"></polyline> <polyline class="ql-even ql-stroke" points="13 7 15 9 13 11"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>'},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0},l=n(28),s=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return r.label.innerHTML=n,r.container.classList.add("ql-color-picker"),[].slice.call(r.container.querySelectorAll(".ql-picker-item"),0,7).forEach((function(t){t.classList.add("ql-primary")})),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),o(e,[{key:"buildItem",value:function(t){var n=i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"buildItem",this).call(this,t);return n.style.backgroundColor=t.getAttribute("value")||"",n}},{key:"selectItem",value:function(t,n){i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"selectItem",this).call(this,t,n);var r=this.label.querySelector(".ql-color-label"),o=t&&t.getAttribute("data-value")||"";r&&("line"===r.tagName?r.style.stroke=o:r.style.fill=o)}}]),e}(((r=l)&&r.__esModule?r:{default:r}).default);e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(28),l=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return r.container.classList.add("ql-icon-picker"),[].forEach.call(r.container.querySelectorAll(".ql-picker-item"),(function(t){t.innerHTML=n[t.getAttribute("data-value")||""]})),r.defaultItem=r.container.querySelector(".ql-selected"),r.selectItem(r.defaultItem),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),o(e,[{key:"selectItem",value:function(t,n){(function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0})(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"selectItem",this).call(this,t,n),t=t||this.defaultItem,this.label.innerHTML=t.innerHTML}}]),e}(((r=i)&&r.__esModule?r:{default:r}).default);e.default=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function(){function t(e,n){var r=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.quill=e,this.boundsContainer=n||document.body,this.root=e.addContainer("ql-tooltip"),this.root.innerHTML=this.constructor.TEMPLATE,this.quill.root===this.quill.scrollingContainer&&this.quill.root.addEventListener("scroll",(function(){r.root.style.marginTop=-1*r.quill.root.scrollTop+"px"})),this.hide()}return r(t,[{key:"hide",value:function(){this.root.classList.add("ql-hidden")}},{key:"position",value:function(t){var e=t.left+t.width/2-this.root.offsetWidth/2,n=t.bottom+this.quill.root.scrollTop;this.root.style.left=e+"px",this.root.style.top=n+"px",this.root.classList.remove("ql-flip");var r=this.boundsContainer.getBoundingClientRect(),o=this.root.getBoundingClientRect(),i=0;if(o.right>r.right&&(i=r.right-o.right,this.root.style.left=e+i+"px"),o.left<r.left&&(i=r.left-o.left,this.root.style.left=e+i+"px"),o.bottom>r.bottom){var l=o.bottom-o.top,s=t.bottom-t.top+l;this.root.style.top=n-s+"px",this.root.classList.add("ql-flip")}return i}},{key:"show",value:function(){this.root.classList.remove("ql-editing"),this.root.classList.remove("ql-hidden")}}]),t}();e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var l,s=t[Symbol.iterator]();!(r=(l=s.next()).done)&&(n.push(l.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")},o=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0},i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),l=p(n(3)),s=p(n(8)),a=n(43),u=p(a),c=p(n(27)),f=n(15),h=p(n(41));function p(t){return t&&t.__esModule?t:{default:t}}function d(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function y(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function v(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var b=[[{header:["1","2","3",!1]}],["bold","italic","underline","link"],[{list:"ordered"},{list:"bullet"}],["clean"]],g=function(t){function e(t,n){d(this,e),null!=n.modules.toolbar&&null==n.modules.toolbar.container&&(n.modules.toolbar.container=b);var r=y(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.quill.container.classList.add("ql-snow"),r}return v(e,t),i(e,[{key:"extendToolbar",value:function(t){t.container.classList.add("ql-snow"),this.buildButtons([].slice.call(t.container.querySelectorAll("button")),h.default),this.buildPickers([].slice.call(t.container.querySelectorAll("select")),h.default),this.tooltip=new m(this.quill,this.options.bounds),t.container.querySelector(".ql-link")&&this.quill.keyboard.addBinding({key:"K",shortKey:!0},(function(e,n){t.handlers.link.call(t,!n.format.link)}))}}]),e}(u.default);g.DEFAULTS=(0,l.default)(!0,{},u.default.DEFAULTS,{modules:{toolbar:{handlers:{link:function(t){if(t){var e=this.quill.getSelection();if(null==e||0==e.length)return;var n=this.quill.getText(e);/^\S+@\S+\.\S+$/.test(n)&&0!==n.indexOf("mailto:")&&(n="mailto:"+n),this.quill.theme.tooltip.edit("link",n)}else this.quill.format("link",!1)}}}}});var m=function(t){function e(t,n){d(this,e);var r=y(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.preview=r.root.querySelector("a.ql-preview"),r}return v(e,t),i(e,[{key:"listen",value:function(){var t=this;o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"listen",this).call(this),this.root.querySelector("a.ql-action").addEventListener("click",(function(e){t.root.classList.contains("ql-editing")?t.save():t.edit("link",t.preview.textContent),e.preventDefault()})),this.root.querySelector("a.ql-remove").addEventListener("click",(function(e){if(null!=t.linkRange){var n=t.linkRange;t.restoreFocus(),t.quill.formatText(n,"link",!1,s.default.sources.USER),delete t.linkRange}e.preventDefault(),t.hide()})),this.quill.on(s.default.events.SELECTION_CHANGE,(function(e,n,o){if(null!=e){if(0===e.length&&o===s.default.sources.USER){var i=t.quill.scroll.descendant(c.default,e.index),l=r(i,2),a=l[0],u=l[1];if(null!=a){t.linkRange=new f.Range(e.index-u,a.length());var h=c.default.formats(a.domNode);return t.preview.textContent=h,t.preview.setAttribute("href",h),t.show(),void t.position(t.quill.getBounds(t.linkRange))}}else delete t.linkRange;t.hide()}}))}},{key:"show",value:function(){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"show",this).call(this),this.root.removeAttribute("data-mode")}}]),e}(a.BaseTooltip);m.TEMPLATE=['<a class="ql-preview" rel="noopener noreferrer" target="_blank" href="about:blank"></a>','<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">','<a class="ql-action"></a>','<a class="ql-remove"></a>'].join(""),e.default=g},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=R(n(29)),o=n(36),i=n(38),l=n(64),s=R(n(65)),a=R(n(66)),u=n(67),c=R(u),f=n(37),h=n(26),p=n(39),d=n(40),y=R(n(56)),v=R(n(68)),b=R(n(27)),g=R(n(69)),m=R(n(70)),x=R(n(71)),_=R(n(72)),O=R(n(73)),E=n(13),w=R(E),k=R(n(74)),A=R(n(75)),N=R(n(57)),q=R(n(41)),T=R(n(28)),S=R(n(59)),j=R(n(60)),L=R(n(61)),C=R(n(108)),P=R(n(62));function R(t){return t&&t.__esModule?t:{default:t}}r.default.register({"attributors/attribute/direction":i.DirectionAttribute,"attributors/class/align":o.AlignClass,"attributors/class/background":f.BackgroundClass,"attributors/class/color":h.ColorClass,"attributors/class/direction":i.DirectionClass,"attributors/class/font":p.FontClass,"attributors/class/size":d.SizeClass,"attributors/style/align":o.AlignStyle,"attributors/style/background":f.BackgroundStyle,"attributors/style/color":h.ColorStyle,"attributors/style/direction":i.DirectionStyle,"attributors/style/font":p.FontStyle,"attributors/style/size":d.SizeStyle},!0),r.default.register({"formats/align":o.AlignClass,"formats/direction":i.DirectionClass,"formats/indent":l.IndentClass,"formats/background":f.BackgroundStyle,"formats/color":h.ColorStyle,"formats/font":p.FontClass,"formats/size":d.SizeClass,"formats/blockquote":s.default,"formats/code-block":w.default,"formats/header":a.default,"formats/list":c.default,"formats/bold":y.default,"formats/code":E.Code,"formats/italic":v.default,"formats/link":b.default,"formats/script":g.default,"formats/strike":m.default,"formats/underline":x.default,"formats/image":_.default,"formats/video":O.default,"formats/list/item":u.ListItem,"modules/formula":k.default,"modules/syntax":A.default,"modules/toolbar":N.default,"themes/bubble":C.default,"themes/snow":P.default,"ui/icons":q.default,"ui/picker":T.default,"ui/icon-picker":j.default,"ui/color-picker":S.default,"ui/tooltip":L.default},!0),e.default=r.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.IndentClass=void 0;var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0},l=n(0),s=(r=l)&&r.__esModule?r:{default:r};function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function u(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var c=new(function(t){function e(){return a(this,e),u(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),o(e,[{key:"add",value:function(t,n){if("+1"===n||"-1"===n){var r=this.value(t)||0;n="+1"===n?r+1:r-1}return 0===n?(this.remove(t),!0):i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"add",this).call(this,t,n)}},{key:"canAdd",value:function(t,n){return i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"canAdd",this).call(this,t,n)||i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"canAdd",this).call(this,t,parseInt(n))}},{key:"value",value:function(t){return parseInt(i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"value",this).call(this,t))||void 0}}]),e}(s.default.Attributor.Class))("indent","ql-indent",{scope:s.default.Scope.BLOCK,whitelist:[1,2,3,4,5,6,7,8]});e.IndentClass=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(4);function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var s=function(t){function e(){return i(this,e),l(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e}(((r=o)&&r.__esModule?r:{default:r}).default);s.blotName="blockquote",s.tagName="blockquote",e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(4);function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var a=function(t){function e(){return l(this,e),s(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),o(e,null,[{key:"formats",value:function(t){return this.tagName.indexOf(t.tagName)+1}}]),e}(((r=i)&&r.__esModule?r:{default:r}).default);a.blotName="header",a.tagName=["H1","H2","H3","H4","H5","H6"],e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.ListItem=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0},i=a(n(0)),l=a(n(4)),s=a(n(25));function a(t){return t&&t.__esModule?t:{default:t}}function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function c(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function f(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var h=function(t){function e(){return u(this,e),c(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return f(e,t),r(e,[{key:"format",value:function(t,n){t!==p.blotName||n?o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"format",this).call(this,t,n):this.replaceWith(i.default.create(this.statics.scope))}},{key:"remove",value:function(){null==this.prev&&null==this.next?this.parent.remove():o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"remove",this).call(this)}},{key:"replaceWith",value:function(t,n){return this.parent.isolate(this.offset(this.parent),this.length()),t===this.parent.statics.blotName?(this.parent.replaceWith(t,n),this):(this.parent.unwrap(),o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"replaceWith",this).call(this,t,n))}}],[{key:"formats",value:function(t){return t.tagName===this.tagName?void 0:o(e.__proto__||Object.getPrototypeOf(e),"formats",this).call(this,t)}}]),e}(l.default);h.blotName="list-item",h.tagName="LI";var p=function(t){function e(t){u(this,e);var n=c(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t)),r=function(e){if(e.target.parentNode===t){var r=n.statics.formats(t),o=i.default.find(e.target);"checked"===r?o.format("list","unchecked"):"unchecked"===r&&o.format("list","checked")}};return t.addEventListener("touchstart",r),t.addEventListener("mousedown",r),n}return f(e,t),r(e,null,[{key:"create",value:function(t){var n="ordered"===t?"OL":"UL",r=o(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this,n);return"checked"!==t&&"unchecked"!==t||r.setAttribute("data-checked","checked"===t),r}},{key:"formats",value:function(t){return"OL"===t.tagName?"ordered":"UL"===t.tagName?t.hasAttribute("data-checked")?"true"===t.getAttribute("data-checked")?"checked":"unchecked":"bullet":void 0}}]),r(e,[{key:"format",value:function(t,e){this.children.length>0&&this.children.tail.format(t,e)}},{key:"formats",value:function(){return t={},e=this.statics.blotName,n=this.statics.formats(this.domNode),e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t;var t,e,n}},{key:"insertBefore",value:function(t,n){if(t instanceof h)o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"insertBefore",this).call(this,t,n);else{var r=null==n?this.length():n.offset(this),i=this.split(r);i.parent.insertBefore(t,i)}}},{key:"optimize",value:function(t){o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"optimize",this).call(this,t);var n=this.next;null!=n&&n.prev===this&&n.statics.blotName===this.statics.blotName&&n.domNode.tagName===this.domNode.tagName&&n.domNode.getAttribute("data-checked")===this.domNode.getAttribute("data-checked")&&(n.moveChildren(this),n.remove())}},{key:"replace",value:function(t){if(t.statics.blotName!==this.statics.blotName){var n=i.default.create(this.statics.defaultChild);t.moveChildren(n),this.appendChild(n)}o(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"replace",this).call(this,t)}}]),e}(s.default);p.blotName="list",p.scope=i.default.Scope.BLOCK_BLOT,p.tagName=["OL","UL"],p.defaultChild="list-item",p.allowedChildren=[h],e.ListItem=h,e.default=p},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(56);function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var s=function(t){function e(){return i(this,e),l(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e}(((r=o)&&r.__esModule?r:{default:r}).default);s.blotName="italic",s.tagName=["EM","I"],e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(6);function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var a=function(t){function e(){return l(this,e),s(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),o(e,null,[{key:"create",value:function(t){return"super"===t?document.createElement("sup"):"sub"===t?document.createElement("sub"):function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0}(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this,t)}},{key:"formats",value:function(t){return"SUB"===t.tagName?"sub":"SUP"===t.tagName?"super":void 0}}]),e}(((r=i)&&r.__esModule?r:{default:r}).default);a.blotName="script",a.tagName=["SUB","SUP"],e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(6);function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var s=function(t){function e(){return i(this,e),l(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e}(((r=o)&&r.__esModule?r:{default:r}).default);s.blotName="strike",s.tagName="S",e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(6);function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var s=function(t){function e(){return i(this,e),l(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e}(((r=o)&&r.__esModule?r:{default:r}).default);s.blotName="underline",s.tagName="U",e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0},l=n(0),s=(r=l)&&r.__esModule?r:{default:r},a=n(27);function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function c(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var f=["alt","height","width"],h=function(t){function e(){return u(this,e),c(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),o(e,[{key:"format",value:function(t,n){f.indexOf(t)>-1?n?this.domNode.setAttribute(t,n):this.domNode.removeAttribute(t):i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"format",this).call(this,t,n)}}],[{key:"create",value:function(t){var n=i(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this,t);return"string"==typeof t&&n.setAttribute("src",this.sanitize(t)),n}},{key:"formats",value:function(t){return f.reduce((function(e,n){return t.hasAttribute(n)&&(e[n]=t.getAttribute(n)),e}),{})}},{key:"match",value:function(t){return/\.(jpe?g|gif|png)$/.test(t)||/^data:image\/.+;base64/.test(t)}},{key:"sanitize",value:function(t){return(0,a.sanitize)(t,["http","https","data"])?t:"//:0"}},{key:"value",value:function(t){return t.getAttribute("src")}}]),e}(s.default.Embed);h.blotName="image",h.tagName="IMG",e.default=h},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0},l=n(4),s=n(27),a=(r=s)&&r.__esModule?r:{default:r};function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function c(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var f=["height","width"],h=function(t){function e(){return u(this,e),c(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),o(e,[{key:"format",value:function(t,n){f.indexOf(t)>-1?n?this.domNode.setAttribute(t,n):this.domNode.removeAttribute(t):i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"format",this).call(this,t,n)}}],[{key:"create",value:function(t){var n=i(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this,t);return n.setAttribute("frameborder","0"),n.setAttribute("allowfullscreen",!0),n.setAttribute("src",this.sanitize(t)),n}},{key:"formats",value:function(t){return f.reduce((function(e,n){return t.hasAttribute(n)&&(e[n]=t.getAttribute(n)),e}),{})}},{key:"sanitize",value:function(t){return a.default.sanitize(t)}},{key:"value",value:function(t){return t.getAttribute("src")}}]),e}(l.BlockEmbed);h.blotName="video",h.className="ql-video",h.tagName="IFRAME",e.default=h},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.FormulaBlot=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=s(n(35)),i=s(n(5)),l=s(n(9));function s(t){return t&&t.__esModule?t:{default:t}}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function u(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function c(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var f=function(t){function e(){return a(this,e),u(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return c(e,t),r(e,null,[{key:"create",value:function(t){var n=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0}(e.__proto__||Object.getPrototypeOf(e),"create",this).call(this,t);return"string"==typeof t&&(window.katex.render(t,n,{throwOnError:!1,errorColor:"#f00"}),n.setAttribute("data-value",t)),n}},{key:"value",value:function(t){return t.getAttribute("data-value")}}]),e}(o.default);f.blotName="formula",f.className="ql-formula",f.tagName="SPAN";var h=function(t){function e(){a(this,e);var t=u(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));if(null==window.katex)throw new Error("Formula module requires KaTeX.");return t}return c(e,t),r(e,null,[{key:"register",value:function(){i.default.register(f,!0)}}]),e}(l.default);e.FormulaBlot=f,e.default=h},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.CodeToken=e.CodeBlock=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=s(n(0)),i=s(n(5)),l=s(n(9));function s(t){return t&&t.__esModule?t:{default:t}}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function u(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function c(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var f=function(t){function e(){return a(this,e),u(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return c(e,t),r(e,[{key:"replaceWith",value:function(t){this.domNode.textContent=this.domNode.textContent,this.attach(),function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"replaceWith",this).call(this,t)}},{key:"highlight",value:function(t){var e=this.domNode.textContent;this.cachedText!==e&&((e.trim().length>0||null==this.cachedText)&&(this.domNode.innerHTML=t(e),this.domNode.normalize(),this.attach()),this.cachedText=e)}}]),e}(s(n(13)).default);f.className="ql-syntax";var h=new o.default.Attributor.Class("token","hljs",{scope:o.default.Scope.INLINE}),p=function(t){function e(t,n){a(this,e);var r=u(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));if("function"!=typeof r.options.highlight)throw new Error("Syntax module requires highlight.js. Please include the library on the page before Quill.");var o=null;return r.quill.on(i.default.events.SCROLL_OPTIMIZE,(function(){clearTimeout(o),o=setTimeout((function(){r.highlight(),o=null}),r.options.interval)})),r.highlight(),r}return c(e,t),r(e,null,[{key:"register",value:function(){i.default.register(h,!0),i.default.register(f,!0)}}]),r(e,[{key:"highlight",value:function(){var t=this;if(!this.quill.selection.composing){this.quill.update(i.default.sources.USER);var e=this.quill.getSelection();this.quill.scroll.descendants(f).forEach((function(e){e.highlight(t.options.highlight)})),this.quill.update(i.default.sources.SILENT),null!=e&&this.quill.setSelection(e,i.default.sources.SILENT)}}}]),e}(l.default);p.DEFAULTS={highlight:null==window.hljs?null:function(t){return window.hljs.highlightAuto(t).value},interval:1e3},e.CodeBlock=f,e.CodeToken=h,e.default=p},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <g class="ql-fill ql-color-label"> <polygon points="6 6.868 6 6 5 6 5 7 5.942 7 6 6.868"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points="6.817 5 6 5 6 6 6.38 6 6.817 5"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points="4 11.439 4 11 3 11 3 12 3.755 12 4 11.439"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points="4.63 10 4 10 4 11 4.192 11 4.63 10"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points="13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points="12 6.868 12 6 11.62 6 12 6.868"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points="12.933 9 13 9 13 8 12.495 8 12.933 9"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points="5.5 13 9 5 12.5 13"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <rect class="ql-fill ql-stroke" height=3 width=3 x=4 y=5></rect> <rect class="ql-fill ql-stroke" height=3 width=3 x=11 y=5></rect> <path class="ql-even ql-fill ql-stroke" d=M7,8c0,4.031-3,5-3,5></path> <path class="ql-even ql-fill ql-stroke" d=M14,8c0,4.031-3,5-3,5></path> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>'},function(t,e){t.exports='<svg class="" viewbox="0 0 18 18"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class="ql-color-label ql-stroke ql-transparent" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points="5.5 11 9 3 12.5 11"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <polygon class="ql-stroke ql-fill" points="3 11 5 9 3 7 3 11"></polygon> <line class="ql-stroke ql-fill" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <polygon class="ql-stroke ql-fill" points="15 12 13 10 15 8 15 12"></polygon> <line class="ql-stroke ql-fill" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform="translate(24 18) rotate(-180)"/> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>'},function(t,e){t.exports='<svg viewBox="0 0 18 18"> <path class=ql-fill d=M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z /> </svg>'},function(t,e){t.exports='<svg viewBox="0 0 18 18"> <path class=ql-fill d=M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z /> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class="ql-even ql-fill" points="5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12"></polyline> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class="ql-fill ql-stroke" points="3 7 3 11 5 9 3 7"></polyline> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points="5 7 5 11 3 9 5 7"></polyline> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class="ql-even ql-stroke" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class="ql-even ql-stroke" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class="ql-stroke ql-thin" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class="ql-stroke ql-thin" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class="ql-stroke ql-thin" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>'},function(t,e){t.exports='<svg class="" viewbox="0 0 18 18"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points="3 4 4 5 6 3"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points="3 14 4 15 6 13"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points="3 9 4 10 6 8"></polyline> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <line class="ql-stroke ql-thin" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>'},function(t,e){t.exports='<svg viewbox="0 0 18 18"> <polygon class=ql-stroke points="7 11 9 13 11 11 7 11"></polygon> <polygon class=ql-stroke points="7 7 9 5 11 7 7 7"></polygon> </svg>'},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.BubbleTooltip=void 0;var r=function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var i=Object.getPrototypeOf(e);return null===i?void 0:t(i,n,r)}if("value"in o)return o.value;var l=o.get;return void 0!==l?l.call(r):void 0},o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=f(n(3)),l=f(n(8)),s=n(43),a=f(s),u=n(15),c=f(n(41));function f(t){return t&&t.__esModule?t:{default:t}}function h(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function p(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function d(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var y=[["bold","italic","link"],[{header:1},{header:2},"blockquote"]],v=function(t){function e(t,n){h(this,e),null!=n.modules.toolbar&&null==n.modules.toolbar.container&&(n.modules.toolbar.container=y);var r=p(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.quill.container.classList.add("ql-bubble"),r}return d(e,t),o(e,[{key:"extendToolbar",value:function(t){this.tooltip=new b(this.quill,this.options.bounds),this.tooltip.root.appendChild(t.container),this.buildButtons([].slice.call(t.container.querySelectorAll("button")),c.default),this.buildPickers([].slice.call(t.container.querySelectorAll("select")),c.default)}}]),e}(a.default);v.DEFAULTS=(0,i.default)(!0,{},a.default.DEFAULTS,{modules:{toolbar:{handlers:{link:function(t){t?this.quill.theme.tooltip.edit():this.quill.format("link",!1)}}}}});var b=function(t){function e(t,n){h(this,e);var r=p(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.quill.on(l.default.events.EDITOR_CHANGE,(function(t,e,n,o){if(t===l.default.events.SELECTION_CHANGE)if(null!=e&&e.length>0&&o===l.default.sources.USER){r.show(),r.root.style.left="0px",r.root.style.width="",r.root.style.width=r.root.offsetWidth+"px";var i=r.quill.getLines(e.index,e.length);if(1===i.length)r.position(r.quill.getBounds(e));else{var s=i[i.length-1],a=r.quill.getIndex(s),c=Math.min(s.length()-1,e.index+e.length-a),f=r.quill.getBounds(new u.Range(a,c));r.position(f)}}else document.activeElement!==r.textbox&&r.quill.hasFocus()&&r.hide()})),r}return d(e,t),o(e,[{key:"listen",value:function(){var t=this;r(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"listen",this).call(this),this.root.querySelector(".ql-close").addEventListener("click",(function(){t.root.classList.remove("ql-editing")})),this.quill.on(l.default.events.SCROLL_OPTIMIZE,(function(){setTimeout((function(){if(!t.root.classList.contains("ql-hidden")){var e=t.quill.getSelection();null!=e&&t.position(t.quill.getBounds(e))}}),1)}))}},{key:"cancel",value:function(){this.show()}},{key:"position",value:function(t){var n=r(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"position",this).call(this,t),o=this.root.querySelector(".ql-tooltip-arrow");if(o.style.marginLeft="",0===n)return n;o.style.marginLeft=-1*n-o.offsetWidth/2+"px"}}]),e}(s.BaseTooltip);b.TEMPLATE=['<span class="ql-tooltip-arrow"></span>','<div class="ql-tooltip-editor">','<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">','<a class="ql-close"></a>',"</div>"].join(""),e.BubbleTooltip=b,e.default=v},function(t,e,n){t.exports=n(63)}]).default},t.exports=e()},9962:(t,e,n)=>{t.exports={align:{"":n(481),center:n(7871),right:n(4123),justify:n(4175)},background:n(659),blockquote:n(7131),bold:n(2179),clean:n(3529),code:n(7074),"code-block":n(7074),color:n(8090),direction:{"":n(3829),rtl:n(5738)},float:{center:n(2452),full:n(3143),left:n(3700),right:n(9148)},formula:n(8829),header:{1:n(3946),2:n(2629)},italic:n(3621),image:n(658),indent:{"+1":n(404),"-1":n(2872)},link:n(9601),list:{ordered:n(7347),bullet:n(3117),check:n(6626)},script:{sub:n(2441),super:n(6005)},strike:n(8134),underline:n(2173),video:n(6345)}},961:(t,e,n)=>{"use strict";var r=n(767),o=Object,i=TypeError;t.exports=r((function(){if(null!=this&&this!==o(this))throw new i("RegExp.prototype.flags getter called on non-object");var t="";return this.hasIndices&&(t+="d"),this.global&&(t+="g"),this.ignoreCase&&(t+="i"),this.multiline&&(t+="m"),this.dotAll&&(t+="s"),this.unicode&&(t+="u"),this.unicodeSets&&(t+="v"),this.sticky&&(t+="y"),t}),"get flags",!0)},2201:(t,e,n)=>{"use strict";var r=n(4926),o=n(9429),i=n(961),l=n(4366),s=n(698),a=o(l());r(a,{getPolyfill:l,implementation:i,shim:s}),t.exports=a},4366:(t,e,n)=>{"use strict";var r=n(961),o=n(4926).supportsDescriptors,i=Object.getOwnPropertyDescriptor;t.exports=function(){if(o&&"gim"===/a/gim.flags){var t=i(RegExp.prototype,"flags");if(t&&"function"==typeof t.get&&"boolean"==typeof RegExp.prototype.dotAll&&"boolean"==typeof RegExp.prototype.hasIndices){var e="",n={};if(Object.defineProperty(n,"hasIndices",{get:function(){e+="d"}}),Object.defineProperty(n,"sticky",{get:function(){e+="y"}}),"dy"===e)return t.get}}return r}},698:(t,e,n)=>{"use strict";var r=n(4926).supportsDescriptors,o=n(4366),i=Object.getOwnPropertyDescriptor,l=Object.defineProperty,s=TypeError,a=Object.getPrototypeOf,u=/a/;t.exports=function(){if(!r||!a)throw new s("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");var t=o(),e=a(u),n=i(e,"flags");return n&&n.get===t||l(e,"flags",{configurable:!0,enumerable:!1,get:t}),t}},7669:(t,e,n)=>{"use strict";var r=n(7286),o=n(5195),i=n(1181)(),l=n(326),s=r("%TypeError%"),a=r("%Math.floor%");t.exports=function(t,e){if("function"!=typeof t)throw new s("`fn` is not a function");if("number"!=typeof e||e<0||e>4294967295||a(e)!==e)throw new s("`length` must be a positive 32-bit integer");var n=arguments.length>2&&!!arguments[2],r=!0,u=!0;if("length"in t&&l){var c=l(t,"length");c&&!c.configurable&&(r=!1),c&&!c.writable&&(u=!1)}return(r||u||!n)&&(i?o(t,"length",e,!0,!0):o(t,"length",e)),t}},767:(t,e,n)=>{"use strict";var r=n(5195),o=n(1181)(),i=n(8462).functionsHaveConfigurableNames(),l=TypeError;t.exports=function(t,e){if("function"!=typeof t)throw new l("`fn` is not a function");var n=arguments.length>2&&!!arguments[2];return n&&!i||(o?r(t,"name",e,!0,!0):r(t,"name",e)),t}},3855:(t,e,n)=>{var r=n(9231);"string"==typeof r&&(r=[[t.id,r,""]]);var o={hmr:!0,transform:void 0};n(2379)(r,o);r.locals&&(t.exports=r.locals)},2379:(t,e,n)=>{var r,o,i={},l=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(t){var e={};return function(n){if(void 0===e[n]){var r=t.call(this,n);if(r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[n]=r}return e[n]}}((function(t){return document.querySelector(t)})),a=null,u=0,c=[],f=n(9657);function h(t,e){for(var n=0;n<t.length;n++){var r=t[n],o=i[r.id];if(o){o.refs++;for(var l=0;l<o.parts.length;l++)o.parts[l](r.parts[l]);for(;l<r.parts.length;l++)o.parts.push(g(r.parts[l],e))}else{var s=[];for(l=0;l<r.parts.length;l++)s.push(g(r.parts[l],e));i[r.id]={id:r.id,refs:1,parts:s}}}}function p(t,e){for(var n=[],r={},o=0;o<t.length;o++){var i=t[o],l=e.base?i[0]+e.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[l]?r[l].parts.push(s):n.push(r[l]={id:l,parts:[s]})}return n}function d(t,e){var n=s(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),c.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(t.insertInto+" "+t.insertAt.before);n.insertBefore(e,o)}}function y(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=c.indexOf(t);e>=0&&c.splice(e,1)}function v(t){var e=document.createElement("style");return t.attrs.type="text/css",b(e,t.attrs),d(t,e),e}function b(t,e){Object.keys(e).forEach((function(n){t.setAttribute(n,e[n])}))}function g(t,e){var n,r,o,i;if(e.transform&&t.css){if(!(i=e.transform(t.css)))return function(){};t.css=i}if(e.singleton){var l=u++;n=a||(a=v(e)),r=_.bind(null,n,l,!1),o=_.bind(null,n,l,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return t.attrs.type="text/css",t.attrs.rel="stylesheet",b(e,t.attrs),d(t,e),e}(e),r=E.bind(null,n,e),o=function(){y(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(e),r=O.bind(null,n),o=function(){y(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=l()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=p(t,e);return h(n,e),function(t){for(var r=[],o=0;o<n.length;o++){var l=n[o];(s=i[l.id]).refs--,r.push(s)}t&&h(p(t,e),e);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var a=0;a<s.parts.length;a++)s.parts[a]();delete i[s.id]}}}};var m,x=(m=[],function(t,e){return m[t]=e,m.filter(Boolean).join("\n")});function _(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=x(e,o);else{var i=document.createTextNode(o),l=t.childNodes;l[e]&&t.removeChild(l[e]),l.length?t.insertBefore(i,l[e]):t.appendChild(i)}}function O(t,e){var n=e.css,r=e.media;if(r&&t.setAttribute("media",r),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function E(t,e,n){var r=n.css,o=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=f(r)),o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var l=new Blob([r],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(l),s&&URL.revokeObjectURL(s)}},9657:t=>{t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(t,e){var o,i=e.trim().replace(/^"(.*)"$/,(function(t,e){return e})).replace(/^'(.*)'$/,(function(t,e){return e}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")}))}},1920:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=r(n(3230));console.log("Demo loaded...");new o.default("#editor",{theme:"snow",modules:{toolbar:{container:[[{header:[1,2,3,!1]}],["bold","italic"],["clean"],["image"],[{list:"ordered"},{list:"bullet"}]]},htmlEditButton:{debug:!0,syntax:!0}}})},6902:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FormatHTMLStringIndentation=void 0,e.FormatHTMLStringIndentation=function(t,e){for(var n=" ".repeat(2),r=0,o=null,i=null,l=null,s="",a=0;a<=t.length;a++){o=i,i=t.substr(a,1),l=t.substr(a+1,1);var u="<br>"===t.substr(a,4),c="<"===i&&"/"!==l&&!u,f="<"===i&&"/"===l&&!u,h=">"===o&&"<"!==i&&r>0,p=!u&&!c&&!f&&h&&""===t.substr(a,t.substr(a).indexOf("<")).trim();u&&(s+="\n",r--,a+=4),c?(s+="\n"+n.repeat(r),r++):f?(--r<0&&(r=0),s+="\n"+n.repeat(r)):(" "===i&&" "===l||"\n"===i&&""===t.substr(a,t.substr(a).indexOf("<")).trim())&&(i=""),h&&!p&&(s+="\n"+n.repeat(r)),s+=i}return e.log("formatHTML",{before:t,after:s}),s}},8474:(t,e)=>{"use strict";function n(t){return t.replace(/\s+/g," ").trim()}function r(t){return t.replace(/<br([\s]*[\/]?>)/g,"<p> </p>")}function o(t){return t.replace(/<p><\/p>/g,"<p> </p>")}function i(t){return t.replace(/(<(?!\/)[\w=\."'\s]*>) /g,"$1")}function l(t){return t.replace(/ (<\/[\w]+>)/g,"$1")}function s(t,e){return t.reduce((function(t,e){return e(t)}),e)}Object.defineProperty(e,"__esModule",{value:!0}),e.Compose=e.FixTagSpaceCloseTag=e.FixTagSpaceOpenTag=e.PreserveNewlinesPTags=e.PreserveNewlinesBr=e.ConvertMultipleSpacesToSingle=e.OutputHTMLParser=void 0,e.OutputHTMLParser=function(t){return s([n,i,l,r,o],t)},e.ConvertMultipleSpacesToSingle=n,e.PreserveNewlinesBr=r,e.PreserveNewlinesPTags=o,e.FixTagSpaceOpenTag=i,e.FixTagSpaceCloseTag=l,e.Compose=s},393:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.QuillHtmlLogger=void 0;var n=function(){function t(){this.debug=!1}return t.prototype.setDebug=function(t){this.debug=t},t.prototype.prefixString=function(){return"</> quill-html-edit-button: "},Object.defineProperty(t.prototype,"log",{get:function(){return this.debug?console.log.bind(console,this.prefixString()):function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e]}},enumerable:!1,configurable:!0}),t}();e.QuillHtmlLogger=n},4562:function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),i=this&&this.__assign||function(){return(i=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.htmlEditButton=void 0;var s=n(393);n(3855);var a=l(n(779)),u=n(8474),c=n(6902);function f(t){return document.createElement(t)}function h(t,e,n){return t.setAttribute(e,n)}var p=new s.QuillHtmlLogger,d=function(){function t(t,e){var n=e||{},r=!(!n||!n.debug);p.setDebug(r),p.log("logging enabled");var o=t.getModule("toolbar");if(!o)throw new Error('quill.htmlEditButton requires the "toolbar" module to be included too');this.registerDivModule();var l=o.container,s=f("span");h(s,"class","ql-formats");var d=f("button");d.innerHTML=n.buttonHTML||"&lt;&gt;",d.title=n.buttonTitle||"Show HTML source",d.type="button";var y=function(e){t.clipboard.dangerouslyPasteHTML(e)};d.onclick=function(e){e.preventDefault(),function(t,e,n){var r=t.container.querySelector(".ql-editor").innerHTML,o=f("div"),l=f("div"),s=e.msg||'Edit HTML here, when you click "OK" the quill editor\'s contents will be replaced',d=e.cancelText||"Cancel",y=e.okText||"Ok",v=!1!==e.closeOnClickOverlay;h(l,"class","ql-html-overlayContainer"),h(o,"class","ql-html-popupContainer");var b=f("span");h(b,"class","ql-html-popupTitle"),b.innerText=s;var g=f("div");g.appendChild(b),h(g,"class","ql-html-textContainer");var m=f("pre");h(m,"data-language","xml"),m.innerText=(0,c.FormatHTMLStringIndentation)(r,p);var x=f("div");h(x,"class","ql-html-textArea");var _=f("button");_.innerHTML=d,h(_,"class","ql-html-buttonCancel");var O=f("button");O.innerHTML=y,h(O,"class","ql-html-buttonOk");var E=f("div");h(E,"class","ql-html-buttonGroup");var w=document.querySelector(e.prependSelector);E.appendChild(_),E.appendChild(O),x.appendChild(m),g.appendChild(x),g.appendChild(E),o.appendChild(g),l.appendChild(o),w?w.prepend(l):document.body.appendChild(l);var k=e&&e.editorModules,A=k&&Object.keys(k).length?k:{},N=new a.default(x,{modules:i({syntax:e.syntax},A)});_.onclick=function(){w?w.removeChild(l):document.body.removeChild(l)},v&&(l.onclick=_.onclick);o.onclick=function(t){t.preventDefault(),t.stopPropagation()},O.onclick=function(){var t=N.container.querySelector(".ql-editor").innerText,e=(0,u.OutputHTMLParser)(t);p.log("OutputHTMLParser",{htmlInputFromPopup:t,htmlOutputFormatted:e}),n(e),w?w.removeChild(l):document.body.removeChild(l)}}(t,n,y)},s.appendChild(d),l.appendChild(s)}return t.prototype.registerDivModule=function(){var t=a.default.import("blots/block"),e=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e}(t);e.tagName="div",e.blotName="div",e.allowedChildren=t.allowedChildren,e.allowedChildren.push(t),a.default.register(e)},t}();e.htmlEditButton=d,window.htmlEditButton=d,e.default=d}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}return n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n(1920)})());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90eXBlc2NyaXB0L3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9xdWlsbC9ibG90cy9icmVhay5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9xdWlsbC9ibG90cy90ZXh0LmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL3F1aWxsL2Jsb3RzL2lubGluZS5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9xdWlsbC9ibG90cy9ibG9jay5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9xdWlsbC9mb3JtYXRzL2NvZGUuanMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvcXVpbGwvYmxvdHMvY3Vyc29yLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL3F1aWxsL2NvcmUvZWRpdG9yLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL3F1aWxsL2NvcmUvbG9nZ2VyLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL3F1aWxsL2NvcmUvZW1pdHRlci5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9xdWlsbC9jb3JlL21vZHVsZS5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9xdWlsbC9jb3JlL3NlbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9xdWlsbC9jb3JlL3RoZW1lLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL3F1aWxsL2NvcmUvcXVpbGwuanMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvcXVpbGwvYmxvdHMvY29udGFpbmVyLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL3F1aWxsL2Jsb3RzL2VtYmVkLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL3F1aWxsL2Jsb3RzL3Njcm9sbC5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9xdWlsbC9mb3JtYXRzL2FsaWduLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL3F1aWxsL2Zvcm1hdHMvY29sb3IuanMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvcXVpbGwvZm9ybWF0cy9iYWNrZ3JvdW5kLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL3F1aWxsL2Zvcm1hdHMvZGlyZWN0aW9uLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL3F1aWxsL2Zvcm1hdHMvZm9udC5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9xdWlsbC9mb3JtYXRzL3NpemUuanMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvcXVpbGwvbW9kdWxlcy9jbGlwYm9hcmQuanMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvcXVpbGwvbW9kdWxlcy9oaXN0b3J5LmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL3F1aWxsL21vZHVsZXMva2V5Ym9hcmQuanMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvcXVpbGwvY29yZS5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9xdWlsbC9tb2R1bGVzL3Rvb2xiYXIuanMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvcXVpbGwvdWkvcGlja2VyLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL3F1aWxsL3VpL2NvbG9yLXBpY2tlci5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9xdWlsbC91aS9pY29uLXBpY2tlci5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9xdWlsbC91aS90b29sdGlwLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL3F1aWxsL3RoZW1lcy9iYXNlLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL3F1aWxsL2Zvcm1hdHMvbGluay5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9xdWlsbC90aGVtZXMvc25vdy5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4vc3JjL3NldHVwLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL2NhbGwtYmluZC9jYWxsQm91bmQuanMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvY2FsbC1iaW5kL2luZGV4LmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL2Nsb25lL2Nsb25lLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvc3JjL3N0eWxlcy5jc3MiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvZGVlcC1lcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9kZWZpbmUtZGF0YS1wcm9wZXJ0eS9pbmRleC5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9kZWZpbmUtcHJvcGVydGllcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9ldmVudGVtaXR0ZXIzL2luZGV4LmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL2V4dGVuZC9pbmRleC5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9mYXN0LWRpZmYvZGlmZi5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9mdW5jdGlvbi1iaW5kL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLWJpbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvZnVuY3Rpb25zLWhhdmUtbmFtZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvZ2V0LWludHJpbnNpYy9pbmRleC5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9nb3BkL2luZGV4LmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL2hhcy1wcm9wZXJ0eS1kZXNjcmlwdG9ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9oYXMtcHJvdG8vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvaGFzLXN5bWJvbHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvaGFzLXN5bWJvbHMvc2hhbXMuanMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvaGFzLXRvc3RyaW5ndGFnL3NoYW1zLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL2hhc293bi9pbmRleC5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlci9kaXN0L25vZGVfbW9kdWxlcy9xdWlsbC9hc3NldHMvaWNvbnMvYWxpZ24tY2VudGVyLnN2ZyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlci9kaXN0L25vZGVfbW9kdWxlcy9xdWlsbC9hc3NldHMvaWNvbnMvYWxpZ24tanVzdGlmeS5zdmciLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIvZGlzdC9ub2RlX21vZHVsZXMvcXVpbGwvYXNzZXRzL2ljb25zL2FsaWduLWxlZnQuc3ZnIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyL2Rpc3Qvbm9kZV9tb2R1bGVzL3F1aWxsL2Fzc2V0cy9pY29ucy9hbGlnbi1yaWdodC5zdmciLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIvZGlzdC9ub2RlX21vZHVsZXMvcXVpbGwvYXNzZXRzL2ljb25zL2JhY2tncm91bmQuc3ZnIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyL2Rpc3Qvbm9kZV9tb2R1bGVzL3F1aWxsL2Fzc2V0cy9pY29ucy9ibG9ja3F1b3RlLnN2ZyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlci9kaXN0L25vZGVfbW9kdWxlcy9xdWlsbC9hc3NldHMvaWNvbnMvYm9sZC5zdmciLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIvZGlzdC9ub2RlX21vZHVsZXMvcXVpbGwvYXNzZXRzL2ljb25zL2NsZWFuLnN2ZyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlci9kaXN0L25vZGVfbW9kdWxlcy9xdWlsbC9hc3NldHMvaWNvbnMvY29kZS5zdmciLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIvZGlzdC9ub2RlX21vZHVsZXMvcXVpbGwvYXNzZXRzL2ljb25zL2NvbG9yLnN2ZyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlci9kaXN0L25vZGVfbW9kdWxlcy9xdWlsbC9hc3NldHMvaWNvbnMvZGlyZWN0aW9uLWx0ci5zdmciLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIvZGlzdC9ub2RlX21vZHVsZXMvcXVpbGwvYXNzZXRzL2ljb25zL2RpcmVjdGlvbi1ydGwuc3ZnIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyL2Rpc3Qvbm9kZV9tb2R1bGVzL3F1aWxsL2Fzc2V0cy9pY29ucy9kcm9wZG93bi5zdmciLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIvZGlzdC9ub2RlX21vZHVsZXMvcXVpbGwvYXNzZXRzL2ljb25zL2Zsb2F0LWNlbnRlci5zdmciLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIvZGlzdC9ub2RlX21vZHVsZXMvcXVpbGwvYXNzZXRzL2ljb25zL2Zsb2F0LWZ1bGwuc3ZnIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyL2Rpc3Qvbm9kZV9tb2R1bGVzL3F1aWxsL2Fzc2V0cy9pY29ucy9mbG9hdC1sZWZ0LnN2ZyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlci9kaXN0L25vZGVfbW9kdWxlcy9xdWlsbC9hc3NldHMvaWNvbnMvZmxvYXQtcmlnaHQuc3ZnIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyL2Rpc3Qvbm9kZV9tb2R1bGVzL3F1aWxsL2Fzc2V0cy9pY29ucy9mb3JtdWxhLnN2ZyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlci9kaXN0L25vZGVfbW9kdWxlcy9xdWlsbC9hc3NldHMvaWNvbnMvaGVhZGVyLTIuc3ZnIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyL2Rpc3Qvbm9kZV9tb2R1bGVzL3F1aWxsL2Fzc2V0cy9pY29ucy9oZWFkZXIuc3ZnIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyL2Rpc3Qvbm9kZV9tb2R1bGVzL3F1aWxsL2Fzc2V0cy9pY29ucy9pbWFnZS5zdmciLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIvZGlzdC9ub2RlX21vZHVsZXMvcXVpbGwvYXNzZXRzL2ljb25zL2luZGVudC5zdmciLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIvZGlzdC9ub2RlX21vZHVsZXMvcXVpbGwvYXNzZXRzL2ljb25zL2l0YWxpYy5zdmciLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIvZGlzdC9ub2RlX21vZHVsZXMvcXVpbGwvYXNzZXRzL2ljb25zL2xpbmsuc3ZnIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyL2Rpc3Qvbm9kZV9tb2R1bGVzL3F1aWxsL2Fzc2V0cy9pY29ucy9saXN0LWJ1bGxldC5zdmciLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIvZGlzdC9ub2RlX21vZHVsZXMvcXVpbGwvYXNzZXRzL2ljb25zL2xpc3QtY2hlY2suc3ZnIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyL2Rpc3Qvbm9kZV9tb2R1bGVzL3F1aWxsL2Fzc2V0cy9pY29ucy9saXN0LW9yZGVyZWQuc3ZnIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyL2Rpc3Qvbm9kZV9tb2R1bGVzL3F1aWxsL2Fzc2V0cy9pY29ucy9vdXRkZW50LnN2ZyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlci9kaXN0L25vZGVfbW9kdWxlcy9xdWlsbC9hc3NldHMvaWNvbnMvc3RyaWtlLnN2ZyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlci9kaXN0L25vZGVfbW9kdWxlcy9xdWlsbC9hc3NldHMvaWNvbnMvc3Vic2NyaXB0LnN2ZyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlci9kaXN0L25vZGVfbW9kdWxlcy9xdWlsbC9hc3NldHMvaWNvbnMvc3VwZXJzY3JpcHQuc3ZnIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyL2Rpc3Qvbm9kZV9tb2R1bGVzL3F1aWxsL2Fzc2V0cy9pY29ucy91bmRlcmxpbmUuc3ZnIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyL2Rpc3Qvbm9kZV9tb2R1bGVzL3F1aWxsL2Fzc2V0cy9pY29ucy92aWRlby5zdmciLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvaXMtYXJndW1lbnRzL2luZGV4LmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL2lzLWRhdGUtb2JqZWN0L2luZGV4LmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL2lzLXJlZ2V4L2luZGV4LmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL29iamVjdC1pcy9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9vYmplY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvb2JqZWN0LWlzL3BvbHlmaWxsLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL29iamVjdC1pcy9zaGltLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL29iamVjdC1rZXlzL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL29iamVjdC1rZXlzL2luZGV4LmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL29iamVjdC1rZXlzL2lzQXJndW1lbnRzLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL3BhcmNobWVudC9kaXN0L3BhcmNobWVudC5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9xdWlsbC1kZWx0YS9saWIvZGVsdGEuanMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvcXVpbGwtZGVsdGEvbGliL29wLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL3F1aWxsL2NvcmUvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvcXVpbGwvZGlzdC9xdWlsbC5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9xdWlsbC91aS9pY29ucy5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9yZWdleHAucHJvdG90eXBlLmZsYWdzL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL3JlZ2V4cC5wcm90b3R5cGUuZmxhZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvcmVnZXhwLnByb3RvdHlwZS5mbGFncy9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9yZWdleHAucHJvdG90eXBlLmZsYWdzL3NoaW0uanMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvc2V0LWZ1bmN0aW9uLWxlbmd0aC9pbmRleC5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9zZXQtZnVuY3Rpb24tbmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvc3JjL3N0eWxlcy5jc3MiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL3NyYy9odG1sLWZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvc3JjL2h0bWwtcGFyc2VyLnRzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9zcmMvbG9nZ2VyLnRzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9zcmMvcXVpbGwuaHRtbEVkaXRCdXR0b24udHMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90eXBlc2NyaXB0L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3R5cGVzY3JpcHQvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3R5cGVzY3JpcHQvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly90eXBlc2NyaXB0L3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC93ZWJwYWNrL3N0YXJ0dXAiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwiYSIsImkiLCJzZWxmIiwiQnJlYWsiLCJwYXJlbnQiLCJyZWYiLCJjaGlsZHJlbiIsImxlbmd0aCIsInN1cGVyIiwiaW5zZXJ0SW50byIsInRoaXMiLCJyZW1vdmUiLCJibG90TmFtZSIsInRhZ05hbWUiLCJUZXh0QmxvdCIsIklubGluZSIsIm90aGVyIiwic2VsZkluZGV4Iiwib3JkZXIiLCJpbmRleE9mIiwib3RoZXJJbmRleCIsImluZGV4IiwibmFtZSIsInZhbHVlIiwiY29tcGFyZSIsInN0YXRpY3MiLCJCTE9UIiwiYmxvdCIsImlzb2xhdGUiLCJ3cmFwIiwiZm9ybWF0QXQiLCJjb250ZXh0Iiwib3B0aW1pemUiLCJvZmZzZXQiLCJtb3ZlQ2hpbGRyZW4iLCJhbGxvd2VkQ2hpbGRyZW4iLCJCbG9ja0VtYmVkIiwiYXR0YWNoIiwiYXR0cmlidXRlcyIsIlN0b3JlIiwiZG9tTm9kZSIsImluc2VydCIsImZvcm1hdHMiLCJ2YWx1ZXMiLCJhdHRyaWJ1dGUiLCJCTE9DS19BVFRSSUJVVEUiLCJmb3JtYXQiLCJkZWYiLCJlbmRzV2l0aCIsImJsb2NrIiwiQmxvY2siLCJpbnNlcnRCZWZvcmUiLCJuZXh0IiwiaW5zZXJ0QXQiLCJzbGljZSIsInNjb3BlIiwiQkxPQ0tfQkxPVCIsImNhY2hlIiwiZGVsdGEiLCJkZXNjZW5kYW50cyIsInJlZHVjZSIsImxlYWYiLCJidWJibGVGb3JtYXRzIiwiZGVsZXRlQXQiLCJCTE9DSyIsIk1hdGgiLCJtaW4iLCJsaW5lcyIsInNwbGl0IiwidGV4dCIsInNoaWZ0IiwidGFpbCIsImxpbmUiLCJoZWFkIiwidGFyZ2V0IiwicGF0aCIsImNoaWxkIiwicmVtb3ZlQ2hpbGQiLCJmb3JjZSIsImNsb25lIiwiZGVmYXVsdENoaWxkIiwiQ29kZSIsIkNvZGVCbG9jayIsImNyZWF0ZSIsInNldEF0dHJpYnV0ZSIsInRleHRDb250ZW50IiwiZnJhZyIsImRlc2NlbmRhbnQiLCJuZXh0TmV3bGluZSIsIm5ld2xpbmVJbmRleCIsInByZXZOZXdsaW5lIiwiaXNvbGF0ZUxlbmd0aCIsInNlYXJjaEluZGV4IiwicmV2ZXJzZSIsImxhc3RJbmRleE9mIiwiYXBwZW5kQ2hpbGQiLCJwcmV2IiwicmVwbGFjZSIsImNhbGwiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsIm5vZGUiLCJwYXJlbnROb2RlIiwidW53cmFwIiwiVEFCIiwiQ3Vyc29yIiwic2VsZWN0aW9uIiwidGV4dE5vZGUiLCJkb2N1bWVudCIsImNyZWF0ZVRleHROb2RlIiwiQ09OVEVOVFMiLCJfbGVuZ3RoIiwiZGF0YSIsImNvbXBvc2luZyIsInJlc3RvcmVUZXh0Iiwic3RhcnQiLCJlbmQiLCJyYW5nZSIsImdldE5hdGl2ZVJhbmdlIiwibGFzdENoaWxkIiwiam9pbiIsIm1hcCIsIm1heCIsInN0YXJ0Tm9kZSIsInN0YXJ0T2Zmc2V0IiwiZW5kTm9kZSIsImVuZE9mZnNldCIsIm11dGF0aW9ucyIsInNvbWUiLCJtdXRhdGlvbiIsInR5cGUiLCJyZXN0b3JlIiwiY2xhc3NOYW1lIiwiQVNDSUkiLCJjb21iaW5lRm9ybWF0cyIsImNvbWJpbmVkIiwiT2JqZWN0Iiwia2V5cyIsIm1lcmdlZCIsIkFycmF5IiwiaXNBcnJheSIsImNvbmNhdCIsInNjcm9sbCIsImdldERlbHRhIiwiY29uc3VtZU5leHROZXdsaW5lIiwidXBkYXRlIiwic2Nyb2xsTGVuZ3RoIiwiYmF0Y2hTdGFydCIsIm9wIiwiaW1hZ2UiLCJsaXN0IiwiYnVsbGV0IiwicHVzaCIsIm5vcm1hbGl6ZURlbHRhIiwicmV0YWluIiwiZGVsZXRlIiwiZGlmZiIsImtleSIsImJhdGNoRW5kIiwid2hpdGVsaXN0IiwibGVuZ3RoUmVtYWluaW5nIiwibGluZUxlbmd0aCIsImNvZGVJbmRleCIsImNvZGVMZW5ndGgiLCJsZWF2ZXMiLCJmb3JtYXRzQXJyIiwiYmxvdHMiLCJnZXRDb250ZW50cyIsImZpbHRlciIsImVtYmVkIiwiZ2V0VGV4dCIsInN1ZmZpeExlbmd0aCIsInN1ZmZpeCIsImFwcGx5RGVsdGEiLCJjaGFuZ2UiLCJjdXJzb3JJbmRleCIsIm9sZERlbHRhIiwibWF0Y2giLCJ0ZXh0QmxvdCIsIm9sZFZhbHVlIiwib2xkVGV4dCIsIm5ld1RleHQiLCJjb21wb3NlIiwibGV2ZWxzIiwibGV2ZWwiLCJkZWJ1ZyIsIm1ldGhvZCIsImFyZ3MiLCJjb25zb2xlIiwibmFtZXNwYWNlIiwibnMiLCJsb2dnZXIiLCJiaW5kIiwibmV3TGV2ZWwiLCJldmVudE5hbWUiLCJhZGRFdmVudExpc3RlbmVyIiwiX19xdWlsbCIsImVtaXR0ZXIiLCJoYW5kbGVET00iLCJFbWl0dGVyIiwibGlzdGVuZXJzIiwib24iLCJlcnJvciIsImxvZyIsImFwcGx5IiwiYXJndW1lbnRzIiwiZW1pdCIsImV2ZW50IiwiaGFuZGxlciIsImNvbnRhaW5zIiwiZXZlbnRzIiwiRURJVE9SX0NIQU5HRSIsIlNDUk9MTF9CRUZPUkVfVVBEQVRFIiwiU0NST0xMX09QVElNSVpFIiwiU0NST0xMX1VQREFURSIsIlNFTEVDVElPTl9DSEFOR0UiLCJURVhUX0NIQU5HRSIsInNvdXJjZXMiLCJBUEkiLCJTSUxFTlQiLCJVU0VSIiwiTW9kdWxlIiwicXVpbGwiLCJvcHRpb25zIiwiREVGQVVMVFMiLCJSYW5nZSIsIlNlbGVjdGlvbiIsIm1vdXNlRG93biIsImN1cnNvciIsImxhc3RSYW5nZSIsInNhdmVkUmFuZ2UiLCJoYW5kbGVDb21wb3NpdGlvbiIsImhhbmRsZURyYWdnaW5nIiwibGlzdGVuRE9NIiwic2V0VGltZW91dCIsImhhc0ZvY3VzIiwibmF0aXZlIiwib25jZSIsInNldE5hdGl2ZVJhbmdlIiwiaWdub3JlZCIsImJvZHkiLCJmb2N1cyIsInNldFJhbmdlIiwibmF0aXZlUmFuZ2UiLCJjb2xsYXBzZWQiLCJhZnRlciIsInBvc2l0aW9uIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInNldEVuZCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJlY3QiLCJzaWRlIiwiVGV4dCIsImJvdHRvbSIsInRvcCIsImhlaWdodCIsImxlZnQiLCJyaWdodCIsIndpZHRoIiwiZ2V0U2VsZWN0aW9uIiwicmFuZ2VDb3VudCIsImdldFJhbmdlQXQiLCJub3JtYWxpemVOYXRpdmUiLCJpbmZvIiwibm9ybWFsaXplZCIsIm5vcm1hbGl6ZWRUb1JhbmdlIiwiYWN0aXZlRWxlbWVudCIsInBvc2l0aW9ucyIsImluZGV4ZXMiLCJzdGFydENvbnRhaW5lciIsImVuZENvbnRhaW5lciIsImNoaWxkTm9kZXMiLCJzY3JvbGxpbmdDb250YWluZXIiLCJib3VuZHMiLCJnZXRCb3VuZHMiLCJsaW1pdCIsImZpcnN0IiwibGFzdCIsInNjcm9sbEJvdW5kcyIsInNjcm9sbFRvcCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwiYmx1ciIsInNvdXJjZSIsInJhbmdlVG9OYXRpdmUiLCJvbGRSYW5nZSIsImdldFJhbmdlIiwiZSIsIlRoZW1lIiwibW9kdWxlcyIsImFkZE1vZHVsZSIsIm1vZHVsZUNsYXNzIiwiY29uc3RydWN0b3IiLCJpbXBvcnQiLCJ0aGVtZXMiLCJRdWlsbCIsImltcG9ydHMiLCJvdmVyd3JpdGUiLCJhdHRyTmFtZSIsInJlZ2lzdGVyIiwid2FybiIsInN0YXJ0c1dpdGgiLCJjb250YWluZXIiLCJ1c2VyQ29uZmlnIiwiY2xpcGJvYXJkIiwia2V5Ym9hcmQiLCJoaXN0b3J5IiwidGhlbWUiLCJFcnJvciIsInRoZW1lQ29uZmlnIiwiY29uZmlnIiwibW9kdWxlQ29uZmlnIiwidG9vbGJhciIsInF1ZXJ5U2VsZWN0b3IiLCJleHBhbmRDb25maWciLCJodG1sIiwiaW5uZXJIVE1MIiwidHJpbSIsImNsYXNzTGlzdCIsImFkZCIsImFkZENvbnRhaW5lciIsImVkaXRvciIsImluaXQiLCJ0b2dnbGUiLCJpc0JsYW5rIiwidW5kZWZpbmVkIiwibW9kaWZ5IiwiY29udGVudHMiLCJjb252ZXJ0Iiwic2V0Q29udGVudHMiLCJjbGVhciIsInBsYWNlaG9sZGVyIiwicmVhZE9ubHkiLCJkaXNhYmxlIiwicmVmTm9kZSIsImNyZWF0ZUVsZW1lbnQiLCJvdmVybG9hZCIsImRlbGV0ZVRleHQiLCJlbmFibGUiLCJlbmFibGVkIiwic2Nyb2xsSW50b1ZpZXciLCJmb3JtYXRMaW5lIiwiZm9ybWF0VGV4dCIsInNldFNlbGVjdGlvbiIsImNvbnRhaW5lckJvdW5kcyIsImdldExlbmd0aCIsImdldEZvcm1hdCIsIk51bWJlciIsIk1BWF9WQUxVRSIsImluc2VydEVtYmVkIiwiaW5zZXJ0VGV4dCIsIm9mZiIsImRhbmdlcm91c2x5UGFzdGVIVE1MIiwicmVtb3ZlRm9ybWF0IiwiZGVsZXRlZCIsImFwcGxpZWQiLCJsYXN0T3AiLCJvcHMiLCJtb2RpZmllciIsInN0cmljdCIsImlzRW5hYmxlZCIsInNoaWZ0UmFuZ2UiLCJwb3MiLCJ0cmFuc2Zvcm1Qb3NpdGlvbiIsInZlcnNpb24iLCJRVUlMTF9WRVJTSU9OIiwiQ29udGFpbmVyIiwiRW1iZWQiLCJjb250ZW50Tm9kZSIsImNoaWxkTm9kZSIsImxlZnRHdWFyZCIsInJpZ2h0R3VhcmQiLCJwcmV2TGVuZ3RoIiwiaXNMaW5lIiwiU2Nyb2xsIiwiYmF0Y2giLCJJTkxJTkVfQkxPVCIsIndyYXBwZXIiLCJwb3AiLCJnZXRMaW5lcyIsImxlbmd0aExlZnQiLCJmb3JFYWNoQXQiLCJvYnNlcnZlciIsInRha2VSZWNvcmRzIiwiQWxpZ25BdHRyaWJ1dGUiLCJBdHRyaWJ1dGUiLCJBbGlnblN0eWxlIiwiQ2xhc3MiLCJTdHlsZSIsIkNvbG9yQXR0cmlidXRvciIsImNvbXBvbmVudCIsInBhcnNlSW50IiwidG9TdHJpbmciLCJJTkxJTkUiLCJDb2xvclN0eWxlIiwiQmFja2dyb3VuZFN0eWxlIiwiRGlyZWN0aW9uQXR0cmlidXRlIiwiRGlyZWN0aW9uU3R5bGUiLCJGb250U3R5bGVBdHRyaWJ1dG9yIiwiRm9udFN0eWxlIiwiU2l6ZVN0eWxlIiwiRE9NX0tFWSIsIkNMSVBCT0FSRF9DT05GSUciLCJOb2RlIiwiVEVYVF9OT0RFIiwiY29tcHV0ZVN0eWxlIiwid2hpdGVTcGFjZSIsInJlcGxhY2VyIiwiY29sbGFwc2UiLCJwcmV2aW91c1NpYmxpbmciLCJuZXh0U2libGluZyIsIm1hdGNoTmV3bGluZSIsImRlbHRhRW5kc1dpdGgiLCJFTEVNRU5UX05PREUiLCJwcm90b3R5cGUiLCJhcHBseUZvcm1hdCIsIm1hdGNoU3BhY2luZyIsImNsYXNzZXMiLCJzdHlsZXMiLCJhdHRyIiwiQVRUUklCVVRFIiwiQVRUUklCVVRFX0FUVFJJQlVUT1JTIiwia2V5TmFtZSIsIlNUWUxFX0FUVFJJQlVUT1JTIiwic3R5bGUiLCJmb250U3R5bGUiLCJpdGFsaWMiLCJmb250V2VpZ2h0IiwiYm9sZCIsInBhcnNlRmxvYXQiLCJ0ZXh0SW5kZW50IiwiaW5kZW50IiwibWF0Y2hBbGlhcyIsIm1lbW8iLCJDbGlwYm9hcmQiLCJvblBhc3RlIiwibWF0Y2hlcnMiLCJzZWxlY3RvciIsIm1hdGNoZXIiLCJtYXRjaFZpc3VhbCIsImFkZE1hdGNoZXIiLCJpbm5lclRleHQiLCJlbGVtZW50TWF0Y2hlcnMiLCJ0ZXh0TWF0Y2hlcnMiLCJwcmVwYXJlTWF0Y2hpbmciLCJ0cmF2ZXJzZSIsIm5vZGVUeXBlIiwiY2hpbGRyZW5EZWx0YSIsInBhc3RlIiwidXBkYXRlQ29udGVudHMiLCJkZWZhdWx0UHJldmVudGVkIiwicGFpciIsIndpbmRvdyIsImdldENvbXB1dGVkU3R5bGUiLCJlbmRUZXh0IiwiZGlzcGxheSIsIm5leHRFbGVtZW50U2libGluZyIsIm5vZGVIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJvZmZzZXRUb3AiLCJIaXN0b3J5IiwibGFzdFJlY29yZGVkIiwiaWdub3JlQ2hhbmdlIiwidXNlck9ubHkiLCJ0cmFuc2Zvcm0iLCJyZWNvcmQiLCJhZGRCaW5kaW5nIiwic2hvcnRLZXkiLCJ1bmRvIiwic2hpZnRLZXkiLCJyZWRvIiwidGVzdCIsIm5hdmlnYXRvciIsInBsYXRmb3JtIiwiZGVzdCIsInN0YWNrIiwiZGVsZXRlTGVuZ3RoIiwiY2hhbmdlSW5kZXgiLCJlbmRzV2l0aE5ld2xpbmVDaGFuZ2UiLCJnZXRMYXN0Q2hhbmdlSW5kZXgiLCJjaGFuZ2VEZWx0YSIsInVuZG9EZWx0YSIsInRpbWVzdGFtcCIsIkRhdGUiLCJub3ciLCJkZWxheSIsIm1heFN0YWNrIiwiU0hPUlRLRVkiLCJLZXlib2FyZCIsImV2dCIsImJpbmRpbmciLCJub3JtYWxpemUiLCJ3aGljaCIsImtleUNvZGUiLCJiaW5kaW5ncyIsIkVOVEVSIiwiaGFuZGxlRW50ZXIiLCJtZXRhS2V5IiwiY3RybEtleSIsImFsdEtleSIsInVzZXJBZ2VudCIsIkJBQ0tTUEFDRSIsImhhbmRsZUJhY2tzcGFjZSIsIkRFTEVURSIsImhhbmRsZURlbGV0ZSIsInByZWZpeCIsImhhbmRsZURlbGV0ZVJhbmdlIiwibGlzdGVuIiwiZ2V0TGluZSIsImxlYWZTdGFydCIsIm9mZnNldFN0YXJ0IiwiZ2V0TGVhZiIsImxlYWZFbmQiLCJvZmZzZXRFbmQiLCJwcmVmaXhUZXh0Iiwic3VmZml4VGV4dCIsImN1ckNvbnRleHQiLCJlbXB0eSIsImV2ZXJ5IiwicHJldmVudERlZmF1bHQiLCJtYWtlRW1iZWRBcnJvd0hhbmRsZXIiLCJ3aGVyZSIsIkxFRlQiLCJSSUdIVCIsImN1ckZvcm1hdHMiLCJwcmV2Rm9ybWF0cyIsIm5leHRMZW5ndGgiLCJuZXh0Rm9ybWF0cyIsImZpcnN0Rm9ybWF0cyIsImxhc3RGb3JtYXRzIiwibGluZUZvcm1hdHMiLCJtYWtlQ29kZUJsb2NrSGFuZGxlciIsInNjcm9sbEluZGV4IiwiZ2V0SW5kZXgiLCJtYWtlRm9ybWF0SGFuZGxlciIsInRvVXBwZXJDYXNlIiwiY2hhckNvZGVBdCIsIkVTQ0FQRSIsIlVQIiwiRE9XTiIsImN1dG9mZiIsImhlYWRlciIsIlRvb2xiYXIiLCJncm91cHMiLCJjb250cm9scyIsImdyb3VwIiwiY29udHJvbCIsImFkZEJ1dHRvbiIsImlucHV0Iiwib3B0aW9uIiwiYWRkU2VsZWN0IiwiYWRkQ29udHJvbHMiLCJIVE1MRWxlbWVudCIsImhhbmRsZXJzIiwiYWRkSGFuZGxlciIsImZpbmQiLCJzZWxlY3RlZEluZGV4Iiwic2VsZWN0ZWQiLCJoYXNBdHRyaWJ1dGUiLCJwcm9tcHQiLCJpc0FjdGl2ZSIsImdldEF0dHJpYnV0ZSIsImNsZWFuIiwiZGlyZWN0aW9uIiwiYWxpZ24iLCJsaW5rIiwib3B0aW9uc0NvdW50ZXIiLCJ0b2dnbGVBcmlhQXR0cmlidXRlIiwiZWxlbWVudCIsInNlbGVjdCIsImJ1aWxkUGlja2VyIiwibGFiZWwiLCJ0b2dnbGVQaWNrZXIiLCJlc2NhcGUiLCJpdGVtIiwidGFiSW5kZXgiLCJzZWxlY3RJdGVtIiwiaWQiLCJidWlsZEl0ZW0iLCJidWlsZExhYmVsIiwiYnVpbGRPcHRpb25zIiwiY2xvc2UiLCJ0cmlnZ2VyIiwicmVtb3ZlQXR0cmlidXRlIiwiRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjb2xvckxhYmVsIiwic3Ryb2tlIiwiZmlsbCIsImljb25zIiwiZGVmYXVsdEl0ZW0iLCJib3VuZHNDb250YWluZXIiLCJURU1QTEFURSIsImhpZGUiLCJyZWZlcmVuY2UiLCJvZmZzZXRXaWR0aCIsInJvb3RCb3VuZHMiLCJ2ZXJ0aWNhbFNoaWZ0IiwiQUxJR05TIiwiQ09MT1JTIiwiRk9OVFMiLCJIRUFERVJTIiwiU0laRVMiLCJCYXNlVGhlbWUiLCJsaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ0b29sdGlwIiwidGV4dGJveCIsInBpY2tlcnMiLCJwaWNrZXIiLCJleHRlbmRUb29sYmFyIiwiYnV0dG9ucyIsImJ1dHRvbiIsInNlbGVjdHMiLCJmaWxsU2VsZWN0IiwiZm9ybXVsYSIsImVkaXQiLCJmaWxlSW5wdXQiLCJmaWxlcyIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJyZXN1bHQiLCJyZWFkQXNEYXRhVVJMIiwiY2xpY2siLCJ2aWRlbyIsIkJhc2VUb29sdGlwIiwic2F2ZSIsImNhbmNlbCIsIm1vZGUiLCJwcmV2aWV3IiwibGlua1JhbmdlIiwicmVzdG9yZUZvY3VzIiwidXJsIiwiZXh0cmFjdFZpZGVvVXJsIiwiZGVmYXVsdFZhbHVlIiwiTGluayIsInNhbml0aXplIiwicHJvdG9jb2xzIiwiYW5jaG9yIiwiaHJlZiIsInByb3RvY29sIiwiUFJPVE9DT0xfV0hJVEVMSVNUIiwiU0FOSVRJWkVEX1VSTCIsIlRPT0xCQVJfQ09ORklHIiwiU25vd1RoZW1lIiwiYnVpbGRCdXR0b25zIiwiYnVpbGRQaWNrZXJzIiwiU25vd1Rvb2x0aXAiLCJzaG93IiwiU25vdyIsImh0bWxFZGl0QnV0dG9uIiwiR2V0SW50cmluc2ljIiwiY2FsbEJpbmQiLCIkaW5kZXhPZiIsImFsbG93TWlzc2luZyIsImludHJpbnNpYyIsInNldEZ1bmN0aW9uTGVuZ3RoIiwiJFR5cGVFcnJvciIsIiRhcHBseSIsIiRjYWxsIiwiJHJlZmxlY3RBcHBseSIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRtYXgiLCJvcmlnaW5hbEZ1bmN0aW9uIiwiZnVuYyIsImFwcGx5QmluZCIsIl9pbnN0YW5jZW9mIiwib2JqIiwibmF0aXZlTWFwIiwibmF0aXZlU2V0IiwibmF0aXZlUHJvbWlzZSIsIk1hcCIsIl8iLCJTZXQiLCJQcm9taXNlIiwiY2lyY3VsYXIiLCJkZXB0aCIsImluY2x1ZGVOb25FbnVtZXJhYmxlIiwiYWxsUGFyZW50cyIsImFsbENoaWxkcmVuIiwidXNlQnVmZmVyIiwiQnVmZmVyIiwiSW5maW5pdHkiLCJfY2xvbmUiLCJwcm90byIsInJlc29sdmUiLCJyZWplY3QiLCJ0aGVuIiwiZXJyIiwiX19pc0FycmF5IiwiX19pc1JlZ0V4cCIsIlJlZ0V4cCIsIl9fZ2V0UmVnRXhwRmxhZ3MiLCJsYXN0SW5kZXgiLCJfX2lzRGF0ZSIsImdldFRpbWUiLCJpc0J1ZmZlciIsImFsbG9jVW5zYWZlIiwiY29weSIsImdldFByb3RvdHlwZU9mIiwia2V5Q2hpbGQiLCJ2YWx1ZUNoaWxkIiwic2V0IiwiZW50cnlDaGlsZCIsImF0dHJzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9scyIsInN5bWJvbCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiZGVmaW5lUHJvcGVydHkiLCJhbGxQcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInByb3BlcnR5TmFtZSIsIl9fb2JqVG9TdHIiLCJvIiwicmUiLCJmbGFncyIsImdsb2JhbCIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJjbG9uZVByb3RvdHlwZSIsImMiLCJ1c2VTb3VyY2VNYXAiLCJjb250ZW50IiwiY3NzTWFwcGluZyIsImJ0b2EiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlTWFwIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5Iiwic291cmNlVVJMcyIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJvYmplY3RLZXlzIiwiaXNBcmd1bWVudHMiLCJpcyIsImlzUmVnZXgiLCJpc0RhdGUiLCJkZWVwRXF1YWwiLCJhY3R1YWwiLCJleHBlY3RlZCIsIm9wdHMiLCJiIiwiaXNVbmRlZmluZWRPck51bGwiLCJhSXNSZWdleCIsImJJc1JlZ2V4IiwiYUlzQnVmZmVyIiwiYklzQnVmZmVyIiwia2EiLCJrYiIsInNvcnQiLCJvYmpFcXVpdiIsIngiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3JzIiwiJFN5bnRheEVycm9yIiwiZ29wZCIsInByb3BlcnR5Iiwibm9uRW51bWVyYWJsZSIsIm5vbldyaXRhYmxlIiwibm9uQ29uZmlndXJhYmxlIiwibG9vc2UiLCJkZXNjIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJoYXNTeW1ib2xzIiwiU3ltYm9sIiwidG9TdHIiLCJkZWZpbmVEYXRhUHJvcGVydHkiLCJzdXBwb3J0c0Rlc2NyaXB0b3JzIiwib2JqZWN0IiwicHJlZGljYXRlIiwiZm4iLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJlZGljYXRlcyIsInByb3BzIiwiaGFzIiwiaGFzT3duUHJvcGVydHkiLCJFdmVudHMiLCJFRSIsIkV2ZW50RW1pdHRlciIsIl9ldmVudHMiLCJfZXZlbnRzQ291bnQiLCJfX3Byb3RvX18iLCJldmVudE5hbWVzIiwibmFtZXMiLCJleGlzdHMiLCJhdmFpbGFibGUiLCJsIiwiZWUiLCJhMSIsImEyIiwiYTMiLCJhNCIsImE1IiwibGVuIiwicmVtb3ZlTGlzdGVuZXIiLCJqIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiYWRkTGlzdGVuZXIiLCJzZXRNYXhMaXN0ZW5lcnMiLCJwcmVmaXhlZCIsImhhc093biIsImdPUEQiLCJhcnIiLCJpc1BsYWluT2JqZWN0IiwiaGFzT3duQ29uc3RydWN0b3IiLCJoYXNJc1Byb3RvdHlwZU9mIiwic2V0UHJvcGVydHkiLCJuZXdWYWx1ZSIsImdldFByb3BlcnR5IiwiZXh0ZW5kIiwic3JjIiwiY29weUlzQXJyYXkiLCJkZWVwIiwiZGlmZl9tYWluIiwidGV4dDEiLCJ0ZXh0MiIsImN1cnNvcl9wb3MiLCJjb21tb25sZW5ndGgiLCJkaWZmX2NvbW1vblByZWZpeCIsImNvbW1vbnByZWZpeCIsInN1YnN0cmluZyIsImRpZmZfY29tbW9uU3VmZml4IiwiY29tbW9uc3VmZml4IiwiZGlmZnMiLCJsb25ndGV4dCIsInNob3J0dGV4dCIsImhtIiwiZGlmZl9oYWxmTWF0Y2hJXyIsImJlc3RfbG9uZ3RleHRfYSIsImJlc3RfbG9uZ3RleHRfYiIsImJlc3Rfc2hvcnR0ZXh0X2EiLCJiZXN0X3Nob3J0dGV4dF9iIiwic2VlZCIsImZsb29yIiwiYmVzdF9jb21tb24iLCJwcmVmaXhMZW5ndGgiLCJ0ZXh0MV9hIiwidGV4dDFfYiIsInRleHQyX2EiLCJ0ZXh0Ml9iIiwiaG0xIiwiY2VpbCIsImhtMiIsIm1pZF9jb21tb24iLCJkaWZmX2hhbGZNYXRjaF8iLCJkaWZmc19hIiwiZGlmZnNfYiIsInRleHQxX2xlbmd0aCIsInRleHQyX2xlbmd0aCIsIm1heF9kIiwidl9vZmZzZXQiLCJ2X2xlbmd0aCIsInYxIiwidjIiLCJmcm9udCIsImsxc3RhcnQiLCJrMWVuZCIsImsyc3RhcnQiLCJrMmVuZCIsImQiLCJrMSIsImsxX29mZnNldCIsInkxIiwieDEiLCJjaGFyQXQiLCJrMl9vZmZzZXQiLCJ4MiIsImRpZmZfYmlzZWN0U3BsaXRfIiwiazIiLCJ5MiIsImRpZmZfYmlzZWN0XyIsImRpZmZfY29tcHV0ZV8iLCJ1bnNoaWZ0IiwiZGlmZl9jbGVhbnVwTWVyZ2UiLCJwb2ludGVyIiwiY291bnRfZGVsZXRlIiwiY291bnRfaW5zZXJ0IiwidGV4dF9kZWxldGUiLCJ0ZXh0X2luc2VydCIsInNwbGljZSIsImNoYW5nZXMiLCJub3JtIiwiY3VycmVudF9wb3MiLCJuZXh0X3BvcyIsInNwbGl0X3BvcyIsImRfbGVmdCIsImRfcmlnaHQiLCJjdXJzb3Jfbm9ybWFsaXplX2RpZmYiLCJuZGlmZnMiLCJjdXJzb3JfcG9pbnRlciIsImRfbmV4dCIsIm1lcmdlX3R1cGxlcyIsImZpeF9jdXJzb3IiLCJjb21wYWN0Iiwic3RhcnRzX3dpdGhfcGFpcl9lbmQiLCJzdHIiLCJmaXhlZF9kaWZmcyIsImZpeF9lbW9qaSIsInkiLCJ0ZXh0MWEiLCJ0ZXh0MmEiLCJ0ZXh0MWIiLCJ0ZXh0MmIiLCJkaWZmc2IiLCJwb2ludGVybWluIiwicG9pbnRlcm1heCIsInBvaW50ZXJtaWQiLCJwb2ludGVyc3RhcnQiLCJwb2ludGVyZW5kIiwibGVmdF9kIiwicmlnaHRfZCIsIklOU0VSVCIsIkVRVUFMIiwiRVJST1JfTUVTU0FHRSIsImNvbmNhdHR5Iiwic2xpY3kiLCJhcnJMaWtlIiwiam9pbnkiLCJqb2luZXIiLCJ0aGF0IiwiVHlwZUVycm9yIiwiYm91bmQiLCJiaW5kZXIiLCJib3VuZExlbmd0aCIsImJvdW5kQXJncyIsIkZ1bmN0aW9uIiwiRW1wdHkiLCJpbXBsZW1lbnRhdGlvbiIsImZ1bmN0aW9uc0hhdmVOYW1lcyIsImZ1bmN0aW9uc0hhdmVDb25maWd1cmFibGVOYW1lcyIsIiRiaW5kIiwiYm91bmRGdW5jdGlvbnNIYXZlTmFtZXMiLCJTeW50YXhFcnJvciIsIiRGdW5jdGlvbiIsImdldEV2YWxsZWRDb25zdHJ1Y3RvciIsImV4cHJlc3Npb25TeW50YXgiLCIkZ09QRCIsInRocm93VHlwZUVycm9yIiwiVGhyb3dUeXBlRXJyb3IiLCJjYWxsZWVUaHJvd3MiLCJnZXQiLCJnT1BEdGhyb3dzIiwiaGFzUHJvdG8iLCJnZXRQcm90byIsIm5lZWRzRXZhbCIsIlR5cGVkQXJyYXkiLCJVaW50OEFycmF5IiwiSU5UUklOU0lDUyIsIkFnZ3JlZ2F0ZUVycm9yIiwiQXJyYXlCdWZmZXIiLCJpdGVyYXRvciIsIkF0b21pY3MiLCJCaWdJbnQiLCJCaWdJbnQ2NEFycmF5IiwiQmlnVWludDY0QXJyYXkiLCJCb29sZWFuIiwiRGF0YVZpZXciLCJkZWNvZGVVUkkiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlbmNvZGVVUkkiLCJldmFsIiwiRXZhbEVycm9yIiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiRmluYWxpemF0aW9uUmVnaXN0cnkiLCJJbnQ4QXJyYXkiLCJJbnQxNkFycmF5IiwiSW50MzJBcnJheSIsImlzRmluaXRlIiwiaXNOYU4iLCJQcm94eSIsIlJhbmdlRXJyb3IiLCJSZWZlcmVuY2VFcnJvciIsIlJlZmxlY3QiLCJTaGFyZWRBcnJheUJ1ZmZlciIsIlN0cmluZyIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiVWludDE2QXJyYXkiLCJVaW50MzJBcnJheSIsIlVSSUVycm9yIiwiV2Vha01hcCIsIldlYWtSZWYiLCJXZWFrU2V0IiwiZXJyb3JQcm90byIsIkxFR0FDWV9BTElBU0VTIiwiJGNvbmNhdCIsIiRzcGxpY2VBcHBseSIsIiRyZXBsYWNlIiwiJHN0clNsaWNlIiwiJGV4ZWMiLCJleGVjIiwicmVQcm9wTmFtZSIsInJlRXNjYXBlQ2hhciIsInN0cmluZ1RvUGF0aCIsInN0cmluZyIsIm51bWJlciIsInF1b3RlIiwic3ViU3RyaW5nIiwiZ2V0QmFzZUludHJpbnNpYyIsImFsaWFzIiwiaW50cmluc2ljTmFtZSIsImRvRXZhbCIsImdlbiIsInBhcnRzIiwiaW50cmluc2ljQmFzZU5hbWUiLCJpbnRyaW5zaWNSZWFsTmFtZSIsInNraXBGdXJ0aGVyQ2FjaGluZyIsImlzT3duIiwicGFydCIsImhhc0FycmF5TGVuZ3RoRGVmaW5lQnVnIiwiZm9vIiwiJE9iamVjdCIsIm9yaWdTeW1ib2wiLCJoYXNTeW1ib2xTaGFtIiwic3ltIiwic3ltT2JqIiwic3ltcyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9TdHJpbmdUYWciLCIkaGFzT3duIiwiaGFzVG9TdHJpbmdUYWciLCIkdG9TdHJpbmciLCJjYWxsQm91bmQiLCJpc1N0YW5kYXJkQXJndW1lbnRzIiwiaXNMZWdhY3lBcmd1bWVudHMiLCJjYWxsZWUiLCJzdXBwb3J0c1N0YW5kYXJkQXJndW1lbnRzIiwiZ2V0RGF5IiwidHJ5RGF0ZU9iamVjdCIsImlzUmVnZXhNYXJrZXIiLCJiYWRTdHJpbmdpZmllciIsInRocm93UmVnZXhNYXJrZXIiLCJ2YWx1ZU9mIiwidG9QcmltaXRpdmUiLCJudW1iZXJJc05hTiIsImdldFBvbHlmaWxsIiwic2hpbSIsInBvbHlmaWxsIiwia2V5c1NoaW0iLCJpc0FyZ3MiLCJpc0VudW1lcmFibGUiLCJoYXNEb250RW51bUJ1ZyIsImhhc1Byb3RvRW51bUJ1ZyIsImRvbnRFbnVtcyIsImVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlIiwiY3RvciIsImV4Y2x1ZGVkS2V5cyIsIiRhcHBsaWNhdGlvbkNhY2hlIiwiJGNvbnNvbGUiLCIkZXh0ZXJuYWwiLCIkZnJhbWUiLCIkZnJhbWVFbGVtZW50IiwiJGZyYW1lcyIsIiRpbm5lckhlaWdodCIsIiRpbm5lcldpZHRoIiwiJG9ubW96ZnVsbHNjcmVlbmNoYW5nZSIsIiRvbm1vemZ1bGxzY3JlZW5lcnJvciIsIiRvdXRlckhlaWdodCIsIiRvdXRlcldpZHRoIiwiJHBhZ2VYT2Zmc2V0IiwiJHBhZ2VZT2Zmc2V0IiwiJHBhcmVudCIsIiRzY3JvbGxMZWZ0IiwiJHNjcm9sbFRvcCIsIiRzY3JvbGxYIiwiJHNjcm9sbFkiLCIkc2VsZiIsIiR3ZWJraXRJbmRleGVkREIiLCIkd2Via2l0U3RvcmFnZUluZm8iLCIkd2luZG93IiwiaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnIiwiayIsImlzT2JqZWN0IiwiaXNGdW5jdGlvbiIsImlzU3RyaW5nIiwidGhlS2V5cyIsInNraXBQcm90byIsInNraXBDb25zdHJ1Y3RvciIsImVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneSIsIm9yaWdLZXlzIiwib3JpZ2luYWxLZXlzIiwiaW5zdGFsbGVkTW9kdWxlcyIsIm1vZHVsZUlkIiwibSIsImdldHRlciIsIm4iLCJfX2VzTW9kdWxlIiwicCIsInMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsInNldFByb3RvdHlwZU9mIiwiX18iLCJQYXJjaG1lbnRFcnJvciIsIl9zdXBlciIsIm1lc3NhZ2UiLCJfdGhpcyIsIlNjb3BlIiwidGFncyIsInR5cGVzIiwicXVlcnkiLCJBTlkiLCJMRVZFTCIsIlRZUEUiLCJEQVRBX0tFWSIsIkJsb3RDbGFzcyIsImJ1YmJsZSIsIkRlZmluaXRpb25zIiwiX2kiLCJEZWZpbml0aW9uIiwidGFnTmFtZXMiLCJ0YWciLCJSZWdpc3RyeSIsIkF0dHJpYnV0b3IiLCJhdHRyaWJ1dGVCaXQiLCJjYW5BZGQiLCJkZWZhdWx0IiwibGlua2VkX2xpc3RfMSIsInNoYWRvd18xIiwiQ29udGFpbmVyQmxvdCIsImJ1aWxkIiwibWFrZUJsb3QiLCJjcml0ZXJpYSIsIl9hIiwiZGV0YWNoIiwiY2hpbGRCbG90IiwicmVmQmxvdCIsInRhcmdldFBhcmVudCIsImluY2x1c2l2ZSIsImFkZGVkTm9kZXMiLCJyZW1vdmVkTm9kZXMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIkRPQ1VNRU5UX1BPU0lUSU9OX0NPTlRBSU5FRF9CWSIsIkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyIsInJlcGxhY2VDaGlsZCIsImF0dHJpYnV0b3JfMSIsInN0b3JlXzEiLCJjb250YWluZXJfMSIsIkZvcm1hdEJsb3QiLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2VXaXRoIiwicmVwbGFjZW1lbnQiLCJtb3ZlIiwiTGVhZkJsb3QiLCJTaGFkb3dCbG90IiwiY2xvbmVOb2RlIiwicGFyZW50XzEiLCJwYXJlbnRCbG90IiwicmVmRG9tTm9kZSIsImNsYXNzXzEiLCJzdHlsZV8xIiwiQXR0cmlidXRvclN0b3JlIiwiQ2xhc3NBdHRyaWJ1dG9yIiwiY2FtZWxpemUiLCJyZXN0IiwiU3R5bGVBdHRyaWJ1dG9yIiwiZm9ybWF0XzEiLCJsZWFmXzEiLCJzY3JvbGxfMSIsImlubGluZV8xIiwiYmxvY2tfMSIsImVtYmVkXzEiLCJ0ZXh0XzEiLCJQYXJjaG1lbnQiLCJGb3JtYXQiLCJMZWFmIiwiTGlua2VkTGlzdCIsImFwcGVuZCIsIm5vZGVzIiwiY3VyIiwiY3VyTm9kZSIsInJldCIsImxlbmd0aF8xIiwiY2FsbGJhY2siLCJjdXJJbmRleCIsImN1ckxlbmd0aCIsIk9CU0VSVkVSX0NPTkZJRyIsImNoYXJhY3RlckRhdGEiLCJjaGFyYWN0ZXJEYXRhT2xkVmFsdWUiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiU2Nyb2xsQmxvdCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJvYnNlcnZlIiwiZGlzY29ubmVjdCIsInJlY29yZHMiLCJtYXJrIiwibWFya1BhcmVudCIsInJlbWFpbmluZyIsImdyYW5kQ2hpbGQiLCJJbmxpbmVCbG90Iiwib2JqMSIsIm9iajIiLCJwcm9wIiwiaXNFcXVhbCIsIkJsb2NrQmxvdCIsIkVtYmVkQmxvdCIsInNwbGl0VGV4dCIsImVxdWFsIiwiTlVMTF9DSEFSQUNURVIiLCJmcm9tQ2hhckNvZGUiLCJEZWx0YSIsIm5ld09wIiwiY2hvcCIsInBhcnRpdGlvbiIsInBhc3NlZCIsImZhaWxlZCIsImluaXRpYWwiLCJjaGFuZ2VMZW5ndGgiLCJlbGVtIiwiaXRlciIsImhhc05leHQiLCJuZXh0T3AiLCJ0aGlzSXRlciIsIm90aGVySXRlciIsImZpcnN0T3RoZXIiLCJwZWVrIiwiZmlyc3RMZWZ0IiwicGVla1R5cGUiLCJwZWVrTGVuZ3RoIiwidGhpc09wIiwib3RoZXJPcCIsInN0cmluZ3MiLCJkaWZmUmVzdWx0Iiwib3BMZW5ndGgiLCJlYWNoTGluZSIsIm5ld2xpbmUiLCJwcmlvcml0eSIsIm5leHRUeXBlIiwibGliIiwia2VlcE51bGwiLCJJdGVyYXRvciIsInJldE9wIiwic3Vic3RyIiwiX3RvZ2dsZSIsIkRPTVRva2VuTGlzdCIsInRva2VuIiwic2VhcmNoU3RyaW5nIiwic3ViamVjdFN0cmluZyIsInRoaXNBcmciLCJleGVjQ29tbWFuZCIsIl9jcmVhdGVDbGFzcyIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2dldCIsInJlY2VpdmVyIiwiX2V4dGVuZDIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3F1aWxsRGVsdGEyIiwiX3BhcmNobWVudDIiLCJfYnJlYWsyIiwiX2lubGluZTIiLCJfdGV4dDIiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX1BhcmNobWVudCRFbWJlZCIsIl9QYXJjaG1lbnQkQmxvY2siLCJfdGhpczIiLCJfdHlwZW9mIiwiX3NsaWNlZFRvQXJyYXkiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwiX3MiLCJkb25lIiwic2xpY2VJdGVyYXRvciIsIl9lZGl0b3IyIiwiX2VtaXR0ZXI0IiwiX21vZHVsZTIiLCJfc2VsZWN0aW9uIiwiX3NlbGVjdGlvbjIiLCJfbG9nZ2VyMiIsIl90aGVtZTIiLCJfZGVmaW5lUHJvcGVydHkiLCJfdGhpczMiLCJfb3ZlcmxvYWQiLCJfb3ZlcmxvYWQyIiwiX3RoaXM0IiwiX3RoaXM1IiwiX292ZXJsb2FkMyIsIl9vdmVybG9hZDQiLCJfdGhpczYiLCJfb3ZlcmxvYWQ1IiwiX292ZXJsb2FkNiIsIl9vdmVybG9hZDciLCJfb3ZlcmxvYWQ4IiwiX292ZXJsb2FkOSIsIl9vdmVybG9hZDEwIiwiX3RoaXM3IiwiX3RoaXM4IiwiX292ZXJsb2FkMTEiLCJfb3ZlcmxvYWQxMiIsIl90aGlzOSIsIl9vdmVybG9hZDEzIiwiX292ZXJsb2FkMTQiLCJfdGhpczEwIiwiX292ZXJsb2FkMTUiLCJfb3ZlcmxvYWQxNiIsIl90aGlzMTEiLCJfZW1pdHRlciIsIl9lbWl0dGVyMiIsIl9tYXAiLCJfbWFwMiIsIl9tYXAzIiwiX21hcDQiLCJfUGFyY2htZW50JElubGluZSIsIl9wYXJjaG1lbnQiLCJfUGFyY2htZW50JFRleHQiLCJfZXZlbnRlbWl0dGVyMiIsIl9sZW4iLCJfa2V5IiwiX25vZGUkX19xdWlsbCRlbWl0dGVyIiwiX0V2ZW50RW1pdHRlciIsIl9sZW4yIiwiX2tleTIiLCJfcmVmIiwiX2NvbnNvbGUiLCJwU2xpY2UiLCJfYmxvY2syIiwiX0lubGluZSIsIl9CbG9jayIsIl9kZXNjZW5kYW50IiwiX2Rlc2NlbmRhbnQzIiwiX2Rlc2NlbmRhbnQ0IiwiX29wMiIsIl9jb2RlMiIsIl9jdXJzb3IyIiwiX2Jsb2NrIiwiX2Nsb25lMiIsIl9kZWVwRXF1YWwyIiwiRWRpdG9yIiwiX3Njcm9sbCRsaW5lIiwiX3Njcm9sbCRsaW5lMiIsIl9saW5lJGRlc2NlbmRhbnQiLCJfc2Nyb2xsJGxpbmUzIiwiX3Njcm9sbCRsaW5lNCIsImRpZmZEZWx0YSIsIl90b0NvbnN1bWFibGVBcnJheSIsImFycjIiLCJmcm9tIiwiX2NvbnRleHQkcmFuZ2UiLCJfZm9ybWF0IiwiX3Njcm9sbCRsZWFmIiwiX3Njcm9sbCRsZWFmMiIsIl9sZWFmJHBvc2l0aW9uIiwiX2xlYWYkcG9zaXRpb24yIiwiX3Njcm9sbCRsZWFmMyIsIl9zY3JvbGwkbGVhZjQiLCJfbGVhZiRwb3NpdGlvbjMiLCJfbGVhZiRwb3NpdGlvbjQiLCJfcG9zaXRpb24iLCJfc2Nyb2xsJGxlYWY1IiwiX3Njcm9sbCRsZWFmNiIsIl9sZWFmJHBvc2l0aW9uNSIsIl9sZWFmJHBvc2l0aW9uNiIsIl9nZXRSYW5nZSIsIl9nZXRSYW5nZTIiLCJfY29udGFpbmVyMiIsIl9QYXJjaG1lbnQkU2Nyb2xsIiwiX2xpbmUiLCJfbGluZTIiLCJfbGluZTMiLCJfbmV3bGluZUluZGV4IiwiX3F1aWxsMiIsIl9Nb2R1bGUiLCJfcXVpbGwkZ2V0TGluZSIsIl9xdWlsbCRnZXRMaW5lMiIsIl9xdWlsbCRnZXRMZWFmIiwiX3F1aWxsJGdldExlYWYyIiwiX3JlZjIiLCJfcmVmMyIsIl9xdWlsbCRnZXRMZWFmMyIsIl9xdWlsbCRnZXRMaW5lMTEiLCJfcXVpbGwkZ2V0TGluZTEzIiwiX3F1aWxsJGdldExpbmUxNSIsIl9xdWlsbCRnZXRMaW5lMTciLCJfcXVpbGwkc2Nyb2xsJGRlc2NlbmQiLCJfcXVpbGwkc2Nyb2xsJGRlc2NlbmQyIiwiX3F1aWxsJGdldExpbmUzIiwiX3F1aWxsJGdldExpbmU0IiwiX3F1aWxsJGdldExpbmU1IiwiX3F1aWxsJGdldExpbmU2IiwiX3F1aWxsJGdldExpbmU3IiwiX3F1aWxsJGdldExpbmU4IiwiX3F1aWxsJGdldExpbmU5IiwiX3F1aWxsJGdldExpbmUxMCIsIl9QYXJjaG1lbnQkQ29udGFpbmVyIiwiQ29sb3JDbGFzcyIsIl9QYXJjaG1lbnQkQXR0cmlidXRvciIsIl9pbmxpbmUiLCJfc2FuaXRpemUiLCJfa2V5Ym9hcmQyIiwiX2Ryb3Bkb3duMiIsIlBpY2tlciIsIl9lbWJlZDIiLCJfc2Nyb2xsMiIsIl9jbGlwYm9hcmQyIiwiX2hpc3RvcnkyIiwiQWxpZ25DbGFzcyIsIkJhY2tncm91bmRDbGFzcyIsIl9jb2xvciIsIkRpcmVjdGlvbkNsYXNzIiwiRm9udENsYXNzIiwiU2l6ZUNsYXNzIiwiX2NvbG9yUGlja2VyMiIsIl9pY29uUGlja2VyMiIsIl9waWNrZXIyIiwiX3Rvb2x0aXAyIiwiX1RoZW1lIiwiX1Rvb2x0aXAiLCJzdXBwb3J0c0FyZ3VtZW50c0NsYXNzIiwic3VwcG9ydGVkIiwidW5zdXBwb3J0ZWQiLCJtYXRjaFRleHQiLCJtYXRjaEJsb3QiLCJtYXRjaEF0dHJpYnV0b3IiLCJfZXh0ZW5kMyIsIl9hbGlnbiIsIl9iYWNrZ3JvdW5kIiwiX2RpcmVjdGlvbiIsIl9mb250IiwiX3NpemUiLCJfcHJlcGFyZU1hdGNoaW5nIiwiX3ByZXBhcmVNYXRjaGluZzIiLCJfcGFpciIsIkJvbGQiLCJfcmV0IiwiX3RoaXMkcXVpbGwkc2VsZWN0aW9uIiwiX3F1aWxsJHNlbGVjdGlvbiRnZXRSIiwiX3BpY2tlciIsIkNvbG9yUGlja2VyIiwiX1BpY2tlciIsIkljb25QaWNrZXIiLCJUb29sdGlwIiwiX2Jhc2UiLCJfYmFzZTIiLCJfbGluazIiLCJfaWNvbnMyIiwiX0Jhc2VUaGVtZSIsIl9CYXNlVG9vbHRpcCIsIl9jb3JlMiIsIl9pbmRlbnQiLCJfYmxvY2txdW90ZTIiLCJfaGVhZGVyMiIsIl9saXN0IiwiX2xpc3QyIiwiX2JvbGQyIiwiX2l0YWxpYzIiLCJfc2NyaXB0MiIsIl9zdHJpa2UyIiwiX3VuZGVybGluZTIiLCJfaW1hZ2UyIiwiX3ZpZGVvMiIsIl9jb2RlIiwiX2Zvcm11bGEyIiwiX3N5bnRheDIiLCJfdG9vbGJhcjIiLCJfYnViYmxlMiIsIl9zbm93MiIsIkluZGVudENsYXNzIiwiTGlzdEl0ZW0iLCJJZGVudEF0dHJpYnV0b3IiLCJCbG9ja3F1b3RlIiwiSGVhZGVyIiwiTGlzdCIsIl9Db250YWluZXIiLCJsaXN0RXZlbnRIYW5kbGVyIiwiX2JvbGQiLCJJdGFsaWMiLCJfQm9sZCIsIlNjcmlwdCIsIlN0cmlrZSIsIlVuZGVybGluZSIsIl9saW5rIiwiQVRUUklCVVRFUyIsIkltYWdlIiwiVmlkZW8iLCJfQmxvY2tFbWJlZCIsIkZvcm11bGFCbG90IiwiX0VtYmVkIiwia2F0ZXgiLCJyZW5kZXIiLCJ0aHJvd09uRXJyb3IiLCJlcnJvckNvbG9yIiwiRm9ybXVsYSIsIkNvZGVUb2tlbiIsIlN5bnRheENvZGVCbG9jayIsIl9Db2RlQmxvY2siLCJfaGlnaGxpZ2h0IiwiY2FjaGVkVGV4dCIsIlN5bnRheCIsImhpZ2hsaWdodCIsInRpbWVyIiwiY2xlYXJUaW1lb3V0IiwiaW50ZXJ2YWwiLCJjb2RlIiwiaGxqcyIsImhpZ2hsaWdodEF1dG8iLCJCdWJibGVUb29sdGlwIiwiQnViYmxlVGhlbWUiLCJsYXN0TGluZSIsIl9ib3VuZHMiLCJhcnJvdyIsIm1hcmdpbkxlZnQiLCJzZXRGdW5jdGlvbk5hbWUiLCJoYXNJbmRpY2VzIiwiZG90QWxsIiwidW5pY29kZSIsInVuaWNvZGVTZXRzIiwic3RpY2t5IiwiZmxhZ3NCb3VuZCIsImNhbGxzIiwiVHlwZUVyciIsInJlZ2V4IiwiaGFzRGVzY3JpcHRvcnMiLCIkZmxvb3IiLCJmdW5jdGlvbkxlbmd0aElzQ29uZmlndXJhYmxlIiwiZnVuY3Rpb25MZW5ndGhJc1dyaXRhYmxlIiwibG9jYWxzIiwic3R5bGVzSW5Eb20iLCJpc09sZElFIiwiYWxsIiwiYXRvYiIsImdldEVsZW1lbnQiLCJzdHlsZVRhcmdldCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50Iiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiYWRkU3R5bGVzVG9Eb20iLCJkb21TdHlsZSIsInJlZnMiLCJhZGRTdHlsZSIsImxpc3RUb1N0eWxlcyIsIm5ld1N0eWxlcyIsImJhc2UiLCJjc3MiLCJtZWRpYSIsImluc2VydFN0eWxlRWxlbWVudCIsImxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wIiwiZmlyc3RDaGlsZCIsImJlZm9yZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsImlkeCIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImFkZEF0dHJzIiwiZWwiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJyZWwiLCJjcmVhdGVMaW5rRWxlbWVudCIsInVwZGF0ZUxpbmsiLCJhcHBseVRvVGFnIiwibmV3T2JqIiwiREVCVUciLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJhdXRvRml4VXJscyIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsImJsb2IiLCJvbGRTcmMiLCJsb2NhdGlvbiIsImJhc2VVcmwiLCJob3N0IiwiY3VycmVudERpciIsInBhdGhuYW1lIiwiZnVsbE1hdGNoIiwib3JpZ1VybCIsIm5ld1VybCIsInVucXVvdGVkT3JpZ1VybCIsIiQxIiwiX19pbXBvcnREZWZhdWx0IiwibW9kIiwic2V0dXBfMSIsInN5bnRheCIsIkZvcm1hdEhUTUxTdHJpbmdJbmRlbnRhdGlvbiIsIndoaXRlc3BhY2UiLCJyZXBlYXQiLCJjdXJyZW50SW5kZW50IiwicHJldkNoYXIiLCJjaGFyIiwibmV4dENoYXIiLCJpc0JyVGFnIiwiaXNPcGVuaW5nVGFnIiwiaXNDbG9zaW5nVGFnIiwiaXNUYWdFbmQiLCJpc1RhZ05leHQiLCJDb252ZXJ0TXVsdGlwbGVTcGFjZXNUb1NpbmdsZSIsIlByZXNlcnZlTmV3bGluZXNCciIsIlByZXNlcnZlTmV3bGluZXNQVGFncyIsIkZpeFRhZ1NwYWNlT3BlblRhZyIsIkZpeFRhZ1NwYWNlQ2xvc2VUYWciLCJDb21wb3NlIiwiZnVuY3Rpb25zIiwiYWNjIiwiT3V0cHV0SFRNTFBhcnNlciIsImlucHV0SHRtbEZyb21RdWlsbFBvcHVwIiwiUXVpbGxIdG1sTG9nZ2VyIiwic2V0RGVidWciLCJwcmVmaXhTdHJpbmciLCJfX2Fzc2lnbiIsImFzc2lnbiIsInQiLCJsb2dnZXJfMSIsInF1aWxsXzEiLCJodG1sX3BhcnNlcl8xIiwiaHRtbF9mb3JtYXR0ZXJfMSIsIiRjcmVhdGUiLCJlbE5hbWUiLCIkc2V0QXR0ciIsIkxvZ2dlciIsIm9wdGlvbnNJbnB1dCIsInRvb2xiYXJNb2R1bGUiLCJnZXRNb2R1bGUiLCJyZWdpc3RlckRpdk1vZHVsZSIsInRvb2xiYXJFbCIsImJ1dHRvbkNvbnRhaW5lciIsImJ1dHRvbkhUTUwiLCJ0aXRsZSIsImJ1dHRvblRpdGxlIiwib25TYXZlIiwib25jbGljayIsInNhdmVDYWxsYmFjayIsImh0bWxGcm9tRWRpdG9yIiwicG9wdXBDb250YWluZXIiLCJvdmVybGF5Q29udGFpbmVyIiwibXNnIiwiY2FuY2VsVGV4dCIsIm9rVGV4dCIsImNsb3NlT25DbGlja092ZXJsYXkiLCJwb3B1cFRpdGxlIiwidGV4dENvbnRhaW5lciIsImNvZGVCbG9jayIsImh0bWxFZGl0b3IiLCJidXR0b25DYW5jZWwiLCJidXR0b25PayIsImJ1dHRvbkdyb3VwIiwicHJlcGVuZFNlbGVjdG9yIiwicHJlcGVuZCIsImVkaXRvck1vZHVsZXMiLCJtb2R1bGVzU2FmZSIsInN0b3BQcm9wYWdhdGlvbiIsImh0bWxJbnB1dEZyb21Qb3B1cCIsImh0bWxPdXRwdXRGb3JtYXR0ZWQiLCJsYXVuY2hQb3B1cEVkaXRvciIsIkRpdiIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkZWZpbml0aW9uIiwiciJdLCJtYXBwaW5ncyI6IjtDQUFBLFNBQTJDQSxFQUFNQyxHQUNoRCxHQUFzQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxTQUNiLEdBQXFCLG1CQUFYRyxRQUF5QkEsT0FBT0MsSUFDOUNELE9BQU8sR0FBSUgsT0FDUCxDQUNKLElBQUlLLEVBQUlMLElBQ1IsSUFBSSxJQUFJTSxLQUFLRCxHQUF1QixpQkFBWkosUUFBdUJBLFFBQVVGLEdBQU1PLEdBQUtELEVBQUVDLElBUHhFLENBU0dDLEtBQU0sSSxr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QUFFaU8sRUFBUSxDQUFFMWtDLEVBQUcwa0MsSUFDNUJBLEdDTFJLLEVBQW9CdE8sRUFBSSxDQUFDNzJCLEVBQVNxcEQsS0FDakMsSUFBSSxJQUFJcC9DLEtBQU9vL0MsRUFDWGxrQixFQUFvQjVYLEVBQUU4N0IsRUFBWXAvQyxLQUFTazdCLEVBQW9CNVgsRUFBRXZ0QixFQUFTaUssSUFDNUVyQixPQUFPc2tCLGVBQWVsdEIsRUFBU2lLLEVBQUssQ0FBRWdqQixZQUFZLEVBQU02TyxJQUFLdXRCLEVBQVdwL0MsTUNKM0VrN0IsRUFBb0I1WCxFQUFJLENBQUNqRCxFQUFLc2hCLElBQVVoakMsT0FBT3VSLFVBQVVzWCxlQUFlbnJCLEtBQUtna0IsRUFBS3NoQixHQ0NsRnpHLEVBQW9CbWtCLEVBQUt0cEQsSUFDSCxvQkFBWDh3QixRQUEwQkEsT0FBTzhQLGFBQzFDaDRCLE9BQU9za0IsZUFBZWx0QixFQUFTOHdCLE9BQU84UCxZQUFhLENBQUVqL0IsTUFBTyxXQUU3RGlILE9BQU9za0IsZUFBZWx0QixFQUFTLGFBQWMsQ0FBRTJCLE9BQU8sS0NGN0J3akMsRUFBb0IsTyIsImZpbGUiOiJpbmRleC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2Uge1xuXHRcdHZhciBhID0gZmFjdG9yeSgpO1xuXHRcdGZvcih2YXIgaSBpbiBhKSAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnID8gZXhwb3J0cyA6IHJvb3QpW2ldID0gYVtpXTtcblx0fVxufSkoc2VsZiwgKCkgPT4ge1xucmV0dXJuICIsImltcG9ydCBQYXJjaG1lbnQgZnJvbSAncGFyY2htZW50JztcblxuXG5jbGFzcyBCcmVhayBleHRlbmRzIFBhcmNobWVudC5FbWJlZCB7XG4gIHN0YXRpYyB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgaW5zZXJ0SW50byhwYXJlbnQsIHJlZikge1xuICAgIGlmIChwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICBzdXBlci5pbnNlcnRJbnRvKHBhcmVudCwgcmVmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmUoKTtcbiAgICB9XG4gIH1cblxuICBsZW5ndGgoKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICB2YWx1ZSgpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbn1cbkJyZWFrLmJsb3ROYW1lID0gJ2JyZWFrJztcbkJyZWFrLnRhZ05hbWUgPSAnQlInO1xuXG5cbmV4cG9ydCBkZWZhdWx0IEJyZWFrO1xuIiwiaW1wb3J0IFBhcmNobWVudCBmcm9tICdwYXJjaG1lbnQnO1xuXG5jbGFzcyBUZXh0QmxvdCBleHRlbmRzIFBhcmNobWVudC5UZXh0IHsgfVxuXG5leHBvcnQgZGVmYXVsdCBUZXh0QmxvdDtcbiIsImltcG9ydCBUZXh0IGZyb20gJy4vdGV4dCc7XG5pbXBvcnQgUGFyY2htZW50IGZyb20gJ3BhcmNobWVudCc7XG5cblxuY2xhc3MgSW5saW5lIGV4dGVuZHMgUGFyY2htZW50LklubGluZSB7XG4gIHN0YXRpYyBjb21wYXJlKHNlbGYsIG90aGVyKSB7XG4gICAgbGV0IHNlbGZJbmRleCA9IElubGluZS5vcmRlci5pbmRleE9mKHNlbGYpO1xuICAgIGxldCBvdGhlckluZGV4ID0gSW5saW5lLm9yZGVyLmluZGV4T2Yob3RoZXIpO1xuICAgIGlmIChzZWxmSW5kZXggPj0gMCB8fCBvdGhlckluZGV4ID49IDApIHtcbiAgICAgIHJldHVybiBzZWxmSW5kZXggLSBvdGhlckluZGV4O1xuICAgIH0gZWxzZSBpZiAoc2VsZiA9PT0gb3RoZXIpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSBpZiAoc2VsZiA8IG90aGVyKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgfVxuXG4gIGZvcm1hdEF0KGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKElubGluZS5jb21wYXJlKHRoaXMuc3RhdGljcy5ibG90TmFtZSwgbmFtZSkgPCAwICYmIFBhcmNobWVudC5xdWVyeShuYW1lLCBQYXJjaG1lbnQuU2NvcGUuQkxPVCkpIHtcbiAgICAgIGxldCBibG90ID0gdGhpcy5pc29sYXRlKGluZGV4LCBsZW5ndGgpO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGJsb3Qud3JhcChuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1cGVyLmZvcm1hdEF0KGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBvcHRpbWl6ZShjb250ZXh0KSB7XG4gICAgc3VwZXIub3B0aW1pemUoY29udGV4dCk7XG4gICAgaWYgKHRoaXMucGFyZW50IGluc3RhbmNlb2YgSW5saW5lICYmXG4gICAgICAgIElubGluZS5jb21wYXJlKHRoaXMuc3RhdGljcy5ibG90TmFtZSwgdGhpcy5wYXJlbnQuc3RhdGljcy5ibG90TmFtZSkgPiAwKSB7XG4gICAgICBsZXQgcGFyZW50ID0gdGhpcy5wYXJlbnQuaXNvbGF0ZSh0aGlzLm9mZnNldCgpLCB0aGlzLmxlbmd0aCgpKTtcbiAgICAgIHRoaXMubW92ZUNoaWxkcmVuKHBhcmVudCk7XG4gICAgICBwYXJlbnQud3JhcCh0aGlzKTtcbiAgICB9XG4gIH1cbn1cbklubGluZS5hbGxvd2VkQ2hpbGRyZW4gPSBbSW5saW5lLCBQYXJjaG1lbnQuRW1iZWQsIFRleHRdO1xuLy8gTG93ZXIgaW5kZXggbWVhbnMgZGVlcGVyIGluIHRoZSBET00gdHJlZSwgc2luY2Ugbm90IGZvdW5kICgtMSkgaXMgZm9yIGVtYmVkc1xuSW5saW5lLm9yZGVyID0gW1xuICAnY3Vyc29yJywgJ2lubGluZScsICAgLy8gTXVzdCBiZSBsb3dlclxuICAndW5kZXJsaW5lJywgJ3N0cmlrZScsICdpdGFsaWMnLCAnYm9sZCcsICdzY3JpcHQnLFxuICAnbGluaycsICdjb2RlJyAgICAgICAgLy8gTXVzdCBiZSBoaWdoZXJcbl07XG5cblxuZXhwb3J0IGRlZmF1bHQgSW5saW5lO1xuIiwiaW1wb3J0IGV4dGVuZCBmcm9tICdleHRlbmQnO1xuaW1wb3J0IERlbHRhIGZyb20gJ3F1aWxsLWRlbHRhJztcbmltcG9ydCBQYXJjaG1lbnQgZnJvbSAncGFyY2htZW50JztcbmltcG9ydCBCcmVhayBmcm9tICcuL2JyZWFrJztcbmltcG9ydCBJbmxpbmUgZnJvbSAnLi9pbmxpbmUnO1xuaW1wb3J0IFRleHRCbG90IGZyb20gJy4vdGV4dCc7XG5cblxuY29uc3QgTkVXTElORV9MRU5HVEggPSAxO1xuXG5cbmNsYXNzIEJsb2NrRW1iZWQgZXh0ZW5kcyBQYXJjaG1lbnQuRW1iZWQge1xuICBhdHRhY2goKSB7XG4gICAgc3VwZXIuYXR0YWNoKCk7XG4gICAgdGhpcy5hdHRyaWJ1dGVzID0gbmV3IFBhcmNobWVudC5BdHRyaWJ1dG9yLlN0b3JlKHRoaXMuZG9tTm9kZSk7XG4gIH1cblxuICBkZWx0YSgpIHtcbiAgICByZXR1cm4gbmV3IERlbHRhKCkuaW5zZXJ0KHRoaXMudmFsdWUoKSwgZXh0ZW5kKHRoaXMuZm9ybWF0cygpLCB0aGlzLmF0dHJpYnV0ZXMudmFsdWVzKCkpKTtcbiAgfVxuXG4gIGZvcm1hdChuYW1lLCB2YWx1ZSkge1xuICAgIGxldCBhdHRyaWJ1dGUgPSBQYXJjaG1lbnQucXVlcnkobmFtZSwgUGFyY2htZW50LlNjb3BlLkJMT0NLX0FUVFJJQlVURSk7XG4gICAgaWYgKGF0dHJpYnV0ZSAhPSBudWxsKSB7XG4gICAgICB0aGlzLmF0dHJpYnV0ZXMuYXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGZvcm1hdEF0KGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKSB7XG4gICAgdGhpcy5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICB9XG5cbiAgaW5zZXJ0QXQoaW5kZXgsIHZhbHVlLCBkZWYpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5lbmRzV2l0aCgnXFxuJykpIHtcbiAgICAgIGxldCBibG9jayA9IFBhcmNobWVudC5jcmVhdGUoQmxvY2suYmxvdE5hbWUpO1xuICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKGJsb2NrLCBpbmRleCA9PT0gMCA/IHRoaXMgOiB0aGlzLm5leHQpO1xuICAgICAgYmxvY2suaW5zZXJ0QXQoMCwgdmFsdWUuc2xpY2UoMCwgLTEpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3VwZXIuaW5zZXJ0QXQoaW5kZXgsIHZhbHVlLCBkZWYpO1xuICAgIH1cbiAgfVxufVxuQmxvY2tFbWJlZC5zY29wZSA9IFBhcmNobWVudC5TY29wZS5CTE9DS19CTE9UO1xuLy8gSXQgaXMgaW1wb3J0YW50IGZvciBjdXJzb3IgYmVoYXZpb3IgQmxvY2tFbWJlZHMgdXNlIHRhZ3MgdGhhdCBhcmUgYmxvY2sgbGV2ZWwgZWxlbWVudHNcblxuXG5jbGFzcyBCbG9jayBleHRlbmRzIFBhcmNobWVudC5CbG9jayB7XG4gIGNvbnN0cnVjdG9yKGRvbU5vZGUpIHtcbiAgICBzdXBlcihkb21Ob2RlKTtcbiAgICB0aGlzLmNhY2hlID0ge307XG4gIH1cblxuICBkZWx0YSgpIHtcbiAgICBpZiAodGhpcy5jYWNoZS5kZWx0YSA9PSBudWxsKSB7XG4gICAgICB0aGlzLmNhY2hlLmRlbHRhID0gdGhpcy5kZXNjZW5kYW50cyhQYXJjaG1lbnQuTGVhZikucmVkdWNlKChkZWx0YSwgbGVhZikgPT4ge1xuICAgICAgICBpZiAobGVhZi5sZW5ndGgoKSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBkZWx0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZGVsdGEuaW5zZXJ0KGxlYWYudmFsdWUoKSwgYnViYmxlRm9ybWF0cyhsZWFmKSk7XG4gICAgICAgIH1cbiAgICAgIH0sIG5ldyBEZWx0YSgpKS5pbnNlcnQoJ1xcbicsIGJ1YmJsZUZvcm1hdHModGhpcykpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jYWNoZS5kZWx0YTtcbiAgfVxuXG4gIGRlbGV0ZUF0KGluZGV4LCBsZW5ndGgpIHtcbiAgICBzdXBlci5kZWxldGVBdChpbmRleCwgbGVuZ3RoKTtcbiAgICB0aGlzLmNhY2hlID0ge307XG4gIH1cblxuICBmb3JtYXRBdChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSkge1xuICAgIGlmIChsZW5ndGggPD0gMCkgcmV0dXJuO1xuICAgIGlmIChQYXJjaG1lbnQucXVlcnkobmFtZSwgUGFyY2htZW50LlNjb3BlLkJMT0NLKSkge1xuICAgICAgaWYgKGluZGV4ICsgbGVuZ3RoID09PSB0aGlzLmxlbmd0aCgpKSB7XG4gICAgICAgIHRoaXMuZm9ybWF0KG5hbWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3VwZXIuZm9ybWF0QXQoaW5kZXgsIE1hdGgubWluKGxlbmd0aCwgdGhpcy5sZW5ndGgoKSAtIGluZGV4IC0gMSksIG5hbWUsIHZhbHVlKTtcbiAgICB9XG4gICAgdGhpcy5jYWNoZSA9IHt9O1xuICB9XG5cbiAgaW5zZXJ0QXQoaW5kZXgsIHZhbHVlLCBkZWYpIHtcbiAgICBpZiAoZGVmICE9IG51bGwpIHJldHVybiBzdXBlci5pbnNlcnRBdChpbmRleCwgdmFsdWUsIGRlZik7XG4gICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGxldCBsaW5lcyA9IHZhbHVlLnNwbGl0KCdcXG4nKTtcbiAgICBsZXQgdGV4dCA9IGxpbmVzLnNoaWZ0KCk7XG4gICAgaWYgKHRleHQubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKGluZGV4IDwgdGhpcy5sZW5ndGgoKSAtIDEgfHwgdGhpcy5jaGlsZHJlbi50YWlsID09IG51bGwpIHtcbiAgICAgICAgc3VwZXIuaW5zZXJ0QXQoTWF0aC5taW4oaW5kZXgsIHRoaXMubGVuZ3RoKCkgLSAxKSwgdGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnRhaWwuaW5zZXJ0QXQodGhpcy5jaGlsZHJlbi50YWlsLmxlbmd0aCgpLCB0ZXh0KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2FjaGUgPSB7fTtcbiAgICB9XG4gICAgbGV0IGJsb2NrID0gdGhpcztcbiAgICBsaW5lcy5yZWR1Y2UoZnVuY3Rpb24oaW5kZXgsIGxpbmUpIHtcbiAgICAgIGJsb2NrID0gYmxvY2suc3BsaXQoaW5kZXgsIHRydWUpO1xuICAgICAgYmxvY2suaW5zZXJ0QXQoMCwgbGluZSk7XG4gICAgICByZXR1cm4gbGluZS5sZW5ndGg7XG4gICAgfSwgaW5kZXggKyB0ZXh0Lmxlbmd0aCk7XG4gIH1cblxuICBpbnNlcnRCZWZvcmUoYmxvdCwgcmVmKSB7XG4gICAgbGV0IGhlYWQgPSB0aGlzLmNoaWxkcmVuLmhlYWQ7XG4gICAgc3VwZXIuaW5zZXJ0QmVmb3JlKGJsb3QsIHJlZik7XG4gICAgaWYgKGhlYWQgaW5zdGFuY2VvZiBCcmVhaykge1xuICAgICAgaGVhZC5yZW1vdmUoKTtcbiAgICB9XG4gICAgdGhpcy5jYWNoZSA9IHt9O1xuICB9XG5cbiAgbGVuZ3RoKCkge1xuICAgIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA9PSBudWxsKSB7XG4gICAgICB0aGlzLmNhY2hlLmxlbmd0aCA9IHN1cGVyLmxlbmd0aCgpICsgTkVXTElORV9MRU5HVEg7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNhY2hlLmxlbmd0aDtcbiAgfVxuXG4gIG1vdmVDaGlsZHJlbih0YXJnZXQsIHJlZikge1xuICAgIHN1cGVyLm1vdmVDaGlsZHJlbih0YXJnZXQsIHJlZik7XG4gICAgdGhpcy5jYWNoZSA9IHt9O1xuICB9XG5cbiAgb3B0aW1pemUoY29udGV4dCkge1xuICAgIHN1cGVyLm9wdGltaXplKGNvbnRleHQpO1xuICAgIHRoaXMuY2FjaGUgPSB7fTtcbiAgfVxuXG4gIHBhdGgoaW5kZXgpIHtcbiAgICByZXR1cm4gc3VwZXIucGF0aChpbmRleCwgdHJ1ZSk7XG4gIH1cblxuICByZW1vdmVDaGlsZChjaGlsZCkge1xuICAgIHN1cGVyLnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgICB0aGlzLmNhY2hlID0ge307XG4gIH1cblxuICBzcGxpdChpbmRleCwgZm9yY2UgPSBmYWxzZSkge1xuICAgIGlmIChmb3JjZSAmJiAoaW5kZXggPT09IDAgfHwgaW5kZXggPj0gdGhpcy5sZW5ndGgoKSAtIE5FV0xJTkVfTEVOR1RIKSkge1xuICAgICAgbGV0IGNsb25lID0gdGhpcy5jbG9uZSgpO1xuICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgIHRoaXMucGFyZW50Lmluc2VydEJlZm9yZShjbG9uZSwgdGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKGNsb25lLCB0aGlzLm5leHQpO1xuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBuZXh0ID0gc3VwZXIuc3BsaXQoaW5kZXgsIGZvcmNlKTtcbiAgICAgIHRoaXMuY2FjaGUgPSB7fTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH1cbiAgfVxufVxuQmxvY2suYmxvdE5hbWUgPSAnYmxvY2snO1xuQmxvY2sudGFnTmFtZSA9ICdQJztcbkJsb2NrLmRlZmF1bHRDaGlsZCA9ICdicmVhayc7XG5CbG9jay5hbGxvd2VkQ2hpbGRyZW4gPSBbSW5saW5lLCBQYXJjaG1lbnQuRW1iZWQsIFRleHRCbG90XTtcblxuXG5mdW5jdGlvbiBidWJibGVGb3JtYXRzKGJsb3QsIGZvcm1hdHMgPSB7fSkge1xuICBpZiAoYmxvdCA9PSBudWxsKSByZXR1cm4gZm9ybWF0cztcbiAgaWYgKHR5cGVvZiBibG90LmZvcm1hdHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3JtYXRzID0gZXh0ZW5kKGZvcm1hdHMsIGJsb3QuZm9ybWF0cygpKTtcbiAgfVxuICBpZiAoYmxvdC5wYXJlbnQgPT0gbnVsbCB8fCBibG90LnBhcmVudC5ibG90TmFtZSA9PSAnc2Nyb2xsJyB8fCBibG90LnBhcmVudC5zdGF0aWNzLnNjb3BlICE9PSBibG90LnN0YXRpY3Muc2NvcGUpIHtcbiAgICByZXR1cm4gZm9ybWF0cztcbiAgfVxuICByZXR1cm4gYnViYmxlRm9ybWF0cyhibG90LnBhcmVudCwgZm9ybWF0cyk7XG59XG5cblxuZXhwb3J0IHsgYnViYmxlRm9ybWF0cywgQmxvY2tFbWJlZCwgQmxvY2sgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IERlbHRhIGZyb20gJ3F1aWxsLWRlbHRhJztcbmltcG9ydCBQYXJjaG1lbnQgZnJvbSAncGFyY2htZW50JztcbmltcG9ydCBCbG9jayBmcm9tICcuLi9ibG90cy9ibG9jayc7XG5pbXBvcnQgSW5saW5lIGZyb20gJy4uL2Jsb3RzL2lubGluZSc7XG5pbXBvcnQgVGV4dEJsb3QgZnJvbSAnLi4vYmxvdHMvdGV4dCc7XG5cblxuY2xhc3MgQ29kZSBleHRlbmRzIElubGluZSB7fVxuQ29kZS5ibG90TmFtZSA9ICdjb2RlJztcbkNvZGUudGFnTmFtZSA9ICdDT0RFJztcblxuXG5jbGFzcyBDb2RlQmxvY2sgZXh0ZW5kcyBCbG9jayB7XG4gIHN0YXRpYyBjcmVhdGUodmFsdWUpIHtcbiAgICBsZXQgZG9tTm9kZSA9IHN1cGVyLmNyZWF0ZSh2YWx1ZSk7XG4gICAgZG9tTm9kZS5zZXRBdHRyaWJ1dGUoJ3NwZWxsY2hlY2snLCBmYWxzZSk7XG4gICAgcmV0dXJuIGRvbU5vZGU7XG4gIH1cblxuICBzdGF0aWMgZm9ybWF0cygpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGRlbHRhKCkge1xuICAgIGxldCB0ZXh0ID0gdGhpcy5kb21Ob2RlLnRleHRDb250ZW50O1xuICAgIGlmICh0ZXh0LmVuZHNXaXRoKCdcXG4nKSkgeyAgICAgIC8vIFNob3VsZCBhbHdheXMgYmUgdHJ1ZVxuICAgICAgdGV4dCA9IHRleHQuc2xpY2UoMCwgLTEpO1xuICAgIH1cbiAgICByZXR1cm4gdGV4dC5zcGxpdCgnXFxuJykucmVkdWNlKChkZWx0YSwgZnJhZykgPT4ge1xuICAgICAgcmV0dXJuIGRlbHRhLmluc2VydChmcmFnKS5pbnNlcnQoJ1xcbicsIHRoaXMuZm9ybWF0cygpKTtcbiAgICB9LCBuZXcgRGVsdGEoKSk7XG4gIH1cblxuICBmb3JtYXQobmFtZSwgdmFsdWUpIHtcbiAgICBpZiAobmFtZSA9PT0gdGhpcy5zdGF0aWNzLmJsb3ROYW1lICYmIHZhbHVlKSByZXR1cm47XG4gICAgbGV0IFt0ZXh0LCBdID0gdGhpcy5kZXNjZW5kYW50KFRleHRCbG90LCB0aGlzLmxlbmd0aCgpIC0gMSk7XG4gICAgaWYgKHRleHQgIT0gbnVsbCkge1xuICAgICAgdGV4dC5kZWxldGVBdCh0ZXh0Lmxlbmd0aCgpIC0gMSwgMSk7XG4gICAgfVxuICAgIHN1cGVyLmZvcm1hdChuYW1lLCB2YWx1ZSk7XG4gIH1cblxuICBmb3JtYXRBdChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSkge1xuICAgIGlmIChsZW5ndGggPT09IDApIHJldHVybjtcbiAgICBpZiAoUGFyY2htZW50LnF1ZXJ5KG5hbWUsIFBhcmNobWVudC5TY29wZS5CTE9DSykgPT0gbnVsbCB8fFxuICAgICAgICAobmFtZSA9PT0gdGhpcy5zdGF0aWNzLmJsb3ROYW1lICYmIHZhbHVlID09PSB0aGlzLnN0YXRpY3MuZm9ybWF0cyh0aGlzLmRvbU5vZGUpKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgbmV4dE5ld2xpbmUgPSB0aGlzLm5ld2xpbmVJbmRleChpbmRleCk7XG4gICAgaWYgKG5leHROZXdsaW5lIDwgMCB8fCBuZXh0TmV3bGluZSA+PSBpbmRleCArIGxlbmd0aCkgcmV0dXJuO1xuICAgIGxldCBwcmV2TmV3bGluZSA9IHRoaXMubmV3bGluZUluZGV4KGluZGV4LCB0cnVlKSArIDE7XG4gICAgbGV0IGlzb2xhdGVMZW5ndGggPSBuZXh0TmV3bGluZSAtIHByZXZOZXdsaW5lICsgMTtcbiAgICBsZXQgYmxvdCA9IHRoaXMuaXNvbGF0ZShwcmV2TmV3bGluZSwgaXNvbGF0ZUxlbmd0aCk7XG4gICAgbGV0IG5leHQgPSBibG90Lm5leHQ7XG4gICAgYmxvdC5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgIGlmIChuZXh0IGluc3RhbmNlb2YgQ29kZUJsb2NrKSB7XG4gICAgICBuZXh0LmZvcm1hdEF0KDAsIGluZGV4IC0gcHJldk5ld2xpbmUgKyBsZW5ndGggLSBpc29sYXRlTGVuZ3RoLCBuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgaW5zZXJ0QXQoaW5kZXgsIHZhbHVlLCBkZWYpIHtcbiAgICBpZiAoZGVmICE9IG51bGwpIHJldHVybjtcbiAgICBsZXQgW3RleHQsIG9mZnNldF0gPSB0aGlzLmRlc2NlbmRhbnQoVGV4dEJsb3QsIGluZGV4KTtcbiAgICB0ZXh0Lmluc2VydEF0KG9mZnNldCwgdmFsdWUpO1xuICB9XG5cbiAgbGVuZ3RoKCkge1xuICAgIGxldCBsZW5ndGggPSB0aGlzLmRvbU5vZGUudGV4dENvbnRlbnQubGVuZ3RoO1xuICAgIGlmICghdGhpcy5kb21Ob2RlLnRleHRDb250ZW50LmVuZHNXaXRoKCdcXG4nKSkge1xuICAgICAgcmV0dXJuIGxlbmd0aCArIDE7XG4gICAgfVxuICAgIHJldHVybiBsZW5ndGg7XG4gIH1cblxuICBuZXdsaW5lSW5kZXgoc2VhcmNoSW5kZXgsIHJldmVyc2UgPSBmYWxzZSkge1xuICAgIGlmICghcmV2ZXJzZSkge1xuICAgICAgbGV0IG9mZnNldCA9IHRoaXMuZG9tTm9kZS50ZXh0Q29udGVudC5zbGljZShzZWFyY2hJbmRleCkuaW5kZXhPZignXFxuJyk7XG4gICAgICByZXR1cm4gb2Zmc2V0ID4gLTEgPyBzZWFyY2hJbmRleCArIG9mZnNldCA6IC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5kb21Ob2RlLnRleHRDb250ZW50LnNsaWNlKDAsIHNlYXJjaEluZGV4KS5sYXN0SW5kZXhPZignXFxuJyk7XG4gICAgfVxuICB9XG5cbiAgb3B0aW1pemUoY29udGV4dCkge1xuICAgIGlmICghdGhpcy5kb21Ob2RlLnRleHRDb250ZW50LmVuZHNXaXRoKCdcXG4nKSkge1xuICAgICAgdGhpcy5hcHBlbmRDaGlsZChQYXJjaG1lbnQuY3JlYXRlKCd0ZXh0JywgJ1xcbicpKTtcbiAgICB9XG4gICAgc3VwZXIub3B0aW1pemUoY29udGV4dCk7XG4gICAgbGV0IG5leHQgPSB0aGlzLm5leHQ7XG4gICAgaWYgKG5leHQgIT0gbnVsbCAmJiBuZXh0LnByZXYgPT09IHRoaXMgJiZcbiAgICAgICAgbmV4dC5zdGF0aWNzLmJsb3ROYW1lID09PSB0aGlzLnN0YXRpY3MuYmxvdE5hbWUgJiZcbiAgICAgICAgdGhpcy5zdGF0aWNzLmZvcm1hdHModGhpcy5kb21Ob2RlKSA9PT0gbmV4dC5zdGF0aWNzLmZvcm1hdHMobmV4dC5kb21Ob2RlKSkge1xuICAgICAgbmV4dC5vcHRpbWl6ZShjb250ZXh0KTtcbiAgICAgIG5leHQubW92ZUNoaWxkcmVuKHRoaXMpO1xuICAgICAgbmV4dC5yZW1vdmUoKTtcbiAgICB9XG4gIH1cblxuICByZXBsYWNlKHRhcmdldCkge1xuICAgIHN1cGVyLnJlcGxhY2UodGFyZ2V0KTtcbiAgICBbXS5zbGljZS5jYWxsKHRoaXMuZG9tTm9kZS5xdWVyeVNlbGVjdG9yQWxsKCcqJykpLmZvckVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgICAgbGV0IGJsb3QgPSBQYXJjaG1lbnQuZmluZChub2RlKTtcbiAgICAgIGlmIChibG90ID09IG51bGwpIHtcbiAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgICAgfSBlbHNlIGlmIChibG90IGluc3RhbmNlb2YgUGFyY2htZW50LkVtYmVkKSB7XG4gICAgICAgIGJsb3QucmVtb3ZlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBibG90LnVud3JhcCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5Db2RlQmxvY2suYmxvdE5hbWUgPSAnY29kZS1ibG9jayc7XG5Db2RlQmxvY2sudGFnTmFtZSA9ICdQUkUnO1xuQ29kZUJsb2NrLlRBQiA9ICcgICc7XG5cblxuZXhwb3J0IHsgQ29kZSwgQ29kZUJsb2NrIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCBQYXJjaG1lbnQgZnJvbSAncGFyY2htZW50JztcbmltcG9ydCBUZXh0QmxvdCBmcm9tICcuL3RleHQnO1xuXG5cbmNsYXNzIEN1cnNvciBleHRlbmRzIFBhcmNobWVudC5FbWJlZCB7XG4gIHN0YXRpYyB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgY29uc3RydWN0b3IoZG9tTm9kZSwgc2VsZWN0aW9uKSB7XG4gICAgc3VwZXIoZG9tTm9kZSk7XG4gICAgdGhpcy5zZWxlY3Rpb24gPSBzZWxlY3Rpb247XG4gICAgdGhpcy50ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKEN1cnNvci5DT05URU5UUyk7XG4gICAgdGhpcy5kb21Ob2RlLmFwcGVuZENoaWxkKHRoaXMudGV4dE5vZGUpO1xuICAgIHRoaXMuX2xlbmd0aCA9IDA7XG4gIH1cblxuICBkZXRhY2goKSB7XG4gICAgLy8gc3VwZXIuZGV0YWNoKCkgd2lsbCBhbHNvIGNsZWFyIGRvbU5vZGUuX19ibG90XG4gICAgaWYgKHRoaXMucGFyZW50ICE9IG51bGwpIHRoaXMucGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICB9XG5cbiAgZm9ybWF0KG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuX2xlbmd0aCAhPT0gMCkge1xuICAgICAgcmV0dXJuIHN1cGVyLmZvcm1hdChuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICAgIGxldCB0YXJnZXQgPSB0aGlzLCBpbmRleCA9IDA7XG4gICAgd2hpbGUgKHRhcmdldCAhPSBudWxsICYmIHRhcmdldC5zdGF0aWNzLnNjb3BlICE9PSBQYXJjaG1lbnQuU2NvcGUuQkxPQ0tfQkxPVCkge1xuICAgICAgaW5kZXggKz0gdGFyZ2V0Lm9mZnNldCh0YXJnZXQucGFyZW50KTtcbiAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnQ7XG4gICAgfVxuICAgIGlmICh0YXJnZXQgIT0gbnVsbCkge1xuICAgICAgdGhpcy5fbGVuZ3RoID0gQ3Vyc29yLkNPTlRFTlRTLmxlbmd0aDtcbiAgICAgIHRhcmdldC5vcHRpbWl6ZSgpO1xuICAgICAgdGFyZ2V0LmZvcm1hdEF0KGluZGV4LCBDdXJzb3IuQ09OVEVOVFMubGVuZ3RoLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB0aGlzLl9sZW5ndGggPSAwO1xuICAgIH1cbiAgfVxuXG4gIGluZGV4KG5vZGUsIG9mZnNldCkge1xuICAgIGlmIChub2RlID09PSB0aGlzLnRleHROb2RlKSByZXR1cm4gMDtcbiAgICByZXR1cm4gc3VwZXIuaW5kZXgobm9kZSwgb2Zmc2V0KTtcbiAgfVxuXG4gIGxlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbGVuZ3RoO1xuICB9XG5cbiAgcG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIFt0aGlzLnRleHROb2RlLCB0aGlzLnRleHROb2RlLmRhdGEubGVuZ3RoXTtcbiAgfVxuXG4gIHJlbW92ZSgpIHtcbiAgICBzdXBlci5yZW1vdmUoKTtcbiAgICB0aGlzLnBhcmVudCA9IG51bGw7XG4gIH1cblxuICByZXN0b3JlKCkge1xuICAgIGlmICh0aGlzLnNlbGVjdGlvbi5jb21wb3NpbmcgfHwgdGhpcy5wYXJlbnQgPT0gbnVsbCkgcmV0dXJuO1xuICAgIGxldCB0ZXh0Tm9kZSA9IHRoaXMudGV4dE5vZGU7XG4gICAgbGV0IHJhbmdlID0gdGhpcy5zZWxlY3Rpb24uZ2V0TmF0aXZlUmFuZ2UoKTtcbiAgICBsZXQgcmVzdG9yZVRleHQsIHN0YXJ0LCBlbmQ7XG4gICAgaWYgKHJhbmdlICE9IG51bGwgJiYgcmFuZ2Uuc3RhcnQubm9kZSA9PT0gdGV4dE5vZGUgJiYgcmFuZ2UuZW5kLm5vZGUgPT09IHRleHROb2RlKSB7XG4gICAgICBbcmVzdG9yZVRleHQsIHN0YXJ0LCBlbmRdID0gW3RleHROb2RlLCByYW5nZS5zdGFydC5vZmZzZXQsIHJhbmdlLmVuZC5vZmZzZXRdO1xuICAgIH1cbiAgICAvLyBMaW5rIGZvcm1hdCB3aWxsIGluc2VydCB0ZXh0IG91dHNpZGUgb2YgYW5jaG9yIHRhZ1xuICAgIHdoaWxlICh0aGlzLmRvbU5vZGUubGFzdENoaWxkICE9IG51bGwgJiYgdGhpcy5kb21Ob2RlLmxhc3RDaGlsZCAhPT0gdGhpcy50ZXh0Tm9kZSkge1xuICAgICAgdGhpcy5kb21Ob2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuZG9tTm9kZS5sYXN0Q2hpbGQsIHRoaXMuZG9tTm9kZSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnRleHROb2RlLmRhdGEgIT09IEN1cnNvci5DT05URU5UUykge1xuICAgICAgbGV0IHRleHQgPSB0aGlzLnRleHROb2RlLmRhdGEuc3BsaXQoQ3Vyc29yLkNPTlRFTlRTKS5qb2luKCcnKTtcbiAgICAgIGlmICh0aGlzLm5leHQgaW5zdGFuY2VvZiBUZXh0QmxvdCkge1xuICAgICAgICByZXN0b3JlVGV4dCA9IHRoaXMubmV4dC5kb21Ob2RlO1xuICAgICAgICB0aGlzLm5leHQuaW5zZXJ0QXQoMCwgdGV4dCk7XG4gICAgICAgIHRoaXMudGV4dE5vZGUuZGF0YSA9IEN1cnNvci5DT05URU5UUztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudGV4dE5vZGUuZGF0YSA9IHRleHQ7XG4gICAgICAgIHRoaXMucGFyZW50Lmluc2VydEJlZm9yZShQYXJjaG1lbnQuY3JlYXRlKHRoaXMudGV4dE5vZGUpLCB0aGlzKTtcbiAgICAgICAgdGhpcy50ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKEN1cnNvci5DT05URU5UUyk7XG4gICAgICAgIHRoaXMuZG9tTm9kZS5hcHBlbmRDaGlsZCh0aGlzLnRleHROb2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5yZW1vdmUoKTtcbiAgICBpZiAoc3RhcnQgIT0gbnVsbCkge1xuICAgICAgW3N0YXJ0LCBlbmRdID0gW3N0YXJ0LCBlbmRdLm1hcChmdW5jdGlvbihvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKHJlc3RvcmVUZXh0LmRhdGEubGVuZ3RoLCBvZmZzZXQgLSAxKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0Tm9kZTogcmVzdG9yZVRleHQsXG4gICAgICAgIHN0YXJ0T2Zmc2V0OiBzdGFydCxcbiAgICAgICAgZW5kTm9kZTogcmVzdG9yZVRleHQsXG4gICAgICAgIGVuZE9mZnNldDogZW5kXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZShtdXRhdGlvbnMsIGNvbnRleHQpIHtcbiAgICBpZiAobXV0YXRpb25zLnNvbWUoKG11dGF0aW9uKSA9PiB7XG4gICAgICByZXR1cm4gbXV0YXRpb24udHlwZSA9PT0gJ2NoYXJhY3RlckRhdGEnICYmIG11dGF0aW9uLnRhcmdldCA9PT0gdGhpcy50ZXh0Tm9kZTtcbiAgICB9KSkge1xuICAgICAgbGV0IHJhbmdlID0gdGhpcy5yZXN0b3JlKCk7XG4gICAgICBpZiAocmFuZ2UpIGNvbnRleHQucmFuZ2UgPSByYW5nZTtcbiAgICB9XG4gIH1cblxuICB2YWx1ZSgpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbn1cbkN1cnNvci5ibG90TmFtZSA9ICdjdXJzb3InO1xuQ3Vyc29yLmNsYXNzTmFtZSA9ICdxbC1jdXJzb3InO1xuQ3Vyc29yLnRhZ05hbWUgPSAnc3Bhbic7XG5DdXJzb3IuQ09OVEVOVFMgPSBcIlxcdUZFRkZcIjsgICAvLyBaZXJvIHdpZHRoIG5vIGJyZWFrIHNwYWNlXG5cblxuZXhwb3J0IGRlZmF1bHQgQ3Vyc29yO1xuIiwiaW1wb3J0IERlbHRhIGZyb20gJ3F1aWxsLWRlbHRhJztcbmltcG9ydCBEZWx0YU9wIGZyb20gJ3F1aWxsLWRlbHRhL2xpYi9vcCc7XG5pbXBvcnQgUGFyY2htZW50IGZyb20gJ3BhcmNobWVudCc7XG5pbXBvcnQgQ29kZUJsb2NrIGZyb20gJy4uL2Zvcm1hdHMvY29kZSc7XG5pbXBvcnQgQ3Vyc29yQmxvdCBmcm9tICcuLi9ibG90cy9jdXJzb3InO1xuaW1wb3J0IEJsb2NrLCB7IGJ1YmJsZUZvcm1hdHMgfSBmcm9tICcuLi9ibG90cy9ibG9jayc7XG5pbXBvcnQgQnJlYWsgZnJvbSAnLi4vYmxvdHMvYnJlYWsnO1xuaW1wb3J0IGNsb25lIGZyb20gJ2Nsb25lJztcbmltcG9ydCBlcXVhbCBmcm9tICdkZWVwLWVxdWFsJztcbmltcG9ydCBleHRlbmQgZnJvbSAnZXh0ZW5kJztcblxuXG5jb25zdCBBU0NJSSA9IC9eWyAtfl0qJC87XG5cblxuY2xhc3MgRWRpdG9yIHtcbiAgY29uc3RydWN0b3Ioc2Nyb2xsKSB7XG4gICAgdGhpcy5zY3JvbGwgPSBzY3JvbGw7XG4gICAgdGhpcy5kZWx0YSA9IHRoaXMuZ2V0RGVsdGEoKTtcbiAgfVxuXG4gIGFwcGx5RGVsdGEoZGVsdGEpIHtcbiAgICBsZXQgY29uc3VtZU5leHROZXdsaW5lID0gZmFsc2U7XG4gICAgdGhpcy5zY3JvbGwudXBkYXRlKCk7XG4gICAgbGV0IHNjcm9sbExlbmd0aCA9IHRoaXMuc2Nyb2xsLmxlbmd0aCgpO1xuICAgIHRoaXMuc2Nyb2xsLmJhdGNoU3RhcnQoKTtcbiAgICBkZWx0YSA9IG5vcm1hbGl6ZURlbHRhKGRlbHRhKTtcbiAgICBkZWx0YS5yZWR1Y2UoKGluZGV4LCBvcCkgPT4ge1xuICAgICAgbGV0IGxlbmd0aCA9IG9wLnJldGFpbiB8fCBvcC5kZWxldGUgfHwgb3AuaW5zZXJ0Lmxlbmd0aCB8fCAxO1xuICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBvcC5hdHRyaWJ1dGVzIHx8IHt9O1xuICAgICAgaWYgKG9wLmluc2VydCAhPSBudWxsKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3AuaW5zZXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGxldCB0ZXh0ID0gb3AuaW5zZXJ0O1xuICAgICAgICAgIGlmICh0ZXh0LmVuZHNXaXRoKCdcXG4nKSAmJiBjb25zdW1lTmV4dE5ld2xpbmUpIHtcbiAgICAgICAgICAgIGNvbnN1bWVOZXh0TmV3bGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGV4dCA9IHRleHQuc2xpY2UoMCwgLTEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaW5kZXggPj0gc2Nyb2xsTGVuZ3RoICYmICF0ZXh0LmVuZHNXaXRoKCdcXG4nKSkge1xuICAgICAgICAgICAgY29uc3VtZU5leHROZXdsaW5lID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5zY3JvbGwuaW5zZXJ0QXQoaW5kZXgsIHRleHQpO1xuICAgICAgICAgIGxldCBbbGluZSwgb2Zmc2V0XSA9IHRoaXMuc2Nyb2xsLmxpbmUoaW5kZXgpO1xuICAgICAgICAgIGxldCBmb3JtYXRzID0gZXh0ZW5kKHt9LCBidWJibGVGb3JtYXRzKGxpbmUpKTtcbiAgICAgICAgICBpZiAobGluZSBpbnN0YW5jZW9mIEJsb2NrKSB7XG4gICAgICAgICAgICBsZXQgW2xlYWYsIF0gPSBsaW5lLmRlc2NlbmRhbnQoUGFyY2htZW50LkxlYWYsIG9mZnNldCk7XG4gICAgICAgICAgICBmb3JtYXRzID0gZXh0ZW5kKGZvcm1hdHMsIGJ1YmJsZUZvcm1hdHMobGVhZikpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhdHRyaWJ1dGVzID0gRGVsdGFPcC5hdHRyaWJ1dGVzLmRpZmYoZm9ybWF0cywgYXR0cmlidXRlcykgfHwge307XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wLmluc2VydCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBsZXQga2V5ID0gT2JqZWN0LmtleXMob3AuaW5zZXJ0KVswXTsgIC8vIFRoZXJlIHNob3VsZCBvbmx5IGJlIG9uZSBrZXlcbiAgICAgICAgICBpZiAoa2V5ID09IG51bGwpIHJldHVybiBpbmRleDtcbiAgICAgICAgICB0aGlzLnNjcm9sbC5pbnNlcnRBdChpbmRleCwga2V5LCBvcC5pbnNlcnRba2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgc2Nyb2xsTGVuZ3RoICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICAgICAgdGhpcy5zY3JvbGwuZm9ybWF0QXQoaW5kZXgsIGxlbmd0aCwgbmFtZSwgYXR0cmlidXRlc1tuYW1lXSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBpbmRleCArIGxlbmd0aDtcbiAgICB9LCAwKTtcbiAgICBkZWx0YS5yZWR1Y2UoKGluZGV4LCBvcCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBvcC5kZWxldGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsLmRlbGV0ZUF0KGluZGV4LCBvcC5kZWxldGUpO1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgICByZXR1cm4gaW5kZXggKyAob3AucmV0YWluIHx8IG9wLmluc2VydC5sZW5ndGggfHwgMSk7XG4gICAgfSwgMCk7XG4gICAgdGhpcy5zY3JvbGwuYmF0Y2hFbmQoKTtcbiAgICByZXR1cm4gdGhpcy51cGRhdGUoZGVsdGEpO1xuICB9XG5cbiAgZGVsZXRlVGV4dChpbmRleCwgbGVuZ3RoKSB7XG4gICAgdGhpcy5zY3JvbGwuZGVsZXRlQXQoaW5kZXgsIGxlbmd0aCk7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlKG5ldyBEZWx0YSgpLnJldGFpbihpbmRleCkuZGVsZXRlKGxlbmd0aCkpO1xuICB9XG5cbiAgZm9ybWF0TGluZShpbmRleCwgbGVuZ3RoLCBmb3JtYXRzID0ge30pIHtcbiAgICB0aGlzLnNjcm9sbC51cGRhdGUoKTtcbiAgICBPYmplY3Qua2V5cyhmb3JtYXRzKS5mb3JFYWNoKChmb3JtYXQpID0+IHtcbiAgICAgIGlmICh0aGlzLnNjcm9sbC53aGl0ZWxpc3QgIT0gbnVsbCAmJiAhdGhpcy5zY3JvbGwud2hpdGVsaXN0W2Zvcm1hdF0pIHJldHVybjtcbiAgICAgIGxldCBsaW5lcyA9IHRoaXMuc2Nyb2xsLmxpbmVzKGluZGV4LCBNYXRoLm1heChsZW5ndGgsIDEpKTtcbiAgICAgIGxldCBsZW5ndGhSZW1haW5pbmcgPSBsZW5ndGg7XG4gICAgICBsaW5lcy5mb3JFYWNoKChsaW5lKSA9PiB7XG4gICAgICAgIGxldCBsaW5lTGVuZ3RoID0gbGluZS5sZW5ndGgoKTtcbiAgICAgICAgaWYgKCEobGluZSBpbnN0YW5jZW9mIENvZGVCbG9jaykpIHtcbiAgICAgICAgICBsaW5lLmZvcm1hdChmb3JtYXQsIGZvcm1hdHNbZm9ybWF0XSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IGNvZGVJbmRleCA9IGluZGV4IC0gbGluZS5vZmZzZXQodGhpcy5zY3JvbGwpO1xuICAgICAgICAgIGxldCBjb2RlTGVuZ3RoID0gbGluZS5uZXdsaW5lSW5kZXgoY29kZUluZGV4ICsgbGVuZ3RoUmVtYWluaW5nKSAtIGNvZGVJbmRleCArIDE7XG4gICAgICAgICAgbGluZS5mb3JtYXRBdChjb2RlSW5kZXgsIGNvZGVMZW5ndGgsIGZvcm1hdCwgZm9ybWF0c1tmb3JtYXRdKTtcbiAgICAgICAgfVxuICAgICAgICBsZW5ndGhSZW1haW5pbmcgLT0gbGluZUxlbmd0aDtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHRoaXMuc2Nyb2xsLm9wdGltaXplKCk7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlKG5ldyBEZWx0YSgpLnJldGFpbihpbmRleCkucmV0YWluKGxlbmd0aCwgY2xvbmUoZm9ybWF0cykpKTtcbiAgfVxuXG4gIGZvcm1hdFRleHQoaW5kZXgsIGxlbmd0aCwgZm9ybWF0cyA9IHt9KSB7XG4gICAgT2JqZWN0LmtleXMoZm9ybWF0cykuZm9yRWFjaCgoZm9ybWF0KSA9PiB7XG4gICAgICB0aGlzLnNjcm9sbC5mb3JtYXRBdChpbmRleCwgbGVuZ3RoLCBmb3JtYXQsIGZvcm1hdHNbZm9ybWF0XSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlKG5ldyBEZWx0YSgpLnJldGFpbihpbmRleCkucmV0YWluKGxlbmd0aCwgY2xvbmUoZm9ybWF0cykpKTtcbiAgfVxuXG4gIGdldENvbnRlbnRzKGluZGV4LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy5kZWx0YS5zbGljZShpbmRleCwgaW5kZXggKyBsZW5ndGgpO1xuICB9XG5cbiAgZ2V0RGVsdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2Nyb2xsLmxpbmVzKCkucmVkdWNlKChkZWx0YSwgbGluZSkgPT4ge1xuICAgICAgcmV0dXJuIGRlbHRhLmNvbmNhdChsaW5lLmRlbHRhKCkpO1xuICAgIH0sIG5ldyBEZWx0YSgpKTtcbiAgfVxuXG4gIGdldEZvcm1hdChpbmRleCwgbGVuZ3RoID0gMCkge1xuICAgIGxldCBsaW5lcyA9IFtdLCBsZWF2ZXMgPSBbXTtcbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLnNjcm9sbC5wYXRoKGluZGV4KS5mb3JFYWNoKGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgbGV0IFtibG90LCBdID0gcGF0aDtcbiAgICAgICAgaWYgKGJsb3QgaW5zdGFuY2VvZiBCbG9jaykge1xuICAgICAgICAgIGxpbmVzLnB1c2goYmxvdCk7XG4gICAgICAgIH0gZWxzZSBpZiAoYmxvdCBpbnN0YW5jZW9mIFBhcmNobWVudC5MZWFmKSB7XG4gICAgICAgICAgbGVhdmVzLnB1c2goYmxvdCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaW5lcyA9IHRoaXMuc2Nyb2xsLmxpbmVzKGluZGV4LCBsZW5ndGgpO1xuICAgICAgbGVhdmVzID0gdGhpcy5zY3JvbGwuZGVzY2VuZGFudHMoUGFyY2htZW50LkxlYWYsIGluZGV4LCBsZW5ndGgpO1xuICAgIH1cbiAgICBsZXQgZm9ybWF0c0FyciA9IFtsaW5lcywgbGVhdmVzXS5tYXAoZnVuY3Rpb24oYmxvdHMpIHtcbiAgICAgIGlmIChibG90cy5sZW5ndGggPT09IDApIHJldHVybiB7fTtcbiAgICAgIGxldCBmb3JtYXRzID0gYnViYmxlRm9ybWF0cyhibG90cy5zaGlmdCgpKTtcbiAgICAgIHdoaWxlIChPYmplY3Qua2V5cyhmb3JtYXRzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxldCBibG90ID0gYmxvdHMuc2hpZnQoKTtcbiAgICAgICAgaWYgKGJsb3QgPT0gbnVsbCkgcmV0dXJuIGZvcm1hdHM7XG4gICAgICAgIGZvcm1hdHMgPSBjb21iaW5lRm9ybWF0cyhidWJibGVGb3JtYXRzKGJsb3QpLCBmb3JtYXRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmb3JtYXRzO1xuICAgIH0pO1xuICAgIHJldHVybiBleHRlbmQuYXBwbHkoZXh0ZW5kLCBmb3JtYXRzQXJyKTtcbiAgfVxuXG4gIGdldFRleHQoaW5kZXgsIGxlbmd0aCkge1xuICAgIHJldHVybiB0aGlzLmdldENvbnRlbnRzKGluZGV4LCBsZW5ndGgpLmZpbHRlcihmdW5jdGlvbihvcCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvcC5pbnNlcnQgPT09ICdzdHJpbmcnO1xuICAgIH0pLm1hcChmdW5jdGlvbihvcCkge1xuICAgICAgcmV0dXJuIG9wLmluc2VydDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfVxuXG4gIGluc2VydEVtYmVkKGluZGV4LCBlbWJlZCwgdmFsdWUpIHtcbiAgICB0aGlzLnNjcm9sbC5pbnNlcnRBdChpbmRleCwgZW1iZWQsIHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy51cGRhdGUobmV3IERlbHRhKCkucmV0YWluKGluZGV4KS5pbnNlcnQoeyBbZW1iZWRdOiB2YWx1ZSB9KSk7XG4gIH1cblxuICBpbnNlcnRUZXh0KGluZGV4LCB0ZXh0LCBmb3JtYXRzID0ge30pIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHJcXG4vZywgJ1xcbicpLnJlcGxhY2UoL1xcci9nLCAnXFxuJyk7XG4gICAgdGhpcy5zY3JvbGwuaW5zZXJ0QXQoaW5kZXgsIHRleHQpO1xuICAgIE9iamVjdC5rZXlzKGZvcm1hdHMpLmZvckVhY2goKGZvcm1hdCkgPT4ge1xuICAgICAgdGhpcy5zY3JvbGwuZm9ybWF0QXQoaW5kZXgsIHRleHQubGVuZ3RoLCBmb3JtYXQsIGZvcm1hdHNbZm9ybWF0XSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlKG5ldyBEZWx0YSgpLnJldGFpbihpbmRleCkuaW5zZXJ0KHRleHQsIGNsb25lKGZvcm1hdHMpKSk7XG4gIH1cblxuICBpc0JsYW5rKCkge1xuICAgIGlmICh0aGlzLnNjcm9sbC5jaGlsZHJlbi5sZW5ndGggPT0gMCkgcmV0dXJuIHRydWU7XG4gICAgaWYgKHRoaXMuc2Nyb2xsLmNoaWxkcmVuLmxlbmd0aCA+IDEpIHJldHVybiBmYWxzZTtcbiAgICBsZXQgYmxvY2sgPSB0aGlzLnNjcm9sbC5jaGlsZHJlbi5oZWFkO1xuICAgIGlmIChibG9jay5zdGF0aWNzLmJsb3ROYW1lICE9PSBCbG9jay5ibG90TmFtZSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChibG9jay5jaGlsZHJlbi5sZW5ndGggPiAxKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIGJsb2NrLmNoaWxkcmVuLmhlYWQgaW5zdGFuY2VvZiBCcmVhaztcbiAgfVxuXG4gIHJlbW92ZUZvcm1hdChpbmRleCwgbGVuZ3RoKSB7XG4gICAgbGV0IHRleHQgPSB0aGlzLmdldFRleHQoaW5kZXgsIGxlbmd0aCk7XG4gICAgbGV0IFtsaW5lLCBvZmZzZXRdID0gdGhpcy5zY3JvbGwubGluZShpbmRleCArIGxlbmd0aCk7XG4gICAgbGV0IHN1ZmZpeExlbmd0aCA9IDAsIHN1ZmZpeCA9IG5ldyBEZWx0YSgpO1xuICAgIGlmIChsaW5lICE9IG51bGwpIHtcbiAgICAgIGlmICghKGxpbmUgaW5zdGFuY2VvZiBDb2RlQmxvY2spKSB7XG4gICAgICAgIHN1ZmZpeExlbmd0aCA9IGxpbmUubGVuZ3RoKCkgLSBvZmZzZXQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdWZmaXhMZW5ndGggPSBsaW5lLm5ld2xpbmVJbmRleChvZmZzZXQpIC0gb2Zmc2V0ICsgMTtcbiAgICAgIH1cbiAgICAgIHN1ZmZpeCA9IGxpbmUuZGVsdGEoKS5zbGljZShvZmZzZXQsIG9mZnNldCArIHN1ZmZpeExlbmd0aCAtIDEpLmluc2VydCgnXFxuJyk7XG4gICAgfVxuICAgIGxldCBjb250ZW50cyA9IHRoaXMuZ2V0Q29udGVudHMoaW5kZXgsIGxlbmd0aCArIHN1ZmZpeExlbmd0aCk7XG4gICAgbGV0IGRpZmYgPSBjb250ZW50cy5kaWZmKG5ldyBEZWx0YSgpLmluc2VydCh0ZXh0KS5jb25jYXQoc3VmZml4KSk7XG4gICAgbGV0IGRlbHRhID0gbmV3IERlbHRhKCkucmV0YWluKGluZGV4KS5jb25jYXQoZGlmZik7XG4gICAgcmV0dXJuIHRoaXMuYXBwbHlEZWx0YShkZWx0YSk7XG4gIH1cblxuICB1cGRhdGUoY2hhbmdlLCBtdXRhdGlvbnMgPSBbXSwgY3Vyc29ySW5kZXggPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgb2xkRGVsdGEgPSB0aGlzLmRlbHRhO1xuICAgIGlmIChtdXRhdGlvbnMubGVuZ3RoID09PSAxICYmXG4gICAgICAgIG11dGF0aW9uc1swXS50eXBlID09PSAnY2hhcmFjdGVyRGF0YScgJiZcbiAgICAgICAgbXV0YXRpb25zWzBdLnRhcmdldC5kYXRhLm1hdGNoKEFTQ0lJKSAmJlxuICAgICAgICBQYXJjaG1lbnQuZmluZChtdXRhdGlvbnNbMF0udGFyZ2V0KSkge1xuICAgICAgLy8gT3B0aW1pemF0aW9uIGZvciBjaGFyYWN0ZXIgY2hhbmdlc1xuICAgICAgbGV0IHRleHRCbG90ID0gUGFyY2htZW50LmZpbmQobXV0YXRpb25zWzBdLnRhcmdldCk7XG4gICAgICBsZXQgZm9ybWF0cyA9IGJ1YmJsZUZvcm1hdHModGV4dEJsb3QpO1xuICAgICAgbGV0IGluZGV4ID0gdGV4dEJsb3Qub2Zmc2V0KHRoaXMuc2Nyb2xsKTtcbiAgICAgIGxldCBvbGRWYWx1ZSA9IG11dGF0aW9uc1swXS5vbGRWYWx1ZS5yZXBsYWNlKEN1cnNvckJsb3QuQ09OVEVOVFMsICcnKTtcbiAgICAgIGxldCBvbGRUZXh0ID0gbmV3IERlbHRhKCkuaW5zZXJ0KG9sZFZhbHVlKTtcbiAgICAgIGxldCBuZXdUZXh0ID0gbmV3IERlbHRhKCkuaW5zZXJ0KHRleHRCbG90LnZhbHVlKCkpO1xuICAgICAgbGV0IGRpZmZEZWx0YSA9IG5ldyBEZWx0YSgpLnJldGFpbihpbmRleCkuY29uY2F0KG9sZFRleHQuZGlmZihuZXdUZXh0LCBjdXJzb3JJbmRleCkpO1xuICAgICAgY2hhbmdlID0gZGlmZkRlbHRhLnJlZHVjZShmdW5jdGlvbihkZWx0YSwgb3ApIHtcbiAgICAgICAgaWYgKG9wLmluc2VydCkge1xuICAgICAgICAgIHJldHVybiBkZWx0YS5pbnNlcnQob3AuaW5zZXJ0LCBmb3JtYXRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZGVsdGEucHVzaChvcCk7XG4gICAgICAgIH1cbiAgICAgIH0sIG5ldyBEZWx0YSgpKTtcbiAgICAgIHRoaXMuZGVsdGEgPSBvbGREZWx0YS5jb21wb3NlKGNoYW5nZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGVsdGEgPSB0aGlzLmdldERlbHRhKCk7XG4gICAgICBpZiAoIWNoYW5nZSB8fCAhZXF1YWwob2xkRGVsdGEuY29tcG9zZShjaGFuZ2UpLCB0aGlzLmRlbHRhKSkge1xuICAgICAgICBjaGFuZ2UgPSBvbGREZWx0YS5kaWZmKHRoaXMuZGVsdGEsIGN1cnNvckluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNoYW5nZTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGNvbWJpbmVGb3JtYXRzKGZvcm1hdHMsIGNvbWJpbmVkKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhjb21iaW5lZCkucmVkdWNlKGZ1bmN0aW9uKG1lcmdlZCwgbmFtZSkge1xuICAgIGlmIChmb3JtYXRzW25hbWVdID09IG51bGwpIHJldHVybiBtZXJnZWQ7XG4gICAgaWYgKGNvbWJpbmVkW25hbWVdID09PSBmb3JtYXRzW25hbWVdKSB7XG4gICAgICBtZXJnZWRbbmFtZV0gPSBjb21iaW5lZFtuYW1lXTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY29tYmluZWRbbmFtZV0pKSB7XG4gICAgICBpZiAoY29tYmluZWRbbmFtZV0uaW5kZXhPZihmb3JtYXRzW25hbWVdKSA8IDApIHtcbiAgICAgICAgbWVyZ2VkW25hbWVdID0gY29tYmluZWRbbmFtZV0uY29uY2F0KFtmb3JtYXRzW25hbWVdXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG1lcmdlZFtuYW1lXSA9IFtjb21iaW5lZFtuYW1lXSwgZm9ybWF0c1tuYW1lXV07XG4gICAgfVxuICAgIHJldHVybiBtZXJnZWQ7XG4gIH0sIHt9KTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplRGVsdGEoZGVsdGEpIHtcbiAgcmV0dXJuIGRlbHRhLnJlZHVjZShmdW5jdGlvbihkZWx0YSwgb3ApIHtcbiAgICBpZiAob3AuaW5zZXJ0ID09PSAxKSB7XG4gICAgICBsZXQgYXR0cmlidXRlcyA9IGNsb25lKG9wLmF0dHJpYnV0ZXMpO1xuICAgICAgZGVsZXRlIGF0dHJpYnV0ZXNbJ2ltYWdlJ107XG4gICAgICByZXR1cm4gZGVsdGEuaW5zZXJ0KHsgaW1hZ2U6IG9wLmF0dHJpYnV0ZXMuaW1hZ2UgfSwgYXR0cmlidXRlcyk7XG4gICAgfVxuICAgIGlmIChvcC5hdHRyaWJ1dGVzICE9IG51bGwgJiYgKG9wLmF0dHJpYnV0ZXMubGlzdCA9PT0gdHJ1ZSB8fCBvcC5hdHRyaWJ1dGVzLmJ1bGxldCA9PT0gdHJ1ZSkpIHtcbiAgICAgIG9wID0gY2xvbmUob3ApO1xuICAgICAgaWYgKG9wLmF0dHJpYnV0ZXMubGlzdCkge1xuICAgICAgICBvcC5hdHRyaWJ1dGVzLmxpc3QgPSAnb3JkZXJlZCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcC5hdHRyaWJ1dGVzLmxpc3QgPSAnYnVsbGV0JztcbiAgICAgICAgZGVsZXRlIG9wLmF0dHJpYnV0ZXMuYnVsbGV0O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wLmluc2VydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxldCB0ZXh0ID0gb3AuaW5zZXJ0LnJlcGxhY2UoL1xcclxcbi9nLCAnXFxuJykucmVwbGFjZSgvXFxyL2csICdcXG4nKTtcbiAgICAgIHJldHVybiBkZWx0YS5pbnNlcnQodGV4dCwgb3AuYXR0cmlidXRlcyk7XG4gICAgfVxuICAgIHJldHVybiBkZWx0YS5wdXNoKG9wKTtcbiAgfSwgbmV3IERlbHRhKCkpO1xufVxuXG5cbmV4cG9ydCBkZWZhdWx0IEVkaXRvcjtcbiIsImxldCBsZXZlbHMgPSBbJ2Vycm9yJywgJ3dhcm4nLCAnbG9nJywgJ2luZm8nXTtcbmxldCBsZXZlbCA9ICd3YXJuJztcblxuZnVuY3Rpb24gZGVidWcobWV0aG9kLCAuLi5hcmdzKSB7XG4gIGlmIChsZXZlbHMuaW5kZXhPZihtZXRob2QpIDw9IGxldmVscy5pbmRleE9mKGxldmVsKSkge1xuICAgIGNvbnNvbGVbbWV0aG9kXSguLi5hcmdzKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICB9XG59XG5cbmZ1bmN0aW9uIG5hbWVzcGFjZShucykge1xuICByZXR1cm4gbGV2ZWxzLnJlZHVjZShmdW5jdGlvbihsb2dnZXIsIG1ldGhvZCkge1xuICAgIGxvZ2dlclttZXRob2RdID0gZGVidWcuYmluZChjb25zb2xlLCBtZXRob2QsIG5zKTtcbiAgICByZXR1cm4gbG9nZ2VyO1xuICB9LCB7fSk7XG59XG5cbmRlYnVnLmxldmVsID0gbmFtZXNwYWNlLmxldmVsID0gZnVuY3Rpb24obmV3TGV2ZWwpIHtcbiAgbGV2ZWwgPSBuZXdMZXZlbDtcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgbmFtZXNwYWNlO1xuIiwiaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICdldmVudGVtaXR0ZXIzJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuXG5sZXQgZGVidWcgPSBsb2dnZXIoJ3F1aWxsOmV2ZW50cycpO1xuXG5jb25zdCBFVkVOVFMgPSBbJ3NlbGVjdGlvbmNoYW5nZScsICdtb3VzZWRvd24nLCAnbW91c2V1cCcsICdjbGljayddO1xuXG5FVkVOVFMuZm9yRWFjaChmdW5jdGlvbihldmVudE5hbWUpIHtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsICguLi5hcmdzKSA9PiB7XG4gICAgW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucWwtY29udGFpbmVyJykpLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgIC8vIFRPRE8gdXNlIFdlYWtNYXBcbiAgICAgIGlmIChub2RlLl9fcXVpbGwgJiYgbm9kZS5fX3F1aWxsLmVtaXR0ZXIpIHtcbiAgICAgICAgbm9kZS5fX3F1aWxsLmVtaXR0ZXIuaGFuZGxlRE9NKC4uLmFyZ3MpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn0pO1xuXG5cbmNsYXNzIEVtaXR0ZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMubGlzdGVuZXJzID0ge307XG4gICAgdGhpcy5vbignZXJyb3InLCBkZWJ1Zy5lcnJvcik7XG4gIH1cblxuICBlbWl0KCkge1xuICAgIGRlYnVnLmxvZy5hcHBseShkZWJ1ZywgYXJndW1lbnRzKTtcbiAgICBzdXBlci5lbWl0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBoYW5kbGVET00oZXZlbnQsIC4uLmFyZ3MpIHtcbiAgICAodGhpcy5saXN0ZW5lcnNbZXZlbnQudHlwZV0gfHwgW10pLmZvckVhY2goZnVuY3Rpb24oeyBub2RlLCBoYW5kbGVyIH0pIHtcbiAgICAgIGlmIChldmVudC50YXJnZXQgPT09IG5vZGUgfHwgbm9kZS5jb250YWlucyhldmVudC50YXJnZXQpKSB7XG4gICAgICAgIGhhbmRsZXIoZXZlbnQsIC4uLmFyZ3MpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbGlzdGVuRE9NKGV2ZW50TmFtZSwgbm9kZSwgaGFuZGxlcikge1xuICAgIGlmICghdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXSkge1xuICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXSA9IFtdO1xuICAgIH1cbiAgICB0aGlzLmxpc3RlbmVyc1tldmVudE5hbWVdLnB1c2goeyBub2RlLCBoYW5kbGVyIH0pXG4gIH1cbn1cblxuRW1pdHRlci5ldmVudHMgPSB7XG4gIEVESVRPUl9DSEFOR0UgICAgICAgIDogJ2VkaXRvci1jaGFuZ2UnLFxuICBTQ1JPTExfQkVGT1JFX1VQREFURSA6ICdzY3JvbGwtYmVmb3JlLXVwZGF0ZScsXG4gIFNDUk9MTF9PUFRJTUlaRSAgICAgIDogJ3Njcm9sbC1vcHRpbWl6ZScsXG4gIFNDUk9MTF9VUERBVEUgICAgICAgIDogJ3Njcm9sbC11cGRhdGUnLFxuICBTRUxFQ1RJT05fQ0hBTkdFICAgICA6ICdzZWxlY3Rpb24tY2hhbmdlJyxcbiAgVEVYVF9DSEFOR0UgICAgICAgICAgOiAndGV4dC1jaGFuZ2UnXG59O1xuRW1pdHRlci5zb3VyY2VzID0ge1xuICBBUEkgICAgOiAnYXBpJyxcbiAgU0lMRU5UIDogJ3NpbGVudCcsXG4gIFVTRVIgICA6ICd1c2VyJ1xufTtcblxuXG5leHBvcnQgZGVmYXVsdCBFbWl0dGVyO1xuIiwiY2xhc3MgTW9kdWxlIHtcbiAgY29uc3RydWN0b3IocXVpbGwsIG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMucXVpbGwgPSBxdWlsbDtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG59XG5Nb2R1bGUuREVGQVVMVFMgPSB7fTtcblxuXG5leHBvcnQgZGVmYXVsdCBNb2R1bGU7XG4iLCJpbXBvcnQgUGFyY2htZW50IGZyb20gJ3BhcmNobWVudCc7XG5pbXBvcnQgY2xvbmUgZnJvbSAnY2xvbmUnO1xuaW1wb3J0IGVxdWFsIGZyb20gJ2RlZXAtZXF1YWwnO1xuaW1wb3J0IEVtaXR0ZXIgZnJvbSAnLi9lbWl0dGVyJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuXG5sZXQgZGVidWcgPSBsb2dnZXIoJ3F1aWxsOnNlbGVjdGlvbicpO1xuXG5cbmNsYXNzIFJhbmdlIHtcbiAgY29uc3RydWN0b3IoaW5kZXgsIGxlbmd0aCA9IDApIHtcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XG4gIH1cbn1cblxuXG5jbGFzcyBTZWxlY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihzY3JvbGwsIGVtaXR0ZXIpIHtcbiAgICB0aGlzLmVtaXR0ZXIgPSBlbWl0dGVyO1xuICAgIHRoaXMuc2Nyb2xsID0gc2Nyb2xsO1xuICAgIHRoaXMuY29tcG9zaW5nID0gZmFsc2U7XG4gICAgdGhpcy5tb3VzZURvd24gPSBmYWxzZTtcbiAgICB0aGlzLnJvb3QgPSB0aGlzLnNjcm9sbC5kb21Ob2RlO1xuICAgIHRoaXMuY3Vyc29yID0gUGFyY2htZW50LmNyZWF0ZSgnY3Vyc29yJywgdGhpcyk7XG4gICAgLy8gc2F2ZWRSYW5nZSBpcyBsYXN0IG5vbi1udWxsIHJhbmdlXG4gICAgdGhpcy5sYXN0UmFuZ2UgPSB0aGlzLnNhdmVkUmFuZ2UgPSBuZXcgUmFuZ2UoMCwgMCk7XG4gICAgdGhpcy5oYW5kbGVDb21wb3NpdGlvbigpO1xuICAgIHRoaXMuaGFuZGxlRHJhZ2dpbmcoKTtcbiAgICB0aGlzLmVtaXR0ZXIubGlzdGVuRE9NKCdzZWxlY3Rpb25jaGFuZ2UnLCBkb2N1bWVudCwgKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLm1vdXNlRG93bikge1xuICAgICAgICBzZXRUaW1lb3V0KHRoaXMudXBkYXRlLmJpbmQodGhpcywgRW1pdHRlci5zb3VyY2VzLlVTRVIpLCAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmVtaXR0ZXIub24oRW1pdHRlci5ldmVudHMuRURJVE9SX0NIQU5HRSwgKHR5cGUsIGRlbHRhKSA9PiB7XG4gICAgICBpZiAodHlwZSA9PT0gRW1pdHRlci5ldmVudHMuVEVYVF9DSEFOR0UgJiYgZGVsdGEubGVuZ3RoKCkgPiAwKSB7XG4gICAgICAgIHRoaXMudXBkYXRlKEVtaXR0ZXIuc291cmNlcy5TSUxFTlQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuZW1pdHRlci5vbihFbWl0dGVyLmV2ZW50cy5TQ1JPTExfQkVGT1JFX1VQREFURSwgKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLmhhc0ZvY3VzKCkpIHJldHVybjtcbiAgICAgIGxldCBuYXRpdmUgPSB0aGlzLmdldE5hdGl2ZVJhbmdlKCk7XG4gICAgICBpZiAobmF0aXZlID09IG51bGwpIHJldHVybjtcbiAgICAgIGlmIChuYXRpdmUuc3RhcnQubm9kZSA9PT0gdGhpcy5jdXJzb3IudGV4dE5vZGUpIHJldHVybjsgIC8vIGN1cnNvci5yZXN0b3JlKCkgd2lsbCBoYW5kbGVcbiAgICAgIC8vIFRPRE8gdW5jbGVhciBpZiB0aGlzIGhhcyBuZWdhdGl2ZSBzaWRlIGVmZmVjdHNcbiAgICAgIHRoaXMuZW1pdHRlci5vbmNlKEVtaXR0ZXIuZXZlbnRzLlNDUk9MTF9VUERBVEUsICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLnNldE5hdGl2ZVJhbmdlKG5hdGl2ZS5zdGFydC5ub2RlLCBuYXRpdmUuc3RhcnQub2Zmc2V0LCBuYXRpdmUuZW5kLm5vZGUsIG5hdGl2ZS5lbmQub2Zmc2V0KTtcbiAgICAgICAgfSBjYXRjaCAoaWdub3JlZCkge31cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHRoaXMuZW1pdHRlci5vbihFbWl0dGVyLmV2ZW50cy5TQ1JPTExfT1BUSU1JWkUsIChtdXRhdGlvbnMsIGNvbnRleHQpID0+IHtcbiAgICAgIGlmIChjb250ZXh0LnJhbmdlKSB7XG4gICAgICAgIGNvbnN0IHsgc3RhcnROb2RlLCBzdGFydE9mZnNldCwgZW5kTm9kZSwgZW5kT2Zmc2V0IH0gPSBjb250ZXh0LnJhbmdlO1xuICAgICAgICB0aGlzLnNldE5hdGl2ZVJhbmdlKHN0YXJ0Tm9kZSwgc3RhcnRPZmZzZXQsIGVuZE5vZGUsIGVuZE9mZnNldCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy51cGRhdGUoRW1pdHRlci5zb3VyY2VzLlNJTEVOVCk7XG4gIH1cblxuICBoYW5kbGVDb21wb3NpdGlvbigpIHtcbiAgICB0aGlzLnJvb3QuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25zdGFydCcsICgpID0+IHtcbiAgICAgIHRoaXMuY29tcG9zaW5nID0gdHJ1ZTtcbiAgICB9KTtcbiAgICB0aGlzLnJvb3QuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCAoKSA9PiB7XG4gICAgICB0aGlzLmNvbXBvc2luZyA9IGZhbHNlO1xuICAgICAgaWYgKHRoaXMuY3Vyc29yLnBhcmVudCkge1xuICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMuY3Vyc29yLnJlc3RvcmUoKTtcbiAgICAgICAgaWYgKCFyYW5nZSkgcmV0dXJuO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLnNldE5hdGl2ZVJhbmdlKHJhbmdlLnN0YXJ0Tm9kZSwgcmFuZ2Uuc3RhcnRPZmZzZXQsIHJhbmdlLmVuZE5vZGUsIHJhbmdlLmVuZE9mZnNldCk7XG4gICAgICAgIH0sIDEpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaGFuZGxlRHJhZ2dpbmcoKSB7XG4gICAgdGhpcy5lbWl0dGVyLmxpc3RlbkRPTSgnbW91c2Vkb3duJywgZG9jdW1lbnQuYm9keSwgKCkgPT4ge1xuICAgICAgdGhpcy5tb3VzZURvd24gPSB0cnVlO1xuICAgIH0pO1xuICAgIHRoaXMuZW1pdHRlci5saXN0ZW5ET00oJ21vdXNldXAnLCBkb2N1bWVudC5ib2R5LCAoKSA9PiB7XG4gICAgICB0aGlzLm1vdXNlRG93biA9IGZhbHNlO1xuICAgICAgdGhpcy51cGRhdGUoRW1pdHRlci5zb3VyY2VzLlVTRVIpO1xuICAgIH0pO1xuICB9XG5cbiAgZm9jdXMoKSB7XG4gICAgaWYgKHRoaXMuaGFzRm9jdXMoKSkgcmV0dXJuO1xuICAgIHRoaXMucm9vdC5mb2N1cygpO1xuICAgIHRoaXMuc2V0UmFuZ2UodGhpcy5zYXZlZFJhbmdlKTtcbiAgfVxuXG4gIGZvcm1hdChmb3JtYXQsIHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuc2Nyb2xsLndoaXRlbGlzdCAhPSBudWxsICYmICF0aGlzLnNjcm9sbC53aGl0ZWxpc3RbZm9ybWF0XSkgcmV0dXJuO1xuICAgIHRoaXMuc2Nyb2xsLnVwZGF0ZSgpO1xuICAgIGxldCBuYXRpdmVSYW5nZSA9IHRoaXMuZ2V0TmF0aXZlUmFuZ2UoKTtcbiAgICBpZiAobmF0aXZlUmFuZ2UgPT0gbnVsbCB8fCAhbmF0aXZlUmFuZ2UubmF0aXZlLmNvbGxhcHNlZCB8fCBQYXJjaG1lbnQucXVlcnkoZm9ybWF0LCBQYXJjaG1lbnQuU2NvcGUuQkxPQ0spKSByZXR1cm47XG4gICAgaWYgKG5hdGl2ZVJhbmdlLnN0YXJ0Lm5vZGUgIT09IHRoaXMuY3Vyc29yLnRleHROb2RlKSB7XG4gICAgICBsZXQgYmxvdCA9IFBhcmNobWVudC5maW5kKG5hdGl2ZVJhbmdlLnN0YXJ0Lm5vZGUsIGZhbHNlKTtcbiAgICAgIGlmIChibG90ID09IG51bGwpIHJldHVybjtcbiAgICAgIC8vIFRPRE8gR2l2ZSBibG90IGFiaWxpdHkgdG8gbm90IHNwbGl0XG4gICAgICBpZiAoYmxvdCBpbnN0YW5jZW9mIFBhcmNobWVudC5MZWFmKSB7XG4gICAgICAgIGxldCBhZnRlciA9IGJsb3Quc3BsaXQobmF0aXZlUmFuZ2Uuc3RhcnQub2Zmc2V0KTtcbiAgICAgICAgYmxvdC5wYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMuY3Vyc29yLCBhZnRlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBibG90Lmluc2VydEJlZm9yZSh0aGlzLmN1cnNvciwgbmF0aXZlUmFuZ2Uuc3RhcnQubm9kZSk7ICAvLyBTaG91bGQgbmV2ZXIgaGFwcGVuXG4gICAgICB9XG4gICAgICB0aGlzLmN1cnNvci5hdHRhY2goKTtcbiAgICB9XG4gICAgdGhpcy5jdXJzb3IuZm9ybWF0KGZvcm1hdCwgdmFsdWUpO1xuICAgIHRoaXMuc2Nyb2xsLm9wdGltaXplKCk7XG4gICAgdGhpcy5zZXROYXRpdmVSYW5nZSh0aGlzLmN1cnNvci50ZXh0Tm9kZSwgdGhpcy5jdXJzb3IudGV4dE5vZGUuZGF0YS5sZW5ndGgpO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gIH1cblxuICBnZXRCb3VuZHMoaW5kZXgsIGxlbmd0aCA9IDApIHtcbiAgICBsZXQgc2Nyb2xsTGVuZ3RoID0gdGhpcy5zY3JvbGwubGVuZ3RoKCk7XG4gICAgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgc2Nyb2xsTGVuZ3RoIC0gMSk7XG4gICAgbGVuZ3RoID0gTWF0aC5taW4oaW5kZXggKyBsZW5ndGgsIHNjcm9sbExlbmd0aCAtIDEpIC0gaW5kZXg7XG4gICAgbGV0IG5vZGUsIFtsZWFmLCBvZmZzZXRdID0gdGhpcy5zY3JvbGwubGVhZihpbmRleCk7XG4gICAgaWYgKGxlYWYgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgW25vZGUsIG9mZnNldF0gPSBsZWFmLnBvc2l0aW9uKG9mZnNldCwgdHJ1ZSk7XG4gICAgbGV0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICBpZiAobGVuZ3RoID4gMCkge1xuICAgICAgcmFuZ2Uuc2V0U3RhcnQobm9kZSwgb2Zmc2V0KTtcbiAgICAgIFtsZWFmLCBvZmZzZXRdID0gdGhpcy5zY3JvbGwubGVhZihpbmRleCArIGxlbmd0aCk7XG4gICAgICBpZiAobGVhZiA9PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICAgIFtub2RlLCBvZmZzZXRdID0gbGVhZi5wb3NpdGlvbihvZmZzZXQsIHRydWUpO1xuICAgICAgcmFuZ2Uuc2V0RW5kKG5vZGUsIG9mZnNldCk7XG4gICAgICByZXR1cm4gcmFuZ2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBzaWRlID0gJ2xlZnQnO1xuICAgICAgbGV0IHJlY3Q7XG4gICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIFRleHQpIHtcbiAgICAgICAgaWYgKG9mZnNldCA8IG5vZGUuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICByYW5nZS5zZXRTdGFydChub2RlLCBvZmZzZXQpO1xuICAgICAgICAgIHJhbmdlLnNldEVuZChub2RlLCBvZmZzZXQgKyAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByYW5nZS5zZXRTdGFydChub2RlLCBvZmZzZXQgLSAxKTtcbiAgICAgICAgICByYW5nZS5zZXRFbmQobm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICBzaWRlID0gJ3JpZ2h0JztcbiAgICAgICAgfVxuICAgICAgICByZWN0ID0gcmFuZ2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWN0ID0gbGVhZi5kb21Ob2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAob2Zmc2V0ID4gMCkgc2lkZSA9ICdyaWdodCc7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBib3R0b206IHJlY3QudG9wICsgcmVjdC5oZWlnaHQsXG4gICAgICAgIGhlaWdodDogcmVjdC5oZWlnaHQsXG4gICAgICAgIGxlZnQ6IHJlY3Rbc2lkZV0sXG4gICAgICAgIHJpZ2h0OiByZWN0W3NpZGVdLFxuICAgICAgICB0b3A6IHJlY3QudG9wLFxuICAgICAgICB3aWR0aDogMFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBnZXROYXRpdmVSYW5nZSgpIHtcbiAgICBsZXQgc2VsZWN0aW9uID0gZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7XG4gICAgaWYgKHNlbGVjdGlvbiA9PSBudWxsIHx8IHNlbGVjdGlvbi5yYW5nZUNvdW50IDw9IDApIHJldHVybiBudWxsO1xuICAgIGxldCBuYXRpdmVSYW5nZSA9IHNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xuICAgIGlmIChuYXRpdmVSYW5nZSA9PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICBsZXQgcmFuZ2UgPSB0aGlzLm5vcm1hbGl6ZU5hdGl2ZShuYXRpdmVSYW5nZSk7XG4gICAgZGVidWcuaW5mbygnZ2V0TmF0aXZlUmFuZ2UnLCByYW5nZSk7XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9XG5cbiAgZ2V0UmFuZ2UoKSB7XG4gICAgbGV0IG5vcm1hbGl6ZWQgPSB0aGlzLmdldE5hdGl2ZVJhbmdlKCk7XG4gICAgaWYgKG5vcm1hbGl6ZWQgPT0gbnVsbCkgcmV0dXJuIFtudWxsLCBudWxsXTtcbiAgICBsZXQgcmFuZ2UgPSB0aGlzLm5vcm1hbGl6ZWRUb1JhbmdlKG5vcm1hbGl6ZWQpO1xuICAgIHJldHVybiBbcmFuZ2UsIG5vcm1hbGl6ZWRdO1xuICB9XG5cbiAgaGFzRm9jdXMoKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IHRoaXMucm9vdDtcbiAgfVxuXG4gIG5vcm1hbGl6ZWRUb1JhbmdlKHJhbmdlKSB7XG4gICAgbGV0IHBvc2l0aW9ucyA9IFtbcmFuZ2Uuc3RhcnQubm9kZSwgcmFuZ2Uuc3RhcnQub2Zmc2V0XV07XG4gICAgaWYgKCFyYW5nZS5uYXRpdmUuY29sbGFwc2VkKSB7XG4gICAgICBwb3NpdGlvbnMucHVzaChbcmFuZ2UuZW5kLm5vZGUsIHJhbmdlLmVuZC5vZmZzZXRdKTtcbiAgICB9XG4gICAgbGV0IGluZGV4ZXMgPSBwb3NpdGlvbnMubWFwKChwb3NpdGlvbikgPT4ge1xuICAgICAgbGV0IFtub2RlLCBvZmZzZXRdID0gcG9zaXRpb247XG4gICAgICBsZXQgYmxvdCA9IFBhcmNobWVudC5maW5kKG5vZGUsIHRydWUpO1xuICAgICAgbGV0IGluZGV4ID0gYmxvdC5vZmZzZXQodGhpcy5zY3JvbGwpO1xuICAgICAgaWYgKG9mZnNldCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9IGVsc2UgaWYgKGJsb3QgaW5zdGFuY2VvZiBQYXJjaG1lbnQuQ29udGFpbmVyKSB7XG4gICAgICAgIHJldHVybiBpbmRleCArIGJsb3QubGVuZ3RoKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaW5kZXggKyBibG90LmluZGV4KG5vZGUsIG9mZnNldCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbGV0IGVuZCA9IE1hdGgubWluKE1hdGgubWF4KC4uLmluZGV4ZXMpLCB0aGlzLnNjcm9sbC5sZW5ndGgoKSAtIDEpO1xuICAgIGxldCBzdGFydCA9IE1hdGgubWluKGVuZCwgLi4uaW5kZXhlcyk7XG4gICAgcmV0dXJuIG5ldyBSYW5nZShzdGFydCwgZW5kLXN0YXJ0KTtcbiAgfVxuXG4gIG5vcm1hbGl6ZU5hdGl2ZShuYXRpdmVSYW5nZSkge1xuICAgIGlmICghY29udGFpbnModGhpcy5yb290LCBuYXRpdmVSYW5nZS5zdGFydENvbnRhaW5lcikgfHxcbiAgICAgICAgKCFuYXRpdmVSYW5nZS5jb2xsYXBzZWQgJiYgIWNvbnRhaW5zKHRoaXMucm9vdCwgbmF0aXZlUmFuZ2UuZW5kQ29udGFpbmVyKSkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBsZXQgcmFuZ2UgPSB7XG4gICAgICBzdGFydDogeyBub2RlOiBuYXRpdmVSYW5nZS5zdGFydENvbnRhaW5lciwgb2Zmc2V0OiBuYXRpdmVSYW5nZS5zdGFydE9mZnNldCB9LFxuICAgICAgZW5kOiB7IG5vZGU6IG5hdGl2ZVJhbmdlLmVuZENvbnRhaW5lciwgb2Zmc2V0OiBuYXRpdmVSYW5nZS5lbmRPZmZzZXQgfSxcbiAgICAgIG5hdGl2ZTogbmF0aXZlUmFuZ2VcbiAgICB9O1xuICAgIFtyYW5nZS5zdGFydCwgcmFuZ2UuZW5kXS5mb3JFYWNoKGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICBsZXQgbm9kZSA9IHBvc2l0aW9uLm5vZGUsIG9mZnNldCA9IHBvc2l0aW9uLm9mZnNldDtcbiAgICAgIHdoaWxlICghKG5vZGUgaW5zdGFuY2VvZiBUZXh0KSAmJiBub2RlLmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAobm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA+IG9mZnNldCkge1xuICAgICAgICAgIG5vZGUgPSBub2RlLmNoaWxkTm9kZXNbb2Zmc2V0XTtcbiAgICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggPT09IG9mZnNldCkge1xuICAgICAgICAgIG5vZGUgPSBub2RlLmxhc3RDaGlsZDtcbiAgICAgICAgICBvZmZzZXQgPSBub2RlIGluc3RhbmNlb2YgVGV4dCA/IG5vZGUuZGF0YS5sZW5ndGggOiBub2RlLmNoaWxkTm9kZXMubGVuZ3RoICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcG9zaXRpb24ubm9kZSA9IG5vZGUsIHBvc2l0aW9uLm9mZnNldCA9IG9mZnNldDtcbiAgICB9KTtcbiAgICByZXR1cm4gcmFuZ2U7XG4gIH1cblxuICByYW5nZVRvTmF0aXZlKHJhbmdlKSB7XG4gICAgbGV0IGluZGV4ZXMgPSByYW5nZS5jb2xsYXBzZWQgPyBbcmFuZ2UuaW5kZXhdIDogW3JhbmdlLmluZGV4LCByYW5nZS5pbmRleCArIHJhbmdlLmxlbmd0aF07XG4gICAgbGV0IGFyZ3MgPSBbXTtcbiAgICBsZXQgc2Nyb2xsTGVuZ3RoID0gdGhpcy5zY3JvbGwubGVuZ3RoKCk7XG4gICAgaW5kZXhlcy5mb3JFYWNoKChpbmRleCwgaSkgPT4ge1xuICAgICAgaW5kZXggPSBNYXRoLm1pbihzY3JvbGxMZW5ndGggLSAxLCBpbmRleCk7XG4gICAgICBsZXQgbm9kZSwgW2xlYWYsIG9mZnNldF0gPSB0aGlzLnNjcm9sbC5sZWFmKGluZGV4KTtcbiAgICAgIFtub2RlLCBvZmZzZXRdID0gbGVhZi5wb3NpdGlvbihvZmZzZXQsIGkgIT09IDApO1xuICAgICAgYXJncy5wdXNoKG5vZGUsIG9mZnNldCk7XG4gICAgfSk7XG4gICAgaWYgKGFyZ3MubGVuZ3RoIDwgMikge1xuICAgICAgYXJncyA9IGFyZ3MuY29uY2F0KGFyZ3MpO1xuICAgIH1cbiAgICByZXR1cm4gYXJncztcbiAgfVxuXG4gIHNjcm9sbEludG9WaWV3KHNjcm9sbGluZ0NvbnRhaW5lcikge1xuICAgIGxldCByYW5nZSA9IHRoaXMubGFzdFJhbmdlO1xuICAgIGlmIChyYW5nZSA9PSBudWxsKSByZXR1cm47XG4gICAgbGV0IGJvdW5kcyA9IHRoaXMuZ2V0Qm91bmRzKHJhbmdlLmluZGV4LCByYW5nZS5sZW5ndGgpO1xuICAgIGlmIChib3VuZHMgPT0gbnVsbCkgcmV0dXJuO1xuICAgIGxldCBsaW1pdCA9IHRoaXMuc2Nyb2xsLmxlbmd0aCgpLTE7XG4gICAgbGV0IFtmaXJzdCwgXSA9IHRoaXMuc2Nyb2xsLmxpbmUoTWF0aC5taW4ocmFuZ2UuaW5kZXgsIGxpbWl0KSk7XG4gICAgbGV0IGxhc3QgPSBmaXJzdDtcbiAgICBpZiAocmFuZ2UubGVuZ3RoID4gMCkge1xuICAgICAgW2xhc3QsIF0gPSB0aGlzLnNjcm9sbC5saW5lKE1hdGgubWluKHJhbmdlLmluZGV4ICsgcmFuZ2UubGVuZ3RoLCBsaW1pdCkpO1xuICAgIH1cbiAgICBpZiAoZmlyc3QgPT0gbnVsbCB8fCBsYXN0ID09IG51bGwpIHJldHVybjtcbiAgICBsZXQgc2Nyb2xsQm91bmRzID0gc2Nyb2xsaW5nQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGlmIChib3VuZHMudG9wIDwgc2Nyb2xsQm91bmRzLnRvcCkge1xuICAgICAgc2Nyb2xsaW5nQ29udGFpbmVyLnNjcm9sbFRvcCAtPSAoc2Nyb2xsQm91bmRzLnRvcCAtIGJvdW5kcy50b3ApO1xuICAgIH0gZWxzZSBpZiAoYm91bmRzLmJvdHRvbSA+IHNjcm9sbEJvdW5kcy5ib3R0b20pIHtcbiAgICAgIHNjcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxUb3AgKz0gKGJvdW5kcy5ib3R0b20gLSBzY3JvbGxCb3VuZHMuYm90dG9tKTtcbiAgICB9XG4gIH1cblxuICBzZXROYXRpdmVSYW5nZShzdGFydE5vZGUsIHN0YXJ0T2Zmc2V0LCBlbmROb2RlID0gc3RhcnROb2RlLCBlbmRPZmZzZXQgPSBzdGFydE9mZnNldCwgZm9yY2UgPSBmYWxzZSkge1xuICAgIGRlYnVnLmluZm8oJ3NldE5hdGl2ZVJhbmdlJywgc3RhcnROb2RlLCBzdGFydE9mZnNldCwgZW5kTm9kZSwgZW5kT2Zmc2V0KTtcbiAgICBpZiAoc3RhcnROb2RlICE9IG51bGwgJiYgKHRoaXMucm9vdC5wYXJlbnROb2RlID09IG51bGwgfHwgc3RhcnROb2RlLnBhcmVudE5vZGUgPT0gbnVsbCB8fCBlbmROb2RlLnBhcmVudE5vZGUgPT0gbnVsbCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHNlbGVjdGlvbiA9IGRvY3VtZW50LmdldFNlbGVjdGlvbigpO1xuICAgIGlmIChzZWxlY3Rpb24gPT0gbnVsbCkgcmV0dXJuO1xuICAgIGlmIChzdGFydE5vZGUgIT0gbnVsbCkge1xuICAgICAgaWYgKCF0aGlzLmhhc0ZvY3VzKCkpIHRoaXMucm9vdC5mb2N1cygpO1xuICAgICAgbGV0IG5hdGl2ZSA9ICh0aGlzLmdldE5hdGl2ZVJhbmdlKCkgfHwge30pLm5hdGl2ZTtcbiAgICAgIGlmIChuYXRpdmUgPT0gbnVsbCB8fCBmb3JjZSB8fFxuICAgICAgICAgIHN0YXJ0Tm9kZSAhPT0gbmF0aXZlLnN0YXJ0Q29udGFpbmVyIHx8XG4gICAgICAgICAgc3RhcnRPZmZzZXQgIT09IG5hdGl2ZS5zdGFydE9mZnNldCB8fFxuICAgICAgICAgIGVuZE5vZGUgIT09IG5hdGl2ZS5lbmRDb250YWluZXIgfHxcbiAgICAgICAgICBlbmRPZmZzZXQgIT09IG5hdGl2ZS5lbmRPZmZzZXQpIHtcblxuICAgICAgICBpZiAoc3RhcnROb2RlLnRhZ05hbWUgPT0gXCJCUlwiKSB7XG4gICAgICAgICAgc3RhcnRPZmZzZXQgPSBbXS5pbmRleE9mLmNhbGwoc3RhcnROb2RlLnBhcmVudE5vZGUuY2hpbGROb2Rlcywgc3RhcnROb2RlKTtcbiAgICAgICAgICBzdGFydE5vZGUgPSBzdGFydE5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5kTm9kZS50YWdOYW1lID09IFwiQlJcIikge1xuICAgICAgICAgIGVuZE9mZnNldCA9IFtdLmluZGV4T2YuY2FsbChlbmROb2RlLnBhcmVudE5vZGUuY2hpbGROb2RlcywgZW5kTm9kZSk7XG4gICAgICAgICAgZW5kTm9kZSA9IGVuZE5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgICAgICByYW5nZS5zZXRTdGFydChzdGFydE5vZGUsIHN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgcmFuZ2Uuc2V0RW5kKGVuZE5vZGUsIGVuZE9mZnNldCk7XG4gICAgICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgdGhpcy5yb290LmJsdXIoKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuZm9jdXMoKTsgIC8vIHJvb3QuYmx1cigpIG5vdCBlbm91Z2ggb24gSUUxMStUcmF2aXMrU2F1Y2VMYWJzIChidXQgbm90IGxvY2FsIFZNcylcbiAgICB9XG4gIH1cblxuICBzZXRSYW5nZShyYW5nZSwgZm9yY2UgPSBmYWxzZSwgc291cmNlID0gRW1pdHRlci5zb3VyY2VzLkFQSSkge1xuICAgIGlmICh0eXBlb2YgZm9yY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICBzb3VyY2UgPSBmb3JjZTtcbiAgICAgIGZvcmNlID0gZmFsc2U7XG4gICAgfVxuICAgIGRlYnVnLmluZm8oJ3NldFJhbmdlJywgcmFuZ2UpO1xuICAgIGlmIChyYW5nZSAhPSBudWxsKSB7XG4gICAgICBsZXQgYXJncyA9IHRoaXMucmFuZ2VUb05hdGl2ZShyYW5nZSk7XG4gICAgICB0aGlzLnNldE5hdGl2ZVJhbmdlKC4uLmFyZ3MsIGZvcmNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXROYXRpdmVSYW5nZShudWxsKTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGUoc291cmNlKTtcbiAgfVxuXG4gIHVwZGF0ZShzb3VyY2UgPSBFbWl0dGVyLnNvdXJjZXMuVVNFUikge1xuICAgIGxldCBvbGRSYW5nZSA9IHRoaXMubGFzdFJhbmdlO1xuICAgIGxldCBbbGFzdFJhbmdlLCBuYXRpdmVSYW5nZV0gPSB0aGlzLmdldFJhbmdlKCk7XG4gICAgdGhpcy5sYXN0UmFuZ2UgPSBsYXN0UmFuZ2U7XG4gICAgaWYgKHRoaXMubGFzdFJhbmdlICE9IG51bGwpIHtcbiAgICAgIHRoaXMuc2F2ZWRSYW5nZSA9IHRoaXMubGFzdFJhbmdlO1xuICAgIH1cbiAgICBpZiAoIWVxdWFsKG9sZFJhbmdlLCB0aGlzLmxhc3RSYW5nZSkpIHtcbiAgICAgIGlmICghdGhpcy5jb21wb3NpbmcgJiYgbmF0aXZlUmFuZ2UgIT0gbnVsbCAmJiBuYXRpdmVSYW5nZS5uYXRpdmUuY29sbGFwc2VkICYmIG5hdGl2ZVJhbmdlLnN0YXJ0Lm5vZGUgIT09IHRoaXMuY3Vyc29yLnRleHROb2RlKSB7XG4gICAgICAgIHRoaXMuY3Vyc29yLnJlc3RvcmUoKTtcbiAgICAgIH1cbiAgICAgIGxldCBhcmdzID0gW0VtaXR0ZXIuZXZlbnRzLlNFTEVDVElPTl9DSEFOR0UsIGNsb25lKHRoaXMubGFzdFJhbmdlKSwgY2xvbmUob2xkUmFuZ2UpLCBzb3VyY2VdO1xuICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoRW1pdHRlci5ldmVudHMuRURJVE9SX0NIQU5HRSwgLi4uYXJncyk7XG4gICAgICBpZiAoc291cmNlICE9PSBFbWl0dGVyLnNvdXJjZXMuU0lMRU5UKSB7XG4gICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KC4uLmFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGNvbnRhaW5zKHBhcmVudCwgZGVzY2VuZGFudCkge1xuICB0cnkge1xuICAgIC8vIEZpcmVmb3ggaW5zZXJ0cyBpbmFjY2Vzc2libGUgbm9kZXMgYXJvdW5kIHZpZGVvIGVsZW1lbnRzXG4gICAgZGVzY2VuZGFudC5wYXJlbnROb2RlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIElFMTEgaGFzIGJ1ZyB3aXRoIFRleHQgbm9kZXNcbiAgLy8gaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy83ODA4NzQvbm9kZS1jb250YWlucy1pcy1pbmNvcnJlY3RcbiAgaWYgKGRlc2NlbmRhbnQgaW5zdGFuY2VvZiBUZXh0KSB7XG4gICAgZGVzY2VuZGFudCA9IGRlc2NlbmRhbnQucGFyZW50Tm9kZTtcbiAgfVxuICByZXR1cm4gcGFyZW50LmNvbnRhaW5zKGRlc2NlbmRhbnQpO1xufVxuXG5cbmV4cG9ydCB7IFJhbmdlLCBTZWxlY3Rpb24gYXMgZGVmYXVsdCB9O1xuIiwiY2xhc3MgVGhlbWUge1xuICBjb25zdHJ1Y3RvcihxdWlsbCwgb3B0aW9ucykge1xuICAgIHRoaXMucXVpbGwgPSBxdWlsbDtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMubW9kdWxlcyA9IHt9O1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICBPYmplY3Qua2V5cyh0aGlzLm9wdGlvbnMubW9kdWxlcykuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgaWYgKHRoaXMubW9kdWxlc1tuYW1lXSA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuYWRkTW9kdWxlKG5hbWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgYWRkTW9kdWxlKG5hbWUpIHtcbiAgICBsZXQgbW9kdWxlQ2xhc3MgPSB0aGlzLnF1aWxsLmNvbnN0cnVjdG9yLmltcG9ydChgbW9kdWxlcy8ke25hbWV9YCk7XG4gICAgdGhpcy5tb2R1bGVzW25hbWVdID0gbmV3IG1vZHVsZUNsYXNzKHRoaXMucXVpbGwsIHRoaXMub3B0aW9ucy5tb2R1bGVzW25hbWVdIHx8IHt9KTtcbiAgICByZXR1cm4gdGhpcy5tb2R1bGVzW25hbWVdO1xuICB9XG59XG5UaGVtZS5ERUZBVUxUUyA9IHtcbiAgbW9kdWxlczoge31cbn07XG5UaGVtZS50aGVtZXMgPSB7XG4gICdkZWZhdWx0JzogVGhlbWVcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgVGhlbWU7XG4iLCJpbXBvcnQgJy4vcG9seWZpbGwnO1xuaW1wb3J0IERlbHRhIGZyb20gJ3F1aWxsLWRlbHRhJztcbmltcG9ydCBFZGl0b3IgZnJvbSAnLi9lZGl0b3InO1xuaW1wb3J0IEVtaXR0ZXIgZnJvbSAnLi9lbWl0dGVyJztcbmltcG9ydCBNb2R1bGUgZnJvbSAnLi9tb2R1bGUnO1xuaW1wb3J0IFBhcmNobWVudCBmcm9tICdwYXJjaG1lbnQnO1xuaW1wb3J0IFNlbGVjdGlvbiwgeyBSYW5nZSB9IGZyb20gJy4vc2VsZWN0aW9uJztcbmltcG9ydCBleHRlbmQgZnJvbSAnZXh0ZW5kJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IFRoZW1lIGZyb20gJy4vdGhlbWUnO1xuXG5sZXQgZGVidWcgPSBsb2dnZXIoJ3F1aWxsJyk7XG5cblxuY2xhc3MgUXVpbGwge1xuICBzdGF0aWMgZGVidWcobGltaXQpIHtcbiAgICBpZiAobGltaXQgPT09IHRydWUpIHtcbiAgICAgIGxpbWl0ID0gJ2xvZyc7XG4gICAgfVxuICAgIGxvZ2dlci5sZXZlbChsaW1pdCk7XG4gIH1cblxuICBzdGF0aWMgZmluZChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUuX19xdWlsbCB8fCBQYXJjaG1lbnQuZmluZChub2RlKTtcbiAgfVxuXG4gIHN0YXRpYyBpbXBvcnQobmFtZSkge1xuICAgIGlmICh0aGlzLmltcG9ydHNbbmFtZV0gPT0gbnVsbCkge1xuICAgICAgZGVidWcuZXJyb3IoYENhbm5vdCBpbXBvcnQgJHtuYW1lfS4gQXJlIHlvdSBzdXJlIGl0IHdhcyByZWdpc3RlcmVkP2ApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5pbXBvcnRzW25hbWVdO1xuICB9XG5cbiAgc3RhdGljIHJlZ2lzdGVyKHBhdGgsIHRhcmdldCwgb3ZlcndyaXRlID0gZmFsc2UpIHtcbiAgICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgICBsZXQgbmFtZSA9IHBhdGguYXR0ck5hbWUgfHwgcGF0aC5ibG90TmFtZTtcbiAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gcmVnaXN0ZXIoQmxvdCB8IEF0dHJpYnV0b3IsIG92ZXJ3cml0ZSlcbiAgICAgICAgdGhpcy5yZWdpc3RlcignZm9ybWF0cy8nICsgbmFtZSwgcGF0aCwgdGFyZ2V0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHBhdGgpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgIHRoaXMucmVnaXN0ZXIoa2V5LCBwYXRoW2tleV0sIHRhcmdldCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5pbXBvcnRzW3BhdGhdICE9IG51bGwgJiYgIW92ZXJ3cml0ZSkge1xuICAgICAgICBkZWJ1Zy53YXJuKGBPdmVyd3JpdGluZyAke3BhdGh9IHdpdGhgLCB0YXJnZXQpO1xuICAgICAgfVxuICAgICAgdGhpcy5pbXBvcnRzW3BhdGhdID0gdGFyZ2V0O1xuICAgICAgaWYgKChwYXRoLnN0YXJ0c1dpdGgoJ2Jsb3RzLycpIHx8IHBhdGguc3RhcnRzV2l0aCgnZm9ybWF0cy8nKSkgJiZcbiAgICAgICAgICB0YXJnZXQuYmxvdE5hbWUgIT09ICdhYnN0cmFjdCcpIHtcbiAgICAgICAgUGFyY2htZW50LnJlZ2lzdGVyKHRhcmdldCk7XG4gICAgICB9IGVsc2UgaWYgKHBhdGguc3RhcnRzV2l0aCgnbW9kdWxlcycpICYmIHR5cGVvZiB0YXJnZXQucmVnaXN0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGFyZ2V0LnJlZ2lzdGVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IoY29udGFpbmVyLCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBleHBhbmRDb25maWcoY29udGFpbmVyLCBvcHRpb25zKTtcbiAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMub3B0aW9ucy5jb250YWluZXI7XG4gICAgaWYgKHRoaXMuY29udGFpbmVyID09IG51bGwpIHtcbiAgICAgIHJldHVybiBkZWJ1Zy5lcnJvcignSW52YWxpZCBRdWlsbCBjb250YWluZXInLCBjb250YWluZXIpO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLmRlYnVnKSB7XG4gICAgICBRdWlsbC5kZWJ1Zyh0aGlzLm9wdGlvbnMuZGVidWcpO1xuICAgIH1cbiAgICBsZXQgaHRtbCA9IHRoaXMuY29udGFpbmVyLmlubmVySFRNTC50cmltKCk7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgncWwtY29udGFpbmVyJyk7XG4gICAgdGhpcy5jb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG4gICAgdGhpcy5jb250YWluZXIuX19xdWlsbCA9IHRoaXM7XG4gICAgdGhpcy5yb290ID0gdGhpcy5hZGRDb250YWluZXIoJ3FsLWVkaXRvcicpO1xuICAgIHRoaXMucm9vdC5jbGFzc0xpc3QuYWRkKCdxbC1ibGFuaycpO1xuICAgIHRoaXMucm9vdC5zZXRBdHRyaWJ1dGUoJ2RhdGEtZ3JhbW0nLCBmYWxzZSk7XG4gICAgdGhpcy5zY3JvbGxpbmdDb250YWluZXIgPSB0aGlzLm9wdGlvbnMuc2Nyb2xsaW5nQ29udGFpbmVyIHx8IHRoaXMucm9vdDtcbiAgICB0aGlzLmVtaXR0ZXIgPSBuZXcgRW1pdHRlcigpO1xuICAgIHRoaXMuc2Nyb2xsID0gUGFyY2htZW50LmNyZWF0ZSh0aGlzLnJvb3QsIHtcbiAgICAgIGVtaXR0ZXI6IHRoaXMuZW1pdHRlcixcbiAgICAgIHdoaXRlbGlzdDogdGhpcy5vcHRpb25zLmZvcm1hdHNcbiAgICB9KTtcbiAgICB0aGlzLmVkaXRvciA9IG5ldyBFZGl0b3IodGhpcy5zY3JvbGwpO1xuICAgIHRoaXMuc2VsZWN0aW9uID0gbmV3IFNlbGVjdGlvbih0aGlzLnNjcm9sbCwgdGhpcy5lbWl0dGVyKTtcbiAgICB0aGlzLnRoZW1lID0gbmV3IHRoaXMub3B0aW9ucy50aGVtZSh0aGlzLCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMua2V5Ym9hcmQgPSB0aGlzLnRoZW1lLmFkZE1vZHVsZSgna2V5Ym9hcmQnKTtcbiAgICB0aGlzLmNsaXBib2FyZCA9IHRoaXMudGhlbWUuYWRkTW9kdWxlKCdjbGlwYm9hcmQnKTtcbiAgICB0aGlzLmhpc3RvcnkgPSB0aGlzLnRoZW1lLmFkZE1vZHVsZSgnaGlzdG9yeScpO1xuICAgIHRoaXMudGhlbWUuaW5pdCgpO1xuICAgIHRoaXMuZW1pdHRlci5vbihFbWl0dGVyLmV2ZW50cy5FRElUT1JfQ0hBTkdFLCAodHlwZSkgPT4ge1xuICAgICAgaWYgKHR5cGUgPT09IEVtaXR0ZXIuZXZlbnRzLlRFWFRfQ0hBTkdFKSB7XG4gICAgICAgIHRoaXMucm9vdC5jbGFzc0xpc3QudG9nZ2xlKCdxbC1ibGFuaycsIHRoaXMuZWRpdG9yLmlzQmxhbmsoKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5lbWl0dGVyLm9uKEVtaXR0ZXIuZXZlbnRzLlNDUk9MTF9VUERBVEUsIChzb3VyY2UsIG11dGF0aW9ucykgPT4ge1xuICAgICAgbGV0IHJhbmdlID0gdGhpcy5zZWxlY3Rpb24ubGFzdFJhbmdlO1xuICAgICAgbGV0IGluZGV4ID0gcmFuZ2UgJiYgcmFuZ2UubGVuZ3RoID09PSAwID8gcmFuZ2UuaW5kZXggOiB1bmRlZmluZWQ7XG4gICAgICBtb2RpZnkuY2FsbCh0aGlzLCAoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVkaXRvci51cGRhdGUobnVsbCwgbXV0YXRpb25zLCBpbmRleCk7XG4gICAgICB9LCBzb3VyY2UpO1xuICAgIH0pO1xuICAgIGxldCBjb250ZW50cyA9IHRoaXMuY2xpcGJvYXJkLmNvbnZlcnQoYDxkaXYgY2xhc3M9J3FsLWVkaXRvcicgc3R5bGU9XCJ3aGl0ZS1zcGFjZTogbm9ybWFsO1wiPiR7aHRtbH08cD48YnI+PC9wPjwvZGl2PmApO1xuICAgIHRoaXMuc2V0Q29udGVudHMoY29udGVudHMpO1xuICAgIHRoaXMuaGlzdG9yeS5jbGVhcigpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMucGxhY2Vob2xkZXIpIHtcbiAgICAgIHRoaXMucm9vdC5zZXRBdHRyaWJ1dGUoJ2RhdGEtcGxhY2Vob2xkZXInLCB0aGlzLm9wdGlvbnMucGxhY2Vob2xkZXIpO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLnJlYWRPbmx5KSB7XG4gICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICB9XG4gIH1cblxuICBhZGRDb250YWluZXIoY29udGFpbmVyLCByZWZOb2RlID0gbnVsbCkge1xuICAgIGlmICh0eXBlb2YgY29udGFpbmVyID09PSAnc3RyaW5nJykge1xuICAgICAgbGV0IGNsYXNzTmFtZSA9IGNvbnRhaW5lcjtcbiAgICAgIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICB9XG4gICAgdGhpcy5jb250YWluZXIuaW5zZXJ0QmVmb3JlKGNvbnRhaW5lciwgcmVmTm9kZSk7XG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgfVxuXG4gIGJsdXIoKSB7XG4gICAgdGhpcy5zZWxlY3Rpb24uc2V0UmFuZ2UobnVsbCk7XG4gIH1cblxuICBkZWxldGVUZXh0KGluZGV4LCBsZW5ndGgsIHNvdXJjZSkge1xuICAgIFtpbmRleCwgbGVuZ3RoLCAsIHNvdXJjZV0gPSBvdmVybG9hZChpbmRleCwgbGVuZ3RoLCBzb3VyY2UpO1xuICAgIHJldHVybiBtb2RpZnkuY2FsbCh0aGlzLCAoKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5lZGl0b3IuZGVsZXRlVGV4dChpbmRleCwgbGVuZ3RoKTtcbiAgICB9LCBzb3VyY2UsIGluZGV4LCAtMSpsZW5ndGgpO1xuICB9XG5cbiAgZGlzYWJsZSgpIHtcbiAgICB0aGlzLmVuYWJsZShmYWxzZSk7XG4gIH1cblxuICBlbmFibGUoZW5hYmxlZCA9IHRydWUpIHtcbiAgICB0aGlzLnNjcm9sbC5lbmFibGUoZW5hYmxlZCk7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LnRvZ2dsZSgncWwtZGlzYWJsZWQnLCAhZW5hYmxlZCk7XG4gIH1cblxuICBmb2N1cygpIHtcbiAgICBsZXQgc2Nyb2xsVG9wID0gdGhpcy5zY3JvbGxpbmdDb250YWluZXIuc2Nyb2xsVG9wO1xuICAgIHRoaXMuc2VsZWN0aW9uLmZvY3VzKCk7XG4gICAgdGhpcy5zY3JvbGxpbmdDb250YWluZXIuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgIHRoaXMuc2Nyb2xsSW50b1ZpZXcoKTtcbiAgfVxuXG4gIGZvcm1hdChuYW1lLCB2YWx1ZSwgc291cmNlID0gRW1pdHRlci5zb3VyY2VzLkFQSSkge1xuICAgIHJldHVybiBtb2RpZnkuY2FsbCh0aGlzLCAoKSA9PiB7XG4gICAgICBsZXQgcmFuZ2UgPSB0aGlzLmdldFNlbGVjdGlvbih0cnVlKTtcbiAgICAgIGxldCBjaGFuZ2UgPSBuZXcgRGVsdGEoKTtcbiAgICAgIGlmIChyYW5nZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBjaGFuZ2U7XG4gICAgICB9IGVsc2UgaWYgKFBhcmNobWVudC5xdWVyeShuYW1lLCBQYXJjaG1lbnQuU2NvcGUuQkxPQ0spKSB7XG4gICAgICAgIGNoYW5nZSA9IHRoaXMuZWRpdG9yLmZvcm1hdExpbmUocmFuZ2UuaW5kZXgsIHJhbmdlLmxlbmd0aCwgeyBbbmFtZV06IHZhbHVlIH0pO1xuICAgICAgfSBlbHNlIGlmIChyYW5nZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb24uZm9ybWF0KG5hbWUsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGNoYW5nZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoYW5nZSA9IHRoaXMuZWRpdG9yLmZvcm1hdFRleHQocmFuZ2UuaW5kZXgsIHJhbmdlLmxlbmd0aCwgeyBbbmFtZV06IHZhbHVlIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTZWxlY3Rpb24ocmFuZ2UsIEVtaXR0ZXIuc291cmNlcy5TSUxFTlQpO1xuICAgICAgcmV0dXJuIGNoYW5nZTtcbiAgICB9LCBzb3VyY2UpO1xuICB9XG5cbiAgZm9ybWF0TGluZShpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSwgc291cmNlKSB7XG4gICAgbGV0IGZvcm1hdHM7XG4gICAgW2luZGV4LCBsZW5ndGgsIGZvcm1hdHMsIHNvdXJjZV0gPSBvdmVybG9hZChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSwgc291cmNlKTtcbiAgICByZXR1cm4gbW9kaWZ5LmNhbGwodGhpcywgKCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLmZvcm1hdExpbmUoaW5kZXgsIGxlbmd0aCwgZm9ybWF0cyk7XG4gICAgfSwgc291cmNlLCBpbmRleCwgMCk7XG4gIH1cblxuICBmb3JtYXRUZXh0KGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlLCBzb3VyY2UpIHtcbiAgICBsZXQgZm9ybWF0cztcbiAgICBbaW5kZXgsIGxlbmd0aCwgZm9ybWF0cywgc291cmNlXSA9IG92ZXJsb2FkKGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlLCBzb3VyY2UpO1xuICAgIHJldHVybiBtb2RpZnkuY2FsbCh0aGlzLCAoKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5lZGl0b3IuZm9ybWF0VGV4dChpbmRleCwgbGVuZ3RoLCBmb3JtYXRzKTtcbiAgICB9LCBzb3VyY2UsIGluZGV4LCAwKTtcbiAgfVxuXG4gIGdldEJvdW5kcyhpbmRleCwgbGVuZ3RoID0gMCkge1xuICAgIGxldCBib3VuZHM7XG4gICAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ251bWJlcicpIHtcbiAgICAgIGJvdW5kcyA9IHRoaXMuc2VsZWN0aW9uLmdldEJvdW5kcyhpbmRleCwgbGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYm91bmRzID0gdGhpcy5zZWxlY3Rpb24uZ2V0Qm91bmRzKGluZGV4LmluZGV4LCBpbmRleC5sZW5ndGgpO1xuICAgIH1cbiAgICBsZXQgY29udGFpbmVyQm91bmRzID0gdGhpcy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJvdHRvbTogYm91bmRzLmJvdHRvbSAtIGNvbnRhaW5lckJvdW5kcy50b3AsXG4gICAgICBoZWlnaHQ6IGJvdW5kcy5oZWlnaHQsXG4gICAgICBsZWZ0OiBib3VuZHMubGVmdCAtIGNvbnRhaW5lckJvdW5kcy5sZWZ0LFxuICAgICAgcmlnaHQ6IGJvdW5kcy5yaWdodCAtIGNvbnRhaW5lckJvdW5kcy5sZWZ0LFxuICAgICAgdG9wOiBib3VuZHMudG9wIC0gY29udGFpbmVyQm91bmRzLnRvcCxcbiAgICAgIHdpZHRoOiBib3VuZHMud2lkdGhcbiAgICB9O1xuICB9XG5cbiAgZ2V0Q29udGVudHMoaW5kZXggPSAwLCBsZW5ndGggPSB0aGlzLmdldExlbmd0aCgpIC0gaW5kZXgpIHtcbiAgICBbaW5kZXgsIGxlbmd0aF0gPSBvdmVybG9hZChpbmRleCwgbGVuZ3RoKTtcbiAgICByZXR1cm4gdGhpcy5lZGl0b3IuZ2V0Q29udGVudHMoaW5kZXgsIGxlbmd0aCk7XG4gIH1cblxuICBnZXRGb3JtYXQoaW5kZXggPSB0aGlzLmdldFNlbGVjdGlvbih0cnVlKSwgbGVuZ3RoID0gMCkge1xuICAgIGlmICh0eXBlb2YgaW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gdGhpcy5lZGl0b3IuZ2V0Rm9ybWF0KGluZGV4LCBsZW5ndGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5lZGl0b3IuZ2V0Rm9ybWF0KGluZGV4LmluZGV4LCBpbmRleC5sZW5ndGgpO1xuICAgIH1cbiAgfVxuXG4gIGdldEluZGV4KGJsb3QpIHtcbiAgICByZXR1cm4gYmxvdC5vZmZzZXQodGhpcy5zY3JvbGwpO1xuICB9XG5cbiAgZ2V0TGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLnNjcm9sbC5sZW5ndGgoKTtcbiAgfVxuXG4gIGdldExlYWYoaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5zY3JvbGwubGVhZihpbmRleCk7XG4gIH1cblxuICBnZXRMaW5lKGluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMuc2Nyb2xsLmxpbmUoaW5kZXgpO1xuICB9XG5cbiAgZ2V0TGluZXMoaW5kZXggPSAwLCBsZW5ndGggPSBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgaWYgKHR5cGVvZiBpbmRleCAhPT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiB0aGlzLnNjcm9sbC5saW5lcyhpbmRleC5pbmRleCwgaW5kZXgubGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuc2Nyb2xsLmxpbmVzKGluZGV4LCBsZW5ndGgpO1xuICAgIH1cbiAgfVxuXG4gIGdldE1vZHVsZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbWUubW9kdWxlc1tuYW1lXTtcbiAgfVxuXG4gIGdldFNlbGVjdGlvbihmb2N1cyA9IGZhbHNlKSB7XG4gICAgaWYgKGZvY3VzKSB0aGlzLmZvY3VzKCk7XG4gICAgdGhpcy51cGRhdGUoKTsgIC8vIE1ha2Ugc3VyZSB3ZSBhY2Nlc3MgZ2V0UmFuZ2Ugd2l0aCBlZGl0b3IgaW4gY29uc2lzdGVudCBzdGF0ZVxuICAgIHJldHVybiB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpWzBdO1xuICB9XG5cbiAgZ2V0VGV4dChpbmRleCA9IDAsIGxlbmd0aCA9IHRoaXMuZ2V0TGVuZ3RoKCkgLSBpbmRleCkge1xuICAgIFtpbmRleCwgbGVuZ3RoXSA9IG92ZXJsb2FkKGluZGV4LCBsZW5ndGgpO1xuICAgIHJldHVybiB0aGlzLmVkaXRvci5nZXRUZXh0KGluZGV4LCBsZW5ndGgpO1xuICB9XG5cbiAgaGFzRm9jdXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uLmhhc0ZvY3VzKCk7XG4gIH1cblxuICBpbnNlcnRFbWJlZChpbmRleCwgZW1iZWQsIHZhbHVlLCBzb3VyY2UgPSBRdWlsbC5zb3VyY2VzLkFQSSkge1xuICAgIHJldHVybiBtb2RpZnkuY2FsbCh0aGlzLCAoKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5lZGl0b3IuaW5zZXJ0RW1iZWQoaW5kZXgsIGVtYmVkLCB2YWx1ZSk7XG4gICAgfSwgc291cmNlLCBpbmRleCk7XG4gIH1cblxuICBpbnNlcnRUZXh0KGluZGV4LCB0ZXh0LCBuYW1lLCB2YWx1ZSwgc291cmNlKSB7XG4gICAgbGV0IGZvcm1hdHM7XG4gICAgW2luZGV4LCAsIGZvcm1hdHMsIHNvdXJjZV0gPSBvdmVybG9hZChpbmRleCwgMCwgbmFtZSwgdmFsdWUsIHNvdXJjZSk7XG4gICAgcmV0dXJuIG1vZGlmeS5jYWxsKHRoaXMsICgpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmVkaXRvci5pbnNlcnRUZXh0KGluZGV4LCB0ZXh0LCBmb3JtYXRzKTtcbiAgICB9LCBzb3VyY2UsIGluZGV4LCB0ZXh0Lmxlbmd0aCk7XG4gIH1cblxuICBpc0VuYWJsZWQoKSB7XG4gICAgcmV0dXJuICF0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuY29udGFpbnMoJ3FsLWRpc2FibGVkJyk7XG4gIH1cblxuICBvZmYoKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdHRlci5vZmYuYXBwbHkodGhpcy5lbWl0dGVyLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdHRlci5vbi5hcHBseSh0aGlzLmVtaXR0ZXIsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBvbmNlKCkge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub25jZS5hcHBseSh0aGlzLmVtaXR0ZXIsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBwYXN0ZUhUTUwoaW5kZXgsIGh0bWwsIHNvdXJjZSkge1xuICAgIHRoaXMuY2xpcGJvYXJkLmRhbmdlcm91c2x5UGFzdGVIVE1MKGluZGV4LCBodG1sLCBzb3VyY2UpO1xuICB9XG5cbiAgcmVtb3ZlRm9ybWF0KGluZGV4LCBsZW5ndGgsIHNvdXJjZSkge1xuICAgIFtpbmRleCwgbGVuZ3RoLCAsIHNvdXJjZV0gPSBvdmVybG9hZChpbmRleCwgbGVuZ3RoLCBzb3VyY2UpO1xuICAgIHJldHVybiBtb2RpZnkuY2FsbCh0aGlzLCAoKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5lZGl0b3IucmVtb3ZlRm9ybWF0KGluZGV4LCBsZW5ndGgpO1xuICAgIH0sIHNvdXJjZSwgaW5kZXgpO1xuICB9XG5cbiAgc2Nyb2xsSW50b1ZpZXcoKSB7XG4gICAgdGhpcy5zZWxlY3Rpb24uc2Nyb2xsSW50b1ZpZXcodGhpcy5zY3JvbGxpbmdDb250YWluZXIpO1xuICB9XG5cbiAgc2V0Q29udGVudHMoZGVsdGEsIHNvdXJjZSA9IEVtaXR0ZXIuc291cmNlcy5BUEkpIHtcbiAgICByZXR1cm4gbW9kaWZ5LmNhbGwodGhpcywgKCkgPT4ge1xuICAgICAgZGVsdGEgPSBuZXcgRGVsdGEoZGVsdGEpO1xuICAgICAgbGV0IGxlbmd0aCA9IHRoaXMuZ2V0TGVuZ3RoKCk7XG4gICAgICBsZXQgZGVsZXRlZCA9IHRoaXMuZWRpdG9yLmRlbGV0ZVRleHQoMCwgbGVuZ3RoKTtcbiAgICAgIGxldCBhcHBsaWVkID0gdGhpcy5lZGl0b3IuYXBwbHlEZWx0YShkZWx0YSk7XG4gICAgICBsZXQgbGFzdE9wID0gYXBwbGllZC5vcHNbYXBwbGllZC5vcHMubGVuZ3RoIC0gMV07XG4gICAgICBpZiAobGFzdE9wICE9IG51bGwgJiYgdHlwZW9mKGxhc3RPcC5pbnNlcnQpID09PSAnc3RyaW5nJyAmJiBsYXN0T3AuaW5zZXJ0W2xhc3RPcC5pbnNlcnQubGVuZ3RoLTFdID09PSAnXFxuJykge1xuICAgICAgICB0aGlzLmVkaXRvci5kZWxldGVUZXh0KHRoaXMuZ2V0TGVuZ3RoKCkgLSAxLCAxKTtcbiAgICAgICAgYXBwbGllZC5kZWxldGUoMSk7XG4gICAgICB9XG4gICAgICBsZXQgcmV0ID0gZGVsZXRlZC5jb21wb3NlKGFwcGxpZWQpO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9LCBzb3VyY2UpO1xuICB9XG5cbiAgc2V0U2VsZWN0aW9uKGluZGV4LCBsZW5ndGgsIHNvdXJjZSkge1xuICAgIGlmIChpbmRleCA9PSBudWxsKSB7XG4gICAgICB0aGlzLnNlbGVjdGlvbi5zZXRSYW5nZShudWxsLCBsZW5ndGggfHwgUXVpbGwuc291cmNlcy5BUEkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBbaW5kZXgsIGxlbmd0aCwgLCBzb3VyY2VdID0gb3ZlcmxvYWQoaW5kZXgsIGxlbmd0aCwgc291cmNlKTtcbiAgICAgIHRoaXMuc2VsZWN0aW9uLnNldFJhbmdlKG5ldyBSYW5nZShpbmRleCwgbGVuZ3RoKSwgc291cmNlKTtcbiAgICAgIGlmIChzb3VyY2UgIT09IEVtaXR0ZXIuc291cmNlcy5TSUxFTlQpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb24uc2Nyb2xsSW50b1ZpZXcodGhpcy5zY3JvbGxpbmdDb250YWluZXIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNldFRleHQodGV4dCwgc291cmNlID0gRW1pdHRlci5zb3VyY2VzLkFQSSkge1xuICAgIGxldCBkZWx0YSA9IG5ldyBEZWx0YSgpLmluc2VydCh0ZXh0KTtcbiAgICByZXR1cm4gdGhpcy5zZXRDb250ZW50cyhkZWx0YSwgc291cmNlKTtcbiAgfVxuXG4gIHVwZGF0ZShzb3VyY2UgPSBFbWl0dGVyLnNvdXJjZXMuVVNFUikge1xuICAgIGxldCBjaGFuZ2UgPSB0aGlzLnNjcm9sbC51cGRhdGUoc291cmNlKTsgICAvLyBXaWxsIHVwZGF0ZSBzZWxlY3Rpb24gYmVmb3JlIHNlbGVjdGlvbi51cGRhdGUoKSBkb2VzIGlmIHRleHQgY2hhbmdlc1xuICAgIHRoaXMuc2VsZWN0aW9uLnVwZGF0ZShzb3VyY2UpO1xuICAgIHJldHVybiBjaGFuZ2U7XG4gIH1cblxuICB1cGRhdGVDb250ZW50cyhkZWx0YSwgc291cmNlID0gRW1pdHRlci5zb3VyY2VzLkFQSSkge1xuICAgIHJldHVybiBtb2RpZnkuY2FsbCh0aGlzLCAoKSA9PiB7XG4gICAgICBkZWx0YSA9IG5ldyBEZWx0YShkZWx0YSk7XG4gICAgICByZXR1cm4gdGhpcy5lZGl0b3IuYXBwbHlEZWx0YShkZWx0YSwgc291cmNlKTtcbiAgICB9LCBzb3VyY2UsIHRydWUpO1xuICB9XG59XG5RdWlsbC5ERUZBVUxUUyA9IHtcbiAgYm91bmRzOiBudWxsLFxuICBmb3JtYXRzOiBudWxsLFxuICBtb2R1bGVzOiB7fSxcbiAgcGxhY2Vob2xkZXI6ICcnLFxuICByZWFkT25seTogZmFsc2UsXG4gIHNjcm9sbGluZ0NvbnRhaW5lcjogbnVsbCxcbiAgc3RyaWN0OiB0cnVlLFxuICB0aGVtZTogJ2RlZmF1bHQnXG59O1xuUXVpbGwuZXZlbnRzID0gRW1pdHRlci5ldmVudHM7XG5RdWlsbC5zb3VyY2VzID0gRW1pdHRlci5zb3VyY2VzO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5RdWlsbC52ZXJzaW9uID0gdHlwZW9mKFFVSUxMX1ZFUlNJT04pID09PSAndW5kZWZpbmVkJyA/ICdkZXYnIDogUVVJTExfVkVSU0lPTjtcblxuUXVpbGwuaW1wb3J0cyA9IHtcbiAgJ2RlbHRhJyAgICAgICA6IERlbHRhLFxuICAncGFyY2htZW50JyAgIDogUGFyY2htZW50LFxuICAnY29yZS9tb2R1bGUnIDogTW9kdWxlLFxuICAnY29yZS90aGVtZScgIDogVGhlbWVcbn07XG5cblxuZnVuY3Rpb24gZXhwYW5kQ29uZmlnKGNvbnRhaW5lciwgdXNlckNvbmZpZykge1xuICB1c2VyQ29uZmlnID0gZXh0ZW5kKHRydWUsIHtcbiAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICBtb2R1bGVzOiB7XG4gICAgICBjbGlwYm9hcmQ6IHRydWUsXG4gICAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICAgIGhpc3Rvcnk6IHRydWVcbiAgICB9XG4gIH0sIHVzZXJDb25maWcpO1xuICBpZiAoIXVzZXJDb25maWcudGhlbWUgfHwgdXNlckNvbmZpZy50aGVtZSA9PT0gUXVpbGwuREVGQVVMVFMudGhlbWUpIHtcbiAgICB1c2VyQ29uZmlnLnRoZW1lID0gVGhlbWU7XG4gIH0gZWxzZSB7XG4gICAgdXNlckNvbmZpZy50aGVtZSA9IFF1aWxsLmltcG9ydChgdGhlbWVzLyR7dXNlckNvbmZpZy50aGVtZX1gKTtcbiAgICBpZiAodXNlckNvbmZpZy50aGVtZSA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdGhlbWUgJHt1c2VyQ29uZmlnLnRoZW1lfS4gRGlkIHlvdSByZWdpc3RlciBpdD9gKTtcbiAgICB9XG4gIH1cbiAgbGV0IHRoZW1lQ29uZmlnID0gZXh0ZW5kKHRydWUsIHt9LCB1c2VyQ29uZmlnLnRoZW1lLkRFRkFVTFRTKTtcbiAgW3RoZW1lQ29uZmlnLCB1c2VyQ29uZmlnXS5mb3JFYWNoKGZ1bmN0aW9uKGNvbmZpZykge1xuICAgIGNvbmZpZy5tb2R1bGVzID0gY29uZmlnLm1vZHVsZXMgfHwge307XG4gICAgT2JqZWN0LmtleXMoY29uZmlnLm1vZHVsZXMpLmZvckVhY2goZnVuY3Rpb24obW9kdWxlKSB7XG4gICAgICBpZiAoY29uZmlnLm1vZHVsZXNbbW9kdWxlXSA9PT0gdHJ1ZSkge1xuICAgICAgICBjb25maWcubW9kdWxlc1ttb2R1bGVdID0ge307XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICBsZXQgbW9kdWxlTmFtZXMgPSBPYmplY3Qua2V5cyh0aGVtZUNvbmZpZy5tb2R1bGVzKS5jb25jYXQoT2JqZWN0LmtleXModXNlckNvbmZpZy5tb2R1bGVzKSk7XG4gIGxldCBtb2R1bGVDb25maWcgPSBtb2R1bGVOYW1lcy5yZWR1Y2UoZnVuY3Rpb24oY29uZmlnLCBuYW1lKSB7XG4gICAgbGV0IG1vZHVsZUNsYXNzID0gUXVpbGwuaW1wb3J0KGBtb2R1bGVzLyR7bmFtZX1gKTtcbiAgICBpZiAobW9kdWxlQ2xhc3MgPT0gbnVsbCkge1xuICAgICAgZGVidWcuZXJyb3IoYENhbm5vdCBsb2FkICR7bmFtZX0gbW9kdWxlLiBBcmUgeW91IHN1cmUgeW91IHJlZ2lzdGVyZWQgaXQ/YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbmZpZ1tuYW1lXSA9IG1vZHVsZUNsYXNzLkRFRkFVTFRTIHx8IHt9O1xuICAgIH1cbiAgICByZXR1cm4gY29uZmlnO1xuICB9LCB7fSk7XG4gIC8vIFNwZWNpYWwgY2FzZSB0b29sYmFyIHNob3J0aGFuZFxuICBpZiAodXNlckNvbmZpZy5tb2R1bGVzICE9IG51bGwgJiYgdXNlckNvbmZpZy5tb2R1bGVzLnRvb2xiYXIgJiZcbiAgICAgIHVzZXJDb25maWcubW9kdWxlcy50b29sYmFyLmNvbnN0cnVjdG9yICE9PSBPYmplY3QpIHtcbiAgICB1c2VyQ29uZmlnLm1vZHVsZXMudG9vbGJhciA9IHtcbiAgICAgIGNvbnRhaW5lcjogdXNlckNvbmZpZy5tb2R1bGVzLnRvb2xiYXJcbiAgICB9O1xuICB9XG4gIHVzZXJDb25maWcgPSBleHRlbmQodHJ1ZSwge30sIFF1aWxsLkRFRkFVTFRTLCB7IG1vZHVsZXM6IG1vZHVsZUNvbmZpZyB9LCB0aGVtZUNvbmZpZywgdXNlckNvbmZpZyk7XG4gIFsnYm91bmRzJywgJ2NvbnRhaW5lcicsICdzY3JvbGxpbmdDb250YWluZXInXS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmICh0eXBlb2YgdXNlckNvbmZpZ1trZXldID09PSAnc3RyaW5nJykge1xuICAgICAgdXNlckNvbmZpZ1trZXldID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih1c2VyQ29uZmlnW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIHVzZXJDb25maWcubW9kdWxlcyA9IE9iamVjdC5rZXlzKHVzZXJDb25maWcubW9kdWxlcykucmVkdWNlKGZ1bmN0aW9uKGNvbmZpZywgbmFtZSkge1xuICAgIGlmICh1c2VyQ29uZmlnLm1vZHVsZXNbbmFtZV0pIHtcbiAgICAgIGNvbmZpZ1tuYW1lXSA9IHVzZXJDb25maWcubW9kdWxlc1tuYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfSwge30pO1xuICByZXR1cm4gdXNlckNvbmZpZztcbn1cblxuLy8gSGFuZGxlIHNlbGVjdGlvbiBwcmVzZXJ2YXRpb24gYW5kIFRFWFRfQ0hBTkdFIGVtaXNzaW9uXG4vLyBjb21tb24gdG8gbW9kaWZpY2F0aW9uIEFQSXNcbmZ1bmN0aW9uIG1vZGlmeShtb2RpZmllciwgc291cmNlLCBpbmRleCwgc2hpZnQpIHtcbiAgaWYgKHRoaXMub3B0aW9ucy5zdHJpY3QgJiYgIXRoaXMuaXNFbmFibGVkKCkgJiYgc291cmNlID09PSBFbWl0dGVyLnNvdXJjZXMuVVNFUikge1xuICAgIHJldHVybiBuZXcgRGVsdGEoKTtcbiAgfVxuICBsZXQgcmFuZ2UgPSBpbmRleCA9PSBudWxsID8gbnVsbCA6IHRoaXMuZ2V0U2VsZWN0aW9uKCk7XG4gIGxldCBvbGREZWx0YSA9IHRoaXMuZWRpdG9yLmRlbHRhO1xuICBsZXQgY2hhbmdlID0gbW9kaWZpZXIoKTtcbiAgaWYgKHJhbmdlICE9IG51bGwpIHtcbiAgICBpZiAoaW5kZXggPT09IHRydWUpIGluZGV4ID0gcmFuZ2UuaW5kZXg7XG4gICAgaWYgKHNoaWZ0ID09IG51bGwpIHtcbiAgICAgIHJhbmdlID0gc2hpZnRSYW5nZShyYW5nZSwgY2hhbmdlLCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAoc2hpZnQgIT09IDApIHtcbiAgICAgIHJhbmdlID0gc2hpZnRSYW5nZShyYW5nZSwgaW5kZXgsIHNoaWZ0LCBzb3VyY2UpO1xuICAgIH1cbiAgICB0aGlzLnNldFNlbGVjdGlvbihyYW5nZSwgRW1pdHRlci5zb3VyY2VzLlNJTEVOVCk7XG4gIH1cbiAgaWYgKGNoYW5nZS5sZW5ndGgoKSA+IDApIHtcbiAgICBsZXQgYXJncyA9IFtFbWl0dGVyLmV2ZW50cy5URVhUX0NIQU5HRSwgY2hhbmdlLCBvbGREZWx0YSwgc291cmNlXTtcbiAgICB0aGlzLmVtaXR0ZXIuZW1pdChFbWl0dGVyLmV2ZW50cy5FRElUT1JfQ0hBTkdFLCAuLi5hcmdzKTtcbiAgICBpZiAoc291cmNlICE9PSBFbWl0dGVyLnNvdXJjZXMuU0lMRU5UKSB7XG4gICAgICB0aGlzLmVtaXR0ZXIuZW1pdCguLi5hcmdzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoYW5nZTtcbn1cblxuZnVuY3Rpb24gb3ZlcmxvYWQoaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUsIHNvdXJjZSkge1xuICBsZXQgZm9ybWF0cyA9IHt9O1xuICBpZiAodHlwZW9mIGluZGV4LmluZGV4ID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgaW5kZXgubGVuZ3RoID09PSAnbnVtYmVyJykge1xuICAgIC8vIEFsbG93IGZvciB0aHJvd2F3YXkgZW5kICh1c2VkIGJ5IGluc2VydFRleHQvaW5zZXJ0RW1iZWQpXG4gICAgaWYgKHR5cGVvZiBsZW5ndGggIT09ICdudW1iZXInKSB7XG4gICAgICBzb3VyY2UgPSB2YWx1ZSwgdmFsdWUgPSBuYW1lLCBuYW1lID0gbGVuZ3RoLCBsZW5ndGggPSBpbmRleC5sZW5ndGgsIGluZGV4ID0gaW5kZXguaW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IGluZGV4Lmxlbmd0aCwgaW5kZXggPSBpbmRleC5pbmRleDtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIGxlbmd0aCAhPT0gJ251bWJlcicpIHtcbiAgICBzb3VyY2UgPSB2YWx1ZSwgdmFsdWUgPSBuYW1lLCBuYW1lID0gbGVuZ3RoLCBsZW5ndGggPSAwO1xuICB9XG4gIC8vIEhhbmRsZSBmb3JtYXQgYmVpbmcgb2JqZWN0LCB0d28gZm9ybWF0IG5hbWUvdmFsdWUgc3RyaW5ncyBvciBleGNsdWRlZFxuICBpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSB7XG4gICAgZm9ybWF0cyA9IG5hbWU7XG4gICAgc291cmNlID0gdmFsdWU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIGZvcm1hdHNbbmFtZV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgc291cmNlID0gbmFtZTtcbiAgICB9XG4gIH1cbiAgLy8gSGFuZGxlIG9wdGlvbmFsIHNvdXJjZVxuICBzb3VyY2UgPSBzb3VyY2UgfHwgRW1pdHRlci5zb3VyY2VzLkFQSTtcbiAgcmV0dXJuIFtpbmRleCwgbGVuZ3RoLCBmb3JtYXRzLCBzb3VyY2VdO1xufVxuXG5mdW5jdGlvbiBzaGlmdFJhbmdlKHJhbmdlLCBpbmRleCwgbGVuZ3RoLCBzb3VyY2UpIHtcbiAgaWYgKHJhbmdlID09IG51bGwpIHJldHVybiBudWxsO1xuICBsZXQgc3RhcnQsIGVuZDtcbiAgaWYgKGluZGV4IGluc3RhbmNlb2YgRGVsdGEpIHtcbiAgICBbc3RhcnQsIGVuZF0gPSBbcmFuZ2UuaW5kZXgsIHJhbmdlLmluZGV4ICsgcmFuZ2UubGVuZ3RoXS5tYXAoZnVuY3Rpb24ocG9zKSB7XG4gICAgICByZXR1cm4gaW5kZXgudHJhbnNmb3JtUG9zaXRpb24ocG9zLCBzb3VyY2UgIT09IEVtaXR0ZXIuc291cmNlcy5VU0VSKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBbc3RhcnQsIGVuZF0gPSBbcmFuZ2UuaW5kZXgsIHJhbmdlLmluZGV4ICsgcmFuZ2UubGVuZ3RoXS5tYXAoZnVuY3Rpb24ocG9zKSB7XG4gICAgICBpZiAocG9zIDwgaW5kZXggfHwgKHBvcyA9PT0gaW5kZXggJiYgc291cmNlID09PSBFbWl0dGVyLnNvdXJjZXMuVVNFUikpIHJldHVybiBwb3M7XG4gICAgICBpZiAobGVuZ3RoID49IDApIHtcbiAgICAgICAgcmV0dXJuIHBvcyArIGxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChpbmRleCwgcG9zICsgbGVuZ3RoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbmV3IFJhbmdlKHN0YXJ0LCBlbmQgLSBzdGFydCk7XG59XG5cblxuZXhwb3J0IHsgZXhwYW5kQ29uZmlnLCBvdmVybG9hZCwgUXVpbGwgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IFBhcmNobWVudCBmcm9tICdwYXJjaG1lbnQnO1xuaW1wb3J0IEJsb2NrLCB7IEJsb2NrRW1iZWQgfSBmcm9tICcuL2Jsb2NrJztcblxuXG5jbGFzcyBDb250YWluZXIgZXh0ZW5kcyBQYXJjaG1lbnQuQ29udGFpbmVyIHsgfVxuQ29udGFpbmVyLmFsbG93ZWRDaGlsZHJlbiA9IFtCbG9jaywgQmxvY2tFbWJlZCwgQ29udGFpbmVyXTtcblxuXG5leHBvcnQgZGVmYXVsdCBDb250YWluZXI7XG4iLCJpbXBvcnQgUGFyY2htZW50IGZyb20gJ3BhcmNobWVudCc7XG5pbXBvcnQgVGV4dEJsb3QgZnJvbSAnLi90ZXh0JztcblxuY29uc3QgR1VBUkRfVEVYVCA9IFwiXFx1RkVGRlwiO1xuXG5cbmNsYXNzIEVtYmVkIGV4dGVuZHMgUGFyY2htZW50LkVtYmVkIHtcbiAgY29uc3RydWN0b3Iobm9kZSkge1xuICAgIHN1cGVyKG5vZGUpO1xuICAgIHRoaXMuY29udGVudE5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgdGhpcy5jb250ZW50Tm9kZS5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsIGZhbHNlKTtcbiAgICBbXS5zbGljZS5jYWxsKHRoaXMuZG9tTm9kZS5jaGlsZE5vZGVzKS5mb3JFYWNoKChjaGlsZE5vZGUpID0+IHtcbiAgICAgIHRoaXMuY29udGVudE5vZGUuYXBwZW5kQ2hpbGQoY2hpbGROb2RlKTtcbiAgICB9KTtcbiAgICB0aGlzLmxlZnRHdWFyZCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKEdVQVJEX1RFWFQpO1xuICAgIHRoaXMucmlnaHRHdWFyZCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKEdVQVJEX1RFWFQpO1xuICAgIHRoaXMuZG9tTm9kZS5hcHBlbmRDaGlsZCh0aGlzLmxlZnRHdWFyZCk7XG4gICAgdGhpcy5kb21Ob2RlLmFwcGVuZENoaWxkKHRoaXMuY29udGVudE5vZGUpO1xuICAgIHRoaXMuZG9tTm9kZS5hcHBlbmRDaGlsZCh0aGlzLnJpZ2h0R3VhcmQpO1xuICB9XG5cbiAgaW5kZXgobm9kZSwgb2Zmc2V0KSB7XG4gICAgaWYgKG5vZGUgPT09IHRoaXMubGVmdEd1YXJkKSByZXR1cm4gMDtcbiAgICBpZiAobm9kZSA9PT0gdGhpcy5yaWdodEd1YXJkKSByZXR1cm4gMTtcbiAgICByZXR1cm4gc3VwZXIuaW5kZXgobm9kZSwgb2Zmc2V0KTtcbiAgfVxuXG4gIHJlc3RvcmUobm9kZSkge1xuICAgIGxldCByYW5nZSwgdGV4dE5vZGU7XG4gICAgbGV0IHRleHQgPSBub2RlLmRhdGEuc3BsaXQoR1VBUkRfVEVYVCkuam9pbignJyk7XG4gICAgaWYgKG5vZGUgPT09IHRoaXMubGVmdEd1YXJkKSB7XG4gICAgICBpZiAodGhpcy5wcmV2IGluc3RhbmNlb2YgVGV4dEJsb3QpIHtcbiAgICAgICAgbGV0IHByZXZMZW5ndGggPSB0aGlzLnByZXYubGVuZ3RoKCk7XG4gICAgICAgIHRoaXMucHJldi5pbnNlcnRBdChwcmV2TGVuZ3RoLCB0ZXh0KTtcbiAgICAgICAgcmFuZ2UgPSB7XG4gICAgICAgICAgc3RhcnROb2RlOiB0aGlzLnByZXYuZG9tTm9kZSxcbiAgICAgICAgICBzdGFydE9mZnNldDogcHJldkxlbmd0aCArIHRleHQubGVuZ3RoXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpO1xuICAgICAgICB0aGlzLnBhcmVudC5pbnNlcnRCZWZvcmUoUGFyY2htZW50LmNyZWF0ZSh0ZXh0Tm9kZSksIHRoaXMpO1xuICAgICAgICByYW5nZSA9IHtcbiAgICAgICAgICBzdGFydE5vZGU6IHRleHROb2RlLFxuICAgICAgICAgIHN0YXJ0T2Zmc2V0OiB0ZXh0Lmxlbmd0aFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobm9kZSA9PT0gdGhpcy5yaWdodEd1YXJkKSB7XG4gICAgICBpZiAodGhpcy5uZXh0IGluc3RhbmNlb2YgVGV4dEJsb3QpIHtcbiAgICAgICAgdGhpcy5uZXh0Lmluc2VydEF0KDAsIHRleHQpO1xuICAgICAgICByYW5nZSA9IHtcbiAgICAgICAgICBzdGFydE5vZGU6IHRoaXMubmV4dC5kb21Ob2RlLFxuICAgICAgICAgIHN0YXJ0T2Zmc2V0OiB0ZXh0Lmxlbmd0aFxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpO1xuICAgICAgICB0aGlzLnBhcmVudC5pbnNlcnRCZWZvcmUoUGFyY2htZW50LmNyZWF0ZSh0ZXh0Tm9kZSksIHRoaXMubmV4dCk7XG4gICAgICAgIHJhbmdlID0ge1xuICAgICAgICAgIHN0YXJ0Tm9kZTogdGV4dE5vZGUsXG4gICAgICAgICAgc3RhcnRPZmZzZXQ6IHRleHQubGVuZ3RoXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICAgIG5vZGUuZGF0YSA9IEdVQVJEX1RFWFQ7XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9XG5cbiAgdXBkYXRlKG11dGF0aW9ucywgY29udGV4dCkge1xuICAgIG11dGF0aW9ucy5mb3JFYWNoKChtdXRhdGlvbikgPT4ge1xuICAgICAgaWYgKG11dGF0aW9uLnR5cGUgPT09ICdjaGFyYWN0ZXJEYXRhJyAmJlxuICAgICAgICAgIChtdXRhdGlvbi50YXJnZXQgPT09IHRoaXMubGVmdEd1YXJkIHx8IG11dGF0aW9uLnRhcmdldCA9PT0gdGhpcy5yaWdodEd1YXJkKSkge1xuICAgICAgICBsZXQgcmFuZ2UgPSB0aGlzLnJlc3RvcmUobXV0YXRpb24udGFyZ2V0KTtcbiAgICAgICAgaWYgKHJhbmdlKSBjb250ZXh0LnJhbmdlID0gcmFuZ2U7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBFbWJlZDtcbiIsImltcG9ydCBQYXJjaG1lbnQgZnJvbSAncGFyY2htZW50JztcbmltcG9ydCBFbWl0dGVyIGZyb20gJy4uL2NvcmUvZW1pdHRlcic7XG5pbXBvcnQgQmxvY2ssIHsgQmxvY2tFbWJlZCB9IGZyb20gJy4vYmxvY2snO1xuaW1wb3J0IEJyZWFrIGZyb20gJy4vYnJlYWsnO1xuaW1wb3J0IENvZGVCbG9jayBmcm9tICcuLi9mb3JtYXRzL2NvZGUnO1xuaW1wb3J0IENvbnRhaW5lciBmcm9tICcuL2NvbnRhaW5lcic7XG5cblxuZnVuY3Rpb24gaXNMaW5lKGJsb3QpIHtcbiAgcmV0dXJuIChibG90IGluc3RhbmNlb2YgQmxvY2sgfHwgYmxvdCBpbnN0YW5jZW9mIEJsb2NrRW1iZWQpO1xufVxuXG5cbmNsYXNzIFNjcm9sbCBleHRlbmRzIFBhcmNobWVudC5TY3JvbGwge1xuICBjb25zdHJ1Y3Rvcihkb21Ob2RlLCBjb25maWcpIHtcbiAgICBzdXBlcihkb21Ob2RlKTtcbiAgICB0aGlzLmVtaXR0ZXIgPSBjb25maWcuZW1pdHRlcjtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb25maWcud2hpdGVsaXN0KSkge1xuICAgICAgdGhpcy53aGl0ZWxpc3QgPSBjb25maWcud2hpdGVsaXN0LnJlZHVjZShmdW5jdGlvbih3aGl0ZWxpc3QsIGZvcm1hdCkge1xuICAgICAgICB3aGl0ZWxpc3RbZm9ybWF0XSA9IHRydWU7XG4gICAgICAgIHJldHVybiB3aGl0ZWxpc3Q7XG4gICAgICB9LCB7fSk7XG4gICAgfVxuICAgIC8vIFNvbWUgcmVhc29uIGZpeGVzIGNvbXBvc2l0aW9uIGlzc3VlcyB3aXRoIGNoYXJhY3RlciBsYW5ndWFnZXMgaW4gV2luZG93cy9DaHJvbWUsIFNhZmFyaVxuICAgIHRoaXMuZG9tTm9kZS5hZGRFdmVudExpc3RlbmVyKCdET01Ob2RlSW5zZXJ0ZWQnLCBmdW5jdGlvbigpIHt9KTtcbiAgICB0aGlzLm9wdGltaXplKCk7XG4gICAgdGhpcy5lbmFibGUoKTtcbiAgfVxuXG4gIGJhdGNoU3RhcnQoKSB7XG4gICAgdGhpcy5iYXRjaCA9IHRydWU7XG4gIH1cblxuICBiYXRjaEVuZCgpIHtcbiAgICB0aGlzLmJhdGNoID0gZmFsc2U7XG4gICAgdGhpcy5vcHRpbWl6ZSgpO1xuICB9XG5cbiAgZGVsZXRlQXQoaW5kZXgsIGxlbmd0aCkge1xuICAgIGxldCBbZmlyc3QsIG9mZnNldF0gPSB0aGlzLmxpbmUoaW5kZXgpO1xuICAgIGxldCBbbGFzdCwgXSA9IHRoaXMubGluZShpbmRleCArIGxlbmd0aCk7XG4gICAgc3VwZXIuZGVsZXRlQXQoaW5kZXgsIGxlbmd0aCk7XG4gICAgaWYgKGxhc3QgIT0gbnVsbCAmJiBmaXJzdCAhPT0gbGFzdCAmJiBvZmZzZXQgPiAwKSB7XG4gICAgICBpZiAoZmlyc3QgaW5zdGFuY2VvZiBCbG9ja0VtYmVkIHx8IGxhc3QgaW5zdGFuY2VvZiBCbG9ja0VtYmVkKSB7XG4gICAgICAgIHRoaXMub3B0aW1pemUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGZpcnN0IGluc3RhbmNlb2YgQ29kZUJsb2NrKSB7XG4gICAgICAgIGxldCBuZXdsaW5lSW5kZXggPSBmaXJzdC5uZXdsaW5lSW5kZXgoZmlyc3QubGVuZ3RoKCksIHRydWUpO1xuICAgICAgICBpZiAobmV3bGluZUluZGV4ID4gLTEpIHtcbiAgICAgICAgICBmaXJzdCA9IGZpcnN0LnNwbGl0KG5ld2xpbmVJbmRleCArIDEpO1xuICAgICAgICAgIGlmIChmaXJzdCA9PT0gbGFzdCkge1xuICAgICAgICAgICAgdGhpcy5vcHRpbWl6ZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChsYXN0IGluc3RhbmNlb2YgQ29kZUJsb2NrKSB7XG4gICAgICAgIGxldCBuZXdsaW5lSW5kZXggPSBsYXN0Lm5ld2xpbmVJbmRleCgwKTtcbiAgICAgICAgaWYgKG5ld2xpbmVJbmRleCA+IC0xKSB7XG4gICAgICAgICAgbGFzdC5zcGxpdChuZXdsaW5lSW5kZXggKyAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IHJlZiA9IGxhc3QuY2hpbGRyZW4uaGVhZCBpbnN0YW5jZW9mIEJyZWFrID8gbnVsbCA6IGxhc3QuY2hpbGRyZW4uaGVhZDtcbiAgICAgIGZpcnN0Lm1vdmVDaGlsZHJlbihsYXN0LCByZWYpO1xuICAgICAgZmlyc3QucmVtb3ZlKCk7XG4gICAgfVxuICAgIHRoaXMub3B0aW1pemUoKTtcbiAgfVxuXG4gIGVuYWJsZShlbmFibGVkID0gdHJ1ZSkge1xuICAgIHRoaXMuZG9tTm9kZS5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsIGVuYWJsZWQpO1xuICB9XG5cbiAgZm9ybWF0QXQoaW5kZXgsIGxlbmd0aCwgZm9ybWF0LCB2YWx1ZSkge1xuICAgIGlmICh0aGlzLndoaXRlbGlzdCAhPSBudWxsICYmICF0aGlzLndoaXRlbGlzdFtmb3JtYXRdKSByZXR1cm47XG4gICAgc3VwZXIuZm9ybWF0QXQoaW5kZXgsIGxlbmd0aCwgZm9ybWF0LCB2YWx1ZSk7XG4gICAgdGhpcy5vcHRpbWl6ZSgpO1xuICB9XG5cbiAgaW5zZXJ0QXQoaW5kZXgsIHZhbHVlLCBkZWYpIHtcbiAgICBpZiAoZGVmICE9IG51bGwgJiYgdGhpcy53aGl0ZWxpc3QgIT0gbnVsbCAmJiAhdGhpcy53aGl0ZWxpc3RbdmFsdWVdKSByZXR1cm47XG4gICAgaWYgKGluZGV4ID49IHRoaXMubGVuZ3RoKCkpIHtcbiAgICAgIGlmIChkZWYgPT0gbnVsbCB8fCBQYXJjaG1lbnQucXVlcnkodmFsdWUsIFBhcmNobWVudC5TY29wZS5CTE9DSykgPT0gbnVsbCkge1xuICAgICAgICBsZXQgYmxvdCA9IFBhcmNobWVudC5jcmVhdGUodGhpcy5zdGF0aWNzLmRlZmF1bHRDaGlsZCk7XG4gICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoYmxvdCk7XG4gICAgICAgIGlmIChkZWYgPT0gbnVsbCAmJiB2YWx1ZS5lbmRzV2l0aCgnXFxuJykpIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIC0xKTtcbiAgICAgICAgfVxuICAgICAgICBibG90Lmluc2VydEF0KDAsIHZhbHVlLCBkZWYpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGVtYmVkID0gUGFyY2htZW50LmNyZWF0ZSh2YWx1ZSwgZGVmKTtcbiAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChlbWJlZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1cGVyLmluc2VydEF0KGluZGV4LCB2YWx1ZSwgZGVmKTtcbiAgICB9XG4gICAgdGhpcy5vcHRpbWl6ZSgpO1xuICB9XG5cbiAgaW5zZXJ0QmVmb3JlKGJsb3QsIHJlZikge1xuICAgIGlmIChibG90LnN0YXRpY3Muc2NvcGUgPT09IFBhcmNobWVudC5TY29wZS5JTkxJTkVfQkxPVCkge1xuICAgICAgbGV0IHdyYXBwZXIgPSBQYXJjaG1lbnQuY3JlYXRlKHRoaXMuc3RhdGljcy5kZWZhdWx0Q2hpbGQpO1xuICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChibG90KTtcbiAgICAgIGJsb3QgPSB3cmFwcGVyO1xuICAgIH1cbiAgICBzdXBlci5pbnNlcnRCZWZvcmUoYmxvdCwgcmVmKTtcbiAgfVxuXG4gIGxlYWYoaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXRoKGluZGV4KS5wb3AoKSB8fCBbbnVsbCwgLTFdO1xuICB9XG5cbiAgbGluZShpbmRleCkge1xuICAgIGlmIChpbmRleCA9PT0gdGhpcy5sZW5ndGgoKSkge1xuICAgICAgcmV0dXJuIHRoaXMubGluZShpbmRleCAtIDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5kZXNjZW5kYW50KGlzTGluZSwgaW5kZXgpO1xuICB9XG5cbiAgbGluZXMoaW5kZXggPSAwLCBsZW5ndGggPSBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgbGV0IGdldExpbmVzID0gKGJsb3QsIGluZGV4LCBsZW5ndGgpID0+IHtcbiAgICAgIGxldCBsaW5lcyA9IFtdLCBsZW5ndGhMZWZ0ID0gbGVuZ3RoO1xuICAgICAgYmxvdC5jaGlsZHJlbi5mb3JFYWNoQXQoaW5kZXgsIGxlbmd0aCwgZnVuY3Rpb24oY2hpbGQsIGluZGV4LCBsZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzTGluZShjaGlsZCkpIHtcbiAgICAgICAgICBsaW5lcy5wdXNoKGNoaWxkKTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGlsZCBpbnN0YW5jZW9mIFBhcmNobWVudC5Db250YWluZXIpIHtcbiAgICAgICAgICBsaW5lcyA9IGxpbmVzLmNvbmNhdChnZXRMaW5lcyhjaGlsZCwgaW5kZXgsIGxlbmd0aExlZnQpKTtcbiAgICAgICAgfVxuICAgICAgICBsZW5ndGhMZWZ0IC09IGxlbmd0aDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGxpbmVzO1xuICAgIH07XG4gICAgcmV0dXJuIGdldExpbmVzKHRoaXMsIGluZGV4LCBsZW5ndGgpO1xuICB9XG5cbiAgb3B0aW1pemUobXV0YXRpb25zID0gW10sIGNvbnRleHQgPSB7fSkge1xuICAgIGlmICh0aGlzLmJhdGNoID09PSB0cnVlKSByZXR1cm47XG4gICAgc3VwZXIub3B0aW1pemUobXV0YXRpb25zLCBjb250ZXh0KTtcbiAgICBpZiAobXV0YXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuZW1pdHRlci5lbWl0KEVtaXR0ZXIuZXZlbnRzLlNDUk9MTF9PUFRJTUlaRSwgbXV0YXRpb25zLCBjb250ZXh0KTtcbiAgICB9XG4gIH1cblxuICBwYXRoKGluZGV4KSB7XG4gICAgcmV0dXJuIHN1cGVyLnBhdGgoaW5kZXgpLnNsaWNlKDEpOyAgLy8gRXhjbHVkZSBzZWxmXG4gIH1cblxuICB1cGRhdGUobXV0YXRpb25zKSB7XG4gICAgaWYgKHRoaXMuYmF0Y2ggPT09IHRydWUpIHJldHVybjtcbiAgICBsZXQgc291cmNlID0gRW1pdHRlci5zb3VyY2VzLlVTRVI7XG4gICAgaWYgKHR5cGVvZiBtdXRhdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBzb3VyY2UgPSBtdXRhdGlvbnM7XG4gICAgfVxuICAgIGlmICghQXJyYXkuaXNBcnJheShtdXRhdGlvbnMpKSB7XG4gICAgICBtdXRhdGlvbnMgPSB0aGlzLm9ic2VydmVyLnRha2VSZWNvcmRzKCk7XG4gICAgfVxuICAgIGlmIChtdXRhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoRW1pdHRlci5ldmVudHMuU0NST0xMX0JFRk9SRV9VUERBVEUsIHNvdXJjZSwgbXV0YXRpb25zKTtcbiAgICB9XG4gICAgc3VwZXIudXBkYXRlKG11dGF0aW9ucy5jb25jYXQoW10pKTsgICAvLyBwYXNzIGNvcHlcbiAgICBpZiAobXV0YXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuZW1pdHRlci5lbWl0KEVtaXR0ZXIuZXZlbnRzLlNDUk9MTF9VUERBVEUsIHNvdXJjZSwgbXV0YXRpb25zKTtcbiAgICB9XG4gIH1cbn1cblNjcm9sbC5ibG90TmFtZSA9ICdzY3JvbGwnO1xuU2Nyb2xsLmNsYXNzTmFtZSA9ICdxbC1lZGl0b3InO1xuU2Nyb2xsLnRhZ05hbWUgPSAnRElWJztcblNjcm9sbC5kZWZhdWx0Q2hpbGQgPSAnYmxvY2snO1xuU2Nyb2xsLmFsbG93ZWRDaGlsZHJlbiA9IFtCbG9jaywgQmxvY2tFbWJlZCwgQ29udGFpbmVyXTtcblxuXG5leHBvcnQgZGVmYXVsdCBTY3JvbGw7XG4iLCJpbXBvcnQgUGFyY2htZW50IGZyb20gJ3BhcmNobWVudCc7XG5cbmxldCBjb25maWcgPSB7XG4gIHNjb3BlOiBQYXJjaG1lbnQuU2NvcGUuQkxPQ0ssXG4gIHdoaXRlbGlzdDogWydyaWdodCcsICdjZW50ZXInLCAnanVzdGlmeSddXG59O1xuXG5sZXQgQWxpZ25BdHRyaWJ1dGUgPSBuZXcgUGFyY2htZW50LkF0dHJpYnV0b3IuQXR0cmlidXRlKCdhbGlnbicsICdhbGlnbicsIGNvbmZpZyk7XG5sZXQgQWxpZ25DbGFzcyA9IG5ldyBQYXJjaG1lbnQuQXR0cmlidXRvci5DbGFzcygnYWxpZ24nLCAncWwtYWxpZ24nLCBjb25maWcpO1xubGV0IEFsaWduU3R5bGUgPSBuZXcgUGFyY2htZW50LkF0dHJpYnV0b3IuU3R5bGUoJ2FsaWduJywgJ3RleHQtYWxpZ24nLCBjb25maWcpO1xuXG5leHBvcnQgeyBBbGlnbkF0dHJpYnV0ZSwgQWxpZ25DbGFzcywgQWxpZ25TdHlsZSB9O1xuIiwiaW1wb3J0IFBhcmNobWVudCBmcm9tICdwYXJjaG1lbnQnO1xuXG5jbGFzcyBDb2xvckF0dHJpYnV0b3IgZXh0ZW5kcyBQYXJjaG1lbnQuQXR0cmlidXRvci5TdHlsZSB7XG4gIHZhbHVlKGRvbU5vZGUpIHtcbiAgICBsZXQgdmFsdWUgPSBzdXBlci52YWx1ZShkb21Ob2RlKTtcbiAgICBpZiAoIXZhbHVlLnN0YXJ0c1dpdGgoJ3JnYignKSkgcmV0dXJuIHZhbHVlO1xuICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXlteXFxkXSsvLCAnJykucmVwbGFjZSgvW15cXGRdKyQvLCAnJyk7XG4gICAgcmV0dXJuICcjJyArIHZhbHVlLnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uKGNvbXBvbmVudCkge1xuICAgICAgcmV0dXJuICgnMDAnICsgcGFyc2VJbnQoY29tcG9uZW50KS50b1N0cmluZygxNikpLnNsaWNlKC0yKTtcbiAgICB9KS5qb2luKCcnKTtcbiAgfVxufVxuXG5sZXQgQ29sb3JDbGFzcyA9IG5ldyBQYXJjaG1lbnQuQXR0cmlidXRvci5DbGFzcygnY29sb3InLCAncWwtY29sb3InLCB7XG4gIHNjb3BlOiBQYXJjaG1lbnQuU2NvcGUuSU5MSU5FXG59KTtcbmxldCBDb2xvclN0eWxlID0gbmV3IENvbG9yQXR0cmlidXRvcignY29sb3InLCAnY29sb3InLCB7XG4gIHNjb3BlOiBQYXJjaG1lbnQuU2NvcGUuSU5MSU5FXG59KTtcblxuZXhwb3J0IHsgQ29sb3JBdHRyaWJ1dG9yLCBDb2xvckNsYXNzLCBDb2xvclN0eWxlIH07XG4iLCJpbXBvcnQgUGFyY2htZW50IGZyb20gJ3BhcmNobWVudCc7XG5pbXBvcnQgeyBDb2xvckF0dHJpYnV0b3IgfSBmcm9tICcuL2NvbG9yJztcblxubGV0IEJhY2tncm91bmRDbGFzcyA9IG5ldyBQYXJjaG1lbnQuQXR0cmlidXRvci5DbGFzcygnYmFja2dyb3VuZCcsICdxbC1iZycsIHtcbiAgc2NvcGU6IFBhcmNobWVudC5TY29wZS5JTkxJTkVcbn0pO1xubGV0IEJhY2tncm91bmRTdHlsZSA9IG5ldyBDb2xvckF0dHJpYnV0b3IoJ2JhY2tncm91bmQnLCAnYmFja2dyb3VuZC1jb2xvcicsIHtcbiAgc2NvcGU6IFBhcmNobWVudC5TY29wZS5JTkxJTkVcbn0pO1xuXG5leHBvcnQgeyBCYWNrZ3JvdW5kQ2xhc3MsIEJhY2tncm91bmRTdHlsZSB9O1xuIiwiaW1wb3J0IFBhcmNobWVudCBmcm9tICdwYXJjaG1lbnQnO1xuXG5sZXQgY29uZmlnID0ge1xuICBzY29wZTogUGFyY2htZW50LlNjb3BlLkJMT0NLLFxuICB3aGl0ZWxpc3Q6IFsncnRsJ11cbn07XG5cbmxldCBEaXJlY3Rpb25BdHRyaWJ1dGUgPSBuZXcgUGFyY2htZW50LkF0dHJpYnV0b3IuQXR0cmlidXRlKCdkaXJlY3Rpb24nLCAnZGlyJywgY29uZmlnKTtcbmxldCBEaXJlY3Rpb25DbGFzcyA9IG5ldyBQYXJjaG1lbnQuQXR0cmlidXRvci5DbGFzcygnZGlyZWN0aW9uJywgJ3FsLWRpcmVjdGlvbicsIGNvbmZpZyk7XG5sZXQgRGlyZWN0aW9uU3R5bGUgPSBuZXcgUGFyY2htZW50LkF0dHJpYnV0b3IuU3R5bGUoJ2RpcmVjdGlvbicsICdkaXJlY3Rpb24nLCBjb25maWcpO1xuXG5leHBvcnQgeyBEaXJlY3Rpb25BdHRyaWJ1dGUsIERpcmVjdGlvbkNsYXNzLCBEaXJlY3Rpb25TdHlsZSB9O1xuIiwiaW1wb3J0IFBhcmNobWVudCBmcm9tICdwYXJjaG1lbnQnO1xuXG5sZXQgY29uZmlnID0ge1xuICBzY29wZTogUGFyY2htZW50LlNjb3BlLklOTElORSxcbiAgd2hpdGVsaXN0OiBbJ3NlcmlmJywgJ21vbm9zcGFjZSddXG59O1xuXG5sZXQgRm9udENsYXNzID0gbmV3IFBhcmNobWVudC5BdHRyaWJ1dG9yLkNsYXNzKCdmb250JywgJ3FsLWZvbnQnLCBjb25maWcpO1xuXG5jbGFzcyBGb250U3R5bGVBdHRyaWJ1dG9yIGV4dGVuZHMgUGFyY2htZW50LkF0dHJpYnV0b3IuU3R5bGUge1xuICB2YWx1ZShub2RlKSB7XG4gICAgcmV0dXJuIHN1cGVyLnZhbHVlKG5vZGUpLnJlcGxhY2UoL1tcIiddL2csICcnKTtcbiAgfVxufVxuXG5sZXQgRm9udFN0eWxlID0gbmV3IEZvbnRTdHlsZUF0dHJpYnV0b3IoJ2ZvbnQnLCAnZm9udC1mYW1pbHknLCBjb25maWcpO1xuXG5leHBvcnQgeyBGb250U3R5bGUsIEZvbnRDbGFzcyB9O1xuIiwiaW1wb3J0IFBhcmNobWVudCBmcm9tICdwYXJjaG1lbnQnO1xuXG5sZXQgU2l6ZUNsYXNzID0gbmV3IFBhcmNobWVudC5BdHRyaWJ1dG9yLkNsYXNzKCdzaXplJywgJ3FsLXNpemUnLCB7XG4gIHNjb3BlOiBQYXJjaG1lbnQuU2NvcGUuSU5MSU5FLFxuICB3aGl0ZWxpc3Q6IFsnc21hbGwnLCAnbGFyZ2UnLCAnaHVnZSddXG59KTtcbmxldCBTaXplU3R5bGUgPSBuZXcgUGFyY2htZW50LkF0dHJpYnV0b3IuU3R5bGUoJ3NpemUnLCAnZm9udC1zaXplJywge1xuICBzY29wZTogUGFyY2htZW50LlNjb3BlLklOTElORSxcbiAgd2hpdGVsaXN0OiBbJzEwcHgnLCAnMThweCcsICczMnB4J11cbn0pO1xuXG5leHBvcnQgeyBTaXplQ2xhc3MsIFNpemVTdHlsZSB9O1xuIiwiaW1wb3J0IGV4dGVuZCBmcm9tICdleHRlbmQnO1xuaW1wb3J0IERlbHRhIGZyb20gJ3F1aWxsLWRlbHRhJztcbmltcG9ydCBQYXJjaG1lbnQgZnJvbSAncGFyY2htZW50JztcbmltcG9ydCBRdWlsbCBmcm9tICcuLi9jb3JlL3F1aWxsJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi4vY29yZS9sb2dnZXInO1xuaW1wb3J0IE1vZHVsZSBmcm9tICcuLi9jb3JlL21vZHVsZSc7XG5cbmltcG9ydCB7IEFsaWduQXR0cmlidXRlLCBBbGlnblN0eWxlIH0gZnJvbSAnLi4vZm9ybWF0cy9hbGlnbic7XG5pbXBvcnQgeyBCYWNrZ3JvdW5kU3R5bGUgfSBmcm9tICcuLi9mb3JtYXRzL2JhY2tncm91bmQnO1xuaW1wb3J0IENvZGVCbG9jayBmcm9tICcuLi9mb3JtYXRzL2NvZGUnO1xuaW1wb3J0IHsgQ29sb3JTdHlsZSB9IGZyb20gJy4uL2Zvcm1hdHMvY29sb3InO1xuaW1wb3J0IHsgRGlyZWN0aW9uQXR0cmlidXRlLCBEaXJlY3Rpb25TdHlsZSB9IGZyb20gJy4uL2Zvcm1hdHMvZGlyZWN0aW9uJztcbmltcG9ydCB7IEZvbnRTdHlsZSB9IGZyb20gJy4uL2Zvcm1hdHMvZm9udCc7XG5pbXBvcnQgeyBTaXplU3R5bGUgfSBmcm9tICcuLi9mb3JtYXRzL3NpemUnO1xuXG5sZXQgZGVidWcgPSBsb2dnZXIoJ3F1aWxsOmNsaXBib2FyZCcpO1xuXG5cbmNvbnN0IERPTV9LRVkgPSAnX19xbC1tYXRjaGVyJztcblxuY29uc3QgQ0xJUEJPQVJEX0NPTkZJRyA9IFtcbiAgW05vZGUuVEVYVF9OT0RFLCBtYXRjaFRleHRdLFxuICBbTm9kZS5URVhUX05PREUsIG1hdGNoTmV3bGluZV0sXG4gIFsnYnInLCBtYXRjaEJyZWFrXSxcbiAgW05vZGUuRUxFTUVOVF9OT0RFLCBtYXRjaE5ld2xpbmVdLFxuICBbTm9kZS5FTEVNRU5UX05PREUsIG1hdGNoQmxvdF0sXG4gIFtOb2RlLkVMRU1FTlRfTk9ERSwgbWF0Y2hTcGFjaW5nXSxcbiAgW05vZGUuRUxFTUVOVF9OT0RFLCBtYXRjaEF0dHJpYnV0b3JdLFxuICBbTm9kZS5FTEVNRU5UX05PREUsIG1hdGNoU3R5bGVzXSxcbiAgWydsaScsIG1hdGNoSW5kZW50XSxcbiAgWydiJywgbWF0Y2hBbGlhcy5iaW5kKG1hdGNoQWxpYXMsICdib2xkJyldLFxuICBbJ2knLCBtYXRjaEFsaWFzLmJpbmQobWF0Y2hBbGlhcywgJ2l0YWxpYycpXSxcbiAgWydzdHlsZScsIG1hdGNoSWdub3JlXVxuXTtcblxuY29uc3QgQVRUUklCVVRFX0FUVFJJQlVUT1JTID0gW1xuICBBbGlnbkF0dHJpYnV0ZSxcbiAgRGlyZWN0aW9uQXR0cmlidXRlXG5dLnJlZHVjZShmdW5jdGlvbihtZW1vLCBhdHRyKSB7XG4gIG1lbW9bYXR0ci5rZXlOYW1lXSA9IGF0dHI7XG4gIHJldHVybiBtZW1vO1xufSwge30pO1xuXG5jb25zdCBTVFlMRV9BVFRSSUJVVE9SUyA9IFtcbiAgQWxpZ25TdHlsZSxcbiAgQmFja2dyb3VuZFN0eWxlLFxuICBDb2xvclN0eWxlLFxuICBEaXJlY3Rpb25TdHlsZSxcbiAgRm9udFN0eWxlLFxuICBTaXplU3R5bGVcbl0ucmVkdWNlKGZ1bmN0aW9uKG1lbW8sIGF0dHIpIHtcbiAgbWVtb1thdHRyLmtleU5hbWVdID0gYXR0cjtcbiAgcmV0dXJuIG1lbW87XG59LCB7fSk7XG5cblxuY2xhc3MgQ2xpcGJvYXJkIGV4dGVuZHMgTW9kdWxlIHtcbiAgY29uc3RydWN0b3IocXVpbGwsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihxdWlsbCwgb3B0aW9ucyk7XG4gICAgdGhpcy5xdWlsbC5yb290LmFkZEV2ZW50TGlzdGVuZXIoJ3Bhc3RlJywgdGhpcy5vblBhc3RlLmJpbmQodGhpcykpO1xuICAgIHRoaXMuY29udGFpbmVyID0gdGhpcy5xdWlsbC5hZGRDb250YWluZXIoJ3FsLWNsaXBib2FyZCcpO1xuICAgIHRoaXMuY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJywgdHJ1ZSk7XG4gICAgdGhpcy5jb250YWluZXIuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsIC0xKTtcbiAgICB0aGlzLm1hdGNoZXJzID0gW107XG4gICAgQ0xJUEJPQVJEX0NPTkZJRy5jb25jYXQodGhpcy5vcHRpb25zLm1hdGNoZXJzKS5mb3JFYWNoKChbc2VsZWN0b3IsIG1hdGNoZXJdKSA9PiB7XG4gICAgICBpZiAoIW9wdGlvbnMubWF0Y2hWaXN1YWwgJiYgbWF0Y2hlciA9PT0gbWF0Y2hTcGFjaW5nKSByZXR1cm47XG4gICAgICB0aGlzLmFkZE1hdGNoZXIoc2VsZWN0b3IsIG1hdGNoZXIpO1xuICAgIH0pO1xuICB9XG5cbiAgYWRkTWF0Y2hlcihzZWxlY3RvciwgbWF0Y2hlcikge1xuICAgIHRoaXMubWF0Y2hlcnMucHVzaChbc2VsZWN0b3IsIG1hdGNoZXJdKTtcbiAgfVxuXG4gIGNvbnZlcnQoaHRtbCkge1xuICAgIGlmICh0eXBlb2YgaHRtbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9IGh0bWwucmVwbGFjZSgvXFw+XFxyP1xcbiArXFw8L2csICc+PCcpOyAvLyBSZW1vdmUgc3BhY2VzIGJldHdlZW4gdGFnc1xuICAgICAgcmV0dXJuIHRoaXMuY29udmVydCgpO1xuICAgIH1cbiAgICBjb25zdCBmb3JtYXRzID0gdGhpcy5xdWlsbC5nZXRGb3JtYXQodGhpcy5xdWlsbC5zZWxlY3Rpb24uc2F2ZWRSYW5nZS5pbmRleCk7XG4gICAgaWYgKGZvcm1hdHNbQ29kZUJsb2NrLmJsb3ROYW1lXSkge1xuICAgICAgY29uc3QgdGV4dCA9IHRoaXMuY29udGFpbmVyLmlubmVyVGV4dDtcbiAgICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuICAgICAgcmV0dXJuIG5ldyBEZWx0YSgpLmluc2VydCh0ZXh0LCB7IFtDb2RlQmxvY2suYmxvdE5hbWVdOiBmb3JtYXRzW0NvZGVCbG9jay5ibG90TmFtZV0gfSk7XG4gICAgfVxuICAgIGxldCBbZWxlbWVudE1hdGNoZXJzLCB0ZXh0TWF0Y2hlcnNdID0gdGhpcy5wcmVwYXJlTWF0Y2hpbmcoKTtcbiAgICBsZXQgZGVsdGEgPSB0cmF2ZXJzZSh0aGlzLmNvbnRhaW5lciwgZWxlbWVudE1hdGNoZXJzLCB0ZXh0TWF0Y2hlcnMpO1xuICAgIC8vIFJlbW92ZSB0cmFpbGluZyBuZXdsaW5lXG4gICAgaWYgKGRlbHRhRW5kc1dpdGgoZGVsdGEsICdcXG4nKSAmJiBkZWx0YS5vcHNbZGVsdGEub3BzLmxlbmd0aCAtIDFdLmF0dHJpYnV0ZXMgPT0gbnVsbCkge1xuICAgICAgZGVsdGEgPSBkZWx0YS5jb21wb3NlKG5ldyBEZWx0YSgpLnJldGFpbihkZWx0YS5sZW5ndGgoKSAtIDEpLmRlbGV0ZSgxKSk7XG4gICAgfVxuICAgIGRlYnVnLmxvZygnY29udmVydCcsIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCwgZGVsdGEpO1xuICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuICAgIHJldHVybiBkZWx0YTtcbiAgfVxuXG4gIGRhbmdlcm91c2x5UGFzdGVIVE1MKGluZGV4LCBodG1sLCBzb3VyY2UgPSBRdWlsbC5zb3VyY2VzLkFQSSkge1xuICAgIGlmICh0eXBlb2YgaW5kZXggPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLnF1aWxsLnNldENvbnRlbnRzKHRoaXMuY29udmVydChpbmRleCksIGh0bWwpO1xuICAgICAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24oMCwgUXVpbGwuc291cmNlcy5TSUxFTlQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcGFzdGUgPSB0aGlzLmNvbnZlcnQoaHRtbCk7XG4gICAgICB0aGlzLnF1aWxsLnVwZGF0ZUNvbnRlbnRzKG5ldyBEZWx0YSgpLnJldGFpbihpbmRleCkuY29uY2F0KHBhc3RlKSwgc291cmNlKTtcbiAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKGluZGV4ICsgcGFzdGUubGVuZ3RoKCksIFF1aWxsLnNvdXJjZXMuU0lMRU5UKTtcbiAgICB9XG4gIH1cblxuICBvblBhc3RlKGUpIHtcbiAgICBpZiAoZS5kZWZhdWx0UHJldmVudGVkIHx8ICF0aGlzLnF1aWxsLmlzRW5hYmxlZCgpKSByZXR1cm47XG4gICAgbGV0IHJhbmdlID0gdGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24oKTtcbiAgICBsZXQgZGVsdGEgPSBuZXcgRGVsdGEoKS5yZXRhaW4ocmFuZ2UuaW5kZXgpO1xuICAgIGxldCBzY3JvbGxUb3AgPSB0aGlzLnF1aWxsLnNjcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxUb3A7XG4gICAgdGhpcy5jb250YWluZXIuZm9jdXMoKTtcbiAgICB0aGlzLnF1aWxsLnNlbGVjdGlvbi51cGRhdGUoUXVpbGwuc291cmNlcy5TSUxFTlQpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZGVsdGEgPSBkZWx0YS5jb25jYXQodGhpcy5jb252ZXJ0KCkpLmRlbGV0ZShyYW5nZS5sZW5ndGgpO1xuICAgICAgdGhpcy5xdWlsbC51cGRhdGVDb250ZW50cyhkZWx0YSwgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgIC8vIHJhbmdlLmxlbmd0aCBjb250cmlidXRlcyB0byBkZWx0YS5sZW5ndGgoKVxuICAgICAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24oZGVsdGEubGVuZ3RoKCkgLSByYW5nZS5sZW5ndGgsIFF1aWxsLnNvdXJjZXMuU0lMRU5UKTtcbiAgICAgIHRoaXMucXVpbGwuc2Nyb2xsaW5nQ29udGFpbmVyLnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgIHRoaXMucXVpbGwuZm9jdXMoKTtcbiAgICB9LCAxKTtcbiAgfVxuXG4gIHByZXBhcmVNYXRjaGluZygpIHtcbiAgICBsZXQgZWxlbWVudE1hdGNoZXJzID0gW10sIHRleHRNYXRjaGVycyA9IFtdO1xuICAgIHRoaXMubWF0Y2hlcnMuZm9yRWFjaCgocGFpcikgPT4ge1xuICAgICAgbGV0IFtzZWxlY3RvciwgbWF0Y2hlcl0gPSBwYWlyO1xuICAgICAgc3dpdGNoIChzZWxlY3Rvcikge1xuICAgICAgICBjYXNlIE5vZGUuVEVYVF9OT0RFOlxuICAgICAgICAgIHRleHRNYXRjaGVycy5wdXNoKG1hdGNoZXIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE5vZGUuRUxFTUVOVF9OT0RFOlxuICAgICAgICAgIGVsZW1lbnRNYXRjaGVycy5wdXNoKG1hdGNoZXIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIFtdLmZvckVhY2guY2FsbCh0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSwgKG5vZGUpID0+IHtcbiAgICAgICAgICAgIC8vIFRPRE8gdXNlIHdlYWttYXBcbiAgICAgICAgICAgIG5vZGVbRE9NX0tFWV0gPSBub2RlW0RPTV9LRVldIHx8IFtdO1xuICAgICAgICAgICAgbm9kZVtET01fS0VZXS5wdXNoKG1hdGNoZXIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBbZWxlbWVudE1hdGNoZXJzLCB0ZXh0TWF0Y2hlcnNdO1xuICB9XG59XG5DbGlwYm9hcmQuREVGQVVMVFMgPSB7XG4gIG1hdGNoZXJzOiBbXSxcbiAgbWF0Y2hWaXN1YWw6IHRydWVcbn07XG5cblxuZnVuY3Rpb24gYXBwbHlGb3JtYXQoZGVsdGEsIGZvcm1hdCwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBmb3JtYXQgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGZvcm1hdCkucmVkdWNlKGZ1bmN0aW9uKGRlbHRhLCBrZXkpIHtcbiAgICAgIHJldHVybiBhcHBseUZvcm1hdChkZWx0YSwga2V5LCBmb3JtYXRba2V5XSk7XG4gICAgfSwgZGVsdGEpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBkZWx0YS5yZWR1Y2UoZnVuY3Rpb24oZGVsdGEsIG9wKSB7XG4gICAgICBpZiAob3AuYXR0cmlidXRlcyAmJiBvcC5hdHRyaWJ1dGVzW2Zvcm1hdF0pIHtcbiAgICAgICAgcmV0dXJuIGRlbHRhLnB1c2gob3ApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlbHRhLmluc2VydChvcC5pbnNlcnQsIGV4dGVuZCh7fSwge1tmb3JtYXRdOiB2YWx1ZX0sIG9wLmF0dHJpYnV0ZXMpKTtcbiAgICAgIH1cbiAgICB9LCBuZXcgRGVsdGEoKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcHV0ZVN0eWxlKG5vZGUpIHtcbiAgaWYgKG5vZGUubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFKSByZXR1cm4ge307XG4gIGNvbnN0IERPTV9LRVkgPSAnX19xbC1jb21wdXRlZC1zdHlsZSc7XG4gIHJldHVybiBub2RlW0RPTV9LRVldIHx8IChub2RlW0RPTV9LRVldID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSkpO1xufVxuXG5mdW5jdGlvbiBkZWx0YUVuZHNXaXRoKGRlbHRhLCB0ZXh0KSB7XG4gIGxldCBlbmRUZXh0ID0gXCJcIjtcbiAgZm9yIChsZXQgaSA9IGRlbHRhLm9wcy5sZW5ndGggLSAxOyBpID49IDAgJiYgZW5kVGV4dC5sZW5ndGggPCB0ZXh0Lmxlbmd0aDsgLS1pKSB7XG4gICAgbGV0IG9wICA9IGRlbHRhLm9wc1tpXTtcbiAgICBpZiAodHlwZW9mIG9wLmluc2VydCAhPT0gJ3N0cmluZycpIGJyZWFrO1xuICAgIGVuZFRleHQgPSBvcC5pbnNlcnQgKyBlbmRUZXh0O1xuICB9XG4gIHJldHVybiBlbmRUZXh0LnNsaWNlKC0xKnRleHQubGVuZ3RoKSA9PT0gdGV4dDtcbn1cblxuZnVuY3Rpb24gaXNMaW5lKG5vZGUpIHtcbiAgaWYgKG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggPT09IDApIHJldHVybiBmYWxzZTsgICAvLyBFeGNsdWRlIGVtYmVkIGJsb2Nrc1xuICBsZXQgc3R5bGUgPSBjb21wdXRlU3R5bGUobm9kZSk7XG4gIHJldHVybiBbJ2Jsb2NrJywgJ2xpc3QtaXRlbSddLmluZGV4T2Yoc3R5bGUuZGlzcGxheSkgPiAtMTtcbn1cblxuZnVuY3Rpb24gdHJhdmVyc2Uobm9kZSwgZWxlbWVudE1hdGNoZXJzLCB0ZXh0TWF0Y2hlcnMpIHsgIC8vIFBvc3Qtb3JkZXJcbiAgaWYgKG5vZGUubm9kZVR5cGUgPT09IG5vZGUuVEVYVF9OT0RFKSB7XG4gICAgcmV0dXJuIHRleHRNYXRjaGVycy5yZWR1Y2UoZnVuY3Rpb24oZGVsdGEsIG1hdGNoZXIpIHtcbiAgICAgIHJldHVybiBtYXRjaGVyKG5vZGUsIGRlbHRhKTtcbiAgICB9LCBuZXcgRGVsdGEoKSk7XG4gIH0gZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PT0gbm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICByZXR1cm4gW10ucmVkdWNlLmNhbGwobm9kZS5jaGlsZE5vZGVzIHx8IFtdLCAoZGVsdGEsIGNoaWxkTm9kZSkgPT4ge1xuICAgICAgbGV0IGNoaWxkcmVuRGVsdGEgPSB0cmF2ZXJzZShjaGlsZE5vZGUsIGVsZW1lbnRNYXRjaGVycywgdGV4dE1hdGNoZXJzKTtcbiAgICAgIGlmIChjaGlsZE5vZGUubm9kZVR5cGUgPT09IG5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgIGNoaWxkcmVuRGVsdGEgPSBlbGVtZW50TWF0Y2hlcnMucmVkdWNlKGZ1bmN0aW9uKGNoaWxkcmVuRGVsdGEsIG1hdGNoZXIpIHtcbiAgICAgICAgICByZXR1cm4gbWF0Y2hlcihjaGlsZE5vZGUsIGNoaWxkcmVuRGVsdGEpO1xuICAgICAgICB9LCBjaGlsZHJlbkRlbHRhKTtcbiAgICAgICAgY2hpbGRyZW5EZWx0YSA9IChjaGlsZE5vZGVbRE9NX0tFWV0gfHwgW10pLnJlZHVjZShmdW5jdGlvbihjaGlsZHJlbkRlbHRhLCBtYXRjaGVyKSB7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoZXIoY2hpbGROb2RlLCBjaGlsZHJlbkRlbHRhKTtcbiAgICAgICAgfSwgY2hpbGRyZW5EZWx0YSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVsdGEuY29uY2F0KGNoaWxkcmVuRGVsdGEpO1xuICAgIH0sIG5ldyBEZWx0YSgpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IERlbHRhKCk7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBtYXRjaEFsaWFzKGZvcm1hdCwgbm9kZSwgZGVsdGEpIHtcbiAgcmV0dXJuIGFwcGx5Rm9ybWF0KGRlbHRhLCBmb3JtYXQsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBtYXRjaEF0dHJpYnV0b3Iobm9kZSwgZGVsdGEpIHtcbiAgbGV0IGF0dHJpYnV0ZXMgPSBQYXJjaG1lbnQuQXR0cmlidXRvci5BdHRyaWJ1dGUua2V5cyhub2RlKTtcbiAgbGV0IGNsYXNzZXMgPSBQYXJjaG1lbnQuQXR0cmlidXRvci5DbGFzcy5rZXlzKG5vZGUpO1xuICBsZXQgc3R5bGVzID0gUGFyY2htZW50LkF0dHJpYnV0b3IuU3R5bGUua2V5cyhub2RlKTtcbiAgbGV0IGZvcm1hdHMgPSB7fTtcbiAgYXR0cmlidXRlcy5jb25jYXQoY2xhc3NlcykuY29uY2F0KHN0eWxlcykuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgIGxldCBhdHRyID0gUGFyY2htZW50LnF1ZXJ5KG5hbWUsIFBhcmNobWVudC5TY29wZS5BVFRSSUJVVEUpO1xuICAgIGlmIChhdHRyICE9IG51bGwpIHtcbiAgICAgIGZvcm1hdHNbYXR0ci5hdHRyTmFtZV0gPSBhdHRyLnZhbHVlKG5vZGUpO1xuICAgICAgaWYgKGZvcm1hdHNbYXR0ci5hdHRyTmFtZV0pIHJldHVybjtcbiAgICB9XG4gICAgYXR0ciA9IEFUVFJJQlVURV9BVFRSSUJVVE9SU1tuYW1lXTtcbiAgICBpZiAoYXR0ciAhPSBudWxsICYmIChhdHRyLmF0dHJOYW1lID09PSBuYW1lIHx8IGF0dHIua2V5TmFtZSA9PT0gbmFtZSkpIHtcbiAgICAgIGZvcm1hdHNbYXR0ci5hdHRyTmFtZV0gPSBhdHRyLnZhbHVlKG5vZGUpIHx8IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgYXR0ciA9IFNUWUxFX0FUVFJJQlVUT1JTW25hbWVdXG4gICAgaWYgKGF0dHIgIT0gbnVsbCAmJiAoYXR0ci5hdHRyTmFtZSA9PT0gbmFtZSB8fCBhdHRyLmtleU5hbWUgPT09IG5hbWUpKSB7XG4gICAgICBhdHRyID0gU1RZTEVfQVRUUklCVVRPUlNbbmFtZV07XG4gICAgICBmb3JtYXRzW2F0dHIuYXR0ck5hbWVdID0gYXR0ci52YWx1ZShub2RlKSB8fCB1bmRlZmluZWQ7XG4gICAgfVxuICB9KTtcbiAgaWYgKE9iamVjdC5rZXlzKGZvcm1hdHMpLmxlbmd0aCA+IDApIHtcbiAgICBkZWx0YSA9IGFwcGx5Rm9ybWF0KGRlbHRhLCBmb3JtYXRzKTtcbiAgfVxuICByZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIG1hdGNoQmxvdChub2RlLCBkZWx0YSkge1xuICBsZXQgbWF0Y2ggPSBQYXJjaG1lbnQucXVlcnkobm9kZSk7XG4gIGlmIChtYXRjaCA9PSBudWxsKSByZXR1cm4gZGVsdGE7XG4gIGlmIChtYXRjaC5wcm90b3R5cGUgaW5zdGFuY2VvZiBQYXJjaG1lbnQuRW1iZWQpIHtcbiAgICBsZXQgZW1iZWQgPSB7fTtcbiAgICBsZXQgdmFsdWUgPSBtYXRjaC52YWx1ZShub2RlKTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgZW1iZWRbbWF0Y2guYmxvdE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWx0YSA9IG5ldyBEZWx0YSgpLmluc2VydChlbWJlZCwgbWF0Y2guZm9ybWF0cyhub2RlKSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBtYXRjaC5mb3JtYXRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZGVsdGEgPSBhcHBseUZvcm1hdChkZWx0YSwgbWF0Y2guYmxvdE5hbWUsIG1hdGNoLmZvcm1hdHMobm9kZSkpO1xuICB9XG4gIHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hCcmVhayhub2RlLCBkZWx0YSkge1xuICBpZiAoIWRlbHRhRW5kc1dpdGgoZGVsdGEsICdcXG4nKSkge1xuICAgIGRlbHRhLmluc2VydCgnXFxuJyk7XG4gIH1cbiAgcmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBtYXRjaElnbm9yZSgpIHtcbiAgcmV0dXJuIG5ldyBEZWx0YSgpO1xufVxuXG5mdW5jdGlvbiBtYXRjaEluZGVudChub2RlLCBkZWx0YSkge1xuICBsZXQgbWF0Y2ggPSBQYXJjaG1lbnQucXVlcnkobm9kZSk7XG4gIGlmIChtYXRjaCA9PSBudWxsIHx8IG1hdGNoLmJsb3ROYW1lICE9PSAnbGlzdC1pdGVtJyB8fCAhZGVsdGFFbmRzV2l0aChkZWx0YSwgJ1xcbicpKSB7XG4gICAgcmV0dXJuIGRlbHRhO1xuICB9XG4gIGxldCBpbmRlbnQgPSAtMSwgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlO1xuICB3aGlsZSAoIXBhcmVudC5jbGFzc0xpc3QuY29udGFpbnMoJ3FsLWNsaXBib2FyZCcpKSB7XG4gICAgaWYgKChQYXJjaG1lbnQucXVlcnkocGFyZW50KSB8fCB7fSkuYmxvdE5hbWUgPT09ICdsaXN0Jykge1xuICAgICAgaW5kZW50ICs9IDE7XG4gICAgfVxuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICB9XG4gIGlmIChpbmRlbnQgPD0gMCkgcmV0dXJuIGRlbHRhO1xuICByZXR1cm4gZGVsdGEuY29tcG9zZShuZXcgRGVsdGEoKS5yZXRhaW4oZGVsdGEubGVuZ3RoKCkgLSAxKS5yZXRhaW4oMSwgeyBpbmRlbnQ6IGluZGVudH0pKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hOZXdsaW5lKG5vZGUsIGRlbHRhKSB7XG4gIGlmICghZGVsdGFFbmRzV2l0aChkZWx0YSwgJ1xcbicpKSB7XG4gICAgaWYgKGlzTGluZShub2RlKSB8fCAoZGVsdGEubGVuZ3RoKCkgPiAwICYmIG5vZGUubmV4dFNpYmxpbmcgJiYgaXNMaW5lKG5vZGUubmV4dFNpYmxpbmcpKSkge1xuICAgICAgZGVsdGEuaW5zZXJ0KCdcXG4nKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBtYXRjaFNwYWNpbmcobm9kZSwgZGVsdGEpIHtcbiAgaWYgKGlzTGluZShub2RlKSAmJiBub2RlLm5leHRFbGVtZW50U2libGluZyAhPSBudWxsICYmICFkZWx0YUVuZHNXaXRoKGRlbHRhLCAnXFxuXFxuJykpIHtcbiAgICBsZXQgbm9kZUhlaWdodCA9IG5vZGUub2Zmc2V0SGVpZ2h0ICsgcGFyc2VGbG9hdChjb21wdXRlU3R5bGUobm9kZSkubWFyZ2luVG9wKSArIHBhcnNlRmxvYXQoY29tcHV0ZVN0eWxlKG5vZGUpLm1hcmdpbkJvdHRvbSk7XG4gICAgaWYgKG5vZGUubmV4dEVsZW1lbnRTaWJsaW5nLm9mZnNldFRvcCA+IG5vZGUub2Zmc2V0VG9wICsgbm9kZUhlaWdodCoxLjUpIHtcbiAgICAgIGRlbHRhLmluc2VydCgnXFxuJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hTdHlsZXMobm9kZSwgZGVsdGEpIHtcbiAgbGV0IGZvcm1hdHMgPSB7fTtcbiAgbGV0IHN0eWxlID0gbm9kZS5zdHlsZSB8fCB7fTtcbiAgaWYgKHN0eWxlLmZvbnRTdHlsZSAmJiBjb21wdXRlU3R5bGUobm9kZSkuZm9udFN0eWxlID09PSAnaXRhbGljJykge1xuICAgIGZvcm1hdHMuaXRhbGljID0gdHJ1ZTtcbiAgfVxuICBpZiAoc3R5bGUuZm9udFdlaWdodCAmJiAoY29tcHV0ZVN0eWxlKG5vZGUpLmZvbnRXZWlnaHQuc3RhcnRzV2l0aCgnYm9sZCcpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludChjb21wdXRlU3R5bGUobm9kZSkuZm9udFdlaWdodCkgPj0gNzAwKSkge1xuICAgIGZvcm1hdHMuYm9sZCA9IHRydWU7XG4gIH1cbiAgaWYgKE9iamVjdC5rZXlzKGZvcm1hdHMpLmxlbmd0aCA+IDApIHtcbiAgICBkZWx0YSA9IGFwcGx5Rm9ybWF0KGRlbHRhLCBmb3JtYXRzKTtcbiAgfVxuICBpZiAocGFyc2VGbG9hdChzdHlsZS50ZXh0SW5kZW50IHx8IDApID4gMCkgeyAgLy8gQ291bGQgYmUgMC41aW5cbiAgICBkZWx0YSA9IG5ldyBEZWx0YSgpLmluc2VydCgnXFx0JykuY29uY2F0KGRlbHRhKTtcbiAgfVxuICByZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIG1hdGNoVGV4dChub2RlLCBkZWx0YSkge1xuICBsZXQgdGV4dCA9IG5vZGUuZGF0YTtcbiAgLy8gV29yZCByZXByZXNlbnRzIGVtcHR5IGxpbmUgd2l0aCA8bzpwPiZuYnNwOzwvbzpwPlxuICBpZiAobm9kZS5wYXJlbnROb2RlLnRhZ05hbWUgPT09ICdPOlAnKSB7XG4gICAgcmV0dXJuIGRlbHRhLmluc2VydCh0ZXh0LnRyaW0oKSk7XG4gIH1cbiAgaWYgKHRleHQudHJpbSgpLmxlbmd0aCA9PT0gMCAmJiBub2RlLnBhcmVudE5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdxbC1jbGlwYm9hcmQnKSkge1xuICAgIHJldHVybiBkZWx0YTtcbiAgfVxuICBpZiAoIWNvbXB1dGVTdHlsZShub2RlLnBhcmVudE5vZGUpLndoaXRlU3BhY2Uuc3RhcnRzV2l0aCgncHJlJykpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1zdHlsZVxuICAgIGxldCByZXBsYWNlciA9IGZ1bmN0aW9uKGNvbGxhcHNlLCBtYXRjaCkge1xuICAgICAgbWF0Y2ggPSBtYXRjaC5yZXBsYWNlKC9bXlxcdTAwYTBdL2csICcnKTsgICAgLy8gXFx1MDBhMCBpcyBuYnNwO1xuICAgICAgcmV0dXJuIG1hdGNoLmxlbmd0aCA8IDEgJiYgY29sbGFwc2UgPyAnICcgOiBtYXRjaDtcbiAgICB9O1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcclxcbi9nLCAnICcpLnJlcGxhY2UoL1xcbi9nLCAnICcpO1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcc1xccysvZywgcmVwbGFjZXIuYmluZChyZXBsYWNlciwgdHJ1ZSkpOyAgLy8gY29sbGFwc2Ugd2hpdGVzcGFjZVxuICAgIGlmICgobm9kZS5wcmV2aW91c1NpYmxpbmcgPT0gbnVsbCAmJiBpc0xpbmUobm9kZS5wYXJlbnROb2RlKSkgfHxcbiAgICAgICAgKG5vZGUucHJldmlvdXNTaWJsaW5nICE9IG51bGwgJiYgaXNMaW5lKG5vZGUucHJldmlvdXNTaWJsaW5nKSkpIHtcbiAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL15cXHMrLywgcmVwbGFjZXIuYmluZChyZXBsYWNlciwgZmFsc2UpKTtcbiAgICB9XG4gICAgaWYgKChub2RlLm5leHRTaWJsaW5nID09IG51bGwgJiYgaXNMaW5lKG5vZGUucGFyZW50Tm9kZSkpIHx8XG4gICAgICAgIChub2RlLm5leHRTaWJsaW5nICE9IG51bGwgJiYgaXNMaW5lKG5vZGUubmV4dFNpYmxpbmcpKSkge1xuICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxzKyQvLCByZXBsYWNlci5iaW5kKHJlcGxhY2VyLCBmYWxzZSkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVsdGEuaW5zZXJ0KHRleHQpO1xufVxuXG5cbmV4cG9ydCB7IENsaXBib2FyZCBhcyBkZWZhdWx0LCBtYXRjaEF0dHJpYnV0b3IsIG1hdGNoQmxvdCwgbWF0Y2hOZXdsaW5lLCBtYXRjaFNwYWNpbmcsIG1hdGNoVGV4dCB9O1xuIiwiaW1wb3J0IFBhcmNobWVudCBmcm9tICdwYXJjaG1lbnQnO1xuaW1wb3J0IFF1aWxsIGZyb20gJy4uL2NvcmUvcXVpbGwnO1xuaW1wb3J0IE1vZHVsZSBmcm9tICcuLi9jb3JlL21vZHVsZSc7XG5cblxuY2xhc3MgSGlzdG9yeSBleHRlbmRzIE1vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKHF1aWxsLCBvcHRpb25zKSB7XG4gICAgc3VwZXIocXVpbGwsIG9wdGlvbnMpO1xuICAgIHRoaXMubGFzdFJlY29yZGVkID0gMDtcbiAgICB0aGlzLmlnbm9yZUNoYW5nZSA9IGZhbHNlO1xuICAgIHRoaXMuY2xlYXIoKTtcbiAgICB0aGlzLnF1aWxsLm9uKFF1aWxsLmV2ZW50cy5FRElUT1JfQ0hBTkdFLCAoZXZlbnROYW1lLCBkZWx0YSwgb2xkRGVsdGEsIHNvdXJjZSkgPT4ge1xuICAgICAgaWYgKGV2ZW50TmFtZSAhPT0gUXVpbGwuZXZlbnRzLlRFWFRfQ0hBTkdFIHx8IHRoaXMuaWdub3JlQ2hhbmdlKSByZXR1cm47XG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy51c2VyT25seSB8fCBzb3VyY2UgPT09IFF1aWxsLnNvdXJjZXMuVVNFUikge1xuICAgICAgICB0aGlzLnJlY29yZChkZWx0YSwgb2xkRGVsdGEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0oZGVsdGEpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMucXVpbGwua2V5Ym9hcmQuYWRkQmluZGluZyh7IGtleTogJ1onLCBzaG9ydEtleTogdHJ1ZSB9LCB0aGlzLnVuZG8uYmluZCh0aGlzKSk7XG4gICAgdGhpcy5xdWlsbC5rZXlib2FyZC5hZGRCaW5kaW5nKHsga2V5OiAnWicsIHNob3J0S2V5OiB0cnVlLCBzaGlmdEtleTogdHJ1ZSB9LCB0aGlzLnJlZG8uYmluZCh0aGlzKSk7XG4gICAgaWYgKC9XaW4vaS50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSkpIHtcbiAgICAgIHRoaXMucXVpbGwua2V5Ym9hcmQuYWRkQmluZGluZyh7IGtleTogJ1knLCBzaG9ydEtleTogdHJ1ZSB9LCB0aGlzLnJlZG8uYmluZCh0aGlzKSk7XG4gICAgfVxuICB9XG5cbiAgY2hhbmdlKHNvdXJjZSwgZGVzdCkge1xuICAgIGlmICh0aGlzLnN0YWNrW3NvdXJjZV0ubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgbGV0IGRlbHRhID0gdGhpcy5zdGFja1tzb3VyY2VdLnBvcCgpO1xuICAgIHRoaXMuc3RhY2tbZGVzdF0ucHVzaChkZWx0YSk7XG4gICAgdGhpcy5sYXN0UmVjb3JkZWQgPSAwO1xuICAgIHRoaXMuaWdub3JlQ2hhbmdlID0gdHJ1ZTtcbiAgICB0aGlzLnF1aWxsLnVwZGF0ZUNvbnRlbnRzKGRlbHRhW3NvdXJjZV0sIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gICAgdGhpcy5pZ25vcmVDaGFuZ2UgPSBmYWxzZTtcbiAgICBsZXQgaW5kZXggPSBnZXRMYXN0Q2hhbmdlSW5kZXgoZGVsdGFbc291cmNlXSk7XG4gICAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24oaW5kZXgpO1xuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5zdGFjayA9IHsgdW5kbzogW10sIHJlZG86IFtdIH07XG4gIH1cblxuICBjdXRvZmYoKSB7XG4gICAgdGhpcy5sYXN0UmVjb3JkZWQgPSAwO1xuICB9XG5cbiAgcmVjb3JkKGNoYW5nZURlbHRhLCBvbGREZWx0YSkge1xuICAgIGlmIChjaGFuZ2VEZWx0YS5vcHMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdGhpcy5zdGFjay5yZWRvID0gW107XG4gICAgbGV0IHVuZG9EZWx0YSA9IHRoaXMucXVpbGwuZ2V0Q29udGVudHMoKS5kaWZmKG9sZERlbHRhKTtcbiAgICBsZXQgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICBpZiAodGhpcy5sYXN0UmVjb3JkZWQgKyB0aGlzLm9wdGlvbnMuZGVsYXkgPiB0aW1lc3RhbXAgJiYgdGhpcy5zdGFjay51bmRvLmxlbmd0aCA+IDApIHtcbiAgICAgIGxldCBkZWx0YSA9IHRoaXMuc3RhY2sudW5kby5wb3AoKTtcbiAgICAgIHVuZG9EZWx0YSA9IHVuZG9EZWx0YS5jb21wb3NlKGRlbHRhLnVuZG8pO1xuICAgICAgY2hhbmdlRGVsdGEgPSBkZWx0YS5yZWRvLmNvbXBvc2UoY2hhbmdlRGVsdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxhc3RSZWNvcmRlZCA9IHRpbWVzdGFtcDtcbiAgICB9XG4gICAgdGhpcy5zdGFjay51bmRvLnB1c2goe1xuICAgICAgcmVkbzogY2hhbmdlRGVsdGEsXG4gICAgICB1bmRvOiB1bmRvRGVsdGFcbiAgICB9KTtcbiAgICBpZiAodGhpcy5zdGFjay51bmRvLmxlbmd0aCA+IHRoaXMub3B0aW9ucy5tYXhTdGFjaykge1xuICAgICAgdGhpcy5zdGFjay51bmRvLnNoaWZ0KCk7XG4gICAgfVxuICB9XG5cbiAgcmVkbygpIHtcbiAgICB0aGlzLmNoYW5nZSgncmVkbycsICd1bmRvJyk7XG4gIH1cblxuICB0cmFuc2Zvcm0oZGVsdGEpIHtcbiAgICB0aGlzLnN0YWNrLnVuZG8uZm9yRWFjaChmdW5jdGlvbihjaGFuZ2UpIHtcbiAgICAgIGNoYW5nZS51bmRvID0gZGVsdGEudHJhbnNmb3JtKGNoYW5nZS51bmRvLCB0cnVlKTtcbiAgICAgIGNoYW5nZS5yZWRvID0gZGVsdGEudHJhbnNmb3JtKGNoYW5nZS5yZWRvLCB0cnVlKTtcbiAgICB9KTtcbiAgICB0aGlzLnN0YWNrLnJlZG8uZm9yRWFjaChmdW5jdGlvbihjaGFuZ2UpIHtcbiAgICAgIGNoYW5nZS51bmRvID0gZGVsdGEudHJhbnNmb3JtKGNoYW5nZS51bmRvLCB0cnVlKTtcbiAgICAgIGNoYW5nZS5yZWRvID0gZGVsdGEudHJhbnNmb3JtKGNoYW5nZS5yZWRvLCB0cnVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHVuZG8oKSB7XG4gICAgdGhpcy5jaGFuZ2UoJ3VuZG8nLCAncmVkbycpO1xuICB9XG59XG5IaXN0b3J5LkRFRkFVTFRTID0ge1xuICBkZWxheTogMTAwMCxcbiAgbWF4U3RhY2s6IDEwMCxcbiAgdXNlck9ubHk6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBlbmRzV2l0aE5ld2xpbmVDaGFuZ2UoZGVsdGEpIHtcbiAgbGV0IGxhc3RPcCA9IGRlbHRhLm9wc1tkZWx0YS5vcHMubGVuZ3RoIC0gMV07XG4gIGlmIChsYXN0T3AgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICBpZiAobGFzdE9wLmluc2VydCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBsYXN0T3AuaW5zZXJ0ID09PSAnc3RyaW5nJyAmJiBsYXN0T3AuaW5zZXJ0LmVuZHNXaXRoKCdcXG4nKTtcbiAgfVxuICBpZiAobGFzdE9wLmF0dHJpYnV0ZXMgIT0gbnVsbCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhsYXN0T3AuYXR0cmlidXRlcykuc29tZShmdW5jdGlvbihhdHRyKSB7XG4gICAgICByZXR1cm4gUGFyY2htZW50LnF1ZXJ5KGF0dHIsIFBhcmNobWVudC5TY29wZS5CTE9DSykgIT0gbnVsbDtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldExhc3RDaGFuZ2VJbmRleChkZWx0YSkge1xuICBsZXQgZGVsZXRlTGVuZ3RoID0gZGVsdGEucmVkdWNlKGZ1bmN0aW9uKGxlbmd0aCwgb3ApIHtcbiAgICBsZW5ndGggKz0gKG9wLmRlbGV0ZSB8fCAwKTtcbiAgICByZXR1cm4gbGVuZ3RoO1xuICB9LCAwKTtcbiAgbGV0IGNoYW5nZUluZGV4ID0gZGVsdGEubGVuZ3RoKCkgLSBkZWxldGVMZW5ndGg7XG4gIGlmIChlbmRzV2l0aE5ld2xpbmVDaGFuZ2UoZGVsdGEpKSB7XG4gICAgY2hhbmdlSW5kZXggLT0gMTtcbiAgfVxuICByZXR1cm4gY2hhbmdlSW5kZXg7XG59XG5cblxuZXhwb3J0IHsgSGlzdG9yeSBhcyBkZWZhdWx0LCBnZXRMYXN0Q2hhbmdlSW5kZXggfTtcbiIsImltcG9ydCBjbG9uZSBmcm9tICdjbG9uZSc7XG5pbXBvcnQgZXF1YWwgZnJvbSAnZGVlcC1lcXVhbCc7XG5pbXBvcnQgZXh0ZW5kIGZyb20gJ2V4dGVuZCc7XG5pbXBvcnQgRGVsdGEgZnJvbSAncXVpbGwtZGVsdGEnO1xuaW1wb3J0IERlbHRhT3AgZnJvbSAncXVpbGwtZGVsdGEvbGliL29wJztcbmltcG9ydCBQYXJjaG1lbnQgZnJvbSAncGFyY2htZW50JztcbmltcG9ydCBRdWlsbCBmcm9tICcuLi9jb3JlL3F1aWxsJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi4vY29yZS9sb2dnZXInO1xuaW1wb3J0IE1vZHVsZSBmcm9tICcuLi9jb3JlL21vZHVsZSc7XG5cbmxldCBkZWJ1ZyA9IGxvZ2dlcigncXVpbGw6a2V5Ym9hcmQnKTtcblxuY29uc3QgU0hPUlRLRVkgPSAvTWFjL2kudGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pID8gJ21ldGFLZXknIDogJ2N0cmxLZXknO1xuXG5cbmNsYXNzIEtleWJvYXJkIGV4dGVuZHMgTW9kdWxlIHtcbiAgc3RhdGljIG1hdGNoKGV2dCwgYmluZGluZykge1xuICAgIGJpbmRpbmcgPSBub3JtYWxpemUoYmluZGluZyk7XG4gICAgaWYgKFsnYWx0S2V5JywgJ2N0cmxLZXknLCAnbWV0YUtleScsICdzaGlmdEtleSddLnNvbWUoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gKCEhYmluZGluZ1trZXldICE9PSBldnRba2V5XSAmJiBiaW5kaW5nW2tleV0gIT09IG51bGwpO1xuICAgIH0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBiaW5kaW5nLmtleSA9PT0gKGV2dC53aGljaCB8fCBldnQua2V5Q29kZSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihxdWlsbCwgb3B0aW9ucykge1xuICAgIHN1cGVyKHF1aWxsLCBvcHRpb25zKTtcbiAgICB0aGlzLmJpbmRpbmdzID0ge307XG4gICAgT2JqZWN0LmtleXModGhpcy5vcHRpb25zLmJpbmRpbmdzKS5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICBpZiAobmFtZSA9PT0gJ2xpc3QgYXV0b2ZpbGwnICYmXG4gICAgICAgICAgcXVpbGwuc2Nyb2xsLndoaXRlbGlzdCAhPSBudWxsICYmXG4gICAgICAgICAgIXF1aWxsLnNjcm9sbC53aGl0ZWxpc3RbJ2xpc3QnXSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmJpbmRpbmdzW25hbWVdKSB7XG4gICAgICAgIHRoaXMuYWRkQmluZGluZyh0aGlzLm9wdGlvbnMuYmluZGluZ3NbbmFtZV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuYWRkQmluZGluZyh7IGtleTogS2V5Ym9hcmQua2V5cy5FTlRFUiwgc2hpZnRLZXk6IG51bGwgfSwgaGFuZGxlRW50ZXIpO1xuICAgIHRoaXMuYWRkQmluZGluZyh7IGtleTogS2V5Ym9hcmQua2V5cy5FTlRFUiwgbWV0YUtleTogbnVsbCwgY3RybEtleTogbnVsbCwgYWx0S2V5OiBudWxsIH0sIGZ1bmN0aW9uKCkge30pO1xuICAgIGlmICgvRmlyZWZveC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcbiAgICAgIC8vIE5lZWQgdG8gaGFuZGxlIGRlbGV0ZSBhbmQgYmFja3NwYWNlIGZvciBGaXJlZm94IGluIHRoZSBnZW5lcmFsIGNhc2UgIzExNzFcbiAgICAgIHRoaXMuYWRkQmluZGluZyh7IGtleTogS2V5Ym9hcmQua2V5cy5CQUNLU1BBQ0UgfSwgeyBjb2xsYXBzZWQ6IHRydWUgfSwgaGFuZGxlQmFja3NwYWNlKTtcbiAgICAgIHRoaXMuYWRkQmluZGluZyh7IGtleTogS2V5Ym9hcmQua2V5cy5ERUxFVEUgfSwgeyBjb2xsYXBzZWQ6IHRydWUgfSwgaGFuZGxlRGVsZXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hZGRCaW5kaW5nKHsga2V5OiBLZXlib2FyZC5rZXlzLkJBQ0tTUEFDRSB9LCB7IGNvbGxhcHNlZDogdHJ1ZSwgcHJlZml4OiAvXi4/JC8gfSwgaGFuZGxlQmFja3NwYWNlKTtcbiAgICAgIHRoaXMuYWRkQmluZGluZyh7IGtleTogS2V5Ym9hcmQua2V5cy5ERUxFVEUgfSwgeyBjb2xsYXBzZWQ6IHRydWUsIHN1ZmZpeDogL14uPyQvIH0sIGhhbmRsZURlbGV0ZSk7XG4gICAgfVxuICAgIHRoaXMuYWRkQmluZGluZyh7IGtleTogS2V5Ym9hcmQua2V5cy5CQUNLU1BBQ0UgfSwgeyBjb2xsYXBzZWQ6IGZhbHNlIH0sIGhhbmRsZURlbGV0ZVJhbmdlKTtcbiAgICB0aGlzLmFkZEJpbmRpbmcoeyBrZXk6IEtleWJvYXJkLmtleXMuREVMRVRFIH0sIHsgY29sbGFwc2VkOiBmYWxzZSB9LCBoYW5kbGVEZWxldGVSYW5nZSk7XG4gICAgdGhpcy5hZGRCaW5kaW5nKHsga2V5OiBLZXlib2FyZC5rZXlzLkJBQ0tTUEFDRSwgYWx0S2V5OiBudWxsLCBjdHJsS2V5OiBudWxsLCBtZXRhS2V5OiBudWxsLCBzaGlmdEtleTogbnVsbCB9LFxuICAgICAgICAgICAgICAgICAgICB7IGNvbGxhcHNlZDogdHJ1ZSwgb2Zmc2V0OiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZUJhY2tzcGFjZSk7XG4gICAgdGhpcy5saXN0ZW4oKTtcbiAgfVxuXG4gIGFkZEJpbmRpbmcoa2V5LCBjb250ZXh0ID0ge30sIGhhbmRsZXIgPSB7fSkge1xuICAgIGxldCBiaW5kaW5nID0gbm9ybWFsaXplKGtleSk7XG4gICAgaWYgKGJpbmRpbmcgPT0gbnVsbCB8fCBiaW5kaW5nLmtleSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZGVidWcud2FybignQXR0ZW1wdGVkIHRvIGFkZCBpbnZhbGlkIGtleWJvYXJkIGJpbmRpbmcnLCBiaW5kaW5nKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb250ZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb250ZXh0ID0geyBoYW5kbGVyOiBjb250ZXh0IH07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaGFuZGxlciA9IHsgaGFuZGxlcjogaGFuZGxlciB9O1xuICAgIH1cbiAgICBiaW5kaW5nID0gZXh0ZW5kKGJpbmRpbmcsIGNvbnRleHQsIGhhbmRsZXIpO1xuICAgIHRoaXMuYmluZGluZ3NbYmluZGluZy5rZXldID0gdGhpcy5iaW5kaW5nc1tiaW5kaW5nLmtleV0gfHwgW107XG4gICAgdGhpcy5iaW5kaW5nc1tiaW5kaW5nLmtleV0ucHVzaChiaW5kaW5nKTtcbiAgfVxuXG4gIGxpc3RlbigpIHtcbiAgICB0aGlzLnF1aWxsLnJvb3QuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChldnQpID0+IHtcbiAgICAgIGlmIChldnQuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuO1xuICAgICAgbGV0IHdoaWNoID0gZXZ0LndoaWNoIHx8IGV2dC5rZXlDb2RlO1xuICAgICAgbGV0IGJpbmRpbmdzID0gKHRoaXMuYmluZGluZ3Nbd2hpY2hdIHx8IFtdKS5maWx0ZXIoZnVuY3Rpb24oYmluZGluZykge1xuICAgICAgICByZXR1cm4gS2V5Ym9hcmQubWF0Y2goZXZ0LCBiaW5kaW5nKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGJpbmRpbmdzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICAgbGV0IHJhbmdlID0gdGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgIGlmIChyYW5nZSA9PSBudWxsIHx8ICF0aGlzLnF1aWxsLmhhc0ZvY3VzKCkpIHJldHVybjtcbiAgICAgIGxldCBbbGluZSwgb2Zmc2V0XSA9IHRoaXMucXVpbGwuZ2V0TGluZShyYW5nZS5pbmRleCk7XG4gICAgICBsZXQgW2xlYWZTdGFydCwgb2Zmc2V0U3RhcnRdID0gdGhpcy5xdWlsbC5nZXRMZWFmKHJhbmdlLmluZGV4KTtcbiAgICAgIGxldCBbbGVhZkVuZCwgb2Zmc2V0RW5kXSA9IHJhbmdlLmxlbmd0aCA9PT0gMCA/IFtsZWFmU3RhcnQsIG9mZnNldFN0YXJ0XSA6IHRoaXMucXVpbGwuZ2V0TGVhZihyYW5nZS5pbmRleCArIHJhbmdlLmxlbmd0aCk7XG4gICAgICBsZXQgcHJlZml4VGV4dCA9IGxlYWZTdGFydCBpbnN0YW5jZW9mIFBhcmNobWVudC5UZXh0ID8gbGVhZlN0YXJ0LnZhbHVlKCkuc2xpY2UoMCwgb2Zmc2V0U3RhcnQpIDogJyc7XG4gICAgICBsZXQgc3VmZml4VGV4dCA9IGxlYWZFbmQgaW5zdGFuY2VvZiBQYXJjaG1lbnQuVGV4dCA/IGxlYWZFbmQudmFsdWUoKS5zbGljZShvZmZzZXRFbmQpIDogJyc7XG4gICAgICBsZXQgY3VyQ29udGV4dCA9IHtcbiAgICAgICAgY29sbGFwc2VkOiByYW5nZS5sZW5ndGggPT09IDAsXG4gICAgICAgIGVtcHR5OiByYW5nZS5sZW5ndGggPT09IDAgJiYgbGluZS5sZW5ndGgoKSA8PSAxLFxuICAgICAgICBmb3JtYXQ6IHRoaXMucXVpbGwuZ2V0Rm9ybWF0KHJhbmdlKSxcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgIHByZWZpeDogcHJlZml4VGV4dCxcbiAgICAgICAgc3VmZml4OiBzdWZmaXhUZXh0XG4gICAgICB9O1xuICAgICAgbGV0IHByZXZlbnRlZCA9IGJpbmRpbmdzLnNvbWUoKGJpbmRpbmcpID0+IHtcbiAgICAgICAgaWYgKGJpbmRpbmcuY29sbGFwc2VkICE9IG51bGwgJiYgYmluZGluZy5jb2xsYXBzZWQgIT09IGN1ckNvbnRleHQuY29sbGFwc2VkKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChiaW5kaW5nLmVtcHR5ICE9IG51bGwgJiYgYmluZGluZy5lbXB0eSAhPT0gY3VyQ29udGV4dC5lbXB0eSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoYmluZGluZy5vZmZzZXQgIT0gbnVsbCAmJiBiaW5kaW5nLm9mZnNldCAhPT0gY3VyQ29udGV4dC5vZmZzZXQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYmluZGluZy5mb3JtYXQpKSB7XG4gICAgICAgICAgLy8gYW55IGZvcm1hdCBpcyBwcmVzZW50XG4gICAgICAgICAgaWYgKGJpbmRpbmcuZm9ybWF0LmV2ZXJ5KGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBjdXJDb250ZXh0LmZvcm1hdFtuYW1lXSA9PSBudWxsO1xuICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBiaW5kaW5nLmZvcm1hdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAvLyBhbGwgZm9ybWF0cyBtdXN0IG1hdGNoXG4gICAgICAgICAgaWYgKCFPYmplY3Qua2V5cyhiaW5kaW5nLmZvcm1hdCkuZXZlcnkoZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgICAgaWYgKGJpbmRpbmcuZm9ybWF0W25hbWVdID09PSB0cnVlKSByZXR1cm4gY3VyQ29udGV4dC5mb3JtYXRbbmFtZV0gIT0gbnVsbDtcbiAgICAgICAgICAgIGlmIChiaW5kaW5nLmZvcm1hdFtuYW1lXSA9PT0gZmFsc2UpIHJldHVybiBjdXJDb250ZXh0LmZvcm1hdFtuYW1lXSA9PSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIGVxdWFsKGJpbmRpbmcuZm9ybWF0W25hbWVdLCBjdXJDb250ZXh0LmZvcm1hdFtuYW1lXSk7XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJpbmRpbmcucHJlZml4ICE9IG51bGwgJiYgIWJpbmRpbmcucHJlZml4LnRlc3QoY3VyQ29udGV4dC5wcmVmaXgpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChiaW5kaW5nLnN1ZmZpeCAhPSBudWxsICYmICFiaW5kaW5nLnN1ZmZpeC50ZXN0KGN1ckNvbnRleHQuc3VmZml4KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gYmluZGluZy5oYW5kbGVyLmNhbGwodGhpcywgcmFuZ2UsIGN1ckNvbnRleHQpICE9PSB0cnVlO1xuICAgICAgfSk7XG4gICAgICBpZiAocHJldmVudGVkKSB7XG4gICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbktleWJvYXJkLmtleXMgPSB7XG4gIEJBQ0tTUEFDRTogOCxcbiAgVEFCOiA5LFxuICBFTlRFUjogMTMsXG4gIEVTQ0FQRTogMjcsXG4gIExFRlQ6IDM3LFxuICBVUDogMzgsXG4gIFJJR0hUOiAzOSxcbiAgRE9XTjogNDAsXG4gIERFTEVURTogNDZcbn07XG5cbktleWJvYXJkLkRFRkFVTFRTID0ge1xuICBiaW5kaW5nczoge1xuICAgICdib2xkJyAgICAgIDogbWFrZUZvcm1hdEhhbmRsZXIoJ2JvbGQnKSxcbiAgICAnaXRhbGljJyAgICA6IG1ha2VGb3JtYXRIYW5kbGVyKCdpdGFsaWMnKSxcbiAgICAndW5kZXJsaW5lJyA6IG1ha2VGb3JtYXRIYW5kbGVyKCd1bmRlcmxpbmUnKSxcbiAgICAnaW5kZW50Jzoge1xuICAgICAgLy8gaGlnaGxpZ2h0IHRhYiBvciB0YWIgYXQgYmVnaW5uaW5nIG9mIGxpc3QsIGluZGVudCBvciBibG9ja3F1b3RlXG4gICAgICBrZXk6IEtleWJvYXJkLmtleXMuVEFCLFxuICAgICAgZm9ybWF0OiBbJ2Jsb2NrcXVvdGUnLCAnaW5kZW50JywgJ2xpc3QnXSxcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJhbmdlLCBjb250ZXh0KSB7XG4gICAgICAgIGlmIChjb250ZXh0LmNvbGxhcHNlZCAmJiBjb250ZXh0Lm9mZnNldCAhPT0gMCkgcmV0dXJuIHRydWU7XG4gICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdpbmRlbnQnLCAnKzEnLCBRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ291dGRlbnQnOiB7XG4gICAgICBrZXk6IEtleWJvYXJkLmtleXMuVEFCLFxuICAgICAgc2hpZnRLZXk6IHRydWUsXG4gICAgICBmb3JtYXQ6IFsnYmxvY2txdW90ZScsICdpbmRlbnQnLCAnbGlzdCddLFxuICAgICAgLy8gaGlnaGxpZ2h0IHRhYiBvciB0YWIgYXQgYmVnaW5uaW5nIG9mIGxpc3QsIGluZGVudCBvciBibG9ja3F1b3RlXG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbihyYW5nZSwgY29udGV4dCkge1xuICAgICAgICBpZiAoY29udGV4dC5jb2xsYXBzZWQgJiYgY29udGV4dC5vZmZzZXQgIT09IDApIHJldHVybiB0cnVlO1xuICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnaW5kZW50JywgJy0xJywgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICdvdXRkZW50IGJhY2tzcGFjZSc6IHtcbiAgICAgIGtleTogS2V5Ym9hcmQua2V5cy5CQUNLU1BBQ0UsXG4gICAgICBjb2xsYXBzZWQ6IHRydWUsXG4gICAgICBzaGlmdEtleTogbnVsbCxcbiAgICAgIG1ldGFLZXk6IG51bGwsXG4gICAgICBjdHJsS2V5OiBudWxsLFxuICAgICAgYWx0S2V5OiBudWxsLFxuICAgICAgZm9ybWF0OiBbJ2luZGVudCcsICdsaXN0J10sXG4gICAgICBvZmZzZXQ6IDAsXG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbihyYW5nZSwgY29udGV4dCkge1xuICAgICAgICBpZiAoY29udGV4dC5mb3JtYXQuaW5kZW50ICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnaW5kZW50JywgJy0xJywgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0LmZvcm1hdC5saXN0ICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnbGlzdCcsIGZhbHNlLCBRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICAnaW5kZW50IGNvZGUtYmxvY2snOiBtYWtlQ29kZUJsb2NrSGFuZGxlcih0cnVlKSxcbiAgICAnb3V0ZGVudCBjb2RlLWJsb2NrJzogbWFrZUNvZGVCbG9ja0hhbmRsZXIoZmFsc2UpLFxuICAgICdyZW1vdmUgdGFiJzoge1xuICAgICAga2V5OiBLZXlib2FyZC5rZXlzLlRBQixcbiAgICAgIHNoaWZ0S2V5OiB0cnVlLFxuICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgcHJlZml4OiAvXFx0JC8sXG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICB0aGlzLnF1aWxsLmRlbGV0ZVRleHQocmFuZ2UuaW5kZXggLSAxLCAxLCBRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ3RhYic6IHtcbiAgICAgIGtleTogS2V5Ym9hcmQua2V5cy5UQUIsXG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICB0aGlzLnF1aWxsLmhpc3RvcnkuY3V0b2ZmKCk7XG4gICAgICAgIGxldCBkZWx0YSA9IG5ldyBEZWx0YSgpLnJldGFpbihyYW5nZS5pbmRleClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZGVsZXRlKHJhbmdlLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaW5zZXJ0KCdcXHQnKTtcbiAgICAgICAgdGhpcy5xdWlsbC51cGRhdGVDb250ZW50cyhkZWx0YSwgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgICAgdGhpcy5xdWlsbC5oaXN0b3J5LmN1dG9mZigpO1xuICAgICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZS5pbmRleCArIDEsIFF1aWxsLnNvdXJjZXMuU0lMRU5UKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICdsaXN0IGVtcHR5IGVudGVyJzoge1xuICAgICAga2V5OiBLZXlib2FyZC5rZXlzLkVOVEVSLFxuICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgZm9ybWF0OiBbJ2xpc3QnXSxcbiAgICAgIGVtcHR5OiB0cnVlLFxuICAgICAgaGFuZGxlcjogZnVuY3Rpb24ocmFuZ2UsIGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2xpc3QnLCBmYWxzZSwgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgICAgaWYgKGNvbnRleHQuZm9ybWF0LmluZGVudCkge1xuICAgICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdpbmRlbnQnLCBmYWxzZSwgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgJ2NoZWNrbGlzdCBlbnRlcic6IHtcbiAgICAgIGtleTogS2V5Ym9hcmQua2V5cy5FTlRFUixcbiAgICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICAgIGZvcm1hdDogeyBsaXN0OiAnY2hlY2tlZCcgfSxcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgIGxldCBbbGluZSwgb2Zmc2V0XSA9IHRoaXMucXVpbGwuZ2V0TGluZShyYW5nZS5pbmRleCk7XG4gICAgICAgIGxldCBmb3JtYXRzID0gZXh0ZW5kKHt9LCBsaW5lLmZvcm1hdHMoKSwgeyBsaXN0OiAnY2hlY2tlZCcgfSk7XG4gICAgICAgIGxldCBkZWx0YSA9IG5ldyBEZWx0YSgpLnJldGFpbihyYW5nZS5pbmRleClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaW5zZXJ0KCdcXG4nLCBmb3JtYXRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXRhaW4obGluZS5sZW5ndGgoKSAtIG9mZnNldCAtIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJldGFpbigxLCB7IGxpc3Q6ICd1bmNoZWNrZWQnIH0pO1xuICAgICAgICB0aGlzLnF1aWxsLnVwZGF0ZUNvbnRlbnRzKGRlbHRhLCBRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZS5pbmRleCArIDEsIFF1aWxsLnNvdXJjZXMuU0lMRU5UKTtcbiAgICAgICAgdGhpcy5xdWlsbC5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2hlYWRlciBlbnRlcic6IHtcbiAgICAgIGtleTogS2V5Ym9hcmQua2V5cy5FTlRFUixcbiAgICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICAgIGZvcm1hdDogWydoZWFkZXInXSxcbiAgICAgIHN1ZmZpeDogL14kLyxcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJhbmdlLCBjb250ZXh0KSB7XG4gICAgICAgIGxldCBbbGluZSwgb2Zmc2V0XSA9IHRoaXMucXVpbGwuZ2V0TGluZShyYW5nZS5pbmRleCk7XG4gICAgICAgIGxldCBkZWx0YSA9IG5ldyBEZWx0YSgpLnJldGFpbihyYW5nZS5pbmRleClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaW5zZXJ0KCdcXG4nLCBjb250ZXh0LmZvcm1hdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmV0YWluKGxpbmUubGVuZ3RoKCkgLSBvZmZzZXQgLSAxKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXRhaW4oMSwgeyBoZWFkZXI6IG51bGwgfSk7XG4gICAgICAgIHRoaXMucXVpbGwudXBkYXRlQ29udGVudHMoZGVsdGEsIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gICAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKHJhbmdlLmluZGV4ICsgMSwgUXVpbGwuc291cmNlcy5TSUxFTlQpO1xuICAgICAgICB0aGlzLnF1aWxsLnNjcm9sbEludG9WaWV3KCk7XG4gICAgICB9XG4gICAgfSxcbiAgICAnbGlzdCBhdXRvZmlsbCc6IHtcbiAgICAgIGtleTogJyAnLFxuICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgZm9ybWF0OiB7IGxpc3Q6IGZhbHNlIH0sXG4gICAgICBwcmVmaXg6IC9eXFxzKj8oXFxkK1xcLnwtfFxcKnxcXFsgP1xcXXxcXFt4XFxdKSQvLFxuICAgICAgaGFuZGxlcjogZnVuY3Rpb24ocmFuZ2UsIGNvbnRleHQpIHtcbiAgICAgICAgbGV0IGxlbmd0aCA9IGNvbnRleHQucHJlZml4Lmxlbmd0aDtcbiAgICAgICAgbGV0IFtsaW5lLCBvZmZzZXRdID0gdGhpcy5xdWlsbC5nZXRMaW5lKHJhbmdlLmluZGV4KTtcbiAgICAgICAgaWYgKG9mZnNldCA+IGxlbmd0aCkgcmV0dXJuIHRydWU7XG4gICAgICAgIGxldCB2YWx1ZTtcbiAgICAgICAgc3dpdGNoIChjb250ZXh0LnByZWZpeC50cmltKCkpIHtcbiAgICAgICAgICBjYXNlICdbXSc6IGNhc2UgJ1sgXSc6XG4gICAgICAgICAgICB2YWx1ZSA9ICd1bmNoZWNrZWQnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnW3hdJzpcbiAgICAgICAgICAgIHZhbHVlID0gJ2NoZWNrZWQnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnLSc6IGNhc2UgJyonOlxuICAgICAgICAgICAgdmFsdWUgPSAnYnVsbGV0JztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB2YWx1ZSA9ICdvcmRlcmVkJztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnF1aWxsLmluc2VydFRleHQocmFuZ2UuaW5kZXgsICcgJywgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgICAgdGhpcy5xdWlsbC5oaXN0b3J5LmN1dG9mZigpO1xuICAgICAgICBsZXQgZGVsdGEgPSBuZXcgRGVsdGEoKS5yZXRhaW4ocmFuZ2UuaW5kZXggLSBvZmZzZXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmRlbGV0ZShsZW5ndGggKyAxKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXRhaW4obGluZS5sZW5ndGgoKSAtIDIgLSBvZmZzZXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJldGFpbigxLCB7IGxpc3Q6IHZhbHVlIH0pO1xuICAgICAgICB0aGlzLnF1aWxsLnVwZGF0ZUNvbnRlbnRzKGRlbHRhLCBRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICB0aGlzLnF1aWxsLmhpc3RvcnkuY3V0b2ZmKCk7XG4gICAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKHJhbmdlLmluZGV4IC0gbGVuZ3RoLCBRdWlsbC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgICB9XG4gICAgfSxcbiAgICAnY29kZSBleGl0Jzoge1xuICAgICAga2V5OiBLZXlib2FyZC5rZXlzLkVOVEVSLFxuICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgZm9ybWF0OiBbJ2NvZGUtYmxvY2snXSxcbiAgICAgIHByZWZpeDogL1xcblxcbiQvLFxuICAgICAgc3VmZml4OiAvXlxccyskLyxcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgIGNvbnN0IFtsaW5lLCBvZmZzZXRdID0gdGhpcy5xdWlsbC5nZXRMaW5lKHJhbmdlLmluZGV4KTtcbiAgICAgICAgY29uc3QgZGVsdGEgPSBuZXcgRGVsdGEoKVxuICAgICAgICAgIC5yZXRhaW4ocmFuZ2UuaW5kZXggKyBsaW5lLmxlbmd0aCgpIC0gb2Zmc2V0IC0gMilcbiAgICAgICAgICAucmV0YWluKDEsIHsgJ2NvZGUtYmxvY2snOiBudWxsIH0pXG4gICAgICAgICAgLmRlbGV0ZSgxKTtcbiAgICAgICAgdGhpcy5xdWlsbC51cGRhdGVDb250ZW50cyhkZWx0YSwgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICdlbWJlZCBsZWZ0JzogbWFrZUVtYmVkQXJyb3dIYW5kbGVyKEtleWJvYXJkLmtleXMuTEVGVCwgZmFsc2UpLFxuICAgICdlbWJlZCBsZWZ0IHNoaWZ0JzogbWFrZUVtYmVkQXJyb3dIYW5kbGVyKEtleWJvYXJkLmtleXMuTEVGVCwgdHJ1ZSksXG4gICAgJ2VtYmVkIHJpZ2h0JzogbWFrZUVtYmVkQXJyb3dIYW5kbGVyKEtleWJvYXJkLmtleXMuUklHSFQsIGZhbHNlKSxcbiAgICAnZW1iZWQgcmlnaHQgc2hpZnQnOiBtYWtlRW1iZWRBcnJvd0hhbmRsZXIoS2V5Ym9hcmQua2V5cy5SSUdIVCwgdHJ1ZSlcbiAgfVxufTtcblxuZnVuY3Rpb24gbWFrZUVtYmVkQXJyb3dIYW5kbGVyKGtleSwgc2hpZnRLZXkpIHtcbiAgY29uc3Qgd2hlcmUgPSBrZXkgPT09IEtleWJvYXJkLmtleXMuTEVGVCA/ICdwcmVmaXgnIDogJ3N1ZmZpeCc7XG4gIHJldHVybiB7XG4gICAga2V5LFxuICAgIHNoaWZ0S2V5LFxuICAgIGFsdEtleTogbnVsbCxcbiAgICBbd2hlcmVdOiAvXiQvLFxuICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICBsZXQgaW5kZXggPSByYW5nZS5pbmRleDtcbiAgICAgIGlmIChrZXkgPT09IEtleWJvYXJkLmtleXMuUklHSFQpIHtcbiAgICAgICAgaW5kZXggKz0gKHJhbmdlLmxlbmd0aCArIDEpO1xuICAgICAgfVxuICAgICAgY29uc3QgW2xlYWYsIF0gPSB0aGlzLnF1aWxsLmdldExlYWYoaW5kZXgpO1xuICAgICAgaWYgKCEobGVhZiBpbnN0YW5jZW9mIFBhcmNobWVudC5FbWJlZCkpIHJldHVybiB0cnVlO1xuICAgICAgaWYgKGtleSA9PT0gS2V5Ym9hcmQua2V5cy5MRUZUKSB7XG4gICAgICAgIGlmIChzaGlmdEtleSkge1xuICAgICAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKHJhbmdlLmluZGV4IC0gMSwgcmFuZ2UubGVuZ3RoICsgMSwgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZS5pbmRleCAtIDEsIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzaGlmdEtleSkge1xuICAgICAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKHJhbmdlLmluZGV4LCByYW5nZS5sZW5ndGggKyAxLCBRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKHJhbmdlLmluZGV4ICsgcmFuZ2UubGVuZ3RoICsgMSwgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cblxuXG5mdW5jdGlvbiBoYW5kbGVCYWNrc3BhY2UocmFuZ2UsIGNvbnRleHQpIHtcbiAgaWYgKHJhbmdlLmluZGV4ID09PSAwIHx8IHRoaXMucXVpbGwuZ2V0TGVuZ3RoKCkgPD0gMSkgcmV0dXJuO1xuICBsZXQgW2xpbmUsIF0gPSB0aGlzLnF1aWxsLmdldExpbmUocmFuZ2UuaW5kZXgpO1xuICBsZXQgZm9ybWF0cyA9IHt9O1xuICBpZiAoY29udGV4dC5vZmZzZXQgPT09IDApIHtcbiAgICBsZXQgW3ByZXYsIF0gPSB0aGlzLnF1aWxsLmdldExpbmUocmFuZ2UuaW5kZXggLSAxKTtcbiAgICBpZiAocHJldiAhPSBudWxsICYmIHByZXYubGVuZ3RoKCkgPiAxKSB7XG4gICAgICBsZXQgY3VyRm9ybWF0cyA9IGxpbmUuZm9ybWF0cygpO1xuICAgICAgbGV0IHByZXZGb3JtYXRzID0gdGhpcy5xdWlsbC5nZXRGb3JtYXQocmFuZ2UuaW5kZXgtMSwgMSk7XG4gICAgICBmb3JtYXRzID0gRGVsdGFPcC5hdHRyaWJ1dGVzLmRpZmYoY3VyRm9ybWF0cywgcHJldkZvcm1hdHMpIHx8IHt9O1xuICAgIH1cbiAgfVxuICAvLyBDaGVjayBmb3IgYXN0cmFsIHN5bWJvbHNcbiAgbGV0IGxlbmd0aCA9IC9bXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdJC8udGVzdChjb250ZXh0LnByZWZpeCkgPyAyIDogMTtcbiAgdGhpcy5xdWlsbC5kZWxldGVUZXh0KHJhbmdlLmluZGV4LWxlbmd0aCwgbGVuZ3RoLCBRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICBpZiAoT2JqZWN0LmtleXMoZm9ybWF0cykubGVuZ3RoID4gMCkge1xuICAgIHRoaXMucXVpbGwuZm9ybWF0TGluZShyYW5nZS5pbmRleC1sZW5ndGgsIGxlbmd0aCwgZm9ybWF0cywgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgfVxuICB0aGlzLnF1aWxsLmZvY3VzKCk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZURlbGV0ZShyYW5nZSwgY29udGV4dCkge1xuICAvLyBDaGVjayBmb3IgYXN0cmFsIHN5bWJvbHNcbiAgbGV0IGxlbmd0aCA9IC9eW1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXS8udGVzdChjb250ZXh0LnN1ZmZpeCkgPyAyIDogMTtcbiAgaWYgKHJhbmdlLmluZGV4ID49IHRoaXMucXVpbGwuZ2V0TGVuZ3RoKCkgLSBsZW5ndGgpIHJldHVybjtcbiAgbGV0IGZvcm1hdHMgPSB7fSwgbmV4dExlbmd0aCA9IDA7XG4gIGxldCBbbGluZSwgXSA9IHRoaXMucXVpbGwuZ2V0TGluZShyYW5nZS5pbmRleCk7XG4gIGlmIChjb250ZXh0Lm9mZnNldCA+PSBsaW5lLmxlbmd0aCgpIC0gMSkge1xuICAgIGxldCBbbmV4dCwgXSA9IHRoaXMucXVpbGwuZ2V0TGluZShyYW5nZS5pbmRleCArIDEpO1xuICAgIGlmIChuZXh0KSB7XG4gICAgICBsZXQgY3VyRm9ybWF0cyA9IGxpbmUuZm9ybWF0cygpO1xuICAgICAgbGV0IG5leHRGb3JtYXRzID0gdGhpcy5xdWlsbC5nZXRGb3JtYXQocmFuZ2UuaW5kZXgsIDEpO1xuICAgICAgZm9ybWF0cyA9IERlbHRhT3AuYXR0cmlidXRlcy5kaWZmKGN1ckZvcm1hdHMsIG5leHRGb3JtYXRzKSB8fCB7fTtcbiAgICAgIG5leHRMZW5ndGggPSBuZXh0Lmxlbmd0aCgpO1xuICAgIH1cbiAgfVxuICB0aGlzLnF1aWxsLmRlbGV0ZVRleHQocmFuZ2UuaW5kZXgsIGxlbmd0aCwgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgaWYgKE9iamVjdC5rZXlzKGZvcm1hdHMpLmxlbmd0aCA+IDApIHtcbiAgICB0aGlzLnF1aWxsLmZvcm1hdExpbmUocmFuZ2UuaW5kZXggKyBuZXh0TGVuZ3RoIC0gMSwgbGVuZ3RoLCBmb3JtYXRzLCBRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZURlbGV0ZVJhbmdlKHJhbmdlKSB7XG4gIGxldCBsaW5lcyA9IHRoaXMucXVpbGwuZ2V0TGluZXMocmFuZ2UpO1xuICBsZXQgZm9ybWF0cyA9IHt9O1xuICBpZiAobGluZXMubGVuZ3RoID4gMSkge1xuICAgIGxldCBmaXJzdEZvcm1hdHMgPSBsaW5lc1swXS5mb3JtYXRzKCk7XG4gICAgbGV0IGxhc3RGb3JtYXRzID0gbGluZXNbbGluZXMubGVuZ3RoIC0gMV0uZm9ybWF0cygpO1xuICAgIGZvcm1hdHMgPSBEZWx0YU9wLmF0dHJpYnV0ZXMuZGlmZihsYXN0Rm9ybWF0cywgZmlyc3RGb3JtYXRzKSB8fCB7fTtcbiAgfVxuICB0aGlzLnF1aWxsLmRlbGV0ZVRleHQocmFuZ2UsIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gIGlmIChPYmplY3Qua2V5cyhmb3JtYXRzKS5sZW5ndGggPiAwKSB7XG4gICAgdGhpcy5xdWlsbC5mb3JtYXRMaW5lKHJhbmdlLmluZGV4LCAxLCBmb3JtYXRzLCBRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICB9XG4gIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKHJhbmdlLmluZGV4LCBRdWlsbC5zb3VyY2VzLlNJTEVOVCk7XG4gIHRoaXMucXVpbGwuZm9jdXMoKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlRW50ZXIocmFuZ2UsIGNvbnRleHQpIHtcbiAgaWYgKHJhbmdlLmxlbmd0aCA+IDApIHtcbiAgICB0aGlzLnF1aWxsLnNjcm9sbC5kZWxldGVBdChyYW5nZS5pbmRleCwgcmFuZ2UubGVuZ3RoKTsgIC8vIFNvIHdlIGRvIG5vdCB0cmlnZ2VyIHRleHQtY2hhbmdlXG4gIH1cbiAgbGV0IGxpbmVGb3JtYXRzID0gT2JqZWN0LmtleXMoY29udGV4dC5mb3JtYXQpLnJlZHVjZShmdW5jdGlvbihsaW5lRm9ybWF0cywgZm9ybWF0KSB7XG4gICAgaWYgKFBhcmNobWVudC5xdWVyeShmb3JtYXQsIFBhcmNobWVudC5TY29wZS5CTE9DSykgJiYgIUFycmF5LmlzQXJyYXkoY29udGV4dC5mb3JtYXRbZm9ybWF0XSkpIHtcbiAgICAgIGxpbmVGb3JtYXRzW2Zvcm1hdF0gPSBjb250ZXh0LmZvcm1hdFtmb3JtYXRdO1xuICAgIH1cbiAgICByZXR1cm4gbGluZUZvcm1hdHM7XG4gIH0sIHt9KTtcbiAgdGhpcy5xdWlsbC5pbnNlcnRUZXh0KHJhbmdlLmluZGV4LCAnXFxuJywgbGluZUZvcm1hdHMsIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gIC8vIEVhcmxpZXIgc2Nyb2xsLmRlbGV0ZUF0IG1pZ2h0IGhhdmUgbWVzc2VkIHVwIG91ciBzZWxlY3Rpb24sXG4gIC8vIHNvIGluc2VydFRleHQncyBidWlsdCBpbiBzZWxlY3Rpb24gcHJlc2VydmF0aW9uIGlzIG5vdCByZWxpYWJsZVxuICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZS5pbmRleCArIDEsIFF1aWxsLnNvdXJjZXMuU0lMRU5UKTtcbiAgdGhpcy5xdWlsbC5mb2N1cygpO1xuICBPYmplY3Qua2V5cyhjb250ZXh0LmZvcm1hdCkuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgIGlmIChsaW5lRm9ybWF0c1tuYW1lXSAhPSBudWxsKSByZXR1cm47XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29udGV4dC5mb3JtYXRbbmFtZV0pKSByZXR1cm47XG4gICAgaWYgKG5hbWUgPT09ICdsaW5rJykgcmV0dXJuO1xuICAgIHRoaXMucXVpbGwuZm9ybWF0KG5hbWUsIGNvbnRleHQuZm9ybWF0W25hbWVdLCBRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbWFrZUNvZGVCbG9ja0hhbmRsZXIoaW5kZW50KSB7XG4gIHJldHVybiB7XG4gICAga2V5OiBLZXlib2FyZC5rZXlzLlRBQixcbiAgICBzaGlmdEtleTogIWluZGVudCxcbiAgICBmb3JtYXQ6IHsnY29kZS1ibG9jayc6IHRydWUgfSxcbiAgICBoYW5kbGVyOiBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgbGV0IENvZGVCbG9jayA9IFBhcmNobWVudC5xdWVyeSgnY29kZS1ibG9jaycpO1xuICAgICAgbGV0IGluZGV4ID0gcmFuZ2UuaW5kZXgsIGxlbmd0aCA9IHJhbmdlLmxlbmd0aDtcbiAgICAgIGxldCBbYmxvY2ssIG9mZnNldF0gPSB0aGlzLnF1aWxsLnNjcm9sbC5kZXNjZW5kYW50KENvZGVCbG9jaywgaW5kZXgpO1xuICAgICAgaWYgKGJsb2NrID09IG51bGwpIHJldHVybjtcbiAgICAgIGxldCBzY3JvbGxJbmRleCA9IHRoaXMucXVpbGwuZ2V0SW5kZXgoYmxvY2spO1xuICAgICAgbGV0IHN0YXJ0ID0gYmxvY2submV3bGluZUluZGV4KG9mZnNldCwgdHJ1ZSkgKyAxO1xuICAgICAgbGV0IGVuZCA9IGJsb2NrLm5ld2xpbmVJbmRleChzY3JvbGxJbmRleCArIG9mZnNldCArIGxlbmd0aCk7XG4gICAgICBsZXQgbGluZXMgPSBibG9jay5kb21Ob2RlLnRleHRDb250ZW50LnNsaWNlKHN0YXJ0LCBlbmQpLnNwbGl0KCdcXG4nKTtcbiAgICAgIG9mZnNldCA9IDA7XG4gICAgICBsaW5lcy5mb3JFYWNoKChsaW5lLCBpKSA9PiB7XG4gICAgICAgIGlmIChpbmRlbnQpIHtcbiAgICAgICAgICBibG9jay5pbnNlcnRBdChzdGFydCArIG9mZnNldCwgQ29kZUJsb2NrLlRBQik7XG4gICAgICAgICAgb2Zmc2V0ICs9IENvZGVCbG9jay5UQUIubGVuZ3RoO1xuICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICBpbmRleCArPSBDb2RlQmxvY2suVEFCLmxlbmd0aDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGVuZ3RoICs9IENvZGVCbG9jay5UQUIubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChsaW5lLnN0YXJ0c1dpdGgoQ29kZUJsb2NrLlRBQikpIHtcbiAgICAgICAgICBibG9jay5kZWxldGVBdChzdGFydCArIG9mZnNldCwgQ29kZUJsb2NrLlRBQi5sZW5ndGgpO1xuICAgICAgICAgIG9mZnNldCAtPSBDb2RlQmxvY2suVEFCLmxlbmd0aDtcbiAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgaW5kZXggLT0gQ29kZUJsb2NrLlRBQi5sZW5ndGg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxlbmd0aCAtPSBDb2RlQmxvY2suVEFCLmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb2Zmc2V0ICs9IGxpbmUubGVuZ3RoICsgMTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5xdWlsbC51cGRhdGUoUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKGluZGV4LCBsZW5ndGgsIFF1aWxsLnNvdXJjZXMuU0lMRU5UKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1ha2VGb3JtYXRIYW5kbGVyKGZvcm1hdCkge1xuICByZXR1cm4ge1xuICAgIGtleTogZm9ybWF0WzBdLnRvVXBwZXJDYXNlKCksXG4gICAgc2hvcnRLZXk6IHRydWUsXG4gICAgaGFuZGxlcjogZnVuY3Rpb24ocmFuZ2UsIGNvbnRleHQpIHtcbiAgICAgIHRoaXMucXVpbGwuZm9ybWF0KGZvcm1hdCwgIWNvbnRleHQuZm9ybWF0W2Zvcm1hdF0sIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemUoYmluZGluZykge1xuICBpZiAodHlwZW9mIGJpbmRpbmcgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBiaW5kaW5nID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBub3JtYWxpemUoeyBrZXk6IGJpbmRpbmcgfSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBiaW5kaW5nID09PSAnb2JqZWN0Jykge1xuICAgIGJpbmRpbmcgPSBjbG9uZShiaW5kaW5nLCBmYWxzZSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBiaW5kaW5nLmtleSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoS2V5Ym9hcmQua2V5c1tiaW5kaW5nLmtleS50b1VwcGVyQ2FzZSgpXSAhPSBudWxsKSB7XG4gICAgICBiaW5kaW5nLmtleSA9IEtleWJvYXJkLmtleXNbYmluZGluZy5rZXkudG9VcHBlckNhc2UoKV07XG4gICAgfSBlbHNlIGlmIChiaW5kaW5nLmtleS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGJpbmRpbmcua2V5ID0gYmluZGluZy5rZXkudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgaWYgKGJpbmRpbmcuc2hvcnRLZXkpIHtcbiAgICBiaW5kaW5nW1NIT1JUS0VZXSA9IGJpbmRpbmcuc2hvcnRLZXk7XG4gICAgZGVsZXRlIGJpbmRpbmcuc2hvcnRLZXk7XG4gIH1cbiAgcmV0dXJuIGJpbmRpbmc7XG59XG5cblxuZXhwb3J0IHsgS2V5Ym9hcmQgYXMgZGVmYXVsdCwgU0hPUlRLRVkgfTtcbiIsImltcG9ydCBQYXJjaG1lbnQgZnJvbSAncGFyY2htZW50JztcbmltcG9ydCBRdWlsbCBmcm9tICcuL2NvcmUvcXVpbGwnO1xuXG5pbXBvcnQgQmxvY2ssIHsgQmxvY2tFbWJlZCB9IGZyb20gJy4vYmxvdHMvYmxvY2snO1xuaW1wb3J0IEJyZWFrIGZyb20gJy4vYmxvdHMvYnJlYWsnO1xuaW1wb3J0IENvbnRhaW5lciBmcm9tICcuL2Jsb3RzL2NvbnRhaW5lcic7XG5pbXBvcnQgQ3Vyc29yIGZyb20gJy4vYmxvdHMvY3Vyc29yJztcbmltcG9ydCBFbWJlZCBmcm9tICcuL2Jsb3RzL2VtYmVkJztcbmltcG9ydCBJbmxpbmUgZnJvbSAnLi9ibG90cy9pbmxpbmUnO1xuaW1wb3J0IFNjcm9sbCBmcm9tICcuL2Jsb3RzL3Njcm9sbCc7XG5pbXBvcnQgVGV4dEJsb3QgZnJvbSAnLi9ibG90cy90ZXh0JztcblxuaW1wb3J0IENsaXBib2FyZCBmcm9tICcuL21vZHVsZXMvY2xpcGJvYXJkJztcbmltcG9ydCBIaXN0b3J5IGZyb20gJy4vbW9kdWxlcy9oaXN0b3J5JztcbmltcG9ydCBLZXlib2FyZCBmcm9tICcuL21vZHVsZXMva2V5Ym9hcmQnO1xuXG5RdWlsbC5yZWdpc3Rlcih7XG4gICdibG90cy9ibG9jaycgICAgICAgIDogQmxvY2ssXG4gICdibG90cy9ibG9jay9lbWJlZCcgIDogQmxvY2tFbWJlZCxcbiAgJ2Jsb3RzL2JyZWFrJyAgICAgICAgOiBCcmVhayxcbiAgJ2Jsb3RzL2NvbnRhaW5lcicgICAgOiBDb250YWluZXIsXG4gICdibG90cy9jdXJzb3InICAgICAgIDogQ3Vyc29yLFxuICAnYmxvdHMvZW1iZWQnICAgICAgICA6IEVtYmVkLFxuICAnYmxvdHMvaW5saW5lJyAgICAgICA6IElubGluZSxcbiAgJ2Jsb3RzL3Njcm9sbCcgICAgICAgOiBTY3JvbGwsXG4gICdibG90cy90ZXh0JyAgICAgICAgIDogVGV4dEJsb3QsXG5cbiAgJ21vZHVsZXMvY2xpcGJvYXJkJyAgOiBDbGlwYm9hcmQsXG4gICdtb2R1bGVzL2hpc3RvcnknICAgIDogSGlzdG9yeSxcbiAgJ21vZHVsZXMva2V5Ym9hcmQnICAgOiBLZXlib2FyZFxufSk7XG5cblBhcmNobWVudC5yZWdpc3RlcihCbG9jaywgQnJlYWssIEN1cnNvciwgSW5saW5lLCBTY3JvbGwsIFRleHRCbG90KTtcblxuXG5leHBvcnQgZGVmYXVsdCBRdWlsbDtcbiIsImltcG9ydCBEZWx0YSBmcm9tICdxdWlsbC1kZWx0YSc7XG5pbXBvcnQgUGFyY2htZW50IGZyb20gJ3BhcmNobWVudCc7XG5pbXBvcnQgUXVpbGwgZnJvbSAnLi4vY29yZS9xdWlsbCc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uL2NvcmUvbG9nZ2VyJztcbmltcG9ydCBNb2R1bGUgZnJvbSAnLi4vY29yZS9tb2R1bGUnO1xuXG5sZXQgZGVidWcgPSBsb2dnZXIoJ3F1aWxsOnRvb2xiYXInKTtcblxuXG5jbGFzcyBUb29sYmFyIGV4dGVuZHMgTW9kdWxlIHtcbiAgY29uc3RydWN0b3IocXVpbGwsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihxdWlsbCwgb3B0aW9ucyk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5vcHRpb25zLmNvbnRhaW5lcikpIHtcbiAgICAgIGxldCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGFkZENvbnRyb2xzKGNvbnRhaW5lciwgdGhpcy5vcHRpb25zLmNvbnRhaW5lcik7XG4gICAgICBxdWlsbC5jb250YWluZXIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY29udGFpbmVyLCBxdWlsbC5jb250YWluZXIpO1xuICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmNvbnRhaW5lciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLm9wdGlvbnMuY29udGFpbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb250YWluZXIgPSB0aGlzLm9wdGlvbnMuY29udGFpbmVyO1xuICAgIH1cbiAgICBpZiAoISh0aGlzLmNvbnRhaW5lciBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSkge1xuICAgICAgcmV0dXJuIGRlYnVnLmVycm9yKCdDb250YWluZXIgcmVxdWlyZWQgZm9yIHRvb2xiYXInLCB0aGlzLm9wdGlvbnMpO1xuICAgIH1cbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdxbC10b29sYmFyJyk7XG4gICAgdGhpcy5jb250cm9scyA9IFtdO1xuICAgIHRoaXMuaGFuZGxlcnMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyh0aGlzLm9wdGlvbnMuaGFuZGxlcnMpLmZvckVhY2goKGZvcm1hdCkgPT4ge1xuICAgICAgdGhpcy5hZGRIYW5kbGVyKGZvcm1hdCwgdGhpcy5vcHRpb25zLmhhbmRsZXJzW2Zvcm1hdF0pO1xuICAgIH0pO1xuICAgIFtdLmZvckVhY2guY2FsbCh0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24sIHNlbGVjdCcpLCAoaW5wdXQpID0+IHtcbiAgICAgIHRoaXMuYXR0YWNoKGlucHV0KTtcbiAgICB9KTtcbiAgICB0aGlzLnF1aWxsLm9uKFF1aWxsLmV2ZW50cy5FRElUT1JfQ0hBTkdFLCAodHlwZSwgcmFuZ2UpID0+IHtcbiAgICAgIGlmICh0eXBlID09PSBRdWlsbC5ldmVudHMuU0VMRUNUSU9OX0NIQU5HRSkge1xuICAgICAgICB0aGlzLnVwZGF0ZShyYW5nZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5xdWlsbC5vbihRdWlsbC5ldmVudHMuU0NST0xMX09QVElNSVpFLCAoKSA9PiB7XG4gICAgICBsZXQgW3JhbmdlLCBdID0gdGhpcy5xdWlsbC5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTsgIC8vIHF1aWxsLmdldFNlbGVjdGlvbiB0cmlnZ2VycyB1cGRhdGVcbiAgICAgIHRoaXMudXBkYXRlKHJhbmdlKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFkZEhhbmRsZXIoZm9ybWF0LCBoYW5kbGVyKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tmb3JtYXRdID0gaGFuZGxlcjtcbiAgfVxuXG4gIGF0dGFjaChpbnB1dCkge1xuICAgIGxldCBmb3JtYXQgPSBbXS5maW5kLmNhbGwoaW5wdXQuY2xhc3NMaXN0LCAoY2xhc3NOYW1lKSA9PiB7XG4gICAgICByZXR1cm4gY2xhc3NOYW1lLmluZGV4T2YoJ3FsLScpID09PSAwO1xuICAgIH0pO1xuICAgIGlmICghZm9ybWF0KSByZXR1cm47XG4gICAgZm9ybWF0ID0gZm9ybWF0LnNsaWNlKCdxbC0nLmxlbmd0aCk7XG4gICAgaWYgKGlucHV0LnRhZ05hbWUgPT09ICdCVVRUT04nKSB7XG4gICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnYnV0dG9uJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLmhhbmRsZXJzW2Zvcm1hdF0gPT0gbnVsbCkge1xuICAgICAgaWYgKHRoaXMucXVpbGwuc2Nyb2xsLndoaXRlbGlzdCAhPSBudWxsICYmIHRoaXMucXVpbGwuc2Nyb2xsLndoaXRlbGlzdFtmb3JtYXRdID09IG51bGwpIHtcbiAgICAgICAgZGVidWcud2FybignaWdub3JpbmcgYXR0YWNoaW5nIHRvIGRpc2FibGVkIGZvcm1hdCcsIGZvcm1hdCwgaW5wdXQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoUGFyY2htZW50LnF1ZXJ5KGZvcm1hdCkgPT0gbnVsbCkge1xuICAgICAgICBkZWJ1Zy53YXJuKCdpZ25vcmluZyBhdHRhY2hpbmcgdG8gbm9uZXhpc3RlbnQgZm9ybWF0JywgZm9ybWF0LCBpbnB1dCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IGV2ZW50TmFtZSA9IGlucHV0LnRhZ05hbWUgPT09ICdTRUxFQ1QnID8gJ2NoYW5nZScgOiAnY2xpY2snO1xuICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCAoZSkgPT4ge1xuICAgICAgbGV0IHZhbHVlO1xuICAgICAgaWYgKGlucHV0LnRhZ05hbWUgPT09ICdTRUxFQ1QnKSB7XG4gICAgICAgIGlmIChpbnB1dC5zZWxlY3RlZEluZGV4IDwgMCkgcmV0dXJuO1xuICAgICAgICBsZXQgc2VsZWN0ZWQgPSBpbnB1dC5vcHRpb25zW2lucHV0LnNlbGVjdGVkSW5kZXhdO1xuICAgICAgICBpZiAoc2VsZWN0ZWQuaGFzQXR0cmlidXRlKCdzZWxlY3RlZCcpKSB7XG4gICAgICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IHNlbGVjdGVkLnZhbHVlIHx8IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaW5wdXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdxbC1hY3RpdmUnKSkge1xuICAgICAgICAgIHZhbHVlID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBpbnB1dC52YWx1ZSB8fCAhaW5wdXQuaGFzQXR0cmlidXRlKCd2YWx1ZScpO1xuICAgICAgICB9XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucXVpbGwuZm9jdXMoKTtcbiAgICAgIGxldCBbcmFuZ2UsIF0gPSB0aGlzLnF1aWxsLnNlbGVjdGlvbi5nZXRSYW5nZSgpO1xuICAgICAgaWYgKHRoaXMuaGFuZGxlcnNbZm9ybWF0XSAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlcnNbZm9ybWF0XS5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoUGFyY2htZW50LnF1ZXJ5KGZvcm1hdCkucHJvdG90eXBlIGluc3RhbmNlb2YgUGFyY2htZW50LkVtYmVkKSB7XG4gICAgICAgIHZhbHVlID0gcHJvbXB0KGBFbnRlciAke2Zvcm1hdH1gKTtcbiAgICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLnF1aWxsLnVwZGF0ZUNvbnRlbnRzKG5ldyBEZWx0YSgpXG4gICAgICAgICAgLnJldGFpbihyYW5nZS5pbmRleClcbiAgICAgICAgICAuZGVsZXRlKHJhbmdlLmxlbmd0aClcbiAgICAgICAgICAuaW5zZXJ0KHsgW2Zvcm1hdF06IHZhbHVlIH0pXG4gICAgICAgICwgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KGZvcm1hdCwgdmFsdWUsIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gICAgICB9XG4gICAgICB0aGlzLnVwZGF0ZShyYW5nZSk7XG4gICAgfSk7XG4gICAgLy8gVE9ETyB1c2Ugd2Vha21hcFxuICAgIHRoaXMuY29udHJvbHMucHVzaChbZm9ybWF0LCBpbnB1dF0pO1xuICB9XG5cbiAgdXBkYXRlKHJhbmdlKSB7XG4gICAgbGV0IGZvcm1hdHMgPSByYW5nZSA9PSBudWxsID8ge30gOiB0aGlzLnF1aWxsLmdldEZvcm1hdChyYW5nZSk7XG4gICAgdGhpcy5jb250cm9scy5mb3JFYWNoKGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgIGxldCBbZm9ybWF0LCBpbnB1dF0gPSBwYWlyO1xuICAgICAgaWYgKGlucHV0LnRhZ05hbWUgPT09ICdTRUxFQ1QnKSB7XG4gICAgICAgIGxldCBvcHRpb247XG4gICAgICAgIGlmIChyYW5nZSA9PSBudWxsKSB7XG4gICAgICAgICAgb3B0aW9uID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXRzW2Zvcm1hdF0gPT0gbnVsbCkge1xuICAgICAgICAgIG9wdGlvbiA9IGlucHV0LnF1ZXJ5U2VsZWN0b3IoJ29wdGlvbltzZWxlY3RlZF0nKTtcbiAgICAgICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShmb3JtYXRzW2Zvcm1hdF0pKSB7XG4gICAgICAgICAgbGV0IHZhbHVlID0gZm9ybWF0c1tmb3JtYXRdO1xuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcXCIvZywgJ1xcXFxcIicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvcHRpb24gPSBpbnB1dC5xdWVyeVNlbGVjdG9yKGBvcHRpb25bdmFsdWU9XCIke3ZhbHVlfVwiXWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb24gPT0gbnVsbCkge1xuICAgICAgICAgIGlucHV0LnZhbHVlID0gJyc7ICAgLy8gVE9ETyBtYWtlIGNvbmZpZ3VyYWJsZT9cbiAgICAgICAgICBpbnB1dC5zZWxlY3RlZEluZGV4ID0gLTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHJhbmdlID09IG51bGwpIHtcbiAgICAgICAgICBpbnB1dC5jbGFzc0xpc3QucmVtb3ZlKCdxbC1hY3RpdmUnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpbnB1dC5oYXNBdHRyaWJ1dGUoJ3ZhbHVlJykpIHtcbiAgICAgICAgICAvLyBib3RoIGJlaW5nIG51bGwgc2hvdWxkIG1hdGNoIChkZWZhdWx0IHZhbHVlcylcbiAgICAgICAgICAvLyAnMScgc2hvdWxkIG1hdGNoIHdpdGggMSAoaGVhZGVycylcbiAgICAgICAgICBsZXQgaXNBY3RpdmUgPSBmb3JtYXRzW2Zvcm1hdF0gPT09IGlucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgIChmb3JtYXRzW2Zvcm1hdF0gIT0gbnVsbCAmJiBmb3JtYXRzW2Zvcm1hdF0udG9TdHJpbmcoKSA9PT0gaW5wdXQuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgIChmb3JtYXRzW2Zvcm1hdF0gPT0gbnVsbCAmJiAhaW5wdXQuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKTtcbiAgICAgICAgICBpbnB1dC5jbGFzc0xpc3QudG9nZ2xlKCdxbC1hY3RpdmUnLCBpc0FjdGl2ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5wdXQuY2xhc3NMaXN0LnRvZ2dsZSgncWwtYWN0aXZlJywgZm9ybWF0c1tmb3JtYXRdICE9IG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblRvb2xiYXIuREVGQVVMVFMgPSB7fTtcblxuXG5mdW5jdGlvbiBhZGRCdXR0b24oY29udGFpbmVyLCBmb3JtYXQsIHZhbHVlKSB7XG4gIGxldCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnYnV0dG9uJyk7XG4gIGlucHV0LmNsYXNzTGlzdC5hZGQoJ3FsLScgKyBmb3JtYXQpO1xuICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgIGlucHV0LnZhbHVlID0gdmFsdWU7XG4gIH1cbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKGlucHV0KTtcbn1cblxuZnVuY3Rpb24gYWRkQ29udHJvbHMoY29udGFpbmVyLCBncm91cHMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGdyb3Vwc1swXSkpIHtcbiAgICBncm91cHMgPSBbZ3JvdXBzXTtcbiAgfVxuICBncm91cHMuZm9yRWFjaChmdW5jdGlvbihjb250cm9scykge1xuICAgIGxldCBncm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICBncm91cC5jbGFzc0xpc3QuYWRkKCdxbC1mb3JtYXRzJyk7XG4gICAgY29udHJvbHMuZm9yRWFjaChmdW5jdGlvbihjb250cm9sKSB7XG4gICAgICBpZiAodHlwZW9mIGNvbnRyb2wgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGFkZEJ1dHRvbihncm91cCwgY29udHJvbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgZm9ybWF0ID0gT2JqZWN0LmtleXMoY29udHJvbClbMF07XG4gICAgICAgIGxldCB2YWx1ZSA9IGNvbnRyb2xbZm9ybWF0XTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgYWRkU2VsZWN0KGdyb3VwLCBmb3JtYXQsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRCdXR0b24oZ3JvdXAsIGZvcm1hdCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGdyb3VwKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZFNlbGVjdChjb250YWluZXIsIGZvcm1hdCwgdmFsdWVzKSB7XG4gIGxldCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlbGVjdCcpO1xuICBpbnB1dC5jbGFzc0xpc3QuYWRkKCdxbC0nICsgZm9ybWF0KTtcbiAgdmFsdWVzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBsZXQgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgaWYgKHZhbHVlICE9PSBmYWxzZSkge1xuICAgICAgb3B0aW9uLnNldEF0dHJpYnV0ZSgndmFsdWUnLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJyk7XG4gICAgfVxuICAgIGlucHV0LmFwcGVuZENoaWxkKG9wdGlvbik7XG4gIH0pO1xuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaW5wdXQpO1xufVxuXG5Ub29sYmFyLkRFRkFVTFRTID0ge1xuICBjb250YWluZXI6IG51bGwsXG4gIGhhbmRsZXJzOiB7XG4gICAgY2xlYW46IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHJhbmdlID0gdGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgIGlmIChyYW5nZSA9PSBudWxsKSByZXR1cm47XG4gICAgICBpZiAocmFuZ2UubGVuZ3RoID09IDApIHtcbiAgICAgICAgbGV0IGZvcm1hdHMgPSB0aGlzLnF1aWxsLmdldEZvcm1hdCgpO1xuICAgICAgICBPYmplY3Qua2V5cyhmb3JtYXRzKS5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICAgICAgLy8gQ2xlYW4gZnVuY3Rpb25hbGl0eSBpbiBleGlzdGluZyBhcHBzIG9ubHkgY2xlYW4gaW5saW5lIGZvcm1hdHNcbiAgICAgICAgICBpZiAoUGFyY2htZW50LnF1ZXJ5KG5hbWUsIFBhcmNobWVudC5TY29wZS5JTkxJTkUpICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KG5hbWUsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5xdWlsbC5yZW1vdmVGb3JtYXQocmFuZ2UsIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gICAgICB9XG4gICAgfSxcbiAgICBkaXJlY3Rpb246IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBsZXQgYWxpZ24gPSB0aGlzLnF1aWxsLmdldEZvcm1hdCgpWydhbGlnbiddO1xuICAgICAgaWYgKHZhbHVlID09PSAncnRsJyAmJiBhbGlnbiA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdhbGlnbicsICdyaWdodCcsIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gICAgICB9IGVsc2UgaWYgKCF2YWx1ZSAmJiBhbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnYWxpZ24nLCBmYWxzZSwgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdkaXJlY3Rpb24nLCB2YWx1ZSwgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICB9LFxuICAgIGluZGVudDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGxldCByYW5nZSA9IHRoaXMucXVpbGwuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICBsZXQgZm9ybWF0cyA9IHRoaXMucXVpbGwuZ2V0Rm9ybWF0KHJhbmdlKTtcbiAgICAgIGxldCBpbmRlbnQgPSBwYXJzZUludChmb3JtYXRzLmluZGVudCB8fCAwKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gJysxJyB8fCB2YWx1ZSA9PT0gJy0xJykge1xuICAgICAgICBsZXQgbW9kaWZpZXIgPSAodmFsdWUgPT09ICcrMScpID8gMSA6IC0xO1xuICAgICAgICBpZiAoZm9ybWF0cy5kaXJlY3Rpb24gPT09ICdydGwnKSBtb2RpZmllciAqPSAtMTtcbiAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2luZGVudCcsIGluZGVudCArIG1vZGlmaWVyLCBRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgbGluazogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICB2YWx1ZSA9IHByb21wdCgnRW50ZXIgbGluayBVUkw6Jyk7XG4gICAgICB9XG4gICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnbGluaycsIHZhbHVlLCBRdWlsbC5zb3VyY2VzLlVTRVIpO1xuICAgIH0sXG4gICAgbGlzdDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGxldCByYW5nZSA9IHRoaXMucXVpbGwuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICBsZXQgZm9ybWF0cyA9IHRoaXMucXVpbGwuZ2V0Rm9ybWF0KHJhbmdlKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gJ2NoZWNrJykge1xuICAgICAgICBpZiAoZm9ybWF0c1snbGlzdCddID09PSAnY2hlY2tlZCcgfHwgZm9ybWF0c1snbGlzdCddID09PSAndW5jaGVja2VkJykge1xuICAgICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdsaXN0JywgZmFsc2UsIFF1aWxsLnNvdXJjZXMuVVNFUik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2xpc3QnLCAndW5jaGVja2VkJywgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2xpc3QnLCB2YWx1ZSwgUXVpbGwuc291cmNlcy5VU0VSKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuXG5leHBvcnQgeyBUb29sYmFyIGFzIGRlZmF1bHQsIGFkZENvbnRyb2xzIH07XG4iLCJpbXBvcnQgS2V5Ym9hcmQgZnJvbSAnLi4vbW9kdWxlcy9rZXlib2FyZCc7XG5pbXBvcnQgRHJvcGRvd25JY29uIGZyb20gJy4uL2Fzc2V0cy9pY29ucy9kcm9wZG93bi5zdmcnO1xuXG5sZXQgb3B0aW9uc0NvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiB0b2dnbGVBcmlhQXR0cmlidXRlKGVsZW1lbnQsIGF0dHJpYnV0ZSkge1xuICBlbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsICEoZWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKSA9PT0gJ3RydWUnKSk7XG59XG5cbmNsYXNzIFBpY2tlciB7XG4gIGNvbnN0cnVjdG9yKHNlbGVjdCkge1xuICAgIHRoaXMuc2VsZWN0ID0gc2VsZWN0O1xuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIHRoaXMuYnVpbGRQaWNrZXIoKTtcbiAgICB0aGlzLnNlbGVjdC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIHRoaXMuc2VsZWN0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuY29udGFpbmVyLCB0aGlzLnNlbGVjdCk7XG5cbiAgICB0aGlzLmxhYmVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsICgpID0+IHtcbiAgICAgIHRoaXMudG9nZ2xlUGlja2VyKCk7XG4gICAgfSk7XG4gICAgdGhpcy5sYWJlbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KSA9PiB7XG4gICAgICBzd2l0Y2goZXZlbnQua2V5Q29kZSkge1xuICAgICAgICAvLyBBbGxvd3MgdGhlIFwiRW50ZXJcIiBrZXkgdG8gb3BlbiB0aGUgcGlja2VyXG4gICAgICAgIGNhc2UgS2V5Ym9hcmQua2V5cy5FTlRFUjpcbiAgICAgICAgICB0aGlzLnRvZ2dsZVBpY2tlcigpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIC8vIEFsbG93cyB0aGUgXCJFc2NhcGVcIiBrZXkgdG8gY2xvc2UgdGhlIHBpY2tlclxuICAgICAgICBjYXNlIEtleWJvYXJkLmtleXMuRVNDQVBFOlxuICAgICAgICAgIHRoaXMuZXNjYXBlKCk7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIHRvZ2dsZVBpY2tlcigpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QudG9nZ2xlKCdxbC1leHBhbmRlZCcpO1xuICAgIC8vIFRvZ2dsZSBhcmlhLWV4cGFuZGVkIGFuZCBhcmlhLWhpZGRlbiB0byBtYWtlIHRoZSBwaWNrZXIgYWNjZXNzaWJsZVxuICAgIHRvZ2dsZUFyaWFBdHRyaWJ1dGUodGhpcy5sYWJlbCwgJ2FyaWEtZXhwYW5kZWQnKTtcbiAgICB0b2dnbGVBcmlhQXR0cmlidXRlKHRoaXMub3B0aW9ucywgJ2FyaWEtaGlkZGVuJyk7XG4gIH1cblxuICBidWlsZEl0ZW0ob3B0aW9uKSB7XG4gICAgbGV0IGl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgaXRlbS50YWJJbmRleCA9ICcwJztcbiAgICBpdGVtLnNldEF0dHJpYnV0ZSgncm9sZScsICdidXR0b24nKTtcblxuICAgIGl0ZW0uY2xhc3NMaXN0LmFkZCgncWwtcGlja2VyLWl0ZW0nKTtcbiAgICBpZiAob3B0aW9uLmhhc0F0dHJpYnV0ZSgndmFsdWUnKSkge1xuICAgICAgaXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnLCBvcHRpb24uZ2V0QXR0cmlidXRlKCd2YWx1ZScpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbi50ZXh0Q29udGVudCkge1xuICAgICAgaXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtbGFiZWwnLCBvcHRpb24udGV4dENvbnRlbnQpO1xuICAgIH1cbiAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5zZWxlY3RJdGVtKGl0ZW0sIHRydWUpO1xuICAgIH0pO1xuICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChldmVudCkgPT4ge1xuICAgICAgc3dpdGNoKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgLy8gQWxsb3dzIHRoZSBcIkVudGVyXCIga2V5IHRvIHNlbGVjdCBhbiBpdGVtXG4gICAgICAgIGNhc2UgS2V5Ym9hcmQua2V5cy5FTlRFUjpcbiAgICAgICAgICB0aGlzLnNlbGVjdEl0ZW0oaXRlbSwgdHJ1ZSk7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICAvLyBBbGxvd3MgdGhlIFwiRXNjYXBlXCIga2V5IHRvIGNsb3NlIHRoZSBwaWNrZXJcbiAgICAgICAgY2FzZSBLZXlib2FyZC5rZXlzLkVTQ0FQRTpcbiAgICAgICAgICB0aGlzLmVzY2FwZSgpO1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuXG4gIGJ1aWxkTGFiZWwoKSB7XG4gICAgbGV0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIGxhYmVsLmNsYXNzTGlzdC5hZGQoJ3FsLXBpY2tlci1sYWJlbCcpO1xuICAgIGxhYmVsLmlubmVySFRNTCA9IERyb3Bkb3duSWNvbjtcbiAgICBsYWJlbC50YWJJbmRleCA9ICcwJztcbiAgICBsYWJlbC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnYnV0dG9uJyk7XG4gICAgbGFiZWwuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xuICAgIHJldHVybiBsYWJlbDtcbiAgfVxuXG4gIGJ1aWxkT3B0aW9ucygpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICBvcHRpb25zLmNsYXNzTGlzdC5hZGQoJ3FsLXBpY2tlci1vcHRpb25zJyk7XG5cbiAgICAvLyBEb24ndCB3YW50IHNjcmVlbiByZWFkZXJzIHRvIHJlYWQgdGhpcyB1bnRpbCBvcHRpb25zIGFyZSB2aXNpYmxlXG4gICAgb3B0aW9ucy5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICBvcHRpb25zLnRhYkluZGV4ID0gJy0xJztcblxuICAgIC8vIE5lZWQgYSB1bmlxdWUgaWQgZm9yIGFyaWEtY29udHJvbHNcbiAgICBvcHRpb25zLmlkID0gYHFsLXBpY2tlci1vcHRpb25zLSR7b3B0aW9uc0NvdW50ZXJ9YDtcbiAgICBvcHRpb25zQ291bnRlciArPSAxO1xuICAgIHRoaXMubGFiZWwuc2V0QXR0cmlidXRlKCdhcmlhLWNvbnRyb2xzJywgb3B0aW9ucy5pZCk7XG5cbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgW10uc2xpY2UuY2FsbCh0aGlzLnNlbGVjdC5vcHRpb25zKS5mb3JFYWNoKChvcHRpb24pID0+IHtcbiAgICAgIGxldCBpdGVtID0gdGhpcy5idWlsZEl0ZW0ob3B0aW9uKTtcbiAgICAgIG9wdGlvbnMuYXBwZW5kQ2hpbGQoaXRlbSk7XG4gICAgICBpZiAob3B0aW9uLnNlbGVjdGVkID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0SXRlbShpdGVtKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChvcHRpb25zKTtcbiAgfVxuXG4gIGJ1aWxkUGlja2VyKCkge1xuICAgIFtdLnNsaWNlLmNhbGwodGhpcy5zZWxlY3QuYXR0cmlidXRlcykuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgdGhpcy5jb250YWluZXIuc2V0QXR0cmlidXRlKGl0ZW0ubmFtZSwgaXRlbS52YWx1ZSk7XG4gICAgfSk7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgncWwtcGlja2VyJyk7XG4gICAgdGhpcy5sYWJlbCA9IHRoaXMuYnVpbGRMYWJlbCgpO1xuICAgIHRoaXMuYnVpbGRPcHRpb25zKCk7XG4gIH1cblxuICBlc2NhcGUoKSB7XG4gICAgLy8gQ2xvc2UgbWVudSBhbmQgcmV0dXJuIGZvY3VzIHRvIHRyaWdnZXIgbGFiZWxcbiAgICB0aGlzLmNsb3NlKCk7XG4gICAgLy8gTmVlZCBzZXRUaW1lb3V0IGZvciBhY2Nlc3NpYmlsaXR5IHRvIGVuc3VyZSB0aGF0IHRoZSBicm93c2VyIGV4ZWN1dGVzXG4gICAgLy8gZm9jdXMgb24gdGhlIG5leHQgcHJvY2VzcyB0aHJlYWQgYW5kIGFmdGVyIGFueSBET00gY29udGVudCBjaGFuZ2VzXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLmxhYmVsLmZvY3VzKCksIDEpO1xuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgncWwtZXhwYW5kZWQnKTtcbiAgICB0aGlzLmxhYmVsLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuICAgIHRoaXMub3B0aW9ucy5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgfVxuXG4gIHNlbGVjdEl0ZW0oaXRlbSwgdHJpZ2dlciA9IGZhbHNlKSB7XG4gICAgbGV0IHNlbGVjdGVkID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignLnFsLXNlbGVjdGVkJyk7XG4gICAgaWYgKGl0ZW0gPT09IHNlbGVjdGVkKSByZXR1cm47XG4gICAgaWYgKHNlbGVjdGVkICE9IG51bGwpIHtcbiAgICAgIHNlbGVjdGVkLmNsYXNzTGlzdC5yZW1vdmUoJ3FsLXNlbGVjdGVkJyk7XG4gICAgfVxuICAgIGlmIChpdGVtID09IG51bGwpIHJldHVybjtcbiAgICBpdGVtLmNsYXNzTGlzdC5hZGQoJ3FsLXNlbGVjdGVkJyk7XG4gICAgdGhpcy5zZWxlY3Quc2VsZWN0ZWRJbmRleCA9IFtdLmluZGV4T2YuY2FsbChpdGVtLnBhcmVudE5vZGUuY2hpbGRyZW4sIGl0ZW0pO1xuICAgIGlmIChpdGVtLmhhc0F0dHJpYnV0ZSgnZGF0YS12YWx1ZScpKSB7XG4gICAgICB0aGlzLmxhYmVsLnNldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScsIGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxhYmVsLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpO1xuICAgIH1cbiAgICBpZiAoaXRlbS5oYXNBdHRyaWJ1dGUoJ2RhdGEtbGFiZWwnKSkge1xuICAgICAgdGhpcy5sYWJlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbGFiZWwnLCBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1sYWJlbCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sYWJlbC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtbGFiZWwnKTtcbiAgICB9XG4gICAgaWYgKHRyaWdnZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5zZWxlY3QuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NoYW5nZScpKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIEV2ZW50ID09PSAnb2JqZWN0JykgeyAgICAgLy8gSUUxMVxuICAgICAgICBsZXQgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICAgICAgZXZlbnQuaW5pdEV2ZW50KCdjaGFuZ2UnLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgdGhpcy5zZWxlY3QuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICB9XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIGxldCBvcHRpb247XG4gICAgaWYgKHRoaXMuc2VsZWN0LnNlbGVjdGVkSW5kZXggPiAtMSkge1xuICAgICAgbGV0IGl0ZW0gPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcucWwtcGlja2VyLW9wdGlvbnMnKS5jaGlsZHJlblt0aGlzLnNlbGVjdC5zZWxlY3RlZEluZGV4XTtcbiAgICAgIG9wdGlvbiA9IHRoaXMuc2VsZWN0Lm9wdGlvbnNbdGhpcy5zZWxlY3Quc2VsZWN0ZWRJbmRleF07XG4gICAgICB0aGlzLnNlbGVjdEl0ZW0oaXRlbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VsZWN0SXRlbShudWxsKTtcbiAgICB9XG4gICAgbGV0IGlzQWN0aXZlID0gb3B0aW9uICE9IG51bGwgJiYgb3B0aW9uICE9PSB0aGlzLnNlbGVjdC5xdWVyeVNlbGVjdG9yKCdvcHRpb25bc2VsZWN0ZWRdJyk7XG4gICAgdGhpcy5sYWJlbC5jbGFzc0xpc3QudG9nZ2xlKCdxbC1hY3RpdmUnLCBpc0FjdGl2ZSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBQaWNrZXI7XG4iLCJpbXBvcnQgUGlja2VyIGZyb20gJy4vcGlja2VyJztcblxuXG5jbGFzcyBDb2xvclBpY2tlciBleHRlbmRzIFBpY2tlciB7XG4gIGNvbnN0cnVjdG9yKHNlbGVjdCwgbGFiZWwpIHtcbiAgICBzdXBlcihzZWxlY3QpO1xuICAgIHRoaXMubGFiZWwuaW5uZXJIVE1MID0gbGFiZWw7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgncWwtY29sb3ItcGlja2VyJyk7XG4gICAgW10uc2xpY2UuY2FsbCh0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcucWwtcGlja2VyLWl0ZW0nKSwgMCwgNykuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICBpdGVtLmNsYXNzTGlzdC5hZGQoJ3FsLXByaW1hcnknKTtcbiAgICB9KTtcbiAgfVxuXG4gIGJ1aWxkSXRlbShvcHRpb24pIHtcbiAgICBsZXQgaXRlbSA9IHN1cGVyLmJ1aWxkSXRlbShvcHRpb24pO1xuICAgIGl0ZW0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gb3B0aW9uLmdldEF0dHJpYnV0ZSgndmFsdWUnKSB8fCAnJztcbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuXG4gIHNlbGVjdEl0ZW0oaXRlbSwgdHJpZ2dlcikge1xuICAgIHN1cGVyLnNlbGVjdEl0ZW0oaXRlbSwgdHJpZ2dlcik7XG4gICAgbGV0IGNvbG9yTGFiZWwgPSB0aGlzLmxhYmVsLnF1ZXJ5U2VsZWN0b3IoJy5xbC1jb2xvci1sYWJlbCcpO1xuICAgIGxldCB2YWx1ZSA9IGl0ZW0gPyBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpIHx8ICcnIDogJyc7XG4gICAgaWYgKGNvbG9yTGFiZWwpIHtcbiAgICAgIGlmIChjb2xvckxhYmVsLnRhZ05hbWUgPT09ICdsaW5lJykge1xuICAgICAgICBjb2xvckxhYmVsLnN0eWxlLnN0cm9rZSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29sb3JMYWJlbC5zdHlsZS5maWxsID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgQ29sb3JQaWNrZXI7XG4iLCJpbXBvcnQgUGlja2VyIGZyb20gJy4vcGlja2VyJztcblxuXG5jbGFzcyBJY29uUGlja2VyIGV4dGVuZHMgUGlja2VyIHtcbiAgY29uc3RydWN0b3Ioc2VsZWN0LCBpY29ucykge1xuICAgIHN1cGVyKHNlbGVjdCk7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgncWwtaWNvbi1waWNrZXInKTtcbiAgICBbXS5mb3JFYWNoLmNhbGwodGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLnFsLXBpY2tlci1pdGVtJyksIChpdGVtKSA9PiB7XG4gICAgICBpdGVtLmlubmVySFRNTCA9IGljb25zW2l0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykgfHwgJyddO1xuICAgIH0pO1xuICAgIHRoaXMuZGVmYXVsdEl0ZW0gPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcucWwtc2VsZWN0ZWQnKTtcbiAgICB0aGlzLnNlbGVjdEl0ZW0odGhpcy5kZWZhdWx0SXRlbSk7XG4gIH1cblxuICBzZWxlY3RJdGVtKGl0ZW0sIHRyaWdnZXIpIHtcbiAgICBzdXBlci5zZWxlY3RJdGVtKGl0ZW0sIHRyaWdnZXIpO1xuICAgIGl0ZW0gPSBpdGVtIHx8IHRoaXMuZGVmYXVsdEl0ZW07XG4gICAgdGhpcy5sYWJlbC5pbm5lckhUTUwgPSBpdGVtLmlubmVySFRNTDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IEljb25QaWNrZXI7XG4iLCJjbGFzcyBUb29sdGlwIHtcbiAgY29uc3RydWN0b3IocXVpbGwsIGJvdW5kc0NvbnRhaW5lcikge1xuICAgIHRoaXMucXVpbGwgPSBxdWlsbDtcbiAgICB0aGlzLmJvdW5kc0NvbnRhaW5lciA9IGJvdW5kc0NvbnRhaW5lciB8fCBkb2N1bWVudC5ib2R5O1xuICAgIHRoaXMucm9vdCA9IHF1aWxsLmFkZENvbnRhaW5lcigncWwtdG9vbHRpcCcpO1xuICAgIHRoaXMucm9vdC5pbm5lckhUTUwgPSB0aGlzLmNvbnN0cnVjdG9yLlRFTVBMQVRFO1xuICAgIGlmICh0aGlzLnF1aWxsLnJvb3QgPT09IHRoaXMucXVpbGwuc2Nyb2xsaW5nQ29udGFpbmVyKSB7XG4gICAgICB0aGlzLnF1aWxsLnJvb3QuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xuICAgICAgICB0aGlzLnJvb3Quc3R5bGUubWFyZ2luVG9wID0gKC0xKnRoaXMucXVpbGwucm9vdC5zY3JvbGxUb3ApICsgJ3B4JztcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLmhpZGUoKTtcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgdGhpcy5yb290LmNsYXNzTGlzdC5hZGQoJ3FsLWhpZGRlbicpO1xuICB9XG5cbiAgcG9zaXRpb24ocmVmZXJlbmNlKSB7XG4gICAgbGV0IGxlZnQgPSByZWZlcmVuY2UubGVmdCArIHJlZmVyZW5jZS53aWR0aC8yIC0gdGhpcy5yb290Lm9mZnNldFdpZHRoLzI7XG4gICAgLy8gcm9vdC5zY3JvbGxUb3Agc2hvdWxkIGJlIDAgaWYgc2Nyb2xsQ29udGFpbmVyICE9PSByb290XG4gICAgbGV0IHRvcCA9IHJlZmVyZW5jZS5ib3R0b20gKyB0aGlzLnF1aWxsLnJvb3Quc2Nyb2xsVG9wO1xuICAgIHRoaXMucm9vdC5zdHlsZS5sZWZ0ID0gbGVmdCArICdweCc7XG4gICAgdGhpcy5yb290LnN0eWxlLnRvcCA9IHRvcCArICdweCc7XG4gICAgdGhpcy5yb290LmNsYXNzTGlzdC5yZW1vdmUoJ3FsLWZsaXAnKTtcbiAgICBsZXQgY29udGFpbmVyQm91bmRzID0gdGhpcy5ib3VuZHNDb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgbGV0IHJvb3RCb3VuZHMgPSB0aGlzLnJvb3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgbGV0IHNoaWZ0ID0gMDtcbiAgICBpZiAocm9vdEJvdW5kcy5yaWdodCA+IGNvbnRhaW5lckJvdW5kcy5yaWdodCkge1xuICAgICAgc2hpZnQgPSBjb250YWluZXJCb3VuZHMucmlnaHQgLSByb290Qm91bmRzLnJpZ2h0O1xuICAgICAgdGhpcy5yb290LnN0eWxlLmxlZnQgPSAobGVmdCArIHNoaWZ0KSArICdweCc7XG4gICAgfVxuICAgIGlmIChyb290Qm91bmRzLmxlZnQgPCBjb250YWluZXJCb3VuZHMubGVmdCkge1xuICAgICAgc2hpZnQgPSBjb250YWluZXJCb3VuZHMubGVmdCAtIHJvb3RCb3VuZHMubGVmdDtcbiAgICAgIHRoaXMucm9vdC5zdHlsZS5sZWZ0ID0gKGxlZnQgKyBzaGlmdCkgKyAncHgnO1xuICAgIH1cbiAgICBpZiAocm9vdEJvdW5kcy5ib3R0b20gPiBjb250YWluZXJCb3VuZHMuYm90dG9tKSB7XG4gICAgICBsZXQgaGVpZ2h0ID0gcm9vdEJvdW5kcy5ib3R0b20gLSByb290Qm91bmRzLnRvcDtcbiAgICAgIGxldCB2ZXJ0aWNhbFNoaWZ0ID0gcmVmZXJlbmNlLmJvdHRvbSAtIHJlZmVyZW5jZS50b3AgKyBoZWlnaHQ7XG4gICAgICB0aGlzLnJvb3Quc3R5bGUudG9wID0gKHRvcCAtIHZlcnRpY2FsU2hpZnQpICsgJ3B4JztcbiAgICAgIHRoaXMucm9vdC5jbGFzc0xpc3QuYWRkKCdxbC1mbGlwJyk7XG4gICAgfVxuICAgIHJldHVybiBzaGlmdDtcbiAgfVxuXG4gIHNob3coKSB7XG4gICAgdGhpcy5yb290LmNsYXNzTGlzdC5yZW1vdmUoJ3FsLWVkaXRpbmcnKTtcbiAgICB0aGlzLnJvb3QuY2xhc3NMaXN0LnJlbW92ZSgncWwtaGlkZGVuJyk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBUb29sdGlwO1xuIiwiaW1wb3J0IGV4dGVuZCBmcm9tICdleHRlbmQnO1xuaW1wb3J0IERlbHRhIGZyb20gJ3F1aWxsLWRlbHRhJztcbmltcG9ydCBFbWl0dGVyIGZyb20gJy4uL2NvcmUvZW1pdHRlcic7XG5pbXBvcnQgS2V5Ym9hcmQgZnJvbSAnLi4vbW9kdWxlcy9rZXlib2FyZCc7XG5pbXBvcnQgVGhlbWUgZnJvbSAnLi4vY29yZS90aGVtZSc7XG5pbXBvcnQgQ29sb3JQaWNrZXIgZnJvbSAnLi4vdWkvY29sb3ItcGlja2VyJztcbmltcG9ydCBJY29uUGlja2VyIGZyb20gJy4uL3VpL2ljb24tcGlja2VyJztcbmltcG9ydCBQaWNrZXIgZnJvbSAnLi4vdWkvcGlja2VyJztcbmltcG9ydCBUb29sdGlwIGZyb20gJy4uL3VpL3Rvb2x0aXAnO1xuXG5cbmNvbnN0IEFMSUdOUyA9IFsgZmFsc2UsICdjZW50ZXInLCAncmlnaHQnLCAnanVzdGlmeScgXTtcblxuY29uc3QgQ09MT1JTID0gW1xuICBcIiMwMDAwMDBcIiwgXCIjZTYwMDAwXCIsIFwiI2ZmOTkwMFwiLCBcIiNmZmZmMDBcIiwgXCIjMDA4YTAwXCIsIFwiIzAwNjZjY1wiLCBcIiM5OTMzZmZcIixcbiAgXCIjZmZmZmZmXCIsIFwiI2ZhY2NjY1wiLCBcIiNmZmViY2NcIiwgXCIjZmZmZmNjXCIsIFwiI2NjZThjY1wiLCBcIiNjY2UwZjVcIiwgXCIjZWJkNmZmXCIsXG4gIFwiI2JiYmJiYlwiLCBcIiNmMDY2NjZcIiwgXCIjZmZjMjY2XCIsIFwiI2ZmZmY2NlwiLCBcIiM2NmI5NjZcIiwgXCIjNjZhM2UwXCIsIFwiI2MyODVmZlwiLFxuICBcIiM4ODg4ODhcIiwgXCIjYTEwMDAwXCIsIFwiI2IyNmIwMFwiLCBcIiNiMmIyMDBcIiwgXCIjMDA2MTAwXCIsIFwiIzAwNDdiMlwiLCBcIiM2YjI0YjJcIixcbiAgXCIjNDQ0NDQ0XCIsIFwiIzVjMDAwMFwiLCBcIiM2NjNkMDBcIiwgXCIjNjY2NjAwXCIsIFwiIzAwMzcwMFwiLCBcIiMwMDI5NjZcIiwgXCIjM2QxNDY2XCJcbl07XG5cbmNvbnN0IEZPTlRTID0gWyBmYWxzZSwgJ3NlcmlmJywgJ21vbm9zcGFjZScgXTtcblxuY29uc3QgSEVBREVSUyA9IFsgJzEnLCAnMicsICczJywgZmFsc2UgXTtcblxuY29uc3QgU0laRVMgPSBbICdzbWFsbCcsIGZhbHNlLCAnbGFyZ2UnLCAnaHVnZScgXTtcblxuXG5jbGFzcyBCYXNlVGhlbWUgZXh0ZW5kcyBUaGVtZSB7XG4gIGNvbnN0cnVjdG9yKHF1aWxsLCBvcHRpb25zKSB7XG4gICAgc3VwZXIocXVpbGwsIG9wdGlvbnMpO1xuICAgIGxldCBsaXN0ZW5lciA9IChlKSA9PiB7XG4gICAgICBpZiAoIWRvY3VtZW50LmJvZHkuY29udGFpbnMocXVpbGwucm9vdCkpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBsaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy50b29sdGlwICE9IG51bGwgJiYgIXRoaXMudG9vbHRpcC5yb290LmNvbnRhaW5zKGUudGFyZ2V0KSAmJlxuICAgICAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IHRoaXMudG9vbHRpcC50ZXh0Ym94ICYmICF0aGlzLnF1aWxsLmhhc0ZvY3VzKCkpIHtcbiAgICAgICAgdGhpcy50b29sdGlwLmhpZGUoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnBpY2tlcnMgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnBpY2tlcnMuZm9yRWFjaChmdW5jdGlvbihwaWNrZXIpIHtcbiAgICAgICAgICBpZiAoIXBpY2tlci5jb250YWluZXIuY29udGFpbnMoZS50YXJnZXQpKSB7XG4gICAgICAgICAgICBwaWNrZXIuY2xvc2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgcXVpbGwuZW1pdHRlci5saXN0ZW5ET00oJ2NsaWNrJywgZG9jdW1lbnQuYm9keSwgbGlzdGVuZXIpO1xuICB9XG5cbiAgYWRkTW9kdWxlKG5hbWUpIHtcbiAgICBsZXQgbW9kdWxlID0gc3VwZXIuYWRkTW9kdWxlKG5hbWUpO1xuICAgIGlmIChuYW1lID09PSAndG9vbGJhcicpIHtcbiAgICAgIHRoaXMuZXh0ZW5kVG9vbGJhcihtb2R1bGUpO1xuICAgIH1cbiAgICByZXR1cm4gbW9kdWxlO1xuICB9XG5cbiAgYnVpbGRCdXR0b25zKGJ1dHRvbnMsIGljb25zKSB7XG4gICAgYnV0dG9ucy5mb3JFYWNoKChidXR0b24pID0+IHtcbiAgICAgIGxldCBjbGFzc05hbWUgPSBidXR0b24uZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnO1xuICAgICAgY2xhc3NOYW1lLnNwbGl0KC9cXHMrLykuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgICBpZiAoIW5hbWUuc3RhcnRzV2l0aCgncWwtJykpIHJldHVybjtcbiAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoJ3FsLScubGVuZ3RoKTtcbiAgICAgICAgaWYgKGljb25zW25hbWVdID09IG51bGwpIHJldHVybjtcbiAgICAgICAgaWYgKG5hbWUgPT09ICdkaXJlY3Rpb24nKSB7XG4gICAgICAgICAgYnV0dG9uLmlubmVySFRNTCA9IGljb25zW25hbWVdWycnXSArIGljb25zW25hbWVdWydydGwnXTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaWNvbnNbbmFtZV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgYnV0dG9uLmlubmVySFRNTCA9IGljb25zW25hbWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCB2YWx1ZSA9IGJ1dHRvbi52YWx1ZSB8fCAnJztcbiAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiBpY29uc1tuYW1lXVt2YWx1ZV0pIHtcbiAgICAgICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBpY29uc1tuYW1lXVt2YWx1ZV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGJ1aWxkUGlja2VycyhzZWxlY3RzLCBpY29ucykge1xuICAgIHRoaXMucGlja2VycyA9IHNlbGVjdHMubWFwKChzZWxlY3QpID0+IHtcbiAgICAgIGlmIChzZWxlY3QuY2xhc3NMaXN0LmNvbnRhaW5zKCdxbC1hbGlnbicpKSB7XG4gICAgICAgIGlmIChzZWxlY3QucXVlcnlTZWxlY3Rvcignb3B0aW9uJykgPT0gbnVsbCkge1xuICAgICAgICAgIGZpbGxTZWxlY3Qoc2VsZWN0LCBBTElHTlMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgSWNvblBpY2tlcihzZWxlY3QsIGljb25zLmFsaWduKTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0LmNsYXNzTGlzdC5jb250YWlucygncWwtYmFja2dyb3VuZCcpIHx8IHNlbGVjdC5jbGFzc0xpc3QuY29udGFpbnMoJ3FsLWNvbG9yJykpIHtcbiAgICAgICAgbGV0IGZvcm1hdCA9IHNlbGVjdC5jbGFzc0xpc3QuY29udGFpbnMoJ3FsLWJhY2tncm91bmQnKSA/ICdiYWNrZ3JvdW5kJyA6ICdjb2xvcic7XG4gICAgICAgIGlmIChzZWxlY3QucXVlcnlTZWxlY3Rvcignb3B0aW9uJykgPT0gbnVsbCkge1xuICAgICAgICAgIGZpbGxTZWxlY3Qoc2VsZWN0LCBDT0xPUlMsIGZvcm1hdCA9PT0gJ2JhY2tncm91bmQnID8gJyNmZmZmZmYnIDogJyMwMDAwMDAnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IENvbG9yUGlja2VyKHNlbGVjdCwgaWNvbnNbZm9ybWF0XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2VsZWN0LnF1ZXJ5U2VsZWN0b3IoJ29wdGlvbicpID09IG51bGwpIHtcbiAgICAgICAgICBpZiAoc2VsZWN0LmNsYXNzTGlzdC5jb250YWlucygncWwtZm9udCcpKSB7XG4gICAgICAgICAgICBmaWxsU2VsZWN0KHNlbGVjdCwgRk9OVFMpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0LmNsYXNzTGlzdC5jb250YWlucygncWwtaGVhZGVyJykpIHtcbiAgICAgICAgICAgIGZpbGxTZWxlY3Qoc2VsZWN0LCBIRUFERVJTKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdC5jbGFzc0xpc3QuY29udGFpbnMoJ3FsLXNpemUnKSkge1xuICAgICAgICAgICAgZmlsbFNlbGVjdChzZWxlY3QsIFNJWkVTKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQaWNrZXIoc2VsZWN0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBsZXQgdXBkYXRlID0gKCkgPT4ge1xuICAgICAgdGhpcy5waWNrZXJzLmZvckVhY2goZnVuY3Rpb24ocGlja2VyKSB7XG4gICAgICAgIHBpY2tlci51cGRhdGUoKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgdGhpcy5xdWlsbC5vbihFbWl0dGVyLmV2ZW50cy5FRElUT1JfQ0hBTkdFLCB1cGRhdGUpO1xuICB9XG59XG5CYXNlVGhlbWUuREVGQVVMVFMgPSBleHRlbmQodHJ1ZSwge30sIFRoZW1lLkRFRkFVTFRTLCB7XG4gIG1vZHVsZXM6IHtcbiAgICB0b29sYmFyOiB7XG4gICAgICBoYW5kbGVyczoge1xuICAgICAgICBmb3JtdWxhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aGlzLnF1aWxsLnRoZW1lLnRvb2x0aXAuZWRpdCgnZm9ybXVsYScpO1xuICAgICAgICB9LFxuICAgICAgICBpbWFnZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbGV0IGZpbGVJbnB1dCA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0LnFsLWltYWdlW3R5cGU9ZmlsZV0nKTtcbiAgICAgICAgICBpZiAoZmlsZUlucHV0ID09IG51bGwpIHtcbiAgICAgICAgICAgIGZpbGVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgICAgICBmaWxlSW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2ZpbGUnKTtcbiAgICAgICAgICAgIGZpbGVJbnB1dC5zZXRBdHRyaWJ1dGUoJ2FjY2VwdCcsICdpbWFnZS9wbmcsIGltYWdlL2dpZiwgaW1hZ2UvanBlZywgaW1hZ2UvYm1wLCBpbWFnZS94LWljb24nKTtcbiAgICAgICAgICAgIGZpbGVJbnB1dC5jbGFzc0xpc3QuYWRkKCdxbC1pbWFnZScpO1xuICAgICAgICAgICAgZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGZpbGVJbnB1dC5maWxlcyAhPSBudWxsICYmIGZpbGVJbnB1dC5maWxlc1swXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICBsZXQgcmFuZ2UgPSB0aGlzLnF1aWxsLmdldFNlbGVjdGlvbih0cnVlKTtcbiAgICAgICAgICAgICAgICAgIHRoaXMucXVpbGwudXBkYXRlQ29udGVudHMobmV3IERlbHRhKClcbiAgICAgICAgICAgICAgICAgICAgLnJldGFpbihyYW5nZS5pbmRleClcbiAgICAgICAgICAgICAgICAgICAgLmRlbGV0ZShyYW5nZS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIC5pbnNlcnQoeyBpbWFnZTogZS50YXJnZXQucmVzdWx0IH0pXG4gICAgICAgICAgICAgICAgICAsIEVtaXR0ZXIuc291cmNlcy5VU0VSKTtcbiAgICAgICAgICAgICAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKHJhbmdlLmluZGV4ICsgMSwgRW1pdHRlci5zb3VyY2VzLlNJTEVOVCk7XG4gICAgICAgICAgICAgICAgICBmaWxlSW5wdXQudmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlSW5wdXQuZmlsZXNbMF0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGZpbGVJbnB1dCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZpbGVJbnB1dC5jbGljaygpO1xuICAgICAgICB9LFxuICAgICAgICB2aWRlbzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGhpcy5xdWlsbC50aGVtZS50b29sdGlwLmVkaXQoJ3ZpZGVvJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG5cbmNsYXNzIEJhc2VUb29sdGlwIGV4dGVuZHMgVG9vbHRpcCB7XG4gIGNvbnN0cnVjdG9yKHF1aWxsLCBib3VuZHNDb250YWluZXIpIHtcbiAgICBzdXBlcihxdWlsbCwgYm91bmRzQ29udGFpbmVyKTtcbiAgICB0aGlzLnRleHRib3ggPSB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcignaW5wdXRbdHlwZT1cInRleHRcIl0nKTtcbiAgICB0aGlzLmxpc3RlbigpO1xuICB9XG5cbiAgbGlzdGVuKCkge1xuICAgIHRoaXMudGV4dGJveC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoS2V5Ym9hcmQubWF0Y2goZXZlbnQsICdlbnRlcicpKSB7XG4gICAgICAgIHRoaXMuc2F2ZSgpO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSBlbHNlIGlmIChLZXlib2FyZC5tYXRjaChldmVudCwgJ2VzY2FwZScpKSB7XG4gICAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjYW5jZWwoKSB7XG4gICAgdGhpcy5oaWRlKCk7XG4gIH1cblxuICBlZGl0KG1vZGUgPSAnbGluaycsIHByZXZpZXcgPSBudWxsKSB7XG4gICAgdGhpcy5yb290LmNsYXNzTGlzdC5yZW1vdmUoJ3FsLWhpZGRlbicpO1xuICAgIHRoaXMucm9vdC5jbGFzc0xpc3QuYWRkKCdxbC1lZGl0aW5nJyk7XG4gICAgaWYgKHByZXZpZXcgIT0gbnVsbCkge1xuICAgICAgdGhpcy50ZXh0Ym94LnZhbHVlID0gcHJldmlldztcbiAgICB9IGVsc2UgaWYgKG1vZGUgIT09IHRoaXMucm9vdC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbW9kZScpKSB7XG4gICAgICB0aGlzLnRleHRib3gudmFsdWUgPSAnJztcbiAgICB9XG4gICAgdGhpcy5wb3NpdGlvbih0aGlzLnF1aWxsLmdldEJvdW5kcyh0aGlzLnF1aWxsLnNlbGVjdGlvbi5zYXZlZFJhbmdlKSk7XG4gICAgdGhpcy50ZXh0Ym94LnNlbGVjdCgpO1xuICAgIHRoaXMudGV4dGJveC5zZXRBdHRyaWJ1dGUoJ3BsYWNlaG9sZGVyJywgdGhpcy50ZXh0Ym94LmdldEF0dHJpYnV0ZShgZGF0YS0ke21vZGV9YCkgfHwgJycpO1xuICAgIHRoaXMucm9vdC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbW9kZScsIG1vZGUpO1xuICB9XG5cbiAgcmVzdG9yZUZvY3VzKCkge1xuICAgIGxldCBzY3JvbGxUb3AgPSB0aGlzLnF1aWxsLnNjcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxUb3A7XG4gICAgdGhpcy5xdWlsbC5mb2N1cygpO1xuICAgIHRoaXMucXVpbGwuc2Nyb2xsaW5nQ29udGFpbmVyLnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgfVxuXG4gIHNhdmUoKSB7XG4gICAgbGV0IHZhbHVlID0gdGhpcy50ZXh0Ym94LnZhbHVlO1xuICAgIHN3aXRjaCh0aGlzLnJvb3QuZ2V0QXR0cmlidXRlKCdkYXRhLW1vZGUnKSkge1xuICAgICAgY2FzZSAnbGluayc6IHtcbiAgICAgICAgbGV0IHNjcm9sbFRvcCA9IHRoaXMucXVpbGwucm9vdC5zY3JvbGxUb3A7XG4gICAgICAgIGlmICh0aGlzLmxpbmtSYW5nZSkge1xuICAgICAgICAgIHRoaXMucXVpbGwuZm9ybWF0VGV4dCh0aGlzLmxpbmtSYW5nZSwgJ2xpbmsnLCB2YWx1ZSwgRW1pdHRlci5zb3VyY2VzLlVTRVIpO1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLmxpbmtSYW5nZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnJlc3RvcmVGb2N1cygpO1xuICAgICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdsaW5rJywgdmFsdWUsIEVtaXR0ZXIuc291cmNlcy5VU0VSKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnF1aWxsLnJvb3Quc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ3ZpZGVvJzoge1xuICAgICAgICB2YWx1ZSA9IGV4dHJhY3RWaWRlb1VybCh2YWx1ZSk7XG4gICAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1mYWxsdGhyb3VnaFxuICAgICAgY2FzZSAnZm9ybXVsYSc6IHtcbiAgICAgICAgaWYgKCF2YWx1ZSkgYnJlYWs7XG4gICAgICAgIGxldCByYW5nZSA9IHRoaXMucXVpbGwuZ2V0U2VsZWN0aW9uKHRydWUpO1xuICAgICAgICBpZiAocmFuZ2UgIT0gbnVsbCkge1xuICAgICAgICAgIGxldCBpbmRleCA9IHJhbmdlLmluZGV4ICsgcmFuZ2UubGVuZ3RoO1xuICAgICAgICAgIHRoaXMucXVpbGwuaW5zZXJ0RW1iZWQoaW5kZXgsIHRoaXMucm9vdC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbW9kZScpLCB2YWx1ZSwgRW1pdHRlci5zb3VyY2VzLlVTRVIpO1xuICAgICAgICAgIGlmICh0aGlzLnJvb3QuZ2V0QXR0cmlidXRlKCdkYXRhLW1vZGUnKSA9PT0gJ2Zvcm11bGEnKSB7XG4gICAgICAgICAgICB0aGlzLnF1aWxsLmluc2VydFRleHQoaW5kZXggKyAxLCAnICcsIEVtaXR0ZXIuc291cmNlcy5VU0VSKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24oaW5kZXggKyAyLCBFbWl0dGVyLnNvdXJjZXMuVVNFUik7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgICB0aGlzLnRleHRib3gudmFsdWUgPSAnJztcbiAgICB0aGlzLmhpZGUoKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGV4dHJhY3RWaWRlb1VybCh1cmwpIHtcbiAgbGV0IG1hdGNoID0gdXJsLm1hdGNoKC9eKD86KGh0dHBzPyk6XFwvXFwvKT8oPzooPzp3d3d8bSlcXC4pP3lvdXR1YmVcXC5jb21cXC93YXRjaC4qdj0oW2EtekEtWjAtOV8tXSspLykgfHxcbiAgICAgICAgICAgICAgdXJsLm1hdGNoKC9eKD86KGh0dHBzPyk6XFwvXFwvKT8oPzooPzp3d3d8bSlcXC4pP3lvdXR1XFwuYmVcXC8oW2EtekEtWjAtOV8tXSspLyk7XG4gIGlmIChtYXRjaCkge1xuICAgIHJldHVybiAobWF0Y2hbMV0gfHwgJ2h0dHBzJykgKyAnOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLycgKyBtYXRjaFsyXSArICc/c2hvd2luZm89MCc7XG4gIH1cbiAgaWYgKG1hdGNoID0gdXJsLm1hdGNoKC9eKD86KGh0dHBzPyk6XFwvXFwvKT8oPzp3d3dcXC4pP3ZpbWVvXFwuY29tXFwvKFxcZCspLykpIHsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uZC1hc3NpZ25cbiAgICByZXR1cm4gKG1hdGNoWzFdIHx8ICdodHRwcycpICsgJzovL3BsYXllci52aW1lby5jb20vdmlkZW8vJyArIG1hdGNoWzJdICsgJy8nO1xuICB9XG4gIHJldHVybiB1cmw7XG59XG5cbmZ1bmN0aW9uIGZpbGxTZWxlY3Qoc2VsZWN0LCB2YWx1ZXMsIGRlZmF1bHRWYWx1ZSA9IGZhbHNlKSB7XG4gIHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgbGV0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgIGlmICh2YWx1ZSA9PT0gZGVmYXVsdFZhbHVlKSB7XG4gICAgICBvcHRpb24uc2V0QXR0cmlidXRlKCdzZWxlY3RlZCcsICdzZWxlY3RlZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb24uc2V0QXR0cmlidXRlKCd2YWx1ZScsIHZhbHVlKTtcbiAgICB9XG4gICAgc2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbik7XG4gIH0pO1xufVxuXG5cbmV4cG9ydCB7IEJhc2VUb29sdGlwLCBCYXNlVGhlbWUgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IElubGluZSBmcm9tICcuLi9ibG90cy9pbmxpbmUnO1xuXG5cbmNsYXNzIExpbmsgZXh0ZW5kcyBJbmxpbmUge1xuICBzdGF0aWMgY3JlYXRlKHZhbHVlKSB7XG4gICAgbGV0IG5vZGUgPSBzdXBlci5jcmVhdGUodmFsdWUpO1xuICAgIHZhbHVlID0gdGhpcy5zYW5pdGl6ZSh2YWx1ZSk7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCB2YWx1ZSk7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3JlbCcsICdub29wZW5lciBub3JlZmVycmVyJyk7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3RhcmdldCcsICdfYmxhbmsnKTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHN0YXRpYyBmb3JtYXRzKGRvbU5vZGUpIHtcbiAgICByZXR1cm4gZG9tTm9kZS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgfVxuXG4gIHN0YXRpYyBzYW5pdGl6ZSh1cmwpIHtcbiAgICByZXR1cm4gc2FuaXRpemUodXJsLCB0aGlzLlBST1RPQ09MX1dISVRFTElTVCkgPyB1cmwgOiB0aGlzLlNBTklUSVpFRF9VUkw7XG4gIH1cblxuICBmb3JtYXQobmFtZSwgdmFsdWUpIHtcbiAgICBpZiAobmFtZSAhPT0gdGhpcy5zdGF0aWNzLmJsb3ROYW1lIHx8ICF2YWx1ZSkgcmV0dXJuIHN1cGVyLmZvcm1hdChuYW1lLCB2YWx1ZSk7XG4gICAgdmFsdWUgPSB0aGlzLmNvbnN0cnVjdG9yLnNhbml0aXplKHZhbHVlKTtcbiAgICB0aGlzLmRvbU5vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgdmFsdWUpO1xuICB9XG59XG5MaW5rLmJsb3ROYW1lID0gJ2xpbmsnO1xuTGluay50YWdOYW1lID0gJ0EnO1xuTGluay5TQU5JVElaRURfVVJMID0gJ2Fib3V0OmJsYW5rJztcbkxpbmsuUFJPVE9DT0xfV0hJVEVMSVNUID0gWydodHRwJywgJ2h0dHBzJywgJ21haWx0bycsICd0ZWwnXTtcblxuXG5mdW5jdGlvbiBzYW5pdGl6ZSh1cmwsIHByb3RvY29scykge1xuICBsZXQgYW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICBhbmNob3IuaHJlZiA9IHVybDtcbiAgbGV0IHByb3RvY29sID0gYW5jaG9yLmhyZWYuc2xpY2UoMCwgYW5jaG9yLmhyZWYuaW5kZXhPZignOicpKTtcbiAgcmV0dXJuIHByb3RvY29scy5pbmRleE9mKHByb3RvY29sKSA+IC0xO1xufVxuXG5cbmV4cG9ydCB7IExpbmsgYXMgZGVmYXVsdCwgc2FuaXRpemUgfTtcbiIsImltcG9ydCBleHRlbmQgZnJvbSAnZXh0ZW5kJztcbmltcG9ydCBFbWl0dGVyIGZyb20gJy4uL2NvcmUvZW1pdHRlcic7XG5pbXBvcnQgQmFzZVRoZW1lLCB7IEJhc2VUb29sdGlwIH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCBMaW5rQmxvdCBmcm9tICcuLi9mb3JtYXRzL2xpbmsnO1xuaW1wb3J0IHsgUmFuZ2UgfSBmcm9tICcuLi9jb3JlL3NlbGVjdGlvbic7XG5pbXBvcnQgaWNvbnMgZnJvbSAnLi4vdWkvaWNvbnMnO1xuXG5cbmNvbnN0IFRPT0xCQVJfQ09ORklHID0gW1xuICBbeyBoZWFkZXI6IFsnMScsICcyJywgJzMnLCBmYWxzZV0gfV0sXG4gIFsnYm9sZCcsICdpdGFsaWMnLCAndW5kZXJsaW5lJywgJ2xpbmsnXSxcbiAgW3sgbGlzdDogJ29yZGVyZWQnIH0sIHsgbGlzdDogJ2J1bGxldCcgfV0sXG4gIFsnY2xlYW4nXVxuXTtcblxuY2xhc3MgU25vd1RoZW1lIGV4dGVuZHMgQmFzZVRoZW1lIHtcbiAgY29uc3RydWN0b3IocXVpbGwsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5tb2R1bGVzLnRvb2xiYXIgIT0gbnVsbCAmJiBvcHRpb25zLm1vZHVsZXMudG9vbGJhci5jb250YWluZXIgPT0gbnVsbCkge1xuICAgICAgb3B0aW9ucy5tb2R1bGVzLnRvb2xiYXIuY29udGFpbmVyID0gVE9PTEJBUl9DT05GSUc7XG4gICAgfVxuICAgIHN1cGVyKHF1aWxsLCBvcHRpb25zKTtcbiAgICB0aGlzLnF1aWxsLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdxbC1zbm93Jyk7XG4gIH1cblxuICBleHRlbmRUb29sYmFyKHRvb2xiYXIpIHtcbiAgICB0b29sYmFyLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdxbC1zbm93Jyk7XG4gICAgdGhpcy5idWlsZEJ1dHRvbnMoW10uc2xpY2UuY2FsbCh0b29sYmFyLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24nKSksIGljb25zKTtcbiAgICB0aGlzLmJ1aWxkUGlja2VycyhbXS5zbGljZS5jYWxsKHRvb2xiYXIuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NlbGVjdCcpKSwgaWNvbnMpO1xuICAgIHRoaXMudG9vbHRpcCA9IG5ldyBTbm93VG9vbHRpcCh0aGlzLnF1aWxsLCB0aGlzLm9wdGlvbnMuYm91bmRzKTtcbiAgICBpZiAodG9vbGJhci5jb250YWluZXIucXVlcnlTZWxlY3RvcignLnFsLWxpbmsnKSkge1xuICAgICAgdGhpcy5xdWlsbC5rZXlib2FyZC5hZGRCaW5kaW5nKHsga2V5OiAnSycsIHNob3J0S2V5OiB0cnVlIH0sIGZ1bmN0aW9uKHJhbmdlLCBjb250ZXh0KSB7XG4gICAgICAgIHRvb2xiYXIuaGFuZGxlcnNbJ2xpbmsnXS5jYWxsKHRvb2xiYXIsICFjb250ZXh0LmZvcm1hdC5saW5rKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuU25vd1RoZW1lLkRFRkFVTFRTID0gZXh0ZW5kKHRydWUsIHt9LCBCYXNlVGhlbWUuREVGQVVMVFMsIHtcbiAgbW9kdWxlczoge1xuICAgIHRvb2xiYXI6IHtcbiAgICAgIGhhbmRsZXJzOiB7XG4gICAgICAgIGxpbms6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBsZXQgcmFuZ2UgPSB0aGlzLnF1aWxsLmdldFNlbGVjdGlvbigpO1xuICAgICAgICAgICAgaWYgKHJhbmdlID09IG51bGwgfHwgcmFuZ2UubGVuZ3RoID09IDApIHJldHVybjtcbiAgICAgICAgICAgIGxldCBwcmV2aWV3ID0gdGhpcy5xdWlsbC5nZXRUZXh0KHJhbmdlKTtcbiAgICAgICAgICAgIGlmICgvXlxcUytAXFxTK1xcLlxcUyskLy50ZXN0KHByZXZpZXcpICYmIHByZXZpZXcuaW5kZXhPZignbWFpbHRvOicpICE9PSAwKSB7XG4gICAgICAgICAgICAgIHByZXZpZXcgPSAnbWFpbHRvOicgKyBwcmV2aWV3O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHRvb2x0aXAgPSB0aGlzLnF1aWxsLnRoZW1lLnRvb2x0aXA7XG4gICAgICAgICAgICB0b29sdGlwLmVkaXQoJ2xpbmsnLCBwcmV2aWV3KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2xpbmsnLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcblxuXG5jbGFzcyBTbm93VG9vbHRpcCBleHRlbmRzIEJhc2VUb29sdGlwIHtcbiAgY29uc3RydWN0b3IocXVpbGwsIGJvdW5kcykge1xuICAgIHN1cGVyKHF1aWxsLCBib3VuZHMpO1xuICAgIHRoaXMucHJldmlldyA9IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKCdhLnFsLXByZXZpZXcnKTtcbiAgfVxuXG4gIGxpc3RlbigpIHtcbiAgICBzdXBlci5saXN0ZW4oKTtcbiAgICB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcignYS5xbC1hY3Rpb24nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgaWYgKHRoaXMucm9vdC5jbGFzc0xpc3QuY29udGFpbnMoJ3FsLWVkaXRpbmcnKSkge1xuICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZWRpdCgnbGluaycsIHRoaXMucHJldmlldy50ZXh0Q29udGVudCk7XG4gICAgICB9XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuICAgIHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKCdhLnFsLXJlbW92ZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICBpZiAodGhpcy5saW5rUmFuZ2UgIT0gbnVsbCkge1xuICAgICAgICBsZXQgcmFuZ2UgPSB0aGlzLmxpbmtSYW5nZTtcbiAgICAgICAgdGhpcy5yZXN0b3JlRm9jdXMoKTtcbiAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXRUZXh0KHJhbmdlLCAnbGluaycsIGZhbHNlLCBFbWl0dGVyLnNvdXJjZXMuVVNFUik7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmxpbmtSYW5nZTtcbiAgICAgIH1cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9KTtcbiAgICB0aGlzLnF1aWxsLm9uKEVtaXR0ZXIuZXZlbnRzLlNFTEVDVElPTl9DSEFOR0UsIChyYW5nZSwgb2xkUmFuZ2UsIHNvdXJjZSkgPT4ge1xuICAgICAgaWYgKHJhbmdlID09IG51bGwpIHJldHVybjtcbiAgICAgIGlmIChyYW5nZS5sZW5ndGggPT09IDAgJiYgc291cmNlID09PSBFbWl0dGVyLnNvdXJjZXMuVVNFUikge1xuICAgICAgICBsZXQgW2xpbmssIG9mZnNldF0gPSB0aGlzLnF1aWxsLnNjcm9sbC5kZXNjZW5kYW50KExpbmtCbG90LCByYW5nZS5pbmRleCk7XG4gICAgICAgIGlmIChsaW5rICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLmxpbmtSYW5nZSA9IG5ldyBSYW5nZShyYW5nZS5pbmRleCAtIG9mZnNldCwgbGluay5sZW5ndGgoKSk7XG4gICAgICAgICAgbGV0IHByZXZpZXcgPSBMaW5rQmxvdC5mb3JtYXRzKGxpbmsuZG9tTm9kZSk7XG4gICAgICAgICAgdGhpcy5wcmV2aWV3LnRleHRDb250ZW50ID0gcHJldmlldztcbiAgICAgICAgICB0aGlzLnByZXZpZXcuc2V0QXR0cmlidXRlKCdocmVmJywgcHJldmlldyk7XG4gICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgICAgdGhpcy5wb3NpdGlvbih0aGlzLnF1aWxsLmdldEJvdW5kcyh0aGlzLmxpbmtSYW5nZSkpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIHRoaXMubGlua1JhbmdlO1xuICAgICAgfVxuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfSk7XG4gIH1cblxuICBzaG93KCkge1xuICAgIHN1cGVyLnNob3coKTtcbiAgICB0aGlzLnJvb3QucmVtb3ZlQXR0cmlidXRlKCdkYXRhLW1vZGUnKTtcbiAgfVxufVxuU25vd1Rvb2x0aXAuVEVNUExBVEUgPSBbXG4gICc8YSBjbGFzcz1cInFsLXByZXZpZXdcIiByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCIgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImFib3V0OmJsYW5rXCI+PC9hPicsXG4gICc8aW5wdXQgdHlwZT1cInRleHRcIiBkYXRhLWZvcm11bGE9XCJlPW1jXjJcIiBkYXRhLWxpbms9XCJodHRwczovL3F1aWxsanMuY29tXCIgZGF0YS12aWRlbz1cIkVtYmVkIFVSTFwiPicsXG4gICc8YSBjbGFzcz1cInFsLWFjdGlvblwiPjwvYT4nLFxuICAnPGEgY2xhc3M9XCJxbC1yZW1vdmVcIj48L2E+J1xuXS5qb2luKCcnKTtcblxuXG5leHBvcnQgZGVmYXVsdCBTbm93VGhlbWU7XG4iLCJpbXBvcnQgUXVpbGwgZnJvbSBcInF1aWxsL2NvcmVcIjtcblxuaW1wb3J0IGh0bWxFZGl0QnV0dG9uIGZyb20gXCIuLi8uLi8uLi9zcmMvcXVpbGwuaHRtbEVkaXRCdXR0b25cIjtcbi8qIFxuaW1wb3J0IGh0bWxFZGl0QnV0dG9uIGZyb20gXCJxdWlsbC1odG1sLWVkaXQtYnV0dG9uXCI7XG4gICAgXiBJbiBwcm9kdWN0aW9uIHVzZSB0aGlzXG4gKi9cbmltcG9ydCBUb29sYmFyIGZyb20gXCJxdWlsbC9tb2R1bGVzL3Rvb2xiYXJcIjtcbmltcG9ydCBTbm93IGZyb20gXCJxdWlsbC90aGVtZXMvc25vd1wiO1xuXG5RdWlsbC5yZWdpc3Rlcih7XG4gIFwibW9kdWxlcy90b29sYmFyXCI6IFRvb2xiYXIsXG4gIFwidGhlbWVzL3Nub3dcIjogU25vdyxcbn0pO1xuUXVpbGwucmVnaXN0ZXIoXCJtb2R1bGVzL2h0bWxFZGl0QnV0dG9uXCIsIGh0bWxFZGl0QnV0dG9uKTtcblxuZXhwb3J0IGRlZmF1bHQgUXVpbGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciBjYWxsQmluZCA9IHJlcXVpcmUoJy4vJyk7XG5cbnZhciAkaW5kZXhPZiA9IGNhbGxCaW5kKEdldEludHJpbnNpYygnU3RyaW5nLnByb3RvdHlwZS5pbmRleE9mJykpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCb3VuZEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0dmFyIGludHJpbnNpYyA9IEdldEludHJpbnNpYyhuYW1lLCAhIWFsbG93TWlzc2luZyk7XG5cdGlmICh0eXBlb2YgaW50cmluc2ljID09PSAnZnVuY3Rpb24nICYmICRpbmRleE9mKG5hbWUsICcucHJvdG90eXBlLicpID4gLTEpIHtcblx0XHRyZXR1cm4gY2FsbEJpbmQoaW50cmluc2ljKTtcblx0fVxuXHRyZXR1cm4gaW50cmluc2ljO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xudmFyIHNldEZ1bmN0aW9uTGVuZ3RoID0gcmVxdWlyZSgnc2V0LWZ1bmN0aW9uLWxlbmd0aCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcbnZhciAkYXBwbHkgPSBHZXRJbnRyaW5zaWMoJyVGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHklJyk7XG52YXIgJGNhbGwgPSBHZXRJbnRyaW5zaWMoJyVGdW5jdGlvbi5wcm90b3R5cGUuY2FsbCUnKTtcbnZhciAkcmVmbGVjdEFwcGx5ID0gR2V0SW50cmluc2ljKCclUmVmbGVjdC5hcHBseSUnLCB0cnVlKSB8fCBiaW5kLmNhbGwoJGNhbGwsICRhcHBseSk7XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QuZGVmaW5lUHJvcGVydHklJywgdHJ1ZSk7XG52YXIgJG1heCA9IEdldEludHJpbnNpYygnJU1hdGgubWF4JScpO1xuXG5pZiAoJGRlZmluZVByb3BlcnR5KSB7XG5cdHRyeSB7XG5cdFx0JGRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgdmFsdWU6IDEgfSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBkZWZpbmVQcm9wZXJ0eVxuXHRcdCRkZWZpbmVQcm9wZXJ0eSA9IG51bGw7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYWxsQmluZChvcmlnaW5hbEZ1bmN0aW9uKSB7XG5cdGlmICh0eXBlb2Ygb3JpZ2luYWxGdW5jdGlvbiAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdhIGZ1bmN0aW9uIGlzIHJlcXVpcmVkJyk7XG5cdH1cblx0dmFyIGZ1bmMgPSAkcmVmbGVjdEFwcGx5KGJpbmQsICRjYWxsLCBhcmd1bWVudHMpO1xuXHRyZXR1cm4gc2V0RnVuY3Rpb25MZW5ndGgoXG5cdFx0ZnVuYyxcblx0XHQxICsgJG1heCgwLCBvcmlnaW5hbEZ1bmN0aW9uLmxlbmd0aCAtIChhcmd1bWVudHMubGVuZ3RoIC0gMSkpLFxuXHRcdHRydWVcblx0KTtcbn07XG5cbnZhciBhcHBseUJpbmQgPSBmdW5jdGlvbiBhcHBseUJpbmQoKSB7XG5cdHJldHVybiAkcmVmbGVjdEFwcGx5KGJpbmQsICRhcHBseSwgYXJndW1lbnRzKTtcbn07XG5cbmlmICgkZGVmaW5lUHJvcGVydHkpIHtcblx0JGRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnYXBwbHknLCB7IHZhbHVlOiBhcHBseUJpbmQgfSk7XG59IGVsc2Uge1xuXHRtb2R1bGUuZXhwb3J0cy5hcHBseSA9IGFwcGx5QmluZDtcbn1cbiIsInZhciBjbG9uZSA9IChmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2luc3RhbmNlb2Yob2JqLCB0eXBlKSB7XG4gIHJldHVybiB0eXBlICE9IG51bGwgJiYgb2JqIGluc3RhbmNlb2YgdHlwZTtcbn1cblxudmFyIG5hdGl2ZU1hcDtcbnRyeSB7XG4gIG5hdGl2ZU1hcCA9IE1hcDtcbn0gY2F0Y2goXykge1xuICAvLyBtYXliZSBhIHJlZmVyZW5jZSBlcnJvciBiZWNhdXNlIG5vIGBNYXBgLiBHaXZlIGl0IGEgZHVtbXkgdmFsdWUgdGhhdCBub1xuICAvLyB2YWx1ZSB3aWxsIGV2ZXIgYmUgYW4gaW5zdGFuY2VvZi5cbiAgbmF0aXZlTWFwID0gZnVuY3Rpb24oKSB7fTtcbn1cblxudmFyIG5hdGl2ZVNldDtcbnRyeSB7XG4gIG5hdGl2ZVNldCA9IFNldDtcbn0gY2F0Y2goXykge1xuICBuYXRpdmVTZXQgPSBmdW5jdGlvbigpIHt9O1xufVxuXG52YXIgbmF0aXZlUHJvbWlzZTtcbnRyeSB7XG4gIG5hdGl2ZVByb21pc2UgPSBQcm9taXNlO1xufSBjYXRjaChfKSB7XG4gIG5hdGl2ZVByb21pc2UgPSBmdW5jdGlvbigpIHt9O1xufVxuXG4vKipcbiAqIENsb25lcyAoY29waWVzKSBhbiBPYmplY3QgdXNpbmcgZGVlcCBjb3B5aW5nLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gc3VwcG9ydHMgY2lyY3VsYXIgcmVmZXJlbmNlcyBieSBkZWZhdWx0LCBidXQgaWYgeW91IGFyZSBjZXJ0YWluXG4gKiB0aGVyZSBhcmUgbm8gY2lyY3VsYXIgcmVmZXJlbmNlcyBpbiB5b3VyIG9iamVjdCwgeW91IGNhbiBzYXZlIHNvbWUgQ1BVIHRpbWVcbiAqIGJ5IGNhbGxpbmcgY2xvbmUob2JqLCBmYWxzZSkuXG4gKlxuICogQ2F1dGlvbjogaWYgYGNpcmN1bGFyYCBpcyBmYWxzZSBhbmQgYHBhcmVudGAgY29udGFpbnMgY2lyY3VsYXIgcmVmZXJlbmNlcyxcbiAqIHlvdXIgcHJvZ3JhbSBtYXkgZW50ZXIgYW4gaW5maW5pdGUgbG9vcCBhbmQgY3Jhc2guXG4gKlxuICogQHBhcmFtIGBwYXJlbnRgIC0gdGhlIG9iamVjdCB0byBiZSBjbG9uZWRcbiAqIEBwYXJhbSBgY2lyY3VsYXJgIC0gc2V0IHRvIHRydWUgaWYgdGhlIG9iamVjdCB0byBiZSBjbG9uZWQgbWF5IGNvbnRhaW5cbiAqICAgIGNpcmN1bGFyIHJlZmVyZW5jZXMuIChvcHRpb25hbCAtIHRydWUgYnkgZGVmYXVsdClcbiAqIEBwYXJhbSBgZGVwdGhgIC0gc2V0IHRvIGEgbnVtYmVyIGlmIHRoZSBvYmplY3QgaXMgb25seSB0byBiZSBjbG9uZWQgdG9cbiAqICAgIGEgcGFydGljdWxhciBkZXB0aC4gKG9wdGlvbmFsIC0gZGVmYXVsdHMgdG8gSW5maW5pdHkpXG4gKiBAcGFyYW0gYHByb3RvdHlwZWAgLSBzZXRzIHRoZSBwcm90b3R5cGUgdG8gYmUgdXNlZCB3aGVuIGNsb25pbmcgYW4gb2JqZWN0LlxuICogICAgKG9wdGlvbmFsIC0gZGVmYXVsdHMgdG8gcGFyZW50IHByb3RvdHlwZSkuXG4gKiBAcGFyYW0gYGluY2x1ZGVOb25FbnVtZXJhYmxlYCAtIHNldCB0byB0cnVlIGlmIHRoZSBub24tZW51bWVyYWJsZSBwcm9wZXJ0aWVzXG4gKiAgICBzaG91bGQgYmUgY2xvbmVkIGFzIHdlbGwuIE5vbi1lbnVtZXJhYmxlIHByb3BlcnRpZXMgb24gdGhlIHByb3RvdHlwZVxuICogICAgY2hhaW4gd2lsbCBiZSBpZ25vcmVkLiAob3B0aW9uYWwgLSBmYWxzZSBieSBkZWZhdWx0KVxuKi9cbmZ1bmN0aW9uIGNsb25lKHBhcmVudCwgY2lyY3VsYXIsIGRlcHRoLCBwcm90b3R5cGUsIGluY2x1ZGVOb25FbnVtZXJhYmxlKSB7XG4gIGlmICh0eXBlb2YgY2lyY3VsYXIgPT09ICdvYmplY3QnKSB7XG4gICAgZGVwdGggPSBjaXJjdWxhci5kZXB0aDtcbiAgICBwcm90b3R5cGUgPSBjaXJjdWxhci5wcm90b3R5cGU7XG4gICAgaW5jbHVkZU5vbkVudW1lcmFibGUgPSBjaXJjdWxhci5pbmNsdWRlTm9uRW51bWVyYWJsZTtcbiAgICBjaXJjdWxhciA9IGNpcmN1bGFyLmNpcmN1bGFyO1xuICB9XG4gIC8vIG1haW50YWluIHR3byBhcnJheXMgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMsIHdoZXJlIGNvcnJlc3BvbmRpbmcgcGFyZW50c1xuICAvLyBhbmQgY2hpbGRyZW4gaGF2ZSB0aGUgc2FtZSBpbmRleFxuICB2YXIgYWxsUGFyZW50cyA9IFtdO1xuICB2YXIgYWxsQ2hpbGRyZW4gPSBbXTtcblxuICB2YXIgdXNlQnVmZmVyID0gdHlwZW9mIEJ1ZmZlciAhPSAndW5kZWZpbmVkJztcblxuICBpZiAodHlwZW9mIGNpcmN1bGFyID09ICd1bmRlZmluZWQnKVxuICAgIGNpcmN1bGFyID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGRlcHRoID09ICd1bmRlZmluZWQnKVxuICAgIGRlcHRoID0gSW5maW5pdHk7XG5cbiAgLy8gcmVjdXJzZSB0aGlzIGZ1bmN0aW9uIHNvIHdlIGRvbid0IHJlc2V0IGFsbFBhcmVudHMgYW5kIGFsbENoaWxkcmVuXG4gIGZ1bmN0aW9uIF9jbG9uZShwYXJlbnQsIGRlcHRoKSB7XG4gICAgLy8gY2xvbmluZyBudWxsIGFsd2F5cyByZXR1cm5zIG51bGxcbiAgICBpZiAocGFyZW50ID09PSBudWxsKVxuICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICBpZiAoZGVwdGggPT09IDApXG4gICAgICByZXR1cm4gcGFyZW50O1xuXG4gICAgdmFyIGNoaWxkO1xuICAgIHZhciBwcm90bztcbiAgICBpZiAodHlwZW9mIHBhcmVudCAhPSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICB9XG5cbiAgICBpZiAoX2luc3RhbmNlb2YocGFyZW50LCBuYXRpdmVNYXApKSB7XG4gICAgICBjaGlsZCA9IG5ldyBuYXRpdmVNYXAoKTtcbiAgICB9IGVsc2UgaWYgKF9pbnN0YW5jZW9mKHBhcmVudCwgbmF0aXZlU2V0KSkge1xuICAgICAgY2hpbGQgPSBuZXcgbmF0aXZlU2V0KCk7XG4gICAgfSBlbHNlIGlmIChfaW5zdGFuY2VvZihwYXJlbnQsIG5hdGl2ZVByb21pc2UpKSB7XG4gICAgICBjaGlsZCA9IG5ldyBuYXRpdmVQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgcGFyZW50LnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXNvbHZlKF9jbG9uZSh2YWx1ZSwgZGVwdGggLSAxKSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIHJlamVjdChfY2xvbmUoZXJyLCBkZXB0aCAtIDEpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGNsb25lLl9faXNBcnJheShwYXJlbnQpKSB7XG4gICAgICBjaGlsZCA9IFtdO1xuICAgIH0gZWxzZSBpZiAoY2xvbmUuX19pc1JlZ0V4cChwYXJlbnQpKSB7XG4gICAgICBjaGlsZCA9IG5ldyBSZWdFeHAocGFyZW50LnNvdXJjZSwgX19nZXRSZWdFeHBGbGFncyhwYXJlbnQpKTtcbiAgICAgIGlmIChwYXJlbnQubGFzdEluZGV4KSBjaGlsZC5sYXN0SW5kZXggPSBwYXJlbnQubGFzdEluZGV4O1xuICAgIH0gZWxzZSBpZiAoY2xvbmUuX19pc0RhdGUocGFyZW50KSkge1xuICAgICAgY2hpbGQgPSBuZXcgRGF0ZShwYXJlbnQuZ2V0VGltZSgpKTtcbiAgICB9IGVsc2UgaWYgKHVzZUJ1ZmZlciAmJiBCdWZmZXIuaXNCdWZmZXIocGFyZW50KSkge1xuICAgICAgaWYgKEJ1ZmZlci5hbGxvY1Vuc2FmZSkge1xuICAgICAgICAvLyBOb2RlLmpzID49IDQuNS4wXG4gICAgICAgIGNoaWxkID0gQnVmZmVyLmFsbG9jVW5zYWZlKHBhcmVudC5sZW5ndGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT2xkZXIgTm9kZS5qcyB2ZXJzaW9uc1xuICAgICAgICBjaGlsZCA9IG5ldyBCdWZmZXIocGFyZW50Lmxlbmd0aCk7XG4gICAgICB9XG4gICAgICBwYXJlbnQuY29weShjaGlsZCk7XG4gICAgICByZXR1cm4gY2hpbGQ7XG4gICAgfSBlbHNlIGlmIChfaW5zdGFuY2VvZihwYXJlbnQsIEVycm9yKSkge1xuICAgICAgY2hpbGQgPSBPYmplY3QuY3JlYXRlKHBhcmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvdG90eXBlID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHBhcmVudCk7XG4gICAgICAgIGNoaWxkID0gT2JqZWN0LmNyZWF0ZShwcm90byk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY2hpbGQgPSBPYmplY3QuY3JlYXRlKHByb3RvdHlwZSk7XG4gICAgICAgIHByb3RvID0gcHJvdG90eXBlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjaXJjdWxhcikge1xuICAgICAgdmFyIGluZGV4ID0gYWxsUGFyZW50cy5pbmRleE9mKHBhcmVudCk7XG5cbiAgICAgIGlmIChpbmRleCAhPSAtMSkge1xuICAgICAgICByZXR1cm4gYWxsQ2hpbGRyZW5baW5kZXhdO1xuICAgICAgfVxuICAgICAgYWxsUGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgICBhbGxDaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICB9XG5cbiAgICBpZiAoX2luc3RhbmNlb2YocGFyZW50LCBuYXRpdmVNYXApKSB7XG4gICAgICBwYXJlbnQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIHZhciBrZXlDaGlsZCA9IF9jbG9uZShrZXksIGRlcHRoIC0gMSk7XG4gICAgICAgIHZhciB2YWx1ZUNoaWxkID0gX2Nsb25lKHZhbHVlLCBkZXB0aCAtIDEpO1xuICAgICAgICBjaGlsZC5zZXQoa2V5Q2hpbGQsIHZhbHVlQ2hpbGQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChfaW5zdGFuY2VvZihwYXJlbnQsIG5hdGl2ZVNldCkpIHtcbiAgICAgIHBhcmVudC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciBlbnRyeUNoaWxkID0gX2Nsb25lKHZhbHVlLCBkZXB0aCAtIDEpO1xuICAgICAgICBjaGlsZC5hZGQoZW50cnlDaGlsZCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpIGluIHBhcmVudCkge1xuICAgICAgdmFyIGF0dHJzO1xuICAgICAgaWYgKHByb3RvKSB7XG4gICAgICAgIGF0dHJzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm90bywgaSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhdHRycyAmJiBhdHRycy5zZXQgPT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNoaWxkW2ldID0gX2Nsb25lKHBhcmVudFtpXSwgZGVwdGggLSAxKTtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHBhcmVudCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gRG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCBjbG9uaW5nIGEgc3ltYm9sIGJlY2F1c2UgaXQgaXMgYSBwcmltaXRpdmUsXG4gICAgICAgIC8vIGxpa2UgYSBudW1iZXIgb3Igc3RyaW5nLlxuICAgICAgICB2YXIgc3ltYm9sID0gc3ltYm9sc1tpXTtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHBhcmVudCwgc3ltYm9sKTtcbiAgICAgICAgaWYgKGRlc2NyaXB0b3IgJiYgIWRlc2NyaXB0b3IuZW51bWVyYWJsZSAmJiAhaW5jbHVkZU5vbkVudW1lcmFibGUpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjaGlsZFtzeW1ib2xdID0gX2Nsb25lKHBhcmVudFtzeW1ib2xdLCBkZXB0aCAtIDEpO1xuICAgICAgICBpZiAoIWRlc2NyaXB0b3IuZW51bWVyYWJsZSkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjaGlsZCwgc3ltYm9sLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGluY2x1ZGVOb25FbnVtZXJhYmxlKSB7XG4gICAgICB2YXIgYWxsUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHBhcmVudCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbFByb3BlcnR5TmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHByb3BlcnR5TmFtZSA9IGFsbFByb3BlcnR5TmFtZXNbaV07XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXJlbnQsIHByb3BlcnR5TmFtZSk7XG4gICAgICAgIGlmIChkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZW51bWVyYWJsZSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNoaWxkW3Byb3BlcnR5TmFtZV0gPSBfY2xvbmUocGFyZW50W3Byb3BlcnR5TmFtZV0sIGRlcHRoIC0gMSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjaGlsZCwgcHJvcGVydHlOYW1lLCB7XG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkO1xuICB9XG5cbiAgcmV0dXJuIF9jbG9uZShwYXJlbnQsIGRlcHRoKTtcbn1cblxuLyoqXG4gKiBTaW1wbGUgZmxhdCBjbG9uZSB1c2luZyBwcm90b3R5cGUsIGFjY2VwdHMgb25seSBvYmplY3RzLCB1c2VmdWxsIGZvciBwcm9wZXJ0eVxuICogb3ZlcnJpZGUgb24gRkxBVCBjb25maWd1cmF0aW9uIG9iamVjdCAobm8gbmVzdGVkIHByb3BzKS5cbiAqXG4gKiBVU0UgV0lUSCBDQVVUSU9OISBUaGlzIG1heSBub3QgYmVoYXZlIGFzIHlvdSB3aXNoIGlmIHlvdSBkbyBub3Qga25vdyBob3cgdGhpc1xuICogd29ya3MuXG4gKi9cbmNsb25lLmNsb25lUHJvdG90eXBlID0gZnVuY3Rpb24gY2xvbmVQcm90b3R5cGUocGFyZW50KSB7XG4gIGlmIChwYXJlbnQgPT09IG51bGwpXG4gICAgcmV0dXJuIG51bGw7XG5cbiAgdmFyIGMgPSBmdW5jdGlvbiAoKSB7fTtcbiAgYy5wcm90b3R5cGUgPSBwYXJlbnQ7XG4gIHJldHVybiBuZXcgYygpO1xufTtcblxuLy8gcHJpdmF0ZSB1dGlsaXR5IGZ1bmN0aW9uc1xuXG5mdW5jdGlvbiBfX29ialRvU3RyKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cbmNsb25lLl9fb2JqVG9TdHIgPSBfX29ialRvU3RyO1xuXG5mdW5jdGlvbiBfX2lzRGF0ZShvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgX19vYmpUb1N0cihvKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuY2xvbmUuX19pc0RhdGUgPSBfX2lzRGF0ZTtcblxuZnVuY3Rpb24gX19pc0FycmF5KG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBfX29ialRvU3RyKG8pID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuY2xvbmUuX19pc0FycmF5ID0gX19pc0FycmF5O1xuXG5mdW5jdGlvbiBfX2lzUmVnRXhwKG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBfX29ialRvU3RyKG8pID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmNsb25lLl9faXNSZWdFeHAgPSBfX2lzUmVnRXhwO1xuXG5mdW5jdGlvbiBfX2dldFJlZ0V4cEZsYWdzKHJlKSB7XG4gIHZhciBmbGFncyA9ICcnO1xuICBpZiAocmUuZ2xvYmFsKSBmbGFncyArPSAnZyc7XG4gIGlmIChyZS5pZ25vcmVDYXNlKSBmbGFncyArPSAnaSc7XG4gIGlmIChyZS5tdWx0aWxpbmUpIGZsYWdzICs9ICdtJztcbiAgcmV0dXJuIGZsYWdzO1xufVxuY2xvbmUuX19nZXRSZWdFeHBGbGFncyA9IF9fZ2V0UmVnRXhwRmxhZ3M7XG5cbnJldHVybiBjbG9uZTtcbn0pKCk7XG5cbmlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGNsb25lO1xufVxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIucWwtaHRtbC1vdmVybGF5Q29udGFpbmVyIHtcXG4gIGJhY2tncm91bmQ6ICMwMDAwMDA3ZDtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICByaWdodDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIHotaW5kZXg6IDk5OTk7XFxufVxcblxcbi5xbC1odG1sLXBvcHVwQ29udGFpbmVyIHtcXG4gIGJhY2tncm91bmQ6ICNkZGQ7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDUlO1xcbiAgbGVmdDogNSU7XFxuICByaWdodDogNSU7XFxuICBib3R0b206IDUlO1xcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcXG59XFxuXFxuLnFsLWh0bWwtdGV4dENvbnRhaW5lciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDQwcHgpO1xcbiAgcGFkZGluZzogMjBweDtcXG59XFxuXFxuLnFsLWh0bWwtdGV4dEFyZWEge1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGxlZnQ6IDE1cHg7XFxuICB3aWR0aDogY2FsYygxMDAlIC0gMzBweCk7XFxuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDYwcHgpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5xbC1odG1sLXRleHRBcmVhIC5xbC1zeW50YXgge1xcbiAgd29yZC1icmVhazogYnJlYWstYWxsO1xcbiAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xcbn1cXG5cXG4ucWwtaHRtbC1idXR0b25DYW5jZWwge1xcbiAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xcbn1cXG5cXG4ucWwtaHRtbC1wb3B1cFRpdGxlIHtcXG4gIG1hcmdpbjogMDtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgZm9udC1zdHlsZTogaXRhbGljO1xcbn1cXG5cXG4ucWwtaHRtbC1idXR0b25Hcm91cCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBib3R0b206IDIwcHg7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDEuNSk7XFxuICBsZWZ0OiBjYWxjKDUwJSAtIDYwcHgpO1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCJ2YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJ29iamVjdC1rZXlzJyk7XG52YXIgaXNBcmd1bWVudHMgPSByZXF1aXJlKCdpcy1hcmd1bWVudHMnKTtcbnZhciBpcyA9IHJlcXVpcmUoJ29iamVjdC1pcycpO1xudmFyIGlzUmVnZXggPSByZXF1aXJlKCdpcy1yZWdleCcpO1xudmFyIGZsYWdzID0gcmVxdWlyZSgncmVnZXhwLnByb3RvdHlwZS5mbGFncycpO1xudmFyIGlzRGF0ZSA9IHJlcXVpcmUoJ2lzLWRhdGUtb2JqZWN0Jyk7XG5cbnZhciBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcblxuZnVuY3Rpb24gZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIDcuMS4gQWxsIGlkZW50aWNhbCB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGFzIGRldGVybWluZWQgYnkgPT09LlxuICBpZiAob3B0cy5zdHJpY3QgPyBpcyhhY3R1YWwsIGV4cGVjdGVkKSA6IGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIDcuMy4gT3RoZXIgcGFpcnMgdGhhdCBkbyBub3QgYm90aCBwYXNzIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JywgZXF1aXZhbGVuY2UgaXMgZGV0ZXJtaW5lZCBieSA9PS5cbiAgaWYgKCFhY3R1YWwgfHwgIWV4cGVjdGVkIHx8ICh0eXBlb2YgYWN0dWFsICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgZXhwZWN0ZWQgIT09ICdvYmplY3QnKSkge1xuICAgIHJldHVybiBvcHRzLnN0cmljdCA/IGlzKGFjdHVhbCwgZXhwZWN0ZWQpIDogYWN0dWFsID09IGV4cGVjdGVkO1xuICB9XG5cbiAgLypcbiAgICogNy40LiBGb3IgYWxsIG90aGVyIE9iamVjdCBwYWlycywgaW5jbHVkaW5nIEFycmF5IG9iamVjdHMsIGVxdWl2YWxlbmNlIGlzXG4gICAqIGRldGVybWluZWQgYnkgaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChhcyB2ZXJpZmllZFxuICAgKiB3aXRoIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCksIHRoZSBzYW1lIHNldCBvZiBrZXlzXG4gICAqIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpLCBlcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnlcbiAgICogY29ycmVzcG9uZGluZyBrZXksIGFuZCBhbiBpZGVudGljYWwgJ3Byb3RvdHlwZScgcHJvcGVydHkuIE5vdGU6IHRoaXNcbiAgICogYWNjb3VudHMgZm9yIGJvdGggbmFtZWQgYW5kIGluZGV4ZWQgcHJvcGVydGllcyBvbiBBcnJheXMuXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgcmV0dXJuIG9iakVxdWl2KGFjdHVhbCwgZXhwZWN0ZWQsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZE9yTnVsbCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIoeCkge1xuICBpZiAoIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnIHx8IHR5cGVvZiB4Lmxlbmd0aCAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiB4LmNvcHkgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHguc2xpY2UgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHgubGVuZ3RoID4gMCAmJiB0eXBlb2YgeFswXSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIG9iakVxdWl2KGEsIGIsIG9wdHMpIHtcbiAgLyogZXNsaW50IG1heC1zdGF0ZW1lbnRzOiBbMiwgNTBdICovXG4gIHZhciBpLCBrZXk7XG4gIGlmICh0eXBlb2YgYSAhPT0gdHlwZW9mIGIpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIGlmIChpc1VuZGVmaW5lZE9yTnVsbChhKSB8fCBpc1VuZGVmaW5lZE9yTnVsbChiKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuICAvLyBhbiBpZGVudGljYWwgJ3Byb3RvdHlwZScgcHJvcGVydHkuXG4gIGlmIChhLnByb3RvdHlwZSAhPT0gYi5wcm90b3R5cGUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgaWYgKGlzQXJndW1lbnRzKGEpICE9PSBpc0FyZ3VtZW50cyhiKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuICB2YXIgYUlzUmVnZXggPSBpc1JlZ2V4KGEpO1xuICB2YXIgYklzUmVnZXggPSBpc1JlZ2V4KGIpO1xuICBpZiAoYUlzUmVnZXggIT09IGJJc1JlZ2V4KSB7IHJldHVybiBmYWxzZTsgfVxuICBpZiAoYUlzUmVnZXggfHwgYklzUmVnZXgpIHtcbiAgICByZXR1cm4gYS5zb3VyY2UgPT09IGIuc291cmNlICYmIGZsYWdzKGEpID09PSBmbGFncyhiKTtcbiAgfVxuXG4gIGlmIChpc0RhdGUoYSkgJiYgaXNEYXRlKGIpKSB7XG4gICAgcmV0dXJuIGdldFRpbWUuY2FsbChhKSA9PT0gZ2V0VGltZS5jYWxsKGIpO1xuICB9XG5cbiAgdmFyIGFJc0J1ZmZlciA9IGlzQnVmZmVyKGEpO1xuICB2YXIgYklzQnVmZmVyID0gaXNCdWZmZXIoYik7XG4gIGlmIChhSXNCdWZmZXIgIT09IGJJc0J1ZmZlcikgeyByZXR1cm4gZmFsc2U7IH1cbiAgaWYgKGFJc0J1ZmZlciB8fCBiSXNCdWZmZXIpIHsgLy8gJiYgd291bGQgd29yayB0b28sIGJlY2F1c2UgYm90aCBhcmUgdHJ1ZSBvciBib3RoIGZhbHNlIGhlcmVcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYVtpXSAhPT0gYltpXSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIGEgIT09IHR5cGVvZiBiKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIHRyeSB7XG4gICAgdmFyIGthID0gb2JqZWN0S2V5cyhhKTtcbiAgICB2YXIga2IgPSBvYmplY3RLZXlzKGIpO1xuICB9IGNhdGNoIChlKSB7IC8vIGhhcHBlbnMgd2hlbiBvbmUgaXMgYSBzdHJpbmcgbGl0ZXJhbCBhbmQgdGhlIG90aGVyIGlzbid0XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoa2V5cyBpbmNvcnBvcmF0ZXMgaGFzT3duUHJvcGVydHkpXG4gIGlmIChrYS5sZW5ndGggIT09IGtiLmxlbmd0aCkgeyByZXR1cm4gZmFsc2U7IH1cblxuICAvLyB0aGUgc2FtZSBzZXQgb2Yga2V5cyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSxcbiAga2Euc29ydCgpO1xuICBrYi5zb3J0KCk7XG4gIC8vIH5+fmNoZWFwIGtleSB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKGthW2ldICE9IGtiW2ldKSB7IHJldHVybiBmYWxzZTsgfVxuICB9XG4gIC8vIGVxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeSBjb3JyZXNwb25kaW5nIGtleSwgYW5kIH5+fnBvc3NpYmx5IGV4cGVuc2l2ZSBkZWVwIHRlc3RcbiAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBrZXkgPSBrYVtpXTtcbiAgICBpZiAoIWRlZXBFcXVhbChhW2tleV0sIGJba2V5XSwgb3B0cykpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWVwRXF1YWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzID0gcmVxdWlyZSgnaGFzLXByb3BlcnR5LWRlc2NyaXB0b3JzJykoKTtcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvcnMgJiYgR2V0SW50cmluc2ljKCclT2JqZWN0LmRlZmluZVByb3BlcnR5JScsIHRydWUpO1xuaWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHR0cnkge1xuXHRcdCRkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IHZhbHVlOiAxIH0pO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZGVmaW5lUHJvcGVydHlcblx0XHQkZGVmaW5lUHJvcGVydHkgPSBmYWxzZTtcblx0fVxufVxuXG52YXIgJFN5bnRheEVycm9yID0gR2V0SW50cmluc2ljKCclU3ludGF4RXJyb3IlJyk7XG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIGdvcGQgPSByZXF1aXJlKCdnb3BkJyk7XG5cbi8qKiBAdHlwZSB7KG9iajogUmVjb3JkPFByb3BlcnR5S2V5LCB1bmtub3duPiwgcHJvcGVydHk6IFByb3BlcnR5S2V5LCB2YWx1ZTogdW5rbm93biwgbm9uRW51bWVyYWJsZT86IGJvb2xlYW4gfCBudWxsLCBub25Xcml0YWJsZT86IGJvb2xlYW4gfCBudWxsLCBub25Db25maWd1cmFibGU/OiBib29sZWFuIHwgbnVsbCwgbG9vc2U/OiBib29sZWFuKSA9PiB2b2lkfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZpbmVEYXRhUHJvcGVydHkoXG5cdG9iaixcblx0cHJvcGVydHksXG5cdHZhbHVlXG4pIHtcblx0aWYgKCFvYmogfHwgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmogIT09ICdmdW5jdGlvbicpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BvYmpgIG11c3QgYmUgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb25gJyk7XG5cdH1cblx0aWYgKHR5cGVvZiBwcm9wZXJ0eSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHByb3BlcnR5ICE9PSAnc3ltYm9sJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgcHJvcGVydHlgIG11c3QgYmUgYSBzdHJpbmcgb3IgYSBzeW1ib2xgJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIHR5cGVvZiBhcmd1bWVudHNbM10gIT09ICdib29sZWFuJyAmJiBhcmd1bWVudHNbM10gIT09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYG5vbkVudW1lcmFibGVgLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhIGJvb2xlYW4gb3IgbnVsbCcpO1xuXHR9XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gNCAmJiB0eXBlb2YgYXJndW1lbnRzWzRdICE9PSAnYm9vbGVhbicgJiYgYXJndW1lbnRzWzRdICE9PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2Bub25Xcml0YWJsZWAsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGEgYm9vbGVhbiBvciBudWxsJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIHR5cGVvZiBhcmd1bWVudHNbNV0gIT09ICdib29sZWFuJyAmJiBhcmd1bWVudHNbNV0gIT09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYG5vbkNvbmZpZ3VyYWJsZWAsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGEgYm9vbGVhbiBvciBudWxsJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiA2ICYmIHR5cGVvZiBhcmd1bWVudHNbNl0gIT09ICdib29sZWFuJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgbG9vc2VgLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhIGJvb2xlYW4nKTtcblx0fVxuXG5cdHZhciBub25FbnVtZXJhYmxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiBudWxsO1xuXHR2YXIgbm9uV3JpdGFibGUgPSBhcmd1bWVudHMubGVuZ3RoID4gNCA/IGFyZ3VtZW50c1s0XSA6IG51bGw7XG5cdHZhciBub25Db25maWd1cmFibGUgPSBhcmd1bWVudHMubGVuZ3RoID4gNSA/IGFyZ3VtZW50c1s1XSA6IG51bGw7XG5cdHZhciBsb29zZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA2ID8gYXJndW1lbnRzWzZdIDogZmFsc2U7XG5cblx0LyogQHR5cGUge2ZhbHNlIHwgVHlwZWRQcm9wZXJ0eURlc2NyaXB0b3I8dW5rbm93bj59ICovXG5cdHZhciBkZXNjID0gISFnb3BkICYmIGdvcGQob2JqLCBwcm9wZXJ0eSk7XG5cblx0aWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHRcdCRkZWZpbmVQcm9wZXJ0eShvYmosIHByb3BlcnR5LCB7XG5cdFx0XHRjb25maWd1cmFibGU6IG5vbkNvbmZpZ3VyYWJsZSA9PT0gbnVsbCAmJiBkZXNjID8gZGVzYy5jb25maWd1cmFibGUgOiAhbm9uQ29uZmlndXJhYmxlLFxuXHRcdFx0ZW51bWVyYWJsZTogbm9uRW51bWVyYWJsZSA9PT0gbnVsbCAmJiBkZXNjID8gZGVzYy5lbnVtZXJhYmxlIDogIW5vbkVudW1lcmFibGUsXG5cdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHR3cml0YWJsZTogbm9uV3JpdGFibGUgPT09IG51bGwgJiYgZGVzYyA/IGRlc2Mud3JpdGFibGUgOiAhbm9uV3JpdGFibGVcblx0XHR9KTtcblx0fSBlbHNlIGlmIChsb29zZSB8fCAoIW5vbkVudW1lcmFibGUgJiYgIW5vbldyaXRhYmxlICYmICFub25Db25maWd1cmFibGUpKSB7XG5cdFx0Ly8gbXVzdCBmYWxsIGJhY2sgdG8gW1tTZXRdXSwgYW5kIHdhcyBub3QgZXhwbGljaXRseSBhc2tlZCB0byBtYWtlIG5vbi1lbnVtZXJhYmxlLCBub24td3JpdGFibGUsIG9yIG5vbi1jb25maWd1cmFibGVcblx0XHRvYmpbcHJvcGVydHldID0gdmFsdWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdUaGlzIGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgZGVmaW5pbmcgYSBwcm9wZXJ0eSBhcyBub24tY29uZmlndXJhYmxlLCBub24td3JpdGFibGUsIG9yIG5vbi1lbnVtZXJhYmxlLicpO1xuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5cyA9IHJlcXVpcmUoJ29iamVjdC1rZXlzJyk7XG52YXIgaGFzU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbCgnZm9vJykgPT09ICdzeW1ib2wnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGNvbmNhdCA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQ7XG52YXIgZGVmaW5lRGF0YVByb3BlcnR5ID0gcmVxdWlyZSgnZGVmaW5lLWRhdGEtcHJvcGVydHknKTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiAoZm4pIHtcblx0cmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyAmJiB0b1N0ci5jYWxsKGZuKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG5cbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gcmVxdWlyZSgnaGFzLXByb3BlcnR5LWRlc2NyaXB0b3JzJykoKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgdmFsdWUsIHByZWRpY2F0ZSkge1xuXHRpZiAobmFtZSBpbiBvYmplY3QpIHtcblx0XHRpZiAocHJlZGljYXRlID09PSB0cnVlKSB7XG5cdFx0XHRpZiAob2JqZWN0W25hbWVdID09PSB2YWx1ZSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICghaXNGdW5jdGlvbihwcmVkaWNhdGUpIHx8ICFwcmVkaWNhdGUoKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fVxuXG5cdGlmIChzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG5cdFx0ZGVmaW5lRGF0YVByb3BlcnR5KG9iamVjdCwgbmFtZSwgdmFsdWUsIHRydWUpO1xuXHR9IGVsc2Uge1xuXHRcdGRlZmluZURhdGFQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHZhbHVlKTtcblx0fVxufTtcblxudmFyIGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiAob2JqZWN0LCBtYXApIHtcblx0dmFyIHByZWRpY2F0ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXHR2YXIgcHJvcHMgPSBrZXlzKG1hcCk7XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0cHJvcHMgPSBjb25jYXQuY2FsbChwcm9wcywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhtYXApKTtcblx0fVxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wc1tpXSwgbWFwW3Byb3BzW2ldXSwgcHJlZGljYXRlc1twcm9wc1tpXV0pO1xuXHR9XG59O1xuXG5kZWZpbmVQcm9wZXJ0aWVzLnN1cHBvcnRzRGVzY3JpcHRvcnMgPSAhIXN1cHBvcnRzRGVzY3JpcHRvcnM7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lUHJvcGVydGllcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlcbiAgLCBwcmVmaXggPSAnfic7XG5cbi8qKlxuICogQ29uc3RydWN0b3IgdG8gY3JlYXRlIGEgc3RvcmFnZSBmb3Igb3VyIGBFRWAgb2JqZWN0cy5cbiAqIEFuIGBFdmVudHNgIGluc3RhbmNlIGlzIGEgcGxhaW4gb2JqZWN0IHdob3NlIHByb3BlcnRpZXMgYXJlIGV2ZW50IG5hbWVzLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIEV2ZW50cygpIHt9XG5cbi8vXG4vLyBXZSB0cnkgdG8gbm90IGluaGVyaXQgZnJvbSBgT2JqZWN0LnByb3RvdHlwZWAuIEluIHNvbWUgZW5naW5lcyBjcmVhdGluZyBhblxuLy8gaW5zdGFuY2UgaW4gdGhpcyB3YXkgaXMgZmFzdGVyIHRoYW4gY2FsbGluZyBgT2JqZWN0LmNyZWF0ZShudWxsKWAgZGlyZWN0bHkuXG4vLyBJZiBgT2JqZWN0LmNyZWF0ZShudWxsKWAgaXMgbm90IHN1cHBvcnRlZCB3ZSBwcmVmaXggdGhlIGV2ZW50IG5hbWVzIHdpdGggYVxuLy8gY2hhcmFjdGVyIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBidWlsdC1pbiBvYmplY3QgcHJvcGVydGllcyBhcmUgbm90XG4vLyBvdmVycmlkZGVuIG9yIHVzZWQgYXMgYW4gYXR0YWNrIHZlY3Rvci5cbi8vXG5pZiAoT2JqZWN0LmNyZWF0ZSkge1xuICBFdmVudHMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAvL1xuICAvLyBUaGlzIGhhY2sgaXMgbmVlZGVkIGJlY2F1c2UgdGhlIGBfX3Byb3RvX19gIHByb3BlcnR5IGlzIHN0aWxsIGluaGVyaXRlZCBpblxuICAvLyBzb21lIG9sZCBicm93c2VycyBsaWtlIEFuZHJvaWQgNCwgaVBob25lIDUuMSwgT3BlcmEgMTEgYW5kIFNhZmFyaSA1LlxuICAvL1xuICBpZiAoIW5ldyBFdmVudHMoKS5fX3Byb3RvX18pIHByZWZpeCA9IGZhbHNlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudGF0aW9uIG9mIGEgc2luZ2xlIGV2ZW50IGxpc3RlbmVyLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7TWl4ZWR9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHBhcmFtIHtCb29sZWFufSBbb25jZT1mYWxzZV0gU3BlY2lmeSBpZiB0aGUgbGlzdGVuZXIgaXMgYSBvbmUtdGltZSBsaXN0ZW5lci5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIEVFKGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIHRoaXMuZm4gPSBmbjtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5vbmNlID0gb25jZSB8fCBmYWxzZTtcbn1cblxuLyoqXG4gKiBNaW5pbWFsIGBFdmVudEVtaXR0ZXJgIGludGVyZmFjZSB0aGF0IGlzIG1vbGRlZCBhZ2FpbnN0IHRoZSBOb2RlLmpzXG4gKiBgRXZlbnRFbWl0dGVyYCBpbnRlcmZhY2UuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xufVxuXG4vKipcbiAqIFJldHVybiBhbiBhcnJheSBsaXN0aW5nIHRoZSBldmVudHMgZm9yIHdoaWNoIHRoZSBlbWl0dGVyIGhhcyByZWdpc3RlcmVkXG4gKiBsaXN0ZW5lcnMuXG4gKlxuICogQHJldHVybnMge0FycmF5fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgdmFyIG5hbWVzID0gW11cbiAgICAsIGV2ZW50c1xuICAgICwgbmFtZTtcblxuICBpZiAodGhpcy5fZXZlbnRzQ291bnQgPT09IDApIHJldHVybiBuYW1lcztcblxuICBmb3IgKG5hbWUgaW4gKGV2ZW50cyA9IHRoaXMuX2V2ZW50cykpIHtcbiAgICBpZiAoaGFzLmNhbGwoZXZlbnRzLCBuYW1lKSkgbmFtZXMucHVzaChwcmVmaXggPyBuYW1lLnNsaWNlKDEpIDogbmFtZSk7XG4gIH1cblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHJldHVybiBuYW1lcy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhldmVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBuYW1lcztcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBsaXN0ZW5lcnMgcmVnaXN0ZXJlZCBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xTeW1ib2x9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtCb29sZWFufSBleGlzdHMgT25seSBjaGVjayBpZiB0aGVyZSBhcmUgbGlzdGVuZXJzLlxuICogQHJldHVybnMge0FycmF5fEJvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyhldmVudCwgZXhpc3RzKSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50XG4gICAgLCBhdmFpbGFibGUgPSB0aGlzLl9ldmVudHNbZXZ0XTtcblxuICBpZiAoZXhpc3RzKSByZXR1cm4gISFhdmFpbGFibGU7XG4gIGlmICghYXZhaWxhYmxlKSByZXR1cm4gW107XG4gIGlmIChhdmFpbGFibGUuZm4pIHJldHVybiBbYXZhaWxhYmxlLmZuXTtcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGF2YWlsYWJsZS5sZW5ndGgsIGVlID0gbmV3IEFycmF5KGwpOyBpIDwgbDsgaSsrKSB7XG4gICAgZWVbaV0gPSBhdmFpbGFibGVbaV0uZm47XG4gIH1cblxuICByZXR1cm4gZWU7XG59O1xuXG4vKipcbiAqIENhbGxzIGVhY2ggb2YgdGhlIGxpc3RlbmVycyByZWdpc3RlcmVkIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfFN5bWJvbH0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBldmVudCBoYWQgbGlzdGVuZXJzLCBlbHNlIGBmYWxzZWAuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2ZW50LCBhMSwgYTIsIGEzLCBhNCwgYTUpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XVxuICAgICwgbGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgYXJnc1xuICAgICwgaTtcblxuICBpZiAobGlzdGVuZXJzLmZuKSB7XG4gICAgaWYgKGxpc3RlbmVycy5vbmNlKSB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnMuZm4sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICBzd2l0Y2ggKGxlbikge1xuICAgICAgY2FzZSAxOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQpLCB0cnVlO1xuICAgICAgY2FzZSAyOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExKSwgdHJ1ZTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIpLCB0cnVlO1xuICAgICAgY2FzZSA0OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMpLCB0cnVlO1xuICAgICAgY2FzZSA1OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMsIGE0KSwgdHJ1ZTtcbiAgICAgIGNhc2UgNjogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzLCBhNCwgYTUpLCB0cnVlO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDEsIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0xKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm4uYXBwbHkobGlzdGVuZXJzLmNvbnRleHQsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoXG4gICAgICAsIGo7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChsaXN0ZW5lcnNbaV0ub25jZSkgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzW2ldLmZuLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gICAgICBzd2l0Y2ggKGxlbikge1xuICAgICAgICBjYXNlIDE6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0KTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMzogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExLCBhMik7IGJyZWFrO1xuICAgICAgICBjYXNlIDQ6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSwgYTIsIGEzKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWYgKCFhcmdzKSBmb3IgKGogPSAxLCBhcmdzID0gbmV3IEFycmF5KGxlbiAtMSk7IGogPCBsZW47IGorKykge1xuICAgICAgICAgICAgYXJnc1tqIC0gMV0gPSBhcmd1bWVudHNbal07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGlzdGVuZXJzW2ldLmZuLmFwcGx5KGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhcmdzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogQWRkIGEgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8U3ltYm9sfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7TWl4ZWR9IFtjb250ZXh0PXRoaXNdIFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBhcGkgcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiBvbihldmVudCwgZm4sIGNvbnRleHQpIHtcbiAgdmFyIGxpc3RlbmVyID0gbmV3IEVFKGZuLCBjb250ZXh0IHx8IHRoaXMpXG4gICAgLCBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHRoaXMuX2V2ZW50c1tldnRdID0gbGlzdGVuZXIsIHRoaXMuX2V2ZW50c0NvdW50Kys7XG4gIGVsc2UgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XS5mbikgdGhpcy5fZXZlbnRzW2V2dF0ucHVzaChsaXN0ZW5lcik7XG4gIGVsc2UgdGhpcy5fZXZlbnRzW2V2dF0gPSBbdGhpcy5fZXZlbnRzW2V2dF0sIGxpc3RlbmVyXTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQWRkIGEgb25lLXRpbWUgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8U3ltYm9sfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7TWl4ZWR9IFtjb250ZXh0PXRoaXNdIFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBhcGkgcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UoZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHZhciBsaXN0ZW5lciA9IG5ldyBFRShmbiwgY29udGV4dCB8fCB0aGlzLCB0cnVlKVxuICAgICwgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdKSB0aGlzLl9ldmVudHNbZXZ0XSA9IGxpc3RlbmVyLCB0aGlzLl9ldmVudHNDb3VudCsrO1xuICBlbHNlIGlmICghdGhpcy5fZXZlbnRzW2V2dF0uZm4pIHRoaXMuX2V2ZW50c1tldnRdLnB1c2gobGlzdGVuZXIpO1xuICBlbHNlIHRoaXMuX2V2ZW50c1tldnRdID0gW3RoaXMuX2V2ZW50c1tldnRdLCBsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgbGlzdGVuZXJzIG9mIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8U3ltYm9sfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIE9ubHkgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgdGhhdCBtYXRjaCB0aGlzIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtNaXhlZH0gY29udGV4dCBPbmx5IHJlbW92ZSB0aGUgbGlzdGVuZXJzIHRoYXQgaGF2ZSB0aGlzIGNvbnRleHQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9uY2UgT25seSByZW1vdmUgb25lLXRpbWUgbGlzdGVuZXJzLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKGV2ZW50LCBmbiwgY29udGV4dCwgb25jZSkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdKSByZXR1cm4gdGhpcztcbiAgaWYgKCFmbikge1xuICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKSB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gICAgZWxzZSBkZWxldGUgdGhpcy5fZXZlbnRzW2V2dF07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKGxpc3RlbmVycy5mbikge1xuICAgIGlmIChcbiAgICAgICAgIGxpc3RlbmVycy5mbiA9PT0gZm5cbiAgICAgICYmICghb25jZSB8fCBsaXN0ZW5lcnMub25jZSlcbiAgICAgICYmICghY29udGV4dCB8fCBsaXN0ZW5lcnMuY29udGV4dCA9PT0gY29udGV4dClcbiAgICApIHtcbiAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKSB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gICAgICBlbHNlIGRlbGV0ZSB0aGlzLl9ldmVudHNbZXZ0XTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGV2ZW50cyA9IFtdLCBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChcbiAgICAgICAgICAgbGlzdGVuZXJzW2ldLmZuICE9PSBmblxuICAgICAgICB8fCAob25jZSAmJiAhbGlzdGVuZXJzW2ldLm9uY2UpXG4gICAgICAgIHx8IChjb250ZXh0ICYmIGxpc3RlbmVyc1tpXS5jb250ZXh0ICE9PSBjb250ZXh0KVxuICAgICAgKSB7XG4gICAgICAgIGV2ZW50cy5wdXNoKGxpc3RlbmVyc1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBSZXNldCB0aGUgYXJyYXksIG9yIHJlbW92ZSBpdCBjb21wbGV0ZWx5IGlmIHdlIGhhdmUgbm8gbW9yZSBsaXN0ZW5lcnMuXG4gICAgLy9cbiAgICBpZiAoZXZlbnRzLmxlbmd0aCkgdGhpcy5fZXZlbnRzW2V2dF0gPSBldmVudHMubGVuZ3RoID09PSAxID8gZXZlbnRzWzBdIDogZXZlbnRzO1xuICAgIGVsc2UgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgICBlbHNlIGRlbGV0ZSB0aGlzLl9ldmVudHNbZXZ0XTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYWxsIGxpc3RlbmVycywgb3IgdGhvc2Ugb2YgdGhlIHNwZWNpZmllZCBldmVudC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xTeW1ib2x9IFtldmVudF0gVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyhldmVudCkge1xuICB2YXIgZXZ0O1xuXG4gIGlmIChldmVudCkge1xuICAgIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG4gICAgaWYgKHRoaXMuX2V2ZW50c1tldnRdKSB7XG4gICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMCkgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICAgICAgZWxzZSBkZWxldGUgdGhpcy5fZXZlbnRzW2V2dF07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vXG4vLyBBbGlhcyBtZXRob2RzIG5hbWVzIGJlY2F1c2UgcGVvcGxlIHJvbGwgbGlrZSB0aGF0LlxuLy9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uO1xuXG4vL1xuLy8gVGhpcyBmdW5jdGlvbiBkb2Vzbid0IGFwcGx5IGFueW1vcmUuXG4vL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy9cbi8vIEV4cG9zZSB0aGUgcHJlZml4LlxuLy9cbkV2ZW50RW1pdHRlci5wcmVmaXhlZCA9IHByZWZpeDtcblxuLy9cbi8vIEFsbG93IGBFdmVudEVtaXR0ZXJgIHRvIGJlIGltcG9ydGVkIGFzIG1vZHVsZSBuYW1lc3BhY2UuXG4vL1xuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuLy9cbi8vIEV4cG9zZSB0aGUgbW9kdWxlLlxuLy9cbmlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIG1vZHVsZSkge1xuICBtb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG52YXIgaXNBcnJheSA9IGZ1bmN0aW9uIGlzQXJyYXkoYXJyKSB7XG5cdGlmICh0eXBlb2YgQXJyYXkuaXNBcnJheSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldHVybiBBcnJheS5pc0FycmF5KGFycik7XG5cdH1cblxuXHRyZXR1cm4gdG9TdHIuY2FsbChhcnIpID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxudmFyIGlzUGxhaW5PYmplY3QgPSBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuXHRpZiAoIW9iaiB8fCB0b1N0ci5jYWxsKG9iaikgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0dmFyIGhhc093bkNvbnN0cnVjdG9yID0gaGFzT3duLmNhbGwob2JqLCAnY29uc3RydWN0b3InKTtcblx0dmFyIGhhc0lzUHJvdG90eXBlT2YgPSBvYmouY29uc3RydWN0b3IgJiYgb2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSAmJiBoYXNPd24uY2FsbChvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCAnaXNQcm90b3R5cGVPZicpO1xuXHQvLyBOb3Qgb3duIGNvbnN0cnVjdG9yIHByb3BlcnR5IG11c3QgYmUgT2JqZWN0XG5cdGlmIChvYmouY29uc3RydWN0b3IgJiYgIWhhc093bkNvbnN0cnVjdG9yICYmICFoYXNJc1Byb3RvdHlwZU9mKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Ly8gT3duIHByb3BlcnRpZXMgYXJlIGVudW1lcmF0ZWQgZmlyc3RseSwgc28gdG8gc3BlZWQgdXAsXG5cdC8vIGlmIGxhc3Qgb25lIGlzIG93biwgdGhlbiBhbGwgcHJvcGVydGllcyBhcmUgb3duLlxuXHR2YXIga2V5O1xuXHRmb3IgKGtleSBpbiBvYmopIHsgLyoqLyB9XG5cblx0cmV0dXJuIHR5cGVvZiBrZXkgPT09ICd1bmRlZmluZWQnIHx8IGhhc093bi5jYWxsKG9iaiwga2V5KTtcbn07XG5cbi8vIElmIG5hbWUgaXMgJ19fcHJvdG9fXycsIGFuZCBPYmplY3QuZGVmaW5lUHJvcGVydHkgaXMgYXZhaWxhYmxlLCBkZWZpbmUgX19wcm90b19fIGFzIGFuIG93biBwcm9wZXJ0eSBvbiB0YXJnZXRcbnZhciBzZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIHNldFByb3BlcnR5KHRhcmdldCwgb3B0aW9ucykge1xuXHRpZiAoZGVmaW5lUHJvcGVydHkgJiYgb3B0aW9ucy5uYW1lID09PSAnX19wcm90b19fJykge1xuXHRcdGRlZmluZVByb3BlcnR5KHRhcmdldCwgb3B0aW9ucy5uYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IG9wdGlvbnMubmV3VmFsdWUsXG5cdFx0XHR3cml0YWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHRhcmdldFtvcHRpb25zLm5hbWVdID0gb3B0aW9ucy5uZXdWYWx1ZTtcblx0fVxufTtcblxuLy8gUmV0dXJuIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIF9fcHJvdG9fXyBpZiAnX19wcm90b19fJyBpcyBub3QgYW4gb3duIHByb3BlcnR5XG52YXIgZ2V0UHJvcGVydHkgPSBmdW5jdGlvbiBnZXRQcm9wZXJ0eShvYmosIG5hbWUpIHtcblx0aWYgKG5hbWUgPT09ICdfX3Byb3RvX18nKSB7XG5cdFx0aWYgKCFoYXNPd24uY2FsbChvYmosIG5hbWUpKSB7XG5cdFx0XHRyZXR1cm4gdm9pZCAwO1xuXHRcdH0gZWxzZSBpZiAoZ09QRCkge1xuXHRcdFx0Ly8gSW4gZWFybHkgdmVyc2lvbnMgb2Ygbm9kZSwgb2JqWydfX3Byb3RvX18nXSBpcyBidWdneSB3aGVuIG9iaiBoYXNcblx0XHRcdC8vIF9fcHJvdG9fXyBhcyBhbiBvd24gcHJvcGVydHkuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoKSB3b3Jrcy5cblx0XHRcdHJldHVybiBnT1BEKG9iaiwgbmFtZSkudmFsdWU7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG9ialtuYW1lXTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXh0ZW5kKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmU7XG5cdHZhciB0YXJnZXQgPSBhcmd1bWVudHNbMF07XG5cdHZhciBpID0gMTtcblx0dmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdHZhciBkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Jvb2xlYW4nKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbMV0gfHwge307XG5cdFx0Ly8gc2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdGkgPSAyO1xuXHR9XG5cdGlmICh0YXJnZXQgPT0gbnVsbCB8fCAodHlwZW9mIHRhcmdldCAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIHRhcmdldCAhPT0gJ2Z1bmN0aW9uJykpIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdGZvciAoOyBpIDwgbGVuZ3RoOyArK2kpIHtcblx0XHRvcHRpb25zID0gYXJndW1lbnRzW2ldO1xuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAob3B0aW9ucyAhPSBudWxsKSB7XG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKG5hbWUgaW4gb3B0aW9ucykge1xuXHRcdFx0XHRzcmMgPSBnZXRQcm9wZXJ0eSh0YXJnZXQsIG5hbWUpO1xuXHRcdFx0XHRjb3B5ID0gZ2V0UHJvcGVydHkob3B0aW9ucywgbmFtZSk7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAodGFyZ2V0ICE9PSBjb3B5KSB7XG5cdFx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdFx0aWYgKGRlZXAgJiYgY29weSAmJiAoaXNQbGFpbk9iamVjdChjb3B5KSB8fCAoY29weUlzQXJyYXkgPSBpc0FycmF5KGNvcHkpKSkpIHtcblx0XHRcdFx0XHRcdGlmIChjb3B5SXNBcnJheSkge1xuXHRcdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBpc0FycmF5KHNyYykgPyBzcmMgOiBbXTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGlzUGxhaW5PYmplY3Qoc3JjKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHRcdHNldFByb3BlcnR5KHRhcmdldCwgeyBuYW1lOiBuYW1lLCBuZXdWYWx1ZTogZXh0ZW5kKGRlZXAsIGNsb25lLCBjb3B5KSB9KTtcblxuXHRcdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHR5cGVvZiBjb3B5ICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdFx0c2V0UHJvcGVydHkodGFyZ2V0LCB7IG5hbWU6IG5hbWUsIG5ld1ZhbHVlOiBjb3B5IH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuIiwiLyoqXG4gKiBUaGlzIGxpYnJhcnkgbW9kaWZpZXMgdGhlIGRpZmYtcGF0Y2gtbWF0Y2ggbGlicmFyeSBieSBOZWlsIEZyYXNlclxuICogYnkgcmVtb3ZpbmcgdGhlIHBhdGNoIGFuZCBtYXRjaCBmdW5jdGlvbmFsaXR5IGFuZCBjZXJ0YWluIGFkdmFuY2VkXG4gKiBvcHRpb25zIGluIHRoZSBkaWZmIGZ1bmN0aW9uLiBUaGUgb3JpZ2luYWwgbGljZW5zZSBpcyBhcyBmb2xsb3dzOlxuICpcbiAqID09PVxuICpcbiAqIERpZmYgTWF0Y2ggYW5kIFBhdGNoXG4gKlxuICogQ29weXJpZ2h0IDIwMDYgR29vZ2xlIEluYy5cbiAqIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9nb29nbGUtZGlmZi1tYXRjaC1wYXRjaC9cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuLyoqXG4gKiBUaGUgZGF0YSBzdHJ1Y3R1cmUgcmVwcmVzZW50aW5nIGEgZGlmZiBpcyBhbiBhcnJheSBvZiB0dXBsZXM6XG4gKiBbW0RJRkZfREVMRVRFLCAnSGVsbG8nXSwgW0RJRkZfSU5TRVJULCAnR29vZGJ5ZSddLCBbRElGRl9FUVVBTCwgJyB3b3JsZC4nXV1cbiAqIHdoaWNoIG1lYW5zOiBkZWxldGUgJ0hlbGxvJywgYWRkICdHb29kYnllJyBhbmQga2VlcCAnIHdvcmxkLidcbiAqL1xudmFyIERJRkZfREVMRVRFID0gLTE7XG52YXIgRElGRl9JTlNFUlQgPSAxO1xudmFyIERJRkZfRVFVQUwgPSAwO1xuXG5cbi8qKlxuICogRmluZCB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiB0d28gdGV4dHMuICBTaW1wbGlmaWVzIHRoZSBwcm9ibGVtIGJ5IHN0cmlwcGluZ1xuICogYW55IGNvbW1vbiBwcmVmaXggb3Igc3VmZml4IG9mZiB0aGUgdGV4dHMgYmVmb3JlIGRpZmZpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDEgT2xkIHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDIgTmV3IHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge0ludH0gY3Vyc29yX3BvcyBFeHBlY3RlZCBlZGl0IHBvc2l0aW9uIGluIHRleHQxIChvcHRpb25hbClcbiAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBkaWZmIHR1cGxlcy5cbiAqL1xuZnVuY3Rpb24gZGlmZl9tYWluKHRleHQxLCB0ZXh0MiwgY3Vyc29yX3Bvcykge1xuICAvLyBDaGVjayBmb3IgZXF1YWxpdHkgKHNwZWVkdXApLlxuICBpZiAodGV4dDEgPT0gdGV4dDIpIHtcbiAgICBpZiAodGV4dDEpIHtcbiAgICAgIHJldHVybiBbW0RJRkZfRVFVQUwsIHRleHQxXV07XG4gICAgfVxuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIC8vIENoZWNrIGN1cnNvcl9wb3Mgd2l0aGluIGJvdW5kc1xuICBpZiAoY3Vyc29yX3BvcyA8IDAgfHwgdGV4dDEubGVuZ3RoIDwgY3Vyc29yX3Bvcykge1xuICAgIGN1cnNvcl9wb3MgPSBudWxsO1xuICB9XG5cbiAgLy8gVHJpbSBvZmYgY29tbW9uIHByZWZpeCAoc3BlZWR1cCkuXG4gIHZhciBjb21tb25sZW5ndGggPSBkaWZmX2NvbW1vblByZWZpeCh0ZXh0MSwgdGV4dDIpO1xuICB2YXIgY29tbW9ucHJlZml4ID0gdGV4dDEuc3Vic3RyaW5nKDAsIGNvbW1vbmxlbmd0aCk7XG4gIHRleHQxID0gdGV4dDEuc3Vic3RyaW5nKGNvbW1vbmxlbmd0aCk7XG4gIHRleHQyID0gdGV4dDIuc3Vic3RyaW5nKGNvbW1vbmxlbmd0aCk7XG5cbiAgLy8gVHJpbSBvZmYgY29tbW9uIHN1ZmZpeCAoc3BlZWR1cCkuXG4gIGNvbW1vbmxlbmd0aCA9IGRpZmZfY29tbW9uU3VmZml4KHRleHQxLCB0ZXh0Mik7XG4gIHZhciBjb21tb25zdWZmaXggPSB0ZXh0MS5zdWJzdHJpbmcodGV4dDEubGVuZ3RoIC0gY29tbW9ubGVuZ3RoKTtcbiAgdGV4dDEgPSB0ZXh0MS5zdWJzdHJpbmcoMCwgdGV4dDEubGVuZ3RoIC0gY29tbW9ubGVuZ3RoKTtcbiAgdGV4dDIgPSB0ZXh0Mi5zdWJzdHJpbmcoMCwgdGV4dDIubGVuZ3RoIC0gY29tbW9ubGVuZ3RoKTtcblxuICAvLyBDb21wdXRlIHRoZSBkaWZmIG9uIHRoZSBtaWRkbGUgYmxvY2suXG4gIHZhciBkaWZmcyA9IGRpZmZfY29tcHV0ZV8odGV4dDEsIHRleHQyKTtcblxuICAvLyBSZXN0b3JlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgaWYgKGNvbW1vbnByZWZpeCkge1xuICAgIGRpZmZzLnVuc2hpZnQoW0RJRkZfRVFVQUwsIGNvbW1vbnByZWZpeF0pO1xuICB9XG4gIGlmIChjb21tb25zdWZmaXgpIHtcbiAgICBkaWZmcy5wdXNoKFtESUZGX0VRVUFMLCBjb21tb25zdWZmaXhdKTtcbiAgfVxuICBkaWZmX2NsZWFudXBNZXJnZShkaWZmcyk7XG4gIGlmIChjdXJzb3JfcG9zICE9IG51bGwpIHtcbiAgICBkaWZmcyA9IGZpeF9jdXJzb3IoZGlmZnMsIGN1cnNvcl9wb3MpO1xuICB9XG4gIGRpZmZzID0gZml4X2Vtb2ppKGRpZmZzKTtcbiAgcmV0dXJuIGRpZmZzO1xufTtcblxuXG4vKipcbiAqIEZpbmQgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gdHdvIHRleHRzLiAgQXNzdW1lcyB0aGF0IHRoZSB0ZXh0cyBkbyBub3RcbiAqIGhhdmUgYW55IGNvbW1vbiBwcmVmaXggb3Igc3VmZml4LlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQxIE9sZCBzdHJpbmcgdG8gYmUgZGlmZmVkLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQyIE5ldyBzdHJpbmcgdG8gYmUgZGlmZmVkLlxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIGRpZmYgdHVwbGVzLlxuICovXG5mdW5jdGlvbiBkaWZmX2NvbXB1dGVfKHRleHQxLCB0ZXh0Mikge1xuICB2YXIgZGlmZnM7XG5cbiAgaWYgKCF0ZXh0MSkge1xuICAgIC8vIEp1c3QgYWRkIHNvbWUgdGV4dCAoc3BlZWR1cCkuXG4gICAgcmV0dXJuIFtbRElGRl9JTlNFUlQsIHRleHQyXV07XG4gIH1cblxuICBpZiAoIXRleHQyKSB7XG4gICAgLy8gSnVzdCBkZWxldGUgc29tZSB0ZXh0IChzcGVlZHVwKS5cbiAgICByZXR1cm4gW1tESUZGX0RFTEVURSwgdGV4dDFdXTtcbiAgfVxuXG4gIHZhciBsb25ndGV4dCA9IHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCA/IHRleHQxIDogdGV4dDI7XG4gIHZhciBzaG9ydHRleHQgPSB0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGggPyB0ZXh0MiA6IHRleHQxO1xuICB2YXIgaSA9IGxvbmd0ZXh0LmluZGV4T2Yoc2hvcnR0ZXh0KTtcbiAgaWYgKGkgIT0gLTEpIHtcbiAgICAvLyBTaG9ydGVyIHRleHQgaXMgaW5zaWRlIHRoZSBsb25nZXIgdGV4dCAoc3BlZWR1cCkuXG4gICAgZGlmZnMgPSBbW0RJRkZfSU5TRVJULCBsb25ndGV4dC5zdWJzdHJpbmcoMCwgaSldLFxuICAgICAgICAgICAgIFtESUZGX0VRVUFMLCBzaG9ydHRleHRdLFxuICAgICAgICAgICAgIFtESUZGX0lOU0VSVCwgbG9uZ3RleHQuc3Vic3RyaW5nKGkgKyBzaG9ydHRleHQubGVuZ3RoKV1dO1xuICAgIC8vIFN3YXAgaW5zZXJ0aW9ucyBmb3IgZGVsZXRpb25zIGlmIGRpZmYgaXMgcmV2ZXJzZWQuXG4gICAgaWYgKHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCkge1xuICAgICAgZGlmZnNbMF1bMF0gPSBkaWZmc1syXVswXSA9IERJRkZfREVMRVRFO1xuICAgIH1cbiAgICByZXR1cm4gZGlmZnM7XG4gIH1cblxuICBpZiAoc2hvcnR0ZXh0Lmxlbmd0aCA9PSAxKSB7XG4gICAgLy8gU2luZ2xlIGNoYXJhY3RlciBzdHJpbmcuXG4gICAgLy8gQWZ0ZXIgdGhlIHByZXZpb3VzIHNwZWVkdXAsIHRoZSBjaGFyYWN0ZXIgY2FuJ3QgYmUgYW4gZXF1YWxpdHkuXG4gICAgcmV0dXJuIFtbRElGRl9ERUxFVEUsIHRleHQxXSwgW0RJRkZfSU5TRVJULCB0ZXh0Ml1dO1xuICB9XG5cbiAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSBwcm9ibGVtIGNhbiBiZSBzcGxpdCBpbiB0d28uXG4gIHZhciBobSA9IGRpZmZfaGFsZk1hdGNoXyh0ZXh0MSwgdGV4dDIpO1xuICBpZiAoaG0pIHtcbiAgICAvLyBBIGhhbGYtbWF0Y2ggd2FzIGZvdW5kLCBzb3J0IG91dCB0aGUgcmV0dXJuIGRhdGEuXG4gICAgdmFyIHRleHQxX2EgPSBobVswXTtcbiAgICB2YXIgdGV4dDFfYiA9IGhtWzFdO1xuICAgIHZhciB0ZXh0Ml9hID0gaG1bMl07XG4gICAgdmFyIHRleHQyX2IgPSBobVszXTtcbiAgICB2YXIgbWlkX2NvbW1vbiA9IGhtWzRdO1xuICAgIC8vIFNlbmQgYm90aCBwYWlycyBvZmYgZm9yIHNlcGFyYXRlIHByb2Nlc3NpbmcuXG4gICAgdmFyIGRpZmZzX2EgPSBkaWZmX21haW4odGV4dDFfYSwgdGV4dDJfYSk7XG4gICAgdmFyIGRpZmZzX2IgPSBkaWZmX21haW4odGV4dDFfYiwgdGV4dDJfYik7XG4gICAgLy8gTWVyZ2UgdGhlIHJlc3VsdHMuXG4gICAgcmV0dXJuIGRpZmZzX2EuY29uY2F0KFtbRElGRl9FUVVBTCwgbWlkX2NvbW1vbl1dLCBkaWZmc19iKTtcbiAgfVxuXG4gIHJldHVybiBkaWZmX2Jpc2VjdF8odGV4dDEsIHRleHQyKTtcbn07XG5cblxuLyoqXG4gKiBGaW5kIHRoZSAnbWlkZGxlIHNuYWtlJyBvZiBhIGRpZmYsIHNwbGl0IHRoZSBwcm9ibGVtIGluIHR3b1xuICogYW5kIHJldHVybiB0aGUgcmVjdXJzaXZlbHkgY29uc3RydWN0ZWQgZGlmZi5cbiAqIFNlZSBNeWVycyAxOTg2IHBhcGVyOiBBbiBPKE5EKSBEaWZmZXJlbmNlIEFsZ29yaXRobSBhbmQgSXRzIFZhcmlhdGlvbnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDEgT2xkIHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDIgTmV3IHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgb2YgZGlmZiB0dXBsZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBkaWZmX2Jpc2VjdF8odGV4dDEsIHRleHQyKSB7XG4gIC8vIENhY2hlIHRoZSB0ZXh0IGxlbmd0aHMgdG8gcHJldmVudCBtdWx0aXBsZSBjYWxscy5cbiAgdmFyIHRleHQxX2xlbmd0aCA9IHRleHQxLmxlbmd0aDtcbiAgdmFyIHRleHQyX2xlbmd0aCA9IHRleHQyLmxlbmd0aDtcbiAgdmFyIG1heF9kID0gTWF0aC5jZWlsKCh0ZXh0MV9sZW5ndGggKyB0ZXh0Ml9sZW5ndGgpIC8gMik7XG4gIHZhciB2X29mZnNldCA9IG1heF9kO1xuICB2YXIgdl9sZW5ndGggPSAyICogbWF4X2Q7XG4gIHZhciB2MSA9IG5ldyBBcnJheSh2X2xlbmd0aCk7XG4gIHZhciB2MiA9IG5ldyBBcnJheSh2X2xlbmd0aCk7XG4gIC8vIFNldHRpbmcgYWxsIGVsZW1lbnRzIHRvIC0xIGlzIGZhc3RlciBpbiBDaHJvbWUgJiBGaXJlZm94IHRoYW4gbWl4aW5nXG4gIC8vIGludGVnZXJzIGFuZCB1bmRlZmluZWQuXG4gIGZvciAodmFyIHggPSAwOyB4IDwgdl9sZW5ndGg7IHgrKykge1xuICAgIHYxW3hdID0gLTE7XG4gICAgdjJbeF0gPSAtMTtcbiAgfVxuICB2MVt2X29mZnNldCArIDFdID0gMDtcbiAgdjJbdl9vZmZzZXQgKyAxXSA9IDA7XG4gIHZhciBkZWx0YSA9IHRleHQxX2xlbmd0aCAtIHRleHQyX2xlbmd0aDtcbiAgLy8gSWYgdGhlIHRvdGFsIG51bWJlciBvZiBjaGFyYWN0ZXJzIGlzIG9kZCwgdGhlbiB0aGUgZnJvbnQgcGF0aCB3aWxsIGNvbGxpZGVcbiAgLy8gd2l0aCB0aGUgcmV2ZXJzZSBwYXRoLlxuICB2YXIgZnJvbnQgPSAoZGVsdGEgJSAyICE9IDApO1xuICAvLyBPZmZzZXRzIGZvciBzdGFydCBhbmQgZW5kIG9mIGsgbG9vcC5cbiAgLy8gUHJldmVudHMgbWFwcGluZyBvZiBzcGFjZSBiZXlvbmQgdGhlIGdyaWQuXG4gIHZhciBrMXN0YXJ0ID0gMDtcbiAgdmFyIGsxZW5kID0gMDtcbiAgdmFyIGsyc3RhcnQgPSAwO1xuICB2YXIgazJlbmQgPSAwO1xuICBmb3IgKHZhciBkID0gMDsgZCA8IG1heF9kOyBkKyspIHtcbiAgICAvLyBXYWxrIHRoZSBmcm9udCBwYXRoIG9uZSBzdGVwLlxuICAgIGZvciAodmFyIGsxID0gLWQgKyBrMXN0YXJ0OyBrMSA8PSBkIC0gazFlbmQ7IGsxICs9IDIpIHtcbiAgICAgIHZhciBrMV9vZmZzZXQgPSB2X29mZnNldCArIGsxO1xuICAgICAgdmFyIHgxO1xuICAgICAgaWYgKGsxID09IC1kIHx8IChrMSAhPSBkICYmIHYxW2sxX29mZnNldCAtIDFdIDwgdjFbazFfb2Zmc2V0ICsgMV0pKSB7XG4gICAgICAgIHgxID0gdjFbazFfb2Zmc2V0ICsgMV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4MSA9IHYxW2sxX29mZnNldCAtIDFdICsgMTtcbiAgICAgIH1cbiAgICAgIHZhciB5MSA9IHgxIC0gazE7XG4gICAgICB3aGlsZSAoeDEgPCB0ZXh0MV9sZW5ndGggJiYgeTEgPCB0ZXh0Ml9sZW5ndGggJiZcbiAgICAgICAgICAgICB0ZXh0MS5jaGFyQXQoeDEpID09IHRleHQyLmNoYXJBdCh5MSkpIHtcbiAgICAgICAgeDErKztcbiAgICAgICAgeTErKztcbiAgICAgIH1cbiAgICAgIHYxW2sxX29mZnNldF0gPSB4MTtcbiAgICAgIGlmICh4MSA+IHRleHQxX2xlbmd0aCkge1xuICAgICAgICAvLyBSYW4gb2ZmIHRoZSByaWdodCBvZiB0aGUgZ3JhcGguXG4gICAgICAgIGsxZW5kICs9IDI7XG4gICAgICB9IGVsc2UgaWYgKHkxID4gdGV4dDJfbGVuZ3RoKSB7XG4gICAgICAgIC8vIFJhbiBvZmYgdGhlIGJvdHRvbSBvZiB0aGUgZ3JhcGguXG4gICAgICAgIGsxc3RhcnQgKz0gMjtcbiAgICAgIH0gZWxzZSBpZiAoZnJvbnQpIHtcbiAgICAgICAgdmFyIGsyX29mZnNldCA9IHZfb2Zmc2V0ICsgZGVsdGEgLSBrMTtcbiAgICAgICAgaWYgKGsyX29mZnNldCA+PSAwICYmIGsyX29mZnNldCA8IHZfbGVuZ3RoICYmIHYyW2syX29mZnNldF0gIT0gLTEpIHtcbiAgICAgICAgICAvLyBNaXJyb3IgeDIgb250byB0b3AtbGVmdCBjb29yZGluYXRlIHN5c3RlbS5cbiAgICAgICAgICB2YXIgeDIgPSB0ZXh0MV9sZW5ndGggLSB2MltrMl9vZmZzZXRdO1xuICAgICAgICAgIGlmICh4MSA+PSB4Mikge1xuICAgICAgICAgICAgLy8gT3ZlcmxhcCBkZXRlY3RlZC5cbiAgICAgICAgICAgIHJldHVybiBkaWZmX2Jpc2VjdFNwbGl0Xyh0ZXh0MSwgdGV4dDIsIHgxLCB5MSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gV2FsayB0aGUgcmV2ZXJzZSBwYXRoIG9uZSBzdGVwLlxuICAgIGZvciAodmFyIGsyID0gLWQgKyBrMnN0YXJ0OyBrMiA8PSBkIC0gazJlbmQ7IGsyICs9IDIpIHtcbiAgICAgIHZhciBrMl9vZmZzZXQgPSB2X29mZnNldCArIGsyO1xuICAgICAgdmFyIHgyO1xuICAgICAgaWYgKGsyID09IC1kIHx8IChrMiAhPSBkICYmIHYyW2syX29mZnNldCAtIDFdIDwgdjJbazJfb2Zmc2V0ICsgMV0pKSB7XG4gICAgICAgIHgyID0gdjJbazJfb2Zmc2V0ICsgMV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4MiA9IHYyW2syX29mZnNldCAtIDFdICsgMTtcbiAgICAgIH1cbiAgICAgIHZhciB5MiA9IHgyIC0gazI7XG4gICAgICB3aGlsZSAoeDIgPCB0ZXh0MV9sZW5ndGggJiYgeTIgPCB0ZXh0Ml9sZW5ndGggJiZcbiAgICAgICAgICAgICB0ZXh0MS5jaGFyQXQodGV4dDFfbGVuZ3RoIC0geDIgLSAxKSA9PVxuICAgICAgICAgICAgIHRleHQyLmNoYXJBdCh0ZXh0Ml9sZW5ndGggLSB5MiAtIDEpKSB7XG4gICAgICAgIHgyKys7XG4gICAgICAgIHkyKys7XG4gICAgICB9XG4gICAgICB2MltrMl9vZmZzZXRdID0geDI7XG4gICAgICBpZiAoeDIgPiB0ZXh0MV9sZW5ndGgpIHtcbiAgICAgICAgLy8gUmFuIG9mZiB0aGUgbGVmdCBvZiB0aGUgZ3JhcGguXG4gICAgICAgIGsyZW5kICs9IDI7XG4gICAgICB9IGVsc2UgaWYgKHkyID4gdGV4dDJfbGVuZ3RoKSB7XG4gICAgICAgIC8vIFJhbiBvZmYgdGhlIHRvcCBvZiB0aGUgZ3JhcGguXG4gICAgICAgIGsyc3RhcnQgKz0gMjtcbiAgICAgIH0gZWxzZSBpZiAoIWZyb250KSB7XG4gICAgICAgIHZhciBrMV9vZmZzZXQgPSB2X29mZnNldCArIGRlbHRhIC0gazI7XG4gICAgICAgIGlmIChrMV9vZmZzZXQgPj0gMCAmJiBrMV9vZmZzZXQgPCB2X2xlbmd0aCAmJiB2MVtrMV9vZmZzZXRdICE9IC0xKSB7XG4gICAgICAgICAgdmFyIHgxID0gdjFbazFfb2Zmc2V0XTtcbiAgICAgICAgICB2YXIgeTEgPSB2X29mZnNldCArIHgxIC0gazFfb2Zmc2V0O1xuICAgICAgICAgIC8vIE1pcnJvciB4MiBvbnRvIHRvcC1sZWZ0IGNvb3JkaW5hdGUgc3lzdGVtLlxuICAgICAgICAgIHgyID0gdGV4dDFfbGVuZ3RoIC0geDI7XG4gICAgICAgICAgaWYgKHgxID49IHgyKSB7XG4gICAgICAgICAgICAvLyBPdmVybGFwIGRldGVjdGVkLlxuICAgICAgICAgICAgcmV0dXJuIGRpZmZfYmlzZWN0U3BsaXRfKHRleHQxLCB0ZXh0MiwgeDEsIHkxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gRGlmZiB0b29rIHRvbyBsb25nIGFuZCBoaXQgdGhlIGRlYWRsaW5lIG9yXG4gIC8vIG51bWJlciBvZiBkaWZmcyBlcXVhbHMgbnVtYmVyIG9mIGNoYXJhY3RlcnMsIG5vIGNvbW1vbmFsaXR5IGF0IGFsbC5cbiAgcmV0dXJuIFtbRElGRl9ERUxFVEUsIHRleHQxXSwgW0RJRkZfSU5TRVJULCB0ZXh0Ml1dO1xufTtcblxuXG4vKipcbiAqIEdpdmVuIHRoZSBsb2NhdGlvbiBvZiB0aGUgJ21pZGRsZSBzbmFrZScsIHNwbGl0IHRoZSBkaWZmIGluIHR3byBwYXJ0c1xuICogYW5kIHJlY3Vyc2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDEgT2xkIHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDIgTmV3IHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge251bWJlcn0geCBJbmRleCBvZiBzcGxpdCBwb2ludCBpbiB0ZXh0MS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB5IEluZGV4IG9mIHNwbGl0IHBvaW50IGluIHRleHQyLlxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIGRpZmYgdHVwbGVzLlxuICovXG5mdW5jdGlvbiBkaWZmX2Jpc2VjdFNwbGl0Xyh0ZXh0MSwgdGV4dDIsIHgsIHkpIHtcbiAgdmFyIHRleHQxYSA9IHRleHQxLnN1YnN0cmluZygwLCB4KTtcbiAgdmFyIHRleHQyYSA9IHRleHQyLnN1YnN0cmluZygwLCB5KTtcbiAgdmFyIHRleHQxYiA9IHRleHQxLnN1YnN0cmluZyh4KTtcbiAgdmFyIHRleHQyYiA9IHRleHQyLnN1YnN0cmluZyh5KTtcblxuICAvLyBDb21wdXRlIGJvdGggZGlmZnMgc2VyaWFsbHkuXG4gIHZhciBkaWZmcyA9IGRpZmZfbWFpbih0ZXh0MWEsIHRleHQyYSk7XG4gIHZhciBkaWZmc2IgPSBkaWZmX21haW4odGV4dDFiLCB0ZXh0MmIpO1xuXG4gIHJldHVybiBkaWZmcy5jb25jYXQoZGlmZnNiKTtcbn07XG5cblxuLyoqXG4gKiBEZXRlcm1pbmUgdGhlIGNvbW1vbiBwcmVmaXggb2YgdHdvIHN0cmluZ3MuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDEgRmlyc3Qgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQyIFNlY29uZCBzdHJpbmcuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBjb21tb24gdG8gdGhlIHN0YXJ0IG9mIGVhY2hcbiAqICAgICBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGRpZmZfY29tbW9uUHJlZml4KHRleHQxLCB0ZXh0Mikge1xuICAvLyBRdWljayBjaGVjayBmb3IgY29tbW9uIG51bGwgY2FzZXMuXG4gIGlmICghdGV4dDEgfHwgIXRleHQyIHx8IHRleHQxLmNoYXJBdCgwKSAhPSB0ZXh0Mi5jaGFyQXQoMCkpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICAvLyBCaW5hcnkgc2VhcmNoLlxuICAvLyBQZXJmb3JtYW5jZSBhbmFseXNpczogaHR0cDovL25laWwuZnJhc2VyLm5hbWUvbmV3cy8yMDA3LzEwLzA5L1xuICB2YXIgcG9pbnRlcm1pbiA9IDA7XG4gIHZhciBwb2ludGVybWF4ID0gTWF0aC5taW4odGV4dDEubGVuZ3RoLCB0ZXh0Mi5sZW5ndGgpO1xuICB2YXIgcG9pbnRlcm1pZCA9IHBvaW50ZXJtYXg7XG4gIHZhciBwb2ludGVyc3RhcnQgPSAwO1xuICB3aGlsZSAocG9pbnRlcm1pbiA8IHBvaW50ZXJtaWQpIHtcbiAgICBpZiAodGV4dDEuc3Vic3RyaW5nKHBvaW50ZXJzdGFydCwgcG9pbnRlcm1pZCkgPT1cbiAgICAgICAgdGV4dDIuc3Vic3RyaW5nKHBvaW50ZXJzdGFydCwgcG9pbnRlcm1pZCkpIHtcbiAgICAgIHBvaW50ZXJtaW4gPSBwb2ludGVybWlkO1xuICAgICAgcG9pbnRlcnN0YXJ0ID0gcG9pbnRlcm1pbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9pbnRlcm1heCA9IHBvaW50ZXJtaWQ7XG4gICAgfVxuICAgIHBvaW50ZXJtaWQgPSBNYXRoLmZsb29yKChwb2ludGVybWF4IC0gcG9pbnRlcm1pbikgLyAyICsgcG9pbnRlcm1pbik7XG4gIH1cbiAgcmV0dXJuIHBvaW50ZXJtaWQ7XG59O1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIHRoZSBjb21tb24gc3VmZml4IG9mIHR3byBzdHJpbmdzLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQxIEZpcnN0IHN0cmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MiBTZWNvbmQgc3RyaW5nLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgY29tbW9uIHRvIHRoZSBlbmQgb2YgZWFjaCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGRpZmZfY29tbW9uU3VmZml4KHRleHQxLCB0ZXh0Mikge1xuICAvLyBRdWljayBjaGVjayBmb3IgY29tbW9uIG51bGwgY2FzZXMuXG4gIGlmICghdGV4dDEgfHwgIXRleHQyIHx8XG4gICAgICB0ZXh0MS5jaGFyQXQodGV4dDEubGVuZ3RoIC0gMSkgIT0gdGV4dDIuY2hhckF0KHRleHQyLmxlbmd0aCAtIDEpKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgLy8gQmluYXJ5IHNlYXJjaC5cbiAgLy8gUGVyZm9ybWFuY2UgYW5hbHlzaXM6IGh0dHA6Ly9uZWlsLmZyYXNlci5uYW1lL25ld3MvMjAwNy8xMC8wOS9cbiAgdmFyIHBvaW50ZXJtaW4gPSAwO1xuICB2YXIgcG9pbnRlcm1heCA9IE1hdGgubWluKHRleHQxLmxlbmd0aCwgdGV4dDIubGVuZ3RoKTtcbiAgdmFyIHBvaW50ZXJtaWQgPSBwb2ludGVybWF4O1xuICB2YXIgcG9pbnRlcmVuZCA9IDA7XG4gIHdoaWxlIChwb2ludGVybWluIDwgcG9pbnRlcm1pZCkge1xuICAgIGlmICh0ZXh0MS5zdWJzdHJpbmcodGV4dDEubGVuZ3RoIC0gcG9pbnRlcm1pZCwgdGV4dDEubGVuZ3RoIC0gcG9pbnRlcmVuZCkgPT1cbiAgICAgICAgdGV4dDIuc3Vic3RyaW5nKHRleHQyLmxlbmd0aCAtIHBvaW50ZXJtaWQsIHRleHQyLmxlbmd0aCAtIHBvaW50ZXJlbmQpKSB7XG4gICAgICBwb2ludGVybWluID0gcG9pbnRlcm1pZDtcbiAgICAgIHBvaW50ZXJlbmQgPSBwb2ludGVybWluO1xuICAgIH0gZWxzZSB7XG4gICAgICBwb2ludGVybWF4ID0gcG9pbnRlcm1pZDtcbiAgICB9XG4gICAgcG9pbnRlcm1pZCA9IE1hdGguZmxvb3IoKHBvaW50ZXJtYXggLSBwb2ludGVybWluKSAvIDIgKyBwb2ludGVybWluKTtcbiAgfVxuICByZXR1cm4gcG9pbnRlcm1pZDtcbn07XG5cblxuLyoqXG4gKiBEbyB0aGUgdHdvIHRleHRzIHNoYXJlIGEgc3Vic3RyaW5nIHdoaWNoIGlzIGF0IGxlYXN0IGhhbGYgdGhlIGxlbmd0aCBvZiB0aGVcbiAqIGxvbmdlciB0ZXh0P1xuICogVGhpcyBzcGVlZHVwIGNhbiBwcm9kdWNlIG5vbi1taW5pbWFsIGRpZmZzLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQxIEZpcnN0IHN0cmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MiBTZWNvbmQgc3RyaW5nLlxuICogQHJldHVybiB7QXJyYXkuPHN0cmluZz59IEZpdmUgZWxlbWVudCBBcnJheSwgY29udGFpbmluZyB0aGUgcHJlZml4IG9mXG4gKiAgICAgdGV4dDEsIHRoZSBzdWZmaXggb2YgdGV4dDEsIHRoZSBwcmVmaXggb2YgdGV4dDIsIHRoZSBzdWZmaXggb2ZcbiAqICAgICB0ZXh0MiBhbmQgdGhlIGNvbW1vbiBtaWRkbGUuICBPciBudWxsIGlmIHRoZXJlIHdhcyBubyBtYXRjaC5cbiAqL1xuZnVuY3Rpb24gZGlmZl9oYWxmTWF0Y2hfKHRleHQxLCB0ZXh0Mikge1xuICB2YXIgbG9uZ3RleHQgPSB0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGggPyB0ZXh0MSA6IHRleHQyO1xuICB2YXIgc2hvcnR0ZXh0ID0gdGV4dDEubGVuZ3RoID4gdGV4dDIubGVuZ3RoID8gdGV4dDIgOiB0ZXh0MTtcbiAgaWYgKGxvbmd0ZXh0Lmxlbmd0aCA8IDQgfHwgc2hvcnR0ZXh0Lmxlbmd0aCAqIDIgPCBsb25ndGV4dC5sZW5ndGgpIHtcbiAgICByZXR1cm4gbnVsbDsgIC8vIFBvaW50bGVzcy5cbiAgfVxuXG4gIC8qKlxuICAgKiBEb2VzIGEgc3Vic3RyaW5nIG9mIHNob3J0dGV4dCBleGlzdCB3aXRoaW4gbG9uZ3RleHQgc3VjaCB0aGF0IHRoZSBzdWJzdHJpbmdcbiAgICogaXMgYXQgbGVhc3QgaGFsZiB0aGUgbGVuZ3RoIG9mIGxvbmd0ZXh0P1xuICAgKiBDbG9zdXJlLCBidXQgZG9lcyBub3QgcmVmZXJlbmNlIGFueSBleHRlcm5hbCB2YXJpYWJsZXMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsb25ndGV4dCBMb25nZXIgc3RyaW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2hvcnR0ZXh0IFNob3J0ZXIgc3RyaW5nLlxuICAgKiBAcGFyYW0ge251bWJlcn0gaSBTdGFydCBpbmRleCBvZiBxdWFydGVyIGxlbmd0aCBzdWJzdHJpbmcgd2l0aGluIGxvbmd0ZXh0LlxuICAgKiBAcmV0dXJuIHtBcnJheS48c3RyaW5nPn0gRml2ZSBlbGVtZW50IEFycmF5LCBjb250YWluaW5nIHRoZSBwcmVmaXggb2ZcbiAgICogICAgIGxvbmd0ZXh0LCB0aGUgc3VmZml4IG9mIGxvbmd0ZXh0LCB0aGUgcHJlZml4IG9mIHNob3J0dGV4dCwgdGhlIHN1ZmZpeFxuICAgKiAgICAgb2Ygc2hvcnR0ZXh0IGFuZCB0aGUgY29tbW9uIG1pZGRsZS4gIE9yIG51bGwgaWYgdGhlcmUgd2FzIG5vIG1hdGNoLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gZGlmZl9oYWxmTWF0Y2hJXyhsb25ndGV4dCwgc2hvcnR0ZXh0LCBpKSB7XG4gICAgLy8gU3RhcnQgd2l0aCBhIDEvNCBsZW5ndGggc3Vic3RyaW5nIGF0IHBvc2l0aW9uIGkgYXMgYSBzZWVkLlxuICAgIHZhciBzZWVkID0gbG9uZ3RleHQuc3Vic3RyaW5nKGksIGkgKyBNYXRoLmZsb29yKGxvbmd0ZXh0Lmxlbmd0aCAvIDQpKTtcbiAgICB2YXIgaiA9IC0xO1xuICAgIHZhciBiZXN0X2NvbW1vbiA9ICcnO1xuICAgIHZhciBiZXN0X2xvbmd0ZXh0X2EsIGJlc3RfbG9uZ3RleHRfYiwgYmVzdF9zaG9ydHRleHRfYSwgYmVzdF9zaG9ydHRleHRfYjtcbiAgICB3aGlsZSAoKGogPSBzaG9ydHRleHQuaW5kZXhPZihzZWVkLCBqICsgMSkpICE9IC0xKSB7XG4gICAgICB2YXIgcHJlZml4TGVuZ3RoID0gZGlmZl9jb21tb25QcmVmaXgobG9uZ3RleHQuc3Vic3RyaW5nKGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3J0dGV4dC5zdWJzdHJpbmcoaikpO1xuICAgICAgdmFyIHN1ZmZpeExlbmd0aCA9IGRpZmZfY29tbW9uU3VmZml4KGxvbmd0ZXh0LnN1YnN0cmluZygwLCBpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG9ydHRleHQuc3Vic3RyaW5nKDAsIGopKTtcbiAgICAgIGlmIChiZXN0X2NvbW1vbi5sZW5ndGggPCBzdWZmaXhMZW5ndGggKyBwcmVmaXhMZW5ndGgpIHtcbiAgICAgICAgYmVzdF9jb21tb24gPSBzaG9ydHRleHQuc3Vic3RyaW5nKGogLSBzdWZmaXhMZW5ndGgsIGopICtcbiAgICAgICAgICAgIHNob3J0dGV4dC5zdWJzdHJpbmcoaiwgaiArIHByZWZpeExlbmd0aCk7XG4gICAgICAgIGJlc3RfbG9uZ3RleHRfYSA9IGxvbmd0ZXh0LnN1YnN0cmluZygwLCBpIC0gc3VmZml4TGVuZ3RoKTtcbiAgICAgICAgYmVzdF9sb25ndGV4dF9iID0gbG9uZ3RleHQuc3Vic3RyaW5nKGkgKyBwcmVmaXhMZW5ndGgpO1xuICAgICAgICBiZXN0X3Nob3J0dGV4dF9hID0gc2hvcnR0ZXh0LnN1YnN0cmluZygwLCBqIC0gc3VmZml4TGVuZ3RoKTtcbiAgICAgICAgYmVzdF9zaG9ydHRleHRfYiA9IHNob3J0dGV4dC5zdWJzdHJpbmcoaiArIHByZWZpeExlbmd0aCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChiZXN0X2NvbW1vbi5sZW5ndGggKiAyID49IGxvbmd0ZXh0Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuIFtiZXN0X2xvbmd0ZXh0X2EsIGJlc3RfbG9uZ3RleHRfYixcbiAgICAgICAgICAgICAgYmVzdF9zaG9ydHRleHRfYSwgYmVzdF9zaG9ydHRleHRfYiwgYmVzdF9jb21tb25dO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvLyBGaXJzdCBjaGVjayBpZiB0aGUgc2Vjb25kIHF1YXJ0ZXIgaXMgdGhlIHNlZWQgZm9yIGEgaGFsZi1tYXRjaC5cbiAgdmFyIGhtMSA9IGRpZmZfaGFsZk1hdGNoSV8obG9uZ3RleHQsIHNob3J0dGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5jZWlsKGxvbmd0ZXh0Lmxlbmd0aCAvIDQpKTtcbiAgLy8gQ2hlY2sgYWdhaW4gYmFzZWQgb24gdGhlIHRoaXJkIHF1YXJ0ZXIuXG4gIHZhciBobTIgPSBkaWZmX2hhbGZNYXRjaElfKGxvbmd0ZXh0LCBzaG9ydHRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguY2VpbChsb25ndGV4dC5sZW5ndGggLyAyKSk7XG4gIHZhciBobTtcbiAgaWYgKCFobTEgJiYgIWhtMikge1xuICAgIHJldHVybiBudWxsO1xuICB9IGVsc2UgaWYgKCFobTIpIHtcbiAgICBobSA9IGhtMTtcbiAgfSBlbHNlIGlmICghaG0xKSB7XG4gICAgaG0gPSBobTI7XG4gIH0gZWxzZSB7XG4gICAgLy8gQm90aCBtYXRjaGVkLiAgU2VsZWN0IHRoZSBsb25nZXN0LlxuICAgIGhtID0gaG0xWzRdLmxlbmd0aCA+IGhtMls0XS5sZW5ndGggPyBobTEgOiBobTI7XG4gIH1cblxuICAvLyBBIGhhbGYtbWF0Y2ggd2FzIGZvdW5kLCBzb3J0IG91dCB0aGUgcmV0dXJuIGRhdGEuXG4gIHZhciB0ZXh0MV9hLCB0ZXh0MV9iLCB0ZXh0Ml9hLCB0ZXh0Ml9iO1xuICBpZiAodGV4dDEubGVuZ3RoID4gdGV4dDIubGVuZ3RoKSB7XG4gICAgdGV4dDFfYSA9IGhtWzBdO1xuICAgIHRleHQxX2IgPSBobVsxXTtcbiAgICB0ZXh0Ml9hID0gaG1bMl07XG4gICAgdGV4dDJfYiA9IGhtWzNdO1xuICB9IGVsc2Uge1xuICAgIHRleHQyX2EgPSBobVswXTtcbiAgICB0ZXh0Ml9iID0gaG1bMV07XG4gICAgdGV4dDFfYSA9IGhtWzJdO1xuICAgIHRleHQxX2IgPSBobVszXTtcbiAgfVxuICB2YXIgbWlkX2NvbW1vbiA9IGhtWzRdO1xuICByZXR1cm4gW3RleHQxX2EsIHRleHQxX2IsIHRleHQyX2EsIHRleHQyX2IsIG1pZF9jb21tb25dO1xufTtcblxuXG4vKipcbiAqIFJlb3JkZXIgYW5kIG1lcmdlIGxpa2UgZWRpdCBzZWN0aW9ucy4gIE1lcmdlIGVxdWFsaXRpZXMuXG4gKiBBbnkgZWRpdCBzZWN0aW9uIGNhbiBtb3ZlIGFzIGxvbmcgYXMgaXQgZG9lc24ndCBjcm9zcyBhbiBlcXVhbGl0eS5cbiAqIEBwYXJhbSB7QXJyYXl9IGRpZmZzIEFycmF5IG9mIGRpZmYgdHVwbGVzLlxuICovXG5mdW5jdGlvbiBkaWZmX2NsZWFudXBNZXJnZShkaWZmcykge1xuICBkaWZmcy5wdXNoKFtESUZGX0VRVUFMLCAnJ10pOyAgLy8gQWRkIGEgZHVtbXkgZW50cnkgYXQgdGhlIGVuZC5cbiAgdmFyIHBvaW50ZXIgPSAwO1xuICB2YXIgY291bnRfZGVsZXRlID0gMDtcbiAgdmFyIGNvdW50X2luc2VydCA9IDA7XG4gIHZhciB0ZXh0X2RlbGV0ZSA9ICcnO1xuICB2YXIgdGV4dF9pbnNlcnQgPSAnJztcbiAgdmFyIGNvbW1vbmxlbmd0aDtcbiAgd2hpbGUgKHBvaW50ZXIgPCBkaWZmcy5sZW5ndGgpIHtcbiAgICBzd2l0Y2ggKGRpZmZzW3BvaW50ZXJdWzBdKSB7XG4gICAgICBjYXNlIERJRkZfSU5TRVJUOlxuICAgICAgICBjb3VudF9pbnNlcnQrKztcbiAgICAgICAgdGV4dF9pbnNlcnQgKz0gZGlmZnNbcG9pbnRlcl1bMV07XG4gICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERJRkZfREVMRVRFOlxuICAgICAgICBjb3VudF9kZWxldGUrKztcbiAgICAgICAgdGV4dF9kZWxldGUgKz0gZGlmZnNbcG9pbnRlcl1bMV07XG4gICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERJRkZfRVFVQUw6XG4gICAgICAgIC8vIFVwb24gcmVhY2hpbmcgYW4gZXF1YWxpdHksIGNoZWNrIGZvciBwcmlvciByZWR1bmRhbmNpZXMuXG4gICAgICAgIGlmIChjb3VudF9kZWxldGUgKyBjb3VudF9pbnNlcnQgPiAxKSB7XG4gICAgICAgICAgaWYgKGNvdW50X2RlbGV0ZSAhPT0gMCAmJiBjb3VudF9pbnNlcnQgIT09IDApIHtcbiAgICAgICAgICAgIC8vIEZhY3RvciBvdXQgYW55IGNvbW1vbiBwcmVmaXhpZXMuXG4gICAgICAgICAgICBjb21tb25sZW5ndGggPSBkaWZmX2NvbW1vblByZWZpeCh0ZXh0X2luc2VydCwgdGV4dF9kZWxldGUpO1xuICAgICAgICAgICAgaWYgKGNvbW1vbmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICBpZiAoKHBvaW50ZXIgLSBjb3VudF9kZWxldGUgLSBjb3VudF9pbnNlcnQpID4gMCAmJlxuICAgICAgICAgICAgICAgICAgZGlmZnNbcG9pbnRlciAtIGNvdW50X2RlbGV0ZSAtIGNvdW50X2luc2VydCAtIDFdWzBdID09XG4gICAgICAgICAgICAgICAgICBESUZGX0VRVUFMKSB7XG4gICAgICAgICAgICAgICAgZGlmZnNbcG9pbnRlciAtIGNvdW50X2RlbGV0ZSAtIGNvdW50X2luc2VydCAtIDFdWzFdICs9XG4gICAgICAgICAgICAgICAgICAgIHRleHRfaW5zZXJ0LnN1YnN0cmluZygwLCBjb21tb25sZW5ndGgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRpZmZzLnNwbGljZSgwLCAwLCBbRElGRl9FUVVBTCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRfaW5zZXJ0LnN1YnN0cmluZygwLCBjb21tb25sZW5ndGgpXSk7XG4gICAgICAgICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRleHRfaW5zZXJ0ID0gdGV4dF9pbnNlcnQuc3Vic3RyaW5nKGNvbW1vbmxlbmd0aCk7XG4gICAgICAgICAgICAgIHRleHRfZGVsZXRlID0gdGV4dF9kZWxldGUuc3Vic3RyaW5nKGNvbW1vbmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGYWN0b3Igb3V0IGFueSBjb21tb24gc3VmZml4aWVzLlxuICAgICAgICAgICAgY29tbW9ubGVuZ3RoID0gZGlmZl9jb21tb25TdWZmaXgodGV4dF9pbnNlcnQsIHRleHRfZGVsZXRlKTtcbiAgICAgICAgICAgIGlmIChjb21tb25sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgZGlmZnNbcG9pbnRlcl1bMV0gPSB0ZXh0X2luc2VydC5zdWJzdHJpbmcodGV4dF9pbnNlcnQubGVuZ3RoIC1cbiAgICAgICAgICAgICAgICAgIGNvbW1vbmxlbmd0aCkgKyBkaWZmc1twb2ludGVyXVsxXTtcbiAgICAgICAgICAgICAgdGV4dF9pbnNlcnQgPSB0ZXh0X2luc2VydC5zdWJzdHJpbmcoMCwgdGV4dF9pbnNlcnQubGVuZ3RoIC1cbiAgICAgICAgICAgICAgICAgIGNvbW1vbmxlbmd0aCk7XG4gICAgICAgICAgICAgIHRleHRfZGVsZXRlID0gdGV4dF9kZWxldGUuc3Vic3RyaW5nKDAsIHRleHRfZGVsZXRlLmxlbmd0aCAtXG4gICAgICAgICAgICAgICAgICBjb21tb25sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBEZWxldGUgdGhlIG9mZmVuZGluZyByZWNvcmRzIGFuZCBhZGQgdGhlIG1lcmdlZCBvbmVzLlxuICAgICAgICAgIGlmIChjb3VudF9kZWxldGUgPT09IDApIHtcbiAgICAgICAgICAgIGRpZmZzLnNwbGljZShwb2ludGVyIC0gY291bnRfaW5zZXJ0LFxuICAgICAgICAgICAgICAgIGNvdW50X2RlbGV0ZSArIGNvdW50X2luc2VydCwgW0RJRkZfSU5TRVJULCB0ZXh0X2luc2VydF0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY291bnRfaW5zZXJ0ID09PSAwKSB7XG4gICAgICAgICAgICBkaWZmcy5zcGxpY2UocG9pbnRlciAtIGNvdW50X2RlbGV0ZSxcbiAgICAgICAgICAgICAgICBjb3VudF9kZWxldGUgKyBjb3VudF9pbnNlcnQsIFtESUZGX0RFTEVURSwgdGV4dF9kZWxldGVdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGlmZnMuc3BsaWNlKHBvaW50ZXIgLSBjb3VudF9kZWxldGUgLSBjb3VudF9pbnNlcnQsXG4gICAgICAgICAgICAgICAgY291bnRfZGVsZXRlICsgY291bnRfaW5zZXJ0LCBbRElGRl9ERUxFVEUsIHRleHRfZGVsZXRlXSxcbiAgICAgICAgICAgICAgICBbRElGRl9JTlNFUlQsIHRleHRfaW5zZXJ0XSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvaW50ZXIgPSBwb2ludGVyIC0gY291bnRfZGVsZXRlIC0gY291bnRfaW5zZXJ0ICtcbiAgICAgICAgICAgICAgICAgICAgKGNvdW50X2RlbGV0ZSA/IDEgOiAwKSArIChjb3VudF9pbnNlcnQgPyAxIDogMCkgKyAxO1xuICAgICAgICB9IGVsc2UgaWYgKHBvaW50ZXIgIT09IDAgJiYgZGlmZnNbcG9pbnRlciAtIDFdWzBdID09IERJRkZfRVFVQUwpIHtcbiAgICAgICAgICAvLyBNZXJnZSB0aGlzIGVxdWFsaXR5IHdpdGggdGhlIHByZXZpb3VzIG9uZS5cbiAgICAgICAgICBkaWZmc1twb2ludGVyIC0gMV1bMV0gKz0gZGlmZnNbcG9pbnRlcl1bMV07XG4gICAgICAgICAgZGlmZnMuc3BsaWNlKHBvaW50ZXIsIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgfVxuICAgICAgICBjb3VudF9pbnNlcnQgPSAwO1xuICAgICAgICBjb3VudF9kZWxldGUgPSAwO1xuICAgICAgICB0ZXh0X2RlbGV0ZSA9ICcnO1xuICAgICAgICB0ZXh0X2luc2VydCA9ICcnO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGRpZmZzW2RpZmZzLmxlbmd0aCAtIDFdWzFdID09PSAnJykge1xuICAgIGRpZmZzLnBvcCgpOyAgLy8gUmVtb3ZlIHRoZSBkdW1teSBlbnRyeSBhdCB0aGUgZW5kLlxuICB9XG5cbiAgLy8gU2Vjb25kIHBhc3M6IGxvb2sgZm9yIHNpbmdsZSBlZGl0cyBzdXJyb3VuZGVkIG9uIGJvdGggc2lkZXMgYnkgZXF1YWxpdGllc1xuICAvLyB3aGljaCBjYW4gYmUgc2hpZnRlZCBzaWRld2F5cyB0byBlbGltaW5hdGUgYW4gZXF1YWxpdHkuXG4gIC8vIGUuZzogQTxpbnM+QkE8L2lucz5DIC0+IDxpbnM+QUI8L2lucz5BQ1xuICB2YXIgY2hhbmdlcyA9IGZhbHNlO1xuICBwb2ludGVyID0gMTtcbiAgLy8gSW50ZW50aW9uYWxseSBpZ25vcmUgdGhlIGZpcnN0IGFuZCBsYXN0IGVsZW1lbnQgKGRvbid0IG5lZWQgY2hlY2tpbmcpLlxuICB3aGlsZSAocG9pbnRlciA8IGRpZmZzLmxlbmd0aCAtIDEpIHtcbiAgICBpZiAoZGlmZnNbcG9pbnRlciAtIDFdWzBdID09IERJRkZfRVFVQUwgJiZcbiAgICAgICAgZGlmZnNbcG9pbnRlciArIDFdWzBdID09IERJRkZfRVFVQUwpIHtcbiAgICAgIC8vIFRoaXMgaXMgYSBzaW5nbGUgZWRpdCBzdXJyb3VuZGVkIGJ5IGVxdWFsaXRpZXMuXG4gICAgICBpZiAoZGlmZnNbcG9pbnRlcl1bMV0uc3Vic3RyaW5nKGRpZmZzW3BvaW50ZXJdWzFdLmxlbmd0aCAtXG4gICAgICAgICAgZGlmZnNbcG9pbnRlciAtIDFdWzFdLmxlbmd0aCkgPT0gZGlmZnNbcG9pbnRlciAtIDFdWzFdKSB7XG4gICAgICAgIC8vIFNoaWZ0IHRoZSBlZGl0IG92ZXIgdGhlIHByZXZpb3VzIGVxdWFsaXR5LlxuICAgICAgICBkaWZmc1twb2ludGVyXVsxXSA9IGRpZmZzW3BvaW50ZXIgLSAxXVsxXSArXG4gICAgICAgICAgICBkaWZmc1twb2ludGVyXVsxXS5zdWJzdHJpbmcoMCwgZGlmZnNbcG9pbnRlcl1bMV0ubGVuZ3RoIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWZmc1twb2ludGVyIC0gMV1bMV0ubGVuZ3RoKTtcbiAgICAgICAgZGlmZnNbcG9pbnRlciArIDFdWzFdID0gZGlmZnNbcG9pbnRlciAtIDFdWzFdICsgZGlmZnNbcG9pbnRlciArIDFdWzFdO1xuICAgICAgICBkaWZmcy5zcGxpY2UocG9pbnRlciAtIDEsIDEpO1xuICAgICAgICBjaGFuZ2VzID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoZGlmZnNbcG9pbnRlcl1bMV0uc3Vic3RyaW5nKDAsIGRpZmZzW3BvaW50ZXIgKyAxXVsxXS5sZW5ndGgpID09XG4gICAgICAgICAgZGlmZnNbcG9pbnRlciArIDFdWzFdKSB7XG4gICAgICAgIC8vIFNoaWZ0IHRoZSBlZGl0IG92ZXIgdGhlIG5leHQgZXF1YWxpdHkuXG4gICAgICAgIGRpZmZzW3BvaW50ZXIgLSAxXVsxXSArPSBkaWZmc1twb2ludGVyICsgMV1bMV07XG4gICAgICAgIGRpZmZzW3BvaW50ZXJdWzFdID1cbiAgICAgICAgICAgIGRpZmZzW3BvaW50ZXJdWzFdLnN1YnN0cmluZyhkaWZmc1twb2ludGVyICsgMV1bMV0ubGVuZ3RoKSArXG4gICAgICAgICAgICBkaWZmc1twb2ludGVyICsgMV1bMV07XG4gICAgICAgIGRpZmZzLnNwbGljZShwb2ludGVyICsgMSwgMSk7XG4gICAgICAgIGNoYW5nZXMgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBwb2ludGVyKys7XG4gIH1cbiAgLy8gSWYgc2hpZnRzIHdlcmUgbWFkZSwgdGhlIGRpZmYgbmVlZHMgcmVvcmRlcmluZyBhbmQgYW5vdGhlciBzaGlmdCBzd2VlcC5cbiAgaWYgKGNoYW5nZXMpIHtcbiAgICBkaWZmX2NsZWFudXBNZXJnZShkaWZmcyk7XG4gIH1cbn07XG5cblxudmFyIGRpZmYgPSBkaWZmX21haW47XG5kaWZmLklOU0VSVCA9IERJRkZfSU5TRVJUO1xuZGlmZi5ERUxFVEUgPSBESUZGX0RFTEVURTtcbmRpZmYuRVFVQUwgPSBESUZGX0VRVUFMO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRpZmY7XG5cbi8qXG4gKiBNb2RpZnkgYSBkaWZmIHN1Y2ggdGhhdCB0aGUgY3Vyc29yIHBvc2l0aW9uIHBvaW50cyB0byB0aGUgc3RhcnQgb2YgYSBjaGFuZ2U6XG4gKiBFLmcuXG4gKiAgIGN1cnNvcl9ub3JtYWxpemVfZGlmZihbW0RJRkZfRVFVQUwsICdhYmMnXV0sIDEpXG4gKiAgICAgPT4gWzEsIFtbRElGRl9FUVVBTCwgJ2EnXSwgW0RJRkZfRVFVQUwsICdiYyddXV1cbiAqICAgY3Vyc29yX25vcm1hbGl6ZV9kaWZmKFtbRElGRl9JTlNFUlQsICduZXcnXSwgW0RJRkZfREVMRVRFLCAneHl6J11dLCAyKVxuICogICAgID0+IFsyLCBbW0RJRkZfSU5TRVJULCAnbmV3J10sIFtESUZGX0RFTEVURSwgJ3h5J10sIFtESUZGX0RFTEVURSwgJ3onXV1dXG4gKlxuICogQHBhcmFtIHtBcnJheX0gZGlmZnMgQXJyYXkgb2YgZGlmZiB0dXBsZXNcbiAqIEBwYXJhbSB7SW50fSBjdXJzb3JfcG9zIFN1Z2dlc3RlZCBlZGl0IHBvc2l0aW9uLiBNdXN0IG5vdCBiZSBvdXQgb2YgYm91bmRzIVxuICogQHJldHVybiB7QXJyYXl9IEEgdHVwbGUgW2N1cnNvciBsb2NhdGlvbiBpbiB0aGUgbW9kaWZpZWQgZGlmZiwgbW9kaWZpZWQgZGlmZl1cbiAqL1xuZnVuY3Rpb24gY3Vyc29yX25vcm1hbGl6ZV9kaWZmIChkaWZmcywgY3Vyc29yX3Bvcykge1xuICBpZiAoY3Vyc29yX3BvcyA9PT0gMCkge1xuICAgIHJldHVybiBbRElGRl9FUVVBTCwgZGlmZnNdO1xuICB9XG4gIGZvciAodmFyIGN1cnJlbnRfcG9zID0gMCwgaSA9IDA7IGkgPCBkaWZmcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkID0gZGlmZnNbaV07XG4gICAgaWYgKGRbMF0gPT09IERJRkZfREVMRVRFIHx8IGRbMF0gPT09IERJRkZfRVFVQUwpIHtcbiAgICAgIHZhciBuZXh0X3BvcyA9IGN1cnJlbnRfcG9zICsgZFsxXS5sZW5ndGg7XG4gICAgICBpZiAoY3Vyc29yX3BvcyA9PT0gbmV4dF9wb3MpIHtcbiAgICAgICAgcmV0dXJuIFtpICsgMSwgZGlmZnNdO1xuICAgICAgfSBlbHNlIGlmIChjdXJzb3JfcG9zIDwgbmV4dF9wb3MpIHtcbiAgICAgICAgLy8gY29weSB0byBwcmV2ZW50IHNpZGUgZWZmZWN0c1xuICAgICAgICBkaWZmcyA9IGRpZmZzLnNsaWNlKCk7XG4gICAgICAgIC8vIHNwbGl0IGQgaW50byB0d28gZGlmZiBjaGFuZ2VzXG4gICAgICAgIHZhciBzcGxpdF9wb3MgPSBjdXJzb3JfcG9zIC0gY3VycmVudF9wb3M7XG4gICAgICAgIHZhciBkX2xlZnQgPSBbZFswXSwgZFsxXS5zbGljZSgwLCBzcGxpdF9wb3MpXTtcbiAgICAgICAgdmFyIGRfcmlnaHQgPSBbZFswXSwgZFsxXS5zbGljZShzcGxpdF9wb3MpXTtcbiAgICAgICAgZGlmZnMuc3BsaWNlKGksIDEsIGRfbGVmdCwgZF9yaWdodCk7XG4gICAgICAgIHJldHVybiBbaSArIDEsIGRpZmZzXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnRfcG9zID0gbmV4dF9wb3M7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHRocm93IG5ldyBFcnJvcignY3Vyc29yX3BvcyBpcyBvdXQgb2YgYm91bmRzIScpXG59XG5cbi8qXG4gKiBNb2RpZnkgYSBkaWZmIHN1Y2ggdGhhdCB0aGUgZWRpdCBwb3NpdGlvbiBpcyBcInNoaWZ0ZWRcIiB0byB0aGUgcHJvcG9zZWQgZWRpdCBsb2NhdGlvbiAoY3Vyc29yX3Bvc2l0aW9uKS5cbiAqXG4gKiBDYXNlIDEpXG4gKiAgIENoZWNrIGlmIGEgbmFpdmUgc2hpZnQgaXMgcG9zc2libGU6XG4gKiAgICAgWzAsIFhdLCBbIDEsIFldIC0+IFsgMSwgWV0sIFswLCBYXSAgICAoaWYgWCArIFkgPT09IFkgKyBYKVxuICogICAgIFswLCBYXSwgWy0xLCBZXSAtPiBbLTEsIFldLCBbMCwgWF0gICAgKGlmIFggKyBZID09PSBZICsgWCkgLSBob2xkcyBzYW1lIHJlc3VsdFxuICogQ2FzZSAyKVxuICogICBDaGVjayBpZiB0aGUgZm9sbG93aW5nIHNoaWZ0cyBhcmUgcG9zc2libGU6XG4gKiAgICAgWzAsICdwcmUnXSwgWyAxLCAncHJlZml4J10gLT4gWyAxLCAncHJlJ10sIFswLCAncHJlJ10sIFsgMSwgJ2ZpeCddXG4gKiAgICAgWzAsICdwcmUnXSwgWy0xLCAncHJlZml4J10gLT4gWy0xLCAncHJlJ10sIFswLCAncHJlJ10sIFstMSwgJ2ZpeCddXG4gKiAgICAgICAgIF4gICAgICAgICAgICBeXG4gKiAgICAgICAgIGQgICAgICAgICAgZF9uZXh0XG4gKlxuICogQHBhcmFtIHtBcnJheX0gZGlmZnMgQXJyYXkgb2YgZGlmZiB0dXBsZXNcbiAqIEBwYXJhbSB7SW50fSBjdXJzb3JfcG9zIFN1Z2dlc3RlZCBlZGl0IHBvc2l0aW9uLiBNdXN0IG5vdCBiZSBvdXQgb2YgYm91bmRzIVxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIGRpZmYgdHVwbGVzXG4gKi9cbmZ1bmN0aW9uIGZpeF9jdXJzb3IgKGRpZmZzLCBjdXJzb3JfcG9zKSB7XG4gIHZhciBub3JtID0gY3Vyc29yX25vcm1hbGl6ZV9kaWZmKGRpZmZzLCBjdXJzb3JfcG9zKTtcbiAgdmFyIG5kaWZmcyA9IG5vcm1bMV07XG4gIHZhciBjdXJzb3JfcG9pbnRlciA9IG5vcm1bMF07XG4gIHZhciBkID0gbmRpZmZzW2N1cnNvcl9wb2ludGVyXTtcbiAgdmFyIGRfbmV4dCA9IG5kaWZmc1tjdXJzb3JfcG9pbnRlciArIDFdO1xuXG4gIGlmIChkID09IG51bGwpIHtcbiAgICAvLyBUZXh0IHdhcyBkZWxldGVkIGZyb20gZW5kIG9mIG9yaWdpbmFsIHN0cmluZyxcbiAgICAvLyBjdXJzb3IgaXMgbm93IG91dCBvZiBib3VuZHMgaW4gbmV3IHN0cmluZ1xuICAgIHJldHVybiBkaWZmcztcbiAgfSBlbHNlIGlmIChkWzBdICE9PSBESUZGX0VRVUFMKSB7XG4gICAgLy8gQSBtb2RpZmljYXRpb24gaGFwcGVuZWQgYXQgdGhlIGN1cnNvciBsb2NhdGlvbi5cbiAgICAvLyBUaGlzIGlzIHRoZSBleHBlY3RlZCBvdXRjb21lLCBzbyB3ZSBjYW4gcmV0dXJuIHRoZSBvcmlnaW5hbCBkaWZmLlxuICAgIHJldHVybiBkaWZmcztcbiAgfSBlbHNlIHtcbiAgICBpZiAoZF9uZXh0ICE9IG51bGwgJiYgZFsxXSArIGRfbmV4dFsxXSA9PT0gZF9uZXh0WzFdICsgZFsxXSkge1xuICAgICAgLy8gQ2FzZSAxKVxuICAgICAgLy8gSXQgaXMgcG9zc2libGUgdG8gcGVyZm9ybSBhIG5haXZlIHNoaWZ0XG4gICAgICBuZGlmZnMuc3BsaWNlKGN1cnNvcl9wb2ludGVyLCAyLCBkX25leHQsIGQpXG4gICAgICByZXR1cm4gbWVyZ2VfdHVwbGVzKG5kaWZmcywgY3Vyc29yX3BvaW50ZXIsIDIpXG4gICAgfSBlbHNlIGlmIChkX25leHQgIT0gbnVsbCAmJiBkX25leHRbMV0uaW5kZXhPZihkWzFdKSA9PT0gMCkge1xuICAgICAgLy8gQ2FzZSAyKVxuICAgICAgLy8gZFsxXSBpcyBhIHByZWZpeCBvZiBkX25leHRbMV1cbiAgICAgIC8vIFdlIGNhbiBhc3N1bWUgdGhhdCBkX25leHRbMF0gIT09IDAsIHNpbmNlIGRbMF0gPT09IDBcbiAgICAgIC8vIFNoaWZ0IGVkaXQgbG9jYXRpb25zLi5cbiAgICAgIG5kaWZmcy5zcGxpY2UoY3Vyc29yX3BvaW50ZXIsIDIsIFtkX25leHRbMF0sIGRbMV1dLCBbMCwgZFsxXV0pO1xuICAgICAgdmFyIHN1ZmZpeCA9IGRfbmV4dFsxXS5zbGljZShkWzFdLmxlbmd0aCk7XG4gICAgICBpZiAoc3VmZml4Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgbmRpZmZzLnNwbGljZShjdXJzb3JfcG9pbnRlciArIDIsIDAsIFtkX25leHRbMF0sIHN1ZmZpeF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lcmdlX3R1cGxlcyhuZGlmZnMsIGN1cnNvcl9wb2ludGVyLCAzKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOb3QgcG9zc2libGUgdG8gcGVyZm9ybSBhbnkgbW9kaWZpY2F0aW9uXG4gICAgICByZXR1cm4gZGlmZnM7XG4gICAgfVxuICB9XG59XG5cbi8qXG4gKiBDaGVjayBkaWZmIGRpZCBub3Qgc3BsaXQgc3Vycm9nYXRlIHBhaXJzLlxuICogRXguIFswLCAnXFx1RDgzRCddLCBbLTEsICdcXHVEQzM2J10sIFsxLCAnXFx1REMyRiddIC0+IFstMSwgJ1xcdUQ4M0RcXHVEQzM2J10sIFsxLCAnXFx1RDgzRFxcdURDMkYnXVxuICogICAgICdcXHVEODNEXFx1REMzNicgPT09ICfwn5C2JywgJ1xcdUQ4M0RcXHVEQzJGJyA9PT0gJ/CfkK8nXG4gKlxuICogQHBhcmFtIHtBcnJheX0gZGlmZnMgQXJyYXkgb2YgZGlmZiB0dXBsZXNcbiAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBkaWZmIHR1cGxlc1xuICovXG5mdW5jdGlvbiBmaXhfZW1vamkgKGRpZmZzKSB7XG4gIHZhciBjb21wYWN0ID0gZmFsc2U7XG4gIHZhciBzdGFydHNfd2l0aF9wYWlyX2VuZCA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBzdHIuY2hhckNvZGVBdCgwKSA+PSAweERDMDAgJiYgc3RyLmNoYXJDb2RlQXQoMCkgPD0gMHhERkZGO1xuICB9XG4gIHZhciBlbmRzX3dpdGhfcGFpcl9zdGFydCA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBzdHIuY2hhckNvZGVBdChzdHIubGVuZ3RoLTEpID49IDB4RDgwMCAmJiBzdHIuY2hhckNvZGVBdChzdHIubGVuZ3RoLTEpIDw9IDB4REJGRjtcbiAgfVxuICBmb3IgKHZhciBpID0gMjsgaSA8IGRpZmZzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGRpZmZzW2ktMl1bMF0gPT09IERJRkZfRVFVQUwgJiYgZW5kc193aXRoX3BhaXJfc3RhcnQoZGlmZnNbaS0yXVsxXSkgJiZcbiAgICAgICAgZGlmZnNbaS0xXVswXSA9PT0gRElGRl9ERUxFVEUgJiYgc3RhcnRzX3dpdGhfcGFpcl9lbmQoZGlmZnNbaS0xXVsxXSkgJiZcbiAgICAgICAgZGlmZnNbaV1bMF0gPT09IERJRkZfSU5TRVJUICYmIHN0YXJ0c193aXRoX3BhaXJfZW5kKGRpZmZzW2ldWzFdKSkge1xuICAgICAgY29tcGFjdCA9IHRydWU7XG5cbiAgICAgIGRpZmZzW2ktMV1bMV0gPSBkaWZmc1tpLTJdWzFdLnNsaWNlKC0xKSArIGRpZmZzW2ktMV1bMV07XG4gICAgICBkaWZmc1tpXVsxXSA9IGRpZmZzW2ktMl1bMV0uc2xpY2UoLTEpICsgZGlmZnNbaV1bMV07XG5cbiAgICAgIGRpZmZzW2ktMl1bMV0gPSBkaWZmc1tpLTJdWzFdLnNsaWNlKDAsIC0xKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFjb21wYWN0KSB7XG4gICAgcmV0dXJuIGRpZmZzO1xuICB9XG4gIHZhciBmaXhlZF9kaWZmcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGRpZmZzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGRpZmZzW2ldWzFdLmxlbmd0aCA+IDApIHtcbiAgICAgIGZpeGVkX2RpZmZzLnB1c2goZGlmZnNbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZml4ZWRfZGlmZnM7XG59XG5cbi8qXG4gKiBUcnkgdG8gbWVyZ2UgdHVwbGVzIHdpdGggdGhlaXIgbmVpZ2JvcnMgaW4gYSBnaXZlbiByYW5nZS5cbiAqIEUuZy4gWzAsICdhJ10sIFswLCAnYiddIC0+IFswLCAnYWInXVxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGRpZmZzIEFycmF5IG9mIGRpZmYgdHVwbGVzLlxuICogQHBhcmFtIHtJbnR9IHN0YXJ0IFBvc2l0aW9uIG9mIHRoZSBmaXJzdCBlbGVtZW50IHRvIG1lcmdlIChkaWZmc1tzdGFydF0gaXMgYWxzbyBtZXJnZWQgd2l0aCBkaWZmc1tzdGFydCAtIDFdKS5cbiAqIEBwYXJhbSB7SW50fSBsZW5ndGggTnVtYmVyIG9mIGNvbnNlY3V0aXZlIGVsZW1lbnRzIHRvIGNoZWNrLlxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIG1lcmdlZCBkaWZmIHR1cGxlcy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VfdHVwbGVzIChkaWZmcywgc3RhcnQsIGxlbmd0aCkge1xuICAvLyBDaGVjayBmcm9tIChzdGFydC0xKSB0byAoc3RhcnQrbGVuZ3RoKS5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0ICsgbGVuZ3RoIC0gMTsgaSA+PSAwICYmIGkgPj0gc3RhcnQgLSAxOyBpLS0pIHtcbiAgICBpZiAoaSArIDEgPCBkaWZmcy5sZW5ndGgpIHtcbiAgICAgIHZhciBsZWZ0X2QgPSBkaWZmc1tpXTtcbiAgICAgIHZhciByaWdodF9kID0gZGlmZnNbaSsxXTtcbiAgICAgIGlmIChsZWZ0X2RbMF0gPT09IHJpZ2h0X2RbMV0pIHtcbiAgICAgICAgZGlmZnMuc3BsaWNlKGksIDIsIFtsZWZ0X2RbMF0sIGxlZnRfZFsxXSArIHJpZ2h0X2RbMV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRpZmZzO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgbm8taW52YWxpZC10aGlzOiAxICovXG5cbnZhciBFUlJPUl9NRVNTQUdFID0gJ0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgJztcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgZnVuY1R5cGUgPSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXG52YXIgY29uY2F0dHkgPSBmdW5jdGlvbiBjb25jYXR0eShhLCBiKSB7XG4gICAgdmFyIGFyciA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGFycltpXSA9IGFbaV07XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgYi5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBhcnJbaiArIGEubGVuZ3RoXSA9IGJbal07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycjtcbn07XG5cbnZhciBzbGljeSA9IGZ1bmN0aW9uIHNsaWN5KGFyckxpa2UsIG9mZnNldCkge1xuICAgIHZhciBhcnIgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gb2Zmc2V0IHx8IDAsIGogPSAwOyBpIDwgYXJyTGlrZS5sZW5ndGg7IGkgKz0gMSwgaiArPSAxKSB7XG4gICAgICAgIGFycltqXSA9IGFyckxpa2VbaV07XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG59O1xuXG52YXIgam9pbnkgPSBmdW5jdGlvbiAoYXJyLCBqb2luZXIpIHtcbiAgICB2YXIgc3RyID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc3RyICs9IGFycltpXTtcbiAgICAgICAgaWYgKGkgKyAxIDwgYXJyLmxlbmd0aCkge1xuICAgICAgICAgICAgc3RyICs9IGpvaW5lcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKHRoYXQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gJ2Z1bmN0aW9uJyB8fCB0b1N0ci5hcHBseSh0YXJnZXQpICE9PSBmdW5jVHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEVSUk9SX01FU1NBR0UgKyB0YXJnZXQpO1xuICAgIH1cbiAgICB2YXIgYXJncyA9IHNsaWN5KGFyZ3VtZW50cywgMSk7XG5cbiAgICB2YXIgYm91bmQ7XG4gICAgdmFyIGJpbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgIGNvbmNhdHR5KGFyZ3MsIGFyZ3VtZW50cylcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0KHJlc3VsdCkgPT09IHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgdGhhdCxcbiAgICAgICAgICAgIGNvbmNhdHR5KGFyZ3MsIGFyZ3VtZW50cylcbiAgICAgICAgKTtcblxuICAgIH07XG5cbiAgICB2YXIgYm91bmRMZW5ndGggPSBtYXgoMCwgdGFyZ2V0Lmxlbmd0aCAtIGFyZ3MubGVuZ3RoKTtcbiAgICB2YXIgYm91bmRBcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib3VuZExlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJvdW5kQXJnc1tpXSA9ICckJyArIGk7XG4gICAgfVxuXG4gICAgYm91bmQgPSBGdW5jdGlvbignYmluZGVyJywgJ3JldHVybiBmdW5jdGlvbiAoJyArIGpvaW55KGJvdW5kQXJncywgJywnKSArICcpeyByZXR1cm4gYmluZGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKTsgfScpKGJpbmRlcik7XG5cbiAgICBpZiAodGFyZ2V0LnByb3RvdHlwZSkge1xuICAgICAgICB2YXIgRW1wdHkgPSBmdW5jdGlvbiBFbXB0eSgpIHt9O1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSB0YXJnZXQucHJvdG90eXBlO1xuICAgICAgICBib3VuZC5wcm90b3R5cGUgPSBuZXcgRW1wdHkoKTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gYm91bmQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgfHwgaW1wbGVtZW50YXRpb247XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBmdW5jdGlvbnNIYXZlTmFtZXMgPSBmdW5jdGlvbiBmdW5jdGlvbnNIYXZlTmFtZXMoKSB7XG5cdHJldHVybiB0eXBlb2YgZnVuY3Rpb24gZigpIHt9Lm5hbWUgPT09ICdzdHJpbmcnO1xufTtcblxudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuaWYgKGdPUEQpIHtcblx0dHJ5IHtcblx0XHRnT1BEKFtdLCAnbGVuZ3RoJyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBnT1BEXG5cdFx0Z09QRCA9IG51bGw7XG5cdH1cbn1cblxuZnVuY3Rpb25zSGF2ZU5hbWVzLmZ1bmN0aW9uc0hhdmVDb25maWd1cmFibGVOYW1lcyA9IGZ1bmN0aW9uIGZ1bmN0aW9uc0hhdmVDb25maWd1cmFibGVOYW1lcygpIHtcblx0aWYgKCFmdW5jdGlvbnNIYXZlTmFtZXMoKSB8fCAhZ09QRCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHR2YXIgZGVzYyA9IGdPUEQoZnVuY3Rpb24gKCkge30sICduYW1lJyk7XG5cdHJldHVybiAhIWRlc2MgJiYgISFkZXNjLmNvbmZpZ3VyYWJsZTtcbn07XG5cbnZhciAkYmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kO1xuXG5mdW5jdGlvbnNIYXZlTmFtZXMuYm91bmRGdW5jdGlvbnNIYXZlTmFtZXMgPSBmdW5jdGlvbiBib3VuZEZ1bmN0aW9uc0hhdmVOYW1lcygpIHtcblx0cmV0dXJuIGZ1bmN0aW9uc0hhdmVOYW1lcygpICYmIHR5cGVvZiAkYmluZCA9PT0gJ2Z1bmN0aW9uJyAmJiBmdW5jdGlvbiBmKCkge30uYmluZCgpLm5hbWUgIT09ICcnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbnNIYXZlTmFtZXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1bmRlZmluZWQ7XG5cbnZhciAkU3ludGF4RXJyb3IgPSBTeW50YXhFcnJvcjtcbnZhciAkRnVuY3Rpb24gPSBGdW5jdGlvbjtcbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbnZhciBnZXRFdmFsbGVkQ29uc3RydWN0b3IgPSBmdW5jdGlvbiAoZXhwcmVzc2lvblN5bnRheCkge1xuXHR0cnkge1xuXHRcdHJldHVybiAkRnVuY3Rpb24oJ1widXNlIHN0cmljdFwiOyByZXR1cm4gKCcgKyBleHByZXNzaW9uU3ludGF4ICsgJykuY29uc3RydWN0b3I7JykoKTtcblx0fSBjYXRjaCAoZSkge31cbn07XG5cbnZhciAkZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5pZiAoJGdPUEQpIHtcblx0dHJ5IHtcblx0XHQkZ09QRCh7fSwgJycpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0JGdPUEQgPSBudWxsOyAvLyB0aGlzIGlzIElFIDgsIHdoaWNoIGhhcyBhIGJyb2tlbiBnT1BEXG5cdH1cbn1cblxudmFyIHRocm93VHlwZUVycm9yID0gZnVuY3Rpb24gKCkge1xuXHR0aHJvdyBuZXcgJFR5cGVFcnJvcigpO1xufTtcbnZhciBUaHJvd1R5cGVFcnJvciA9ICRnT1BEXG5cdD8gKGZ1bmN0aW9uICgpIHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9ucywgbm8tY2FsbGVyLCBuby1yZXN0cmljdGVkLXByb3BlcnRpZXNcblx0XHRcdGFyZ3VtZW50cy5jYWxsZWU7IC8vIElFIDggZG9lcyBub3QgdGhyb3cgaGVyZVxuXHRcdFx0cmV0dXJuIHRocm93VHlwZUVycm9yO1xuXHRcdH0gY2F0Y2ggKGNhbGxlZVRocm93cykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gSUUgOCB0aHJvd3Mgb24gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhcmd1bWVudHMsICcnKVxuXHRcdFx0XHRyZXR1cm4gJGdPUEQoYXJndW1lbnRzLCAnY2FsbGVlJykuZ2V0O1xuXHRcdFx0fSBjYXRjaCAoZ09QRHRocm93cykge1xuXHRcdFx0XHRyZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KCkpXG5cdDogdGhyb3dUeXBlRXJyb3I7XG5cbnZhciBoYXNTeW1ib2xzID0gcmVxdWlyZSgnaGFzLXN5bWJvbHMnKSgpO1xudmFyIGhhc1Byb3RvID0gcmVxdWlyZSgnaGFzLXByb3RvJykoKTtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IChcblx0aGFzUHJvdG9cblx0XHQ/IGZ1bmN0aW9uICh4KSB7IHJldHVybiB4Ll9fcHJvdG9fXzsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvXG5cdFx0OiBudWxsXG4pO1xuXG52YXIgbmVlZHNFdmFsID0ge307XG5cbnZhciBUeXBlZEFycmF5ID0gdHlwZW9mIFVpbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnIHx8ICFnZXRQcm90byA/IHVuZGVmaW5lZCA6IGdldFByb3RvKFVpbnQ4QXJyYXkpO1xuXG52YXIgSU5UUklOU0lDUyA9IHtcblx0JyVBZ2dyZWdhdGVFcnJvciUnOiB0eXBlb2YgQWdncmVnYXRlRXJyb3IgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQWdncmVnYXRlRXJyb3IsXG5cdCclQXJyYXklJzogQXJyYXksXG5cdCclQXJyYXlCdWZmZXIlJzogdHlwZW9mIEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEFycmF5QnVmZmVyLFxuXHQnJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyAmJiBnZXRQcm90byA/IGdldFByb3RvKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSkgOiB1bmRlZmluZWQsXG5cdCclQXN5bmNGcm9tU3luY0l0ZXJhdG9yUHJvdG90eXBlJSc6IHVuZGVmaW5lZCxcblx0JyVBc3luY0Z1bmN0aW9uJSc6IG5lZWRzRXZhbCxcblx0JyVBc3luY0dlbmVyYXRvciUnOiBuZWVkc0V2YWwsXG5cdCclQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiUnOiBuZWVkc0V2YWwsXG5cdCclQXN5bmNJdGVyYXRvclByb3RvdHlwZSUnOiBuZWVkc0V2YWwsXG5cdCclQXRvbWljcyUnOiB0eXBlb2YgQXRvbWljcyA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBdG9taWNzLFxuXHQnJUJpZ0ludCUnOiB0eXBlb2YgQmlnSW50ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEJpZ0ludCxcblx0JyVCaWdJbnQ2NEFycmF5JSc6IHR5cGVvZiBCaWdJbnQ2NEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEJpZ0ludDY0QXJyYXksXG5cdCclQmlnVWludDY0QXJyYXklJzogdHlwZW9mIEJpZ1VpbnQ2NEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEJpZ1VpbnQ2NEFycmF5LFxuXHQnJUJvb2xlYW4lJzogQm9vbGVhbixcblx0JyVEYXRhVmlldyUnOiB0eXBlb2YgRGF0YVZpZXcgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRGF0YVZpZXcsXG5cdCclRGF0ZSUnOiBEYXRlLFxuXHQnJWRlY29kZVVSSSUnOiBkZWNvZGVVUkksXG5cdCclZGVjb2RlVVJJQ29tcG9uZW50JSc6IGRlY29kZVVSSUNvbXBvbmVudCxcblx0JyVlbmNvZGVVUkklJzogZW5jb2RlVVJJLFxuXHQnJWVuY29kZVVSSUNvbXBvbmVudCUnOiBlbmNvZGVVUklDb21wb25lbnQsXG5cdCclRXJyb3IlJzogRXJyb3IsXG5cdCclZXZhbCUnOiBldmFsLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV2YWxcblx0JyVFdmFsRXJyb3IlJzogRXZhbEVycm9yLFxuXHQnJUZsb2F0MzJBcnJheSUnOiB0eXBlb2YgRmxvYXQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0MzJBcnJheSxcblx0JyVGbG9hdDY0QXJyYXklJzogdHlwZW9mIEZsb2F0NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDY0QXJyYXksXG5cdCclRmluYWxpemF0aW9uUmVnaXN0cnklJzogdHlwZW9mIEZpbmFsaXphdGlvblJlZ2lzdHJ5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZpbmFsaXphdGlvblJlZ2lzdHJ5LFxuXHQnJUZ1bmN0aW9uJSc6ICRGdW5jdGlvbixcblx0JyVHZW5lcmF0b3JGdW5jdGlvbiUnOiBuZWVkc0V2YWwsXG5cdCclSW50OEFycmF5JSc6IHR5cGVvZiBJbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50OEFycmF5LFxuXHQnJUludDE2QXJyYXklJzogdHlwZW9mIEludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MTZBcnJheSxcblx0JyVJbnQzMkFycmF5JSc6IHR5cGVvZiBJbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDMyQXJyYXksXG5cdCclaXNGaW5pdGUlJzogaXNGaW5pdGUsXG5cdCclaXNOYU4lJzogaXNOYU4sXG5cdCclSXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyAmJiBnZXRQcm90byA/IGdldFByb3RvKGdldFByb3RvKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSkpIDogdW5kZWZpbmVkLFxuXHQnJUpTT04lJzogdHlwZW9mIEpTT04gPT09ICdvYmplY3QnID8gSlNPTiA6IHVuZGVmaW5lZCxcblx0JyVNYXAlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBNYXAsXG5cdCclTWFwSXRlcmF0b3JQcm90b3R5cGUlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc1N5bWJvbHMgfHwgIWdldFByb3RvID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IE1hcCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCclTWF0aCUnOiBNYXRoLFxuXHQnJU51bWJlciUnOiBOdW1iZXIsXG5cdCclT2JqZWN0JSc6IE9iamVjdCxcblx0JyVwYXJzZUZsb2F0JSc6IHBhcnNlRmxvYXQsXG5cdCclcGFyc2VJbnQlJzogcGFyc2VJbnQsXG5cdCclUHJvbWlzZSUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLFxuXHQnJVByb3h5JSc6IHR5cGVvZiBQcm94eSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm94eSxcblx0JyVSYW5nZUVycm9yJSc6IFJhbmdlRXJyb3IsXG5cdCclUmVmZXJlbmNlRXJyb3IlJzogUmVmZXJlbmNlRXJyb3IsXG5cdCclUmVmbGVjdCUnOiB0eXBlb2YgUmVmbGVjdCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBSZWZsZWN0LFxuXHQnJVJlZ0V4cCUnOiBSZWdFeHAsXG5cdCclU2V0JSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2V0LFxuXHQnJVNldEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzIHx8ICFnZXRQcm90byA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBTZXQoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJVNoYXJlZEFycmF5QnVmZmVyJSc6IHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTaGFyZWRBcnJheUJ1ZmZlcixcblx0JyVTdHJpbmclJzogU3RyaW5nLFxuXHQnJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgJiYgZ2V0UHJvdG8gPyBnZXRQcm90bygnJ1tTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJVN5bWJvbCUnOiBoYXNTeW1ib2xzID8gU3ltYm9sIDogdW5kZWZpbmVkLFxuXHQnJVN5bnRheEVycm9yJSc6ICRTeW50YXhFcnJvcixcblx0JyVUaHJvd1R5cGVFcnJvciUnOiBUaHJvd1R5cGVFcnJvcixcblx0JyVUeXBlZEFycmF5JSc6IFR5cGVkQXJyYXksXG5cdCclVHlwZUVycm9yJSc6ICRUeXBlRXJyb3IsXG5cdCclVWludDhBcnJheSUnOiB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OEFycmF5LFxuXHQnJVVpbnQ4Q2xhbXBlZEFycmF5JSc6IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OENsYW1wZWRBcnJheSxcblx0JyVVaW50MTZBcnJheSUnOiB0eXBlb2YgVWludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDE2QXJyYXksXG5cdCclVWludDMyQXJyYXklJzogdHlwZW9mIFVpbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQzMkFycmF5LFxuXHQnJVVSSUVycm9yJSc6IFVSSUVycm9yLFxuXHQnJVdlYWtNYXAlJzogdHlwZW9mIFdlYWtNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha01hcCxcblx0JyVXZWFrUmVmJSc6IHR5cGVvZiBXZWFrUmVmID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtSZWYsXG5cdCclV2Vha1NldCUnOiB0eXBlb2YgV2Vha1NldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrU2V0XG59O1xuXG5pZiAoZ2V0UHJvdG8pIHtcblx0dHJ5IHtcblx0XHRudWxsLmVycm9yOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc2hhZG93cmVhbG0vcHVsbC8zODQjaXNzdWVjb21tZW50LTEzNjQyNjQyMjlcblx0XHR2YXIgZXJyb3JQcm90byA9IGdldFByb3RvKGdldFByb3RvKGUpKTtcblx0XHRJTlRSSU5TSUNTWyclRXJyb3IucHJvdG90eXBlJSddID0gZXJyb3JQcm90bztcblx0fVxufVxuXG52YXIgZG9FdmFsID0gZnVuY3Rpb24gZG9FdmFsKG5hbWUpIHtcblx0dmFyIHZhbHVlO1xuXHRpZiAobmFtZSA9PT0gJyVBc3luY0Z1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignYXN5bmMgZnVuY3Rpb24gKCkge30nKTtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUdlbmVyYXRvckZ1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignZnVuY3Rpb24qICgpIHt9Jyk7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignYXN5bmMgZnVuY3Rpb24qICgpIHt9Jyk7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVBc3luY0dlbmVyYXRvciUnKSB7XG5cdFx0dmFyIGZuID0gZG9FdmFsKCclQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiUnKTtcblx0XHRpZiAoZm4pIHtcblx0XHRcdHZhbHVlID0gZm4ucHJvdG90eXBlO1xuXHRcdH1cblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUFzeW5jSXRlcmF0b3JQcm90b3R5cGUlJykge1xuXHRcdHZhciBnZW4gPSBkb0V2YWwoJyVBc3luY0dlbmVyYXRvciUnKTtcblx0XHRpZiAoZ2VuICYmIGdldFByb3RvKSB7XG5cdFx0XHR2YWx1ZSA9IGdldFByb3RvKGdlbi5wcm90b3R5cGUpO1xuXHRcdH1cblx0fVxuXG5cdElOVFJJTlNJQ1NbbmFtZV0gPSB2YWx1ZTtcblxuXHRyZXR1cm4gdmFsdWU7XG59O1xuXG52YXIgTEVHQUNZX0FMSUFTRVMgPSB7XG5cdCclQXJyYXlCdWZmZXJQcm90b3R5cGUlJzogWydBcnJheUJ1ZmZlcicsICdwcm90b3R5cGUnXSxcblx0JyVBcnJheVByb3RvdHlwZSUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUFycmF5UHJvdG9fZW50cmllcyUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICdlbnRyaWVzJ10sXG5cdCclQXJyYXlQcm90b19mb3JFYWNoJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ2ZvckVhY2gnXSxcblx0JyVBcnJheVByb3RvX2tleXMlJzogWydBcnJheScsICdwcm90b3R5cGUnLCAna2V5cyddLFxuXHQnJUFycmF5UHJvdG9fdmFsdWVzJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ3ZhbHVlcyddLFxuXHQnJUFzeW5jRnVuY3Rpb25Qcm90b3R5cGUlJzogWydBc3luY0Z1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFzeW5jR2VuZXJhdG9yJSc6IFsnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnXSxcblx0JyVBc3luY0dlbmVyYXRvclByb3RvdHlwZSUnOiBbJ0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJywgJ3Byb3RvdHlwZSddLFxuXHQnJUJvb2xlYW5Qcm90b3R5cGUlJzogWydCb29sZWFuJywgJ3Byb3RvdHlwZSddLFxuXHQnJURhdGFWaWV3UHJvdG90eXBlJSc6IFsnRGF0YVZpZXcnLCAncHJvdG90eXBlJ10sXG5cdCclRGF0ZVByb3RvdHlwZSUnOiBbJ0RhdGUnLCAncHJvdG90eXBlJ10sXG5cdCclRXJyb3JQcm90b3R5cGUlJzogWydFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVFdmFsRXJyb3JQcm90b3R5cGUlJzogWydFdmFsRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclRmxvYXQzMkFycmF5UHJvdG90eXBlJSc6IFsnRmxvYXQzMkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUZsb2F0NjRBcnJheVByb3RvdHlwZSUnOiBbJ0Zsb2F0NjRBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVGdW5jdGlvblByb3RvdHlwZSUnOiBbJ0Z1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUdlbmVyYXRvciUnOiBbJ0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUdlbmVyYXRvclByb3RvdHlwZSUnOiBbJ0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQ4QXJyYXlQcm90b3R5cGUlJzogWydJbnQ4QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclSW50MTZBcnJheVByb3RvdHlwZSUnOiBbJ0ludDE2QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclSW50MzJBcnJheVByb3RvdHlwZSUnOiBbJ0ludDMyQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclSlNPTlBhcnNlJSc6IFsnSlNPTicsICdwYXJzZSddLFxuXHQnJUpTT05TdHJpbmdpZnklJzogWydKU09OJywgJ3N0cmluZ2lmeSddLFxuXHQnJU1hcFByb3RvdHlwZSUnOiBbJ01hcCcsICdwcm90b3R5cGUnXSxcblx0JyVOdW1iZXJQcm90b3R5cGUlJzogWydOdW1iZXInLCAncHJvdG90eXBlJ10sXG5cdCclT2JqZWN0UHJvdG90eXBlJSc6IFsnT2JqZWN0JywgJ3Byb3RvdHlwZSddLFxuXHQnJU9ialByb3RvX3RvU3RyaW5nJSc6IFsnT2JqZWN0JywgJ3Byb3RvdHlwZScsICd0b1N0cmluZyddLFxuXHQnJU9ialByb3RvX3ZhbHVlT2YlJzogWydPYmplY3QnLCAncHJvdG90eXBlJywgJ3ZhbHVlT2YnXSxcblx0JyVQcm9taXNlUHJvdG90eXBlJSc6IFsnUHJvbWlzZScsICdwcm90b3R5cGUnXSxcblx0JyVQcm9taXNlUHJvdG9fdGhlbiUnOiBbJ1Byb21pc2UnLCAncHJvdG90eXBlJywgJ3RoZW4nXSxcblx0JyVQcm9taXNlX2FsbCUnOiBbJ1Byb21pc2UnLCAnYWxsJ10sXG5cdCclUHJvbWlzZV9yZWplY3QlJzogWydQcm9taXNlJywgJ3JlamVjdCddLFxuXHQnJVByb21pc2VfcmVzb2x2ZSUnOiBbJ1Byb21pc2UnLCAncmVzb2x2ZSddLFxuXHQnJVJhbmdlRXJyb3JQcm90b3R5cGUlJzogWydSYW5nZUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVJlZmVyZW5jZUVycm9yUHJvdG90eXBlJSc6IFsnUmVmZXJlbmNlRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclUmVnRXhwUHJvdG90eXBlJSc6IFsnUmVnRXhwJywgJ3Byb3RvdHlwZSddLFxuXHQnJVNldFByb3RvdHlwZSUnOiBbJ1NldCcsICdwcm90b3R5cGUnXSxcblx0JyVTaGFyZWRBcnJheUJ1ZmZlclByb3RvdHlwZSUnOiBbJ1NoYXJlZEFycmF5QnVmZmVyJywgJ3Byb3RvdHlwZSddLFxuXHQnJVN0cmluZ1Byb3RvdHlwZSUnOiBbJ1N0cmluZycsICdwcm90b3R5cGUnXSxcblx0JyVTeW1ib2xQcm90b3R5cGUlJzogWydTeW1ib2wnLCAncHJvdG90eXBlJ10sXG5cdCclU3ludGF4RXJyb3JQcm90b3R5cGUlJzogWydTeW50YXhFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVUeXBlZEFycmF5UHJvdG90eXBlJSc6IFsnVHlwZWRBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVUeXBlRXJyb3JQcm90b3R5cGUlJzogWydUeXBlRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclVWludDhBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQ4QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUlJzogWydVaW50OENsYW1wZWRBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVaW50MTZBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQxNkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQzMkFycmF5UHJvdG90eXBlJSc6IFsnVWludDMyQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVVJJRXJyb3JQcm90b3R5cGUlJzogWydVUklFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVXZWFrTWFwUHJvdG90eXBlJSc6IFsnV2Vha01hcCcsICdwcm90b3R5cGUnXSxcblx0JyVXZWFrU2V0UHJvdG90eXBlJSc6IFsnV2Vha1NldCcsICdwcm90b3R5cGUnXVxufTtcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnaGFzb3duJyk7XG52YXIgJGNvbmNhdCA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBBcnJheS5wcm90b3R5cGUuY29uY2F0KTtcbnZhciAkc3BsaWNlQXBwbHkgPSBiaW5kLmNhbGwoRnVuY3Rpb24uYXBwbHksIEFycmF5LnByb3RvdHlwZS5zcGxpY2UpO1xudmFyICRyZXBsYWNlID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSk7XG52YXIgJHN0clNsaWNlID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFN0cmluZy5wcm90b3R5cGUuc2xpY2UpO1xudmFyICRleGVjID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFJlZ0V4cC5wcm90b3R5cGUuZXhlYyk7XG5cbi8qIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbG9kYXNoL2xvZGFzaC9ibG9iLzQuMTcuMTUvZGlzdC9sb2Rhc2guanMjTDY3MzUtTDY3NDQgKi9cbnZhciByZVByb3BOYW1lID0gL1teJS5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwlJCkpL2c7XG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7IC8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IGZ1bmN0aW9uIHN0cmluZ1RvUGF0aChzdHJpbmcpIHtcblx0dmFyIGZpcnN0ID0gJHN0clNsaWNlKHN0cmluZywgMCwgMSk7XG5cdHZhciBsYXN0ID0gJHN0clNsaWNlKHN0cmluZywgLTEpO1xuXHRpZiAoZmlyc3QgPT09ICclJyAmJiBsYXN0ICE9PSAnJScpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdpbnZhbGlkIGludHJpbnNpYyBzeW50YXgsIGV4cGVjdGVkIGNsb3NpbmcgYCVgJyk7XG5cdH0gZWxzZSBpZiAobGFzdCA9PT0gJyUnICYmIGZpcnN0ICE9PSAnJScpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdpbnZhbGlkIGludHJpbnNpYyBzeW50YXgsIGV4cGVjdGVkIG9wZW5pbmcgYCVgJyk7XG5cdH1cblx0dmFyIHJlc3VsdCA9IFtdO1xuXHQkcmVwbGFjZShzdHJpbmcsIHJlUHJvcE5hbWUsIGZ1bmN0aW9uIChtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG5cdFx0cmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gcXVvdGUgPyAkcmVwbGFjZShzdWJTdHJpbmcsIHJlRXNjYXBlQ2hhciwgJyQxJykgOiBudW1iZXIgfHwgbWF0Y2g7XG5cdH0pO1xuXHRyZXR1cm4gcmVzdWx0O1xufTtcbi8qIGVuZCBhZGFwdGF0aW9uICovXG5cbnZhciBnZXRCYXNlSW50cmluc2ljID0gZnVuY3Rpb24gZ2V0QmFzZUludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0dmFyIGludHJpbnNpY05hbWUgPSBuYW1lO1xuXHR2YXIgYWxpYXM7XG5cdGlmIChoYXNPd24oTEVHQUNZX0FMSUFTRVMsIGludHJpbnNpY05hbWUpKSB7XG5cdFx0YWxpYXMgPSBMRUdBQ1lfQUxJQVNFU1tpbnRyaW5zaWNOYW1lXTtcblx0XHRpbnRyaW5zaWNOYW1lID0gJyUnICsgYWxpYXNbMF0gKyAnJSc7XG5cdH1cblxuXHRpZiAoaGFzT3duKElOVFJJTlNJQ1MsIGludHJpbnNpY05hbWUpKSB7XG5cdFx0dmFyIHZhbHVlID0gSU5UUklOU0lDU1tpbnRyaW5zaWNOYW1lXTtcblx0XHRpZiAodmFsdWUgPT09IG5lZWRzRXZhbCkge1xuXHRcdFx0dmFsdWUgPSBkb0V2YWwoaW50cmluc2ljTmFtZSk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnICYmICFhbGxvd01pc3NpbmcpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpbnRyaW5zaWMgJyArIG5hbWUgKyAnIGV4aXN0cywgYnV0IGlzIG5vdCBhdmFpbGFibGUuIFBsZWFzZSBmaWxlIGFuIGlzc3VlIScpO1xuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRhbGlhczogYWxpYXMsXG5cdFx0XHRuYW1lOiBpbnRyaW5zaWNOYW1lLFxuXHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0fTtcblx0fVxuXG5cdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2ludHJpbnNpYyAnICsgbmFtZSArICcgZG9lcyBub3QgZXhpc3QhJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEdldEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0aWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJyB8fCBuYW1lLmxlbmd0aCA9PT0gMCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpbnRyaW5zaWMgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuXHR9XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSAmJiB0eXBlb2YgYWxsb3dNaXNzaW5nICE9PSAnYm9vbGVhbicpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignXCJhbGxvd01pc3NpbmdcIiBhcmd1bWVudCBtdXN0IGJlIGEgYm9vbGVhbicpO1xuXHR9XG5cblx0aWYgKCRleGVjKC9eJT9bXiVdKiU/JC8sIG5hbWUpID09PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignYCVgIG1heSBub3QgYmUgcHJlc2VudCBhbnl3aGVyZSBidXQgYXQgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIHRoZSBpbnRyaW5zaWMgbmFtZScpO1xuXHR9XG5cdHZhciBwYXJ0cyA9IHN0cmluZ1RvUGF0aChuYW1lKTtcblx0dmFyIGludHJpbnNpY0Jhc2VOYW1lID0gcGFydHMubGVuZ3RoID4gMCA/IHBhcnRzWzBdIDogJyc7XG5cblx0dmFyIGludHJpbnNpYyA9IGdldEJhc2VJbnRyaW5zaWMoJyUnICsgaW50cmluc2ljQmFzZU5hbWUgKyAnJScsIGFsbG93TWlzc2luZyk7XG5cdHZhciBpbnRyaW5zaWNSZWFsTmFtZSA9IGludHJpbnNpYy5uYW1lO1xuXHR2YXIgdmFsdWUgPSBpbnRyaW5zaWMudmFsdWU7XG5cdHZhciBza2lwRnVydGhlckNhY2hpbmcgPSBmYWxzZTtcblxuXHR2YXIgYWxpYXMgPSBpbnRyaW5zaWMuYWxpYXM7XG5cdGlmIChhbGlhcykge1xuXHRcdGludHJpbnNpY0Jhc2VOYW1lID0gYWxpYXNbMF07XG5cdFx0JHNwbGljZUFwcGx5KHBhcnRzLCAkY29uY2F0KFswLCAxXSwgYWxpYXMpKTtcblx0fVxuXG5cdGZvciAodmFyIGkgPSAxLCBpc093biA9IHRydWU7IGkgPCBwYXJ0cy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdHZhciBwYXJ0ID0gcGFydHNbaV07XG5cdFx0dmFyIGZpcnN0ID0gJHN0clNsaWNlKHBhcnQsIDAsIDEpO1xuXHRcdHZhciBsYXN0ID0gJHN0clNsaWNlKHBhcnQsIC0xKTtcblx0XHRpZiAoXG5cdFx0XHQoXG5cdFx0XHRcdChmaXJzdCA9PT0gJ1wiJyB8fCBmaXJzdCA9PT0gXCInXCIgfHwgZmlyc3QgPT09ICdgJylcblx0XHRcdFx0fHwgKGxhc3QgPT09ICdcIicgfHwgbGFzdCA9PT0gXCInXCIgfHwgbGFzdCA9PT0gJ2AnKVxuXHRcdFx0KVxuXHRcdFx0JiYgZmlyc3QgIT09IGxhc3Rcblx0XHQpIHtcblx0XHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ3Byb3BlcnR5IG5hbWVzIHdpdGggcXVvdGVzIG11c3QgaGF2ZSBtYXRjaGluZyBxdW90ZXMnKTtcblx0XHR9XG5cdFx0aWYgKHBhcnQgPT09ICdjb25zdHJ1Y3RvcicgfHwgIWlzT3duKSB7XG5cdFx0XHRza2lwRnVydGhlckNhY2hpbmcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGludHJpbnNpY0Jhc2VOYW1lICs9ICcuJyArIHBhcnQ7XG5cdFx0aW50cmluc2ljUmVhbE5hbWUgPSAnJScgKyBpbnRyaW5zaWNCYXNlTmFtZSArICclJztcblxuXHRcdGlmIChoYXNPd24oSU5UUklOU0lDUywgaW50cmluc2ljUmVhbE5hbWUpKSB7XG5cdFx0XHR2YWx1ZSA9IElOVFJJTlNJQ1NbaW50cmluc2ljUmVhbE5hbWVdO1xuXHRcdH0gZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xuXHRcdFx0aWYgKCEocGFydCBpbiB2YWx1ZSkpIHtcblx0XHRcdFx0aWYgKCFhbGxvd01pc3NpbmcpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYmFzZSBpbnRyaW5zaWMgZm9yICcgKyBuYW1lICsgJyBleGlzdHMsIGJ1dCB0aGUgcHJvcGVydHkgaXMgbm90IGF2YWlsYWJsZS4nKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdm9pZCB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoJGdPUEQgJiYgKGkgKyAxKSA+PSBwYXJ0cy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGRlc2MgPSAkZ09QRCh2YWx1ZSwgcGFydCk7XG5cdFx0XHRcdGlzT3duID0gISFkZXNjO1xuXG5cdFx0XHRcdC8vIEJ5IGNvbnZlbnRpb24sIHdoZW4gYSBkYXRhIHByb3BlcnR5IGlzIGNvbnZlcnRlZCB0byBhbiBhY2Nlc3NvclxuXHRcdFx0XHQvLyBwcm9wZXJ0eSB0byBlbXVsYXRlIGEgZGF0YSBwcm9wZXJ0eSB0aGF0IGRvZXMgbm90IHN1ZmZlciBmcm9tXG5cdFx0XHRcdC8vIHRoZSBvdmVycmlkZSBtaXN0YWtlLCB0aGF0IGFjY2Vzc29yJ3MgZ2V0dGVyIGlzIG1hcmtlZCB3aXRoXG5cdFx0XHRcdC8vIGFuIGBvcmlnaW5hbFZhbHVlYCBwcm9wZXJ0eS4gSGVyZSwgd2hlbiB3ZSBkZXRlY3QgdGhpcywgd2Vcblx0XHRcdFx0Ly8gdXBob2xkIHRoZSBpbGx1c2lvbiBieSBwcmV0ZW5kaW5nIHRvIHNlZSB0aGF0IG9yaWdpbmFsIGRhdGFcblx0XHRcdFx0Ly8gcHJvcGVydHksIGkuZS4sIHJldHVybmluZyB0aGUgdmFsdWUgcmF0aGVyIHRoYW4gdGhlIGdldHRlclxuXHRcdFx0XHQvLyBpdHNlbGYuXG5cdFx0XHRcdGlmIChpc093biAmJiAnZ2V0JyBpbiBkZXNjICYmICEoJ29yaWdpbmFsVmFsdWUnIGluIGRlc2MuZ2V0KSkge1xuXHRcdFx0XHRcdHZhbHVlID0gZGVzYy5nZXQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZVtwYXJ0XTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aXNPd24gPSBoYXNPd24odmFsdWUsIHBhcnQpO1xuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlW3BhcnRdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaXNPd24gJiYgIXNraXBGdXJ0aGVyQ2FjaGluZykge1xuXHRcdFx0XHRJTlRSSU5TSUNTW2ludHJpbnNpY1JlYWxOYW1lXSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJGdPUEQgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJScsIHRydWUpO1xuXG5pZiAoJGdPUEQpIHtcblx0dHJ5IHtcblx0XHQkZ09QRChbXSwgJ2xlbmd0aCcpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZ09QRFxuXHRcdCRnT1BEID0gbnVsbDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9ICRnT1BEO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gR2V0SW50cmluc2ljKCclT2JqZWN0LmRlZmluZVByb3BlcnR5JScsIHRydWUpO1xuXG52YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9ycyA9IGZ1bmN0aW9uIGhhc1Byb3BlcnR5RGVzY3JpcHRvcnMoKSB7XG5cdGlmICgkZGVmaW5lUHJvcGVydHkpIHtcblx0XHR0cnkge1xuXHRcdFx0JGRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgdmFsdWU6IDEgfSk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBkZWZpbmVQcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59O1xuXG5oYXNQcm9wZXJ0eURlc2NyaXB0b3JzLmhhc0FycmF5TGVuZ3RoRGVmaW5lQnVnID0gZnVuY3Rpb24gaGFzQXJyYXlMZW5ndGhEZWZpbmVCdWcoKSB7XG5cdC8vIG5vZGUgdjAuNiBoYXMgYSBidWcgd2hlcmUgYXJyYXkgbGVuZ3RocyBjYW4gYmUgU2V0IGJ1dCBub3QgRGVmaW5lZFxuXHRpZiAoIWhhc1Byb3BlcnR5RGVzY3JpcHRvcnMoKSkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cdHRyeSB7XG5cdFx0cmV0dXJuICRkZWZpbmVQcm9wZXJ0eShbXSwgJ2xlbmd0aCcsIHsgdmFsdWU6IDEgfSkubGVuZ3RoICE9PSAxO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSW4gRmlyZWZveCA0LTIyLCBkZWZpbmluZyBsZW5ndGggb24gYW4gYXJyYXkgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdGVzdCA9IHtcblx0Zm9vOiB7fVxufTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzUHJvdG8oKSB7XG5cdHJldHVybiB7IF9fcHJvdG9fXzogdGVzdCB9LmZvbyA9PT0gdGVzdC5mb28gJiYgISh7IF9fcHJvdG9fXzogbnVsbCB9IGluc3RhbmNlb2YgJE9iamVjdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgb3JpZ1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbDtcbnZhciBoYXNTeW1ib2xTaGFtID0gcmVxdWlyZSgnLi9zaGFtcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc05hdGl2ZVN5bWJvbHMoKSB7XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCgnZm9vJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCgnYmFyJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHJldHVybiBoYXNTeW1ib2xTaGFtKCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgY29tcGxleGl0eTogWzIsIDE4XSwgbWF4LXN0YXRlbWVudHM6IFsyLCAzM10gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnc3ltYm9sJykgeyByZXR1cm4gdHJ1ZTsgfVxuXG5cdHZhciBvYmogPSB7fTtcblx0dmFyIHN5bSA9IFN5bWJvbCgndGVzdCcpO1xuXHR2YXIgc3ltT2JqID0gT2JqZWN0KHN5bSk7XG5cdGlmICh0eXBlb2Ygc3ltID09PSAnc3RyaW5nJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bU9iaikgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdC8vIHRlbXAgZGlzYWJsZWQgcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvb2JqZWN0LmFzc2lnbi9pc3N1ZXMvMTdcblx0Ly8gaWYgKHN5bSBpbnN0YW5jZW9mIFN5bWJvbCkgeyByZXR1cm4gZmFsc2U7IH1cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL1dlYlJlZmxlY3Rpb24vZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzL2lzc3Vlcy80XG5cdC8vIGlmICghKHN5bU9iaiBpbnN0YW5jZW9mIFN5bWJvbCkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gaWYgKHR5cGVvZiBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyBpZiAoU3RyaW5nKHN5bSkgIT09IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHZhciBzeW1WYWwgPSA0Mjtcblx0b2JqW3N5bV0gPSBzeW1WYWw7XG5cdGZvciAoc3ltIGluIG9iaikgeyByZXR1cm4gZmFsc2U7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tdW5yZWFjaGFibGUtbG9vcFxuXHRpZiAodHlwZW9mIE9iamVjdC5rZXlzID09PSAnZnVuY3Rpb24nICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoICE9PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iaik7XG5cdGlmIChzeW1zLmxlbmd0aCAhPT0gMSB8fCBzeW1zWzBdICE9PSBzeW0pIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqLCBzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIHN5bSk7XG5cdFx0aWYgKGRlc2NyaXB0b3IudmFsdWUgIT09IHN5bVZhbCB8fCBkZXNjcmlwdG9yLmVudW1lcmFibGUgIT09IHRydWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNTeW1ib2xzID0gcmVxdWlyZSgnaGFzLXN5bWJvbHMvc2hhbXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNUb1N0cmluZ1RhZ1NoYW1zKCkge1xuXHRyZXR1cm4gaGFzU3ltYm9scygpICYmICEhU3ltYm9sLnRvU3RyaW5nVGFnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNhbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbDtcbnZhciAkaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xuXG4vKiogQHR5cGUgeyhvOiB7fSwgcDogUHJvcGVydHlLZXkpID0+IHAgaXMga2V5b2Ygb30gKi9cbm1vZHVsZS5leHBvcnRzID0gYmluZC5jYWxsKGNhbGwsICRoYXNPd24pO1xuIiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiMTVcXFwiIHgyPVxcXCIzXFxcIiB5MT1cXFwiOVxcXCIgeTI9XFxcIjlcXFwiPjwvbGluZT4gPGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjE0XFxcIiB4Mj1cXFwiNFxcXCIgeTE9XFxcIjE0XFxcIiB5Mj1cXFwiMTRcXFwiPjwvbGluZT4gPGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjEyXFxcIiB4Mj1cXFwiNlxcXCIgeTE9XFxcIjRcXFwiIHkyPVxcXCI0XFxcIj48L2xpbmU+IDwvc3ZnPlwiO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjE1XFxcIiB4Mj1cXFwiM1xcXCIgeTE9XFxcIjlcXFwiIHkyPVxcXCI5XFxcIj48L2xpbmU+IDxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCIxNVxcXCIgeDI9XFxcIjNcXFwiIHkxPVxcXCIxNFxcXCIgeTI9XFxcIjE0XFxcIj48L2xpbmU+IDxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCIxNVxcXCIgeDI9XFxcIjNcXFwiIHkxPVxcXCI0XFxcIiB5Mj1cXFwiNFxcXCI+PC9saW5lPiA8L3N2Zz5cIjtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCIzXFxcIiB4Mj1cXFwiMTVcXFwiIHkxPVxcXCI5XFxcIiB5Mj1cXFwiOVxcXCI+PC9saW5lPiA8bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiM1xcXCIgeDI9XFxcIjEzXFxcIiB5MT1cXFwiMTRcXFwiIHkyPVxcXCIxNFxcXCI+PC9saW5lPiA8bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiM1xcXCIgeDI9XFxcIjlcXFwiIHkxPVxcXCI0XFxcIiB5Mj1cXFwiNFxcXCI+PC9saW5lPiA8L3N2Zz5cIjtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCIxNVxcXCIgeDI9XFxcIjNcXFwiIHkxPVxcXCI5XFxcIiB5Mj1cXFwiOVxcXCI+PC9saW5lPiA8bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiMTVcXFwiIHgyPVxcXCI1XFxcIiB5MT1cXFwiMTRcXFwiIHkyPVxcXCIxNFxcXCI+PC9saW5lPiA8bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiMTVcXFwiIHgyPVxcXCI5XFxcIiB5MT1cXFwiNFxcXCIgeTI9XFxcIjRcXFwiPjwvbGluZT4gPC9zdmc+XCI7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGNvZGU7IiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8ZyBjbGFzcz1cXFwicWwtZmlsbCBxbC1jb2xvci1sYWJlbFxcXCI+IDxwb2x5Z29uIHBvaW50cz1cXFwiNiA2Ljg2OCA2IDYgNSA2IDUgNyA1Ljk0MiA3IDYgNi44NjhcXFwiPjwvcG9seWdvbj4gPHJlY3QgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiNFxcXCIgeT1cXFwiNFxcXCI+PC9yZWN0PiA8cG9seWdvbiBwb2ludHM9XFxcIjYuODE3IDUgNiA1IDYgNiA2LjM4IDYgNi44MTcgNVxcXCI+PC9wb2x5Z29uPiA8cmVjdCBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCIyXFxcIiB5PVxcXCI2XFxcIj48L3JlY3Q+IDxyZWN0IGhlaWdodD1cXFwiMVxcXCIgd2lkdGg9XFxcIjFcXFwiIHg9XFxcIjNcXFwiIHk9XFxcIjVcXFwiPjwvcmVjdD4gPHJlY3QgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiNFxcXCIgeT1cXFwiN1xcXCI+PC9yZWN0PiA8cG9seWdvbiBwb2ludHM9XFxcIjQgMTEuNDM5IDQgMTEgMyAxMSAzIDEyIDMuNzU1IDEyIDQgMTEuNDM5XFxcIj48L3BvbHlnb24+IDxyZWN0IGhlaWdodD1cXFwiMVxcXCIgd2lkdGg9XFxcIjFcXFwiIHg9XFxcIjJcXFwiIHk9XFxcIjEyXFxcIj48L3JlY3Q+IDxyZWN0IGhlaWdodD1cXFwiMVxcXCIgd2lkdGg9XFxcIjFcXFwiIHg9XFxcIjJcXFwiIHk9XFxcIjlcXFwiPjwvcmVjdD4gPHJlY3QgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiMlxcXCIgeT1cXFwiMTVcXFwiPjwvcmVjdD4gPHBvbHlnb24gcG9pbnRzPVxcXCI0LjYzIDEwIDQgMTAgNCAxMSA0LjE5MiAxMSA0LjYzIDEwXFxcIj48L3BvbHlnb24+IDxyZWN0IGhlaWdodD1cXFwiMVxcXCIgd2lkdGg9XFxcIjFcXFwiIHg9XFxcIjNcXFwiIHk9XFxcIjhcXFwiPjwvcmVjdD4gPHBhdGggZD1cXFwiTTEwLjgzMiw0LjJMMTEsNC41ODJWNEgxMC43MDhBMS45NDgsMS45NDgsMCwwLDEsMTAuODMyLDQuMlpcXFwiPjwvcGF0aD4gPHBhdGggZD1cXFwiTTcsNC41ODJMNy4xNjgsNC4yQTEuOTI5LDEuOTI5LDAsMCwxLDcuMjkyLDRIN1Y0LjU4MlpcXFwiPjwvcGF0aD4gPHBhdGggZD1cXFwiTTgsMTNINy42ODNsLTAuMzUxLjhhMS45MzMsMS45MzMsMCwwLDEtLjEyNC4ySDhWMTNaXFxcIj48L3BhdGg+IDxyZWN0IGhlaWdodD1cXFwiMVxcXCIgd2lkdGg9XFxcIjFcXFwiIHg9XFxcIjEyXFxcIiB5PVxcXCIyXFxcIj48L3JlY3Q+IDxyZWN0IGhlaWdodD1cXFwiMVxcXCIgd2lkdGg9XFxcIjFcXFwiIHg9XFxcIjExXFxcIiB5PVxcXCIzXFxcIj48L3JlY3Q+IDxwYXRoIGQ9XFxcIk05LDNIOFYzLjI4MkExLjk4NSwxLjk4NSwwLDAsMSw5LDNaXFxcIj48L3BhdGg+IDxyZWN0IGhlaWdodD1cXFwiMVxcXCIgd2lkdGg9XFxcIjFcXFwiIHg9XFxcIjJcXFwiIHk9XFxcIjNcXFwiPjwvcmVjdD4gPHJlY3QgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiNlxcXCIgeT1cXFwiMlxcXCI+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCIzXFxcIiB5PVxcXCIyXFxcIj48L3JlY3Q+IDxyZWN0IGhlaWdodD1cXFwiMVxcXCIgd2lkdGg9XFxcIjFcXFwiIHg9XFxcIjVcXFwiIHk9XFxcIjNcXFwiPjwvcmVjdD4gPHJlY3QgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiOVxcXCIgeT1cXFwiMlxcXCI+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCIxNVxcXCIgeT1cXFwiMTRcXFwiPjwvcmVjdD4gPHBvbHlnb24gcG9pbnRzPVxcXCIxMy40NDcgMTAuMTc0IDEzLjQ2OSAxMC4yMjUgMTMuNDcyIDEwLjIzMiAxMy44MDggMTEgMTQgMTEgMTQgMTAgMTMuMzcgMTAgMTMuNDQ3IDEwLjE3NFxcXCI+PC9wb2x5Z29uPiA8cmVjdCBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCIxM1xcXCIgeT1cXFwiN1xcXCI+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCIxNVxcXCIgeT1cXFwiNVxcXCI+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCIxNFxcXCIgeT1cXFwiNlxcXCI+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCIxNVxcXCIgeT1cXFwiOFxcXCI+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCIxNFxcXCIgeT1cXFwiOVxcXCI+PC9yZWN0PiA8cGF0aCBkPVxcXCJNMy43NzUsMTRIM3YxSDRWMTQuMzE0QTEuOTcsMS45NywwLDAsMSwzLjc3NSwxNFpcXFwiPjwvcGF0aD4gPHJlY3QgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiMTRcXFwiIHk9XFxcIjNcXFwiPjwvcmVjdD4gPHBvbHlnb24gcG9pbnRzPVxcXCIxMiA2Ljg2OCAxMiA2IDExLjYyIDYgMTIgNi44NjhcXFwiPjwvcG9seWdvbj4gPHJlY3QgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiMTVcXFwiIHk9XFxcIjJcXFwiPjwvcmVjdD4gPHJlY3QgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiMTJcXFwiIHk9XFxcIjVcXFwiPjwvcmVjdD4gPHJlY3QgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiMTNcXFwiIHk9XFxcIjRcXFwiPjwvcmVjdD4gPHBvbHlnb24gcG9pbnRzPVxcXCIxMi45MzMgOSAxMyA5IDEzIDggMTIuNDk1IDggMTIuOTMzIDlcXFwiPjwvcG9seWdvbj4gPHJlY3QgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiOVxcXCIgeT1cXFwiMTRcXFwiPjwvcmVjdD4gPHJlY3QgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiOFxcXCIgeT1cXFwiMTVcXFwiPjwvcmVjdD4gPHBhdGggZD1cXFwiTTYsMTQuOTI2VjE1SDdWMTQuMzE2QTEuOTkzLDEuOTkzLDAsMCwxLDYsMTQuOTI2WlxcXCI+PC9wYXRoPiA8cmVjdCBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCI1XFxcIiB5PVxcXCIxNVxcXCI+PC9yZWN0PiA8cGF0aCBkPVxcXCJNMTAuNjY4LDEzLjhMMTAuMzE3LDEzSDEwdjFoMC43OTJBMS45NDcsMS45NDcsMCwwLDEsMTAuNjY4LDEzLjhaXFxcIj48L3BhdGg+IDxyZWN0IGhlaWdodD1cXFwiMVxcXCIgd2lkdGg9XFxcIjFcXFwiIHg9XFxcIjExXFxcIiB5PVxcXCIxNVxcXCI+PC9yZWN0PiA8cGF0aCBkPVxcXCJNMTQuMzMyLDEyLjJhMS45OSwxLjk5LDAsMCwxLC4xNjYuOEgxNVYxMkgxNC4yNDVaXFxcIj48L3BhdGg+IDxyZWN0IGhlaWdodD1cXFwiMVxcXCIgd2lkdGg9XFxcIjFcXFwiIHg9XFxcIjE0XFxcIiB5PVxcXCIxNVxcXCI+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCIxNVxcXCIgeT1cXFwiMTFcXFwiPjwvcmVjdD4gPC9nPiA8cG9seWxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgcG9pbnRzPVxcXCI1LjUgMTMgOSA1IDEyLjUgMTNcXFwiPjwvcG9seWxpbmU+IDxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCIxMS42M1xcXCIgeDI9XFxcIjYuMzhcXFwiIHkxPVxcXCIxMVxcXCIgeTI9XFxcIjExXFxcIj48L2xpbmU+IDwvc3ZnPlwiO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHJlY3QgY2xhc3M9XFxcInFsLWZpbGwgcWwtc3Ryb2tlXFxcIiBoZWlnaHQ9XFxcIjNcXFwiIHdpZHRoPVxcXCIzXFxcIiB4PVxcXCI0XFxcIiB5PVxcXCI1XFxcIj48L3JlY3Q+IDxyZWN0IGNsYXNzPVxcXCJxbC1maWxsIHFsLXN0cm9rZVxcXCIgaGVpZ2h0PVxcXCIzXFxcIiB3aWR0aD1cXFwiM1xcXCIgeD1cXFwiMTFcXFwiIHk9XFxcIjVcXFwiPjwvcmVjdD4gPHBhdGggY2xhc3M9XFxcInFsLWV2ZW4gcWwtZmlsbCBxbC1zdHJva2VcXFwiIGQ9XFxcIk03LDhjMCw0LjAzMS0zLDUtMyw1XFxcIj48L3BhdGg+IDxwYXRoIGNsYXNzPVxcXCJxbC1ldmVuIHFsLWZpbGwgcWwtc3Ryb2tlXFxcIiBkPVxcXCJNMTQsOGMwLDQuMDMxLTMsNS0zLDVcXFwiPjwvcGF0aD4gPC9zdmc+XCI7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGNvZGU7IiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8cGF0aCBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiBkPVxcXCJNNSw0SDkuNUEyLjUsMi41LDAsMCwxLDEyLDYuNXYwQTIuNSwyLjUsMCwwLDEsOS41LDlINUEwLDAsMCwwLDEsNSw5VjRBMCwwLDAsMCwxLDUsNFpcXFwiPjwvcGF0aD4gPHBhdGggY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgZD1cXFwiTTUsOWg1LjVBMi41LDIuNSwwLDAsMSwxMywxMS41djBBMi41LDIuNSwwLDAsMSwxMC41LDE0SDVhMCwwLDAsMCwxLDAsMFY5QTAsMCwwLDAsMSw1LDlaXFxcIj48L3BhdGg+IDwvc3ZnPlwiO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjxzdmcgY2xhc3M9XFxcIlxcXCIgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjVcXFwiIHgyPVxcXCIxM1xcXCIgeTE9XFxcIjNcXFwiIHkyPVxcXCIzXFxcIj48L2xpbmU+IDxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCI2XFxcIiB4Mj1cXFwiOS4zNVxcXCIgeTE9XFxcIjEyXFxcIiB5Mj1cXFwiM1xcXCI+PC9saW5lPiA8bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiMTFcXFwiIHgyPVxcXCIxNVxcXCIgeTE9XFxcIjExXFxcIiB5Mj1cXFwiMTVcXFwiPjwvbGluZT4gPGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjE1XFxcIiB4Mj1cXFwiMTFcXFwiIHkxPVxcXCIxMVxcXCIgeTI9XFxcIjE1XFxcIj48L2xpbmU+IDxyZWN0IGNsYXNzPVxcXCJxbC1maWxsXFxcIiBoZWlnaHQ9XFxcIjFcXFwiIHJ4PVxcXCIwLjVcXFwiIHJ5PVxcXCIwLjVcXFwiIHdpZHRoPVxcXCI3XFxcIiB4PVxcXCIyXFxcIiB5PVxcXCIxNFxcXCI+PC9yZWN0PiA8L3N2Zz5cIjtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxwb2x5bGluZSBjbGFzcz1cXFwicWwtZXZlbiBxbC1zdHJva2VcXFwiIHBvaW50cz1cXFwiNSA3IDMgOSA1IDExXFxcIj48L3BvbHlsaW5lPiA8cG9seWxpbmUgY2xhc3M9XFxcInFsLWV2ZW4gcWwtc3Ryb2tlXFxcIiBwb2ludHM9XFxcIjEzIDcgMTUgOSAxMyAxMVxcXCI+PC9wb2x5bGluZT4gPGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjEwXFxcIiB4Mj1cXFwiOFxcXCIgeTE9XFxcIjVcXFwiIHkyPVxcXCIxM1xcXCI+PC9saW5lPiA8L3N2Zz5cIjtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxsaW5lIGNsYXNzPVxcXCJxbC1jb2xvci1sYWJlbCBxbC1zdHJva2UgcWwtdHJhbnNwYXJlbnRcXFwiIHgxPVxcXCIzXFxcIiB4Mj1cXFwiMTVcXFwiIHkxPVxcXCIxNVxcXCIgeTI9XFxcIjE1XFxcIj48L2xpbmU+IDxwb2x5bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiBwb2ludHM9XFxcIjUuNSAxMSA5IDMgMTIuNSAxMVxcXCI+PC9wb2x5bGluZT4gPGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjExLjYzXFxcIiB4Mj1cXFwiNi4zOFxcXCIgeTE9XFxcIjlcXFwiIHkyPVxcXCI5XFxcIj48L2xpbmU+IDwvc3ZnPlwiO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHBvbHlnb24gY2xhc3M9XFxcInFsLXN0cm9rZSBxbC1maWxsXFxcIiBwb2ludHM9XFxcIjMgMTEgNSA5IDMgNyAzIDExXFxcIj48L3BvbHlnb24+IDxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2UgcWwtZmlsbFxcXCIgeDE9XFxcIjE1XFxcIiB4Mj1cXFwiMTFcXFwiIHkxPVxcXCI0XFxcIiB5Mj1cXFwiNFxcXCI+PC9saW5lPiA8cGF0aCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgZD1cXFwiTTExLDNhMywzLDAsMCwwLDAsNmgxVjNIMTFaXFxcIj48L3BhdGg+IDxyZWN0IGNsYXNzPVxcXCJxbC1maWxsXFxcIiBoZWlnaHQ9XFxcIjExXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiMTFcXFwiIHk9XFxcIjRcXFwiPjwvcmVjdD4gPHJlY3QgY2xhc3M9XFxcInFsLWZpbGxcXFwiIGhlaWdodD1cXFwiMTFcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCIxM1xcXCIgeT1cXFwiNFxcXCI+PC9yZWN0PiA8L3N2Zz5cIjtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxwb2x5Z29uIGNsYXNzPVxcXCJxbC1zdHJva2UgcWwtZmlsbFxcXCIgcG9pbnRzPVxcXCIxNSAxMiAxMyAxMCAxNSA4IDE1IDEyXFxcIj48L3BvbHlnb24+IDxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2UgcWwtZmlsbFxcXCIgeDE9XFxcIjlcXFwiIHgyPVxcXCI1XFxcIiB5MT1cXFwiNFxcXCIgeTI9XFxcIjRcXFwiPjwvbGluZT4gPHBhdGggY2xhc3M9XFxcInFsLWZpbGxcXFwiIGQ9XFxcIk01LDNBMywzLDAsMCwwLDUsOUg2VjNINVpcXFwiPjwvcGF0aD4gPHJlY3QgY2xhc3M9XFxcInFsLWZpbGxcXFwiIGhlaWdodD1cXFwiMTFcXFwiIHdpZHRoPVxcXCIxXFxcIiB4PVxcXCI1XFxcIiB5PVxcXCI0XFxcIj48L3JlY3Q+IDxyZWN0IGNsYXNzPVxcXCJxbC1maWxsXFxcIiBoZWlnaHQ9XFxcIjExXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiN1xcXCIgeT1cXFwiNFxcXCI+PC9yZWN0PiA8L3N2Zz5cIjtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxwb2x5Z29uIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHBvaW50cz1cXFwiNyAxMSA5IDEzIDExIDExIDcgMTFcXFwiPjwvcG9seWdvbj4gPHBvbHlnb24gY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgcG9pbnRzPVxcXCI3IDcgOSA1IDExIDcgNyA3XFxcIj48L3BvbHlnb24+IDwvc3ZnPlwiO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHBhdGggY2xhc3M9XFxcInFsLWZpbGxcXFwiIGQ9XFxcIk0xNCwxNkg0YTEsMSwwLDAsMSwwLTJIMTRBMSwxLDAsMCwxLDE0LDE2WlxcXCIvPiA8cGF0aCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgZD1cXFwiTTE0LDRINEExLDEsMCwwLDEsNCwySDE0QTEsMSwwLDAsMSwxNCw0WlxcXCIvPiA8cmVjdCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgeD1cXFwiM1xcXCIgeT1cXFwiNlxcXCIgd2lkdGg9XFxcIjEyXFxcIiBoZWlnaHQ9XFxcIjZcXFwiIHJ4PVxcXCIxXFxcIiByeT1cXFwiMVxcXCIvPiA8L3N2Zz5cIjtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxwYXRoIGNsYXNzPVxcXCJxbC1maWxsXFxcIiBkPVxcXCJNMTMsMTZINWExLDEsMCwwLDEsMC0yaDhBMSwxLDAsMCwxLDEzLDE2WlxcXCIvPiA8cGF0aCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgZD1cXFwiTTEzLDRINUExLDEsMCwwLDEsNSwyaDhBMSwxLDAsMCwxLDEzLDRaXFxcIi8+IDxyZWN0IGNsYXNzPVxcXCJxbC1maWxsXFxcIiB4PVxcXCIyXFxcIiB5PVxcXCI2XFxcIiB3aWR0aD1cXFwiMTRcXFwiIGhlaWdodD1cXFwiNlxcXCIgcng9XFxcIjFcXFwiIHJ5PVxcXCIxXFxcIi8+IDwvc3ZnPlwiO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHBhdGggY2xhc3M9XFxcInFsLWZpbGxcXFwiIGQ9XFxcIk0xNSw4SDEzYTEsMSwwLDAsMSwwLTJoMkExLDEsMCwwLDEsMTUsOFpcXFwiLz4gPHBhdGggY2xhc3M9XFxcInFsLWZpbGxcXFwiIGQ9XFxcIk0xNSwxMkgxM2ExLDEsMCwwLDEsMC0yaDJBMSwxLDAsMCwxLDE1LDEyWlxcXCIvPiA8cGF0aCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgZD1cXFwiTTE1LDE2SDVhMSwxLDAsMCwxLDAtMkgxNUExLDEsMCwwLDEsMTUsMTZaXFxcIi8+IDxwYXRoIGNsYXNzPVxcXCJxbC1maWxsXFxcIiBkPVxcXCJNMTUsNEg1QTEsMSwwLDAsMSw1LDJIMTVBMSwxLDAsMCwxLDE1LDRaXFxcIi8+IDxyZWN0IGNsYXNzPVxcXCJxbC1maWxsXFxcIiB4PVxcXCIyXFxcIiB5PVxcXCI2XFxcIiB3aWR0aD1cXFwiOFxcXCIgaGVpZ2h0PVxcXCI2XFxcIiByeD1cXFwiMVxcXCIgcnk9XFxcIjFcXFwiLz4gPC9zdmc+XCI7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGNvZGU7IiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8cGF0aCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgZD1cXFwiTTUsOEgzQTEsMSwwLDAsMSwzLDZINUExLDEsMCwwLDEsNSw4WlxcXCIvPiA8cGF0aCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgZD1cXFwiTTUsMTJIM2ExLDEsMCwwLDEsMC0ySDVBMSwxLDAsMCwxLDUsMTJaXFxcIi8+IDxwYXRoIGNsYXNzPVxcXCJxbC1maWxsXFxcIiBkPVxcXCJNMTMsMTZIM2ExLDEsMCwwLDEsMC0ySDEzQTEsMSwwLDAsMSwxMywxNlpcXFwiLz4gPHBhdGggY2xhc3M9XFxcInFsLWZpbGxcXFwiIGQ9XFxcIk0xMyw0SDNBMSwxLDAsMCwxLDMsMkgxM0ExLDEsMCwwLDEsMTMsNFpcXFwiLz4gPHJlY3QgY2xhc3M9XFxcInFsLWZpbGxcXFwiIHg9XFxcIjhcXFwiIHk9XFxcIjZcXFwiIHdpZHRoPVxcXCI4XFxcIiBoZWlnaHQ9XFxcIjZcXFwiIHJ4PVxcXCIxXFxcIiByeT1cXFwiMVxcXCIgdHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoMjQgMTgpIHJvdGF0ZSgtMTgwKVxcXCIvPiA8L3N2Zz5cIjtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxwYXRoIGNsYXNzPVxcXCJxbC1maWxsXFxcIiBkPVxcXCJNMTEuNzU5LDIuNDgyYTIuNTYxLDIuNTYxLDAsMCwwLTMuNTMuNjA3QTcuNjU2LDcuNjU2LDAsMCwwLDYuOCw2LjJDNi4xMDksOS4xODgsNS4yNzUsMTQuNjc3LDQuMTUsMTQuOTI3YTEuNTQ1LDEuNTQ1LDAsMCwwLTEuMy0uOTMzQTAuOTIyLDAuOTIyLDAsMCwwLDIsMTUuMDM2UzEuOTU0LDE2LDQuMTE5LDE2czMuMDkxLTIuNjkxLDMuNy01LjU1M2MwLjE3Ny0uODI2LjM2LTEuNzI2LDAuNTU0LTIuNkw4Ljc3NSw2LjJjMC4zODEtMS40MjEuODA3LTIuNTIxLDEuMzA2LTIuNjc2YTEuMDE0LDEuMDE0LDAsMCwwLDEuMDIuNTZBMC45NjYsMC45NjYsMCwwLDAsMTEuNzU5LDIuNDgyWlxcXCI+PC9wYXRoPiA8cmVjdCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgaGVpZ2h0PVxcXCIxLjZcXFwiIHJ4PVxcXCIwLjhcXFwiIHJ5PVxcXCIwLjhcXFwiIHdpZHRoPVxcXCI1XFxcIiB4PVxcXCI1LjE1XFxcIiB5PVxcXCI2LjJcXFwiPjwvcmVjdD4gPHBhdGggY2xhc3M9XFxcInFsLWZpbGxcXFwiIGQ9XFxcIk0xMy42NjMsMTIuMDI3YTEuNjYyLDEuNjYyLDAsMCwxLC4yNjYtMC4yNzZxMC4xOTMsMC4wNjkuNDU2LDAuMTM4YTIuMSwyLjEsMCwwLDAsLjUzNS4wNjksMS4wNzUsMS4wNzUsMCwwLDAsLjc2Ny0wLjMsMS4wNDQsMS4wNDQsMCwwLDAsLjMxNC0wLjgsMC44NCwwLjg0LDAsMCwwLS4yMzgtMC42MTksMC44LDAuOCwwLDAsMC0uNTk0LTAuMjM5LDEuMTU0LDEuMTU0LDAsMCwwLS43ODEuMyw0LjYwNyw0LjYwNywwLDAsMC0uNzgxLDFxLTAuMDkxLjE1LS4yMTgsMC4zNDZsLTAuMjQ2LjM4Yy0wLjA2OC0uMjg4LTAuMTM3LTAuNTgyLTAuMjEyLTAuODg1LTAuNDU5LTEuODQ3LTIuNDk0LS45ODQtMi45NDEtMC44LTAuNDgyLjItLjM1MywwLjY0Ny0wLjA5NCwwLjUyOWEwLjg2OSwwLjg2OSwwLDAsMSwxLjI4MS41ODVjMC4yMTcsMC43NTEuMzc3LDEuNDM2LDAuNTI3LDIuMDM4YTUuNjg4LDUuNjg4LDAsMCwxLS4zNjIuNDY3LDIuNjksMi42OSwwLDAsMS0uMjY0LjI3MXEtMC4yMjEtLjA4LTAuNDcxLTAuMTQ3YTIuMDI5LDIuMDI5LDAsMCwwLS41MjItMC4wNjYsMS4wNzksMS4wNzksMCwwLDAtLjc2OC4zQTEuMDU4LDEuMDU4LDAsMCwwLDksMTUuMTMxYTAuODIsMC44MiwwLDAsMCwuODMyLjg1MiwxLjEzNCwxLjEzNCwwLDAsMCwuNzg3LTAuMyw1LjExLDUuMTEsMCwwLDAsLjc3Ni0wLjk5M3EwLjE0MS0uMjE5LjIxNS0wLjM0YzAuMDQ2LS4wNzYuMTIyLTAuMTk0LDAuMjIzLTAuMzQ2YTIuNzg2LDIuNzg2LDAsMCwwLC45MTgsMS43MjYsMi41ODIsMi41ODIsMCwwLDAsMi4zNzYtLjE4NWMwLjMxNy0uMTgxLjIxMi0wLjU2NSwwLTAuNDk0QTAuODA3LDAuODA3LDAsMCwxLDE0LjE3NiwxNWE1LjE1OSw1LjE1OSwwLDAsMS0uOTEzLTIuNDQ2bDAsMFExMy40ODcsMTIuMjQsMTMuNjYzLDEyLjAyN1pcXFwiPjwvcGF0aD4gPC9zdmc+XCI7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGNvZGU7IiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiPHN2ZyB2aWV3Qm94PVxcXCIwIDAgMTggMThcXFwiPiA8cGF0aCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgZD1cXFwiTTE2LjczOTc1LDEzLjgxNDQ1di40Mzk0NWEuNTQwODUuNTQwODUsMCwwLDEtLjYwNS42MDU0N0gxMS44NTVhLjU4MzkyLjU4MzkyLDAsMCwxLS42NDg5My0uNjA1NDdWMTQuMDEyN2MwLTIuOTA1MjcsMy4zOTk0MS0zLjQyMTg3LDMuMzk5NDEtNC41NTQ2OWEuNzc2NzUuNzc2NzUsMCwwLDAtLjg0NzE3LS43ODEyNSwxLjE3Njg0LDEuMTc2ODQsMCwwLDAtLjgzNTk0LjM4NDc3Yy0uMjc0OS4yNjM2Ny0uNTYxLjM3NC0uODU3OTEuMTMxODRsLS40MjkyLS4zNDA4MmMtLjMwODExLS4yNDIxOS0uMzg1MjUtLjUxNzU4LS4xNTQzLS44MTQ0NWEyLjk3MTU1LDIuOTcxNTUsMCwwLDEsMi40NTM2MS0xLjE3Njc2LDIuNDUzOTMsMi40NTM5MywwLDAsMSwyLjY4NDA4LDIuNDA5MThjMCwyLjQ1MzEyLTMuMTc5MiwyLjkyNjc2LTMuMjc4MzIsMy45Mzg0OGgyLjc5NDQzQS41NDA4NS41NDA4NSwwLDAsMSwxNi43Mzk3NSwxMy44MTQ0NVpNOSwzQS45OTk3NC45OTk3NCwwLDAsMCw4LDRWOEgzVjRBMSwxLDAsMCwwLDEsNFYxNGExLDEsMCwwLDAsMiwwVjEwSDh2NGExLDEsMCwwLDAsMiwwVjRBLjk5OTc0Ljk5OTc0LDAsMCwwLDksM1pcXFwiLz4gPC9zdmc+XCI7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGNvZGU7IiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiPHN2ZyB2aWV3Qm94PVxcXCIwIDAgMTggMThcXFwiPiA8cGF0aCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgZD1cXFwiTTEwLDRWMTRhMSwxLDAsMCwxLTIsMFYxMEgzdjRhMSwxLDAsMCwxLTIsMFY0QTEsMSwwLDAsMSwzLDRWOEg4VjRhMSwxLDAsMCwxLDIsMFptNi4wNjc4Nyw5LjIwOUgxNC45ODk3NVY3LjU5ODYzYS41NDA4NS41NDA4NSwwLDAsMC0uNjA1LS42MDU0N2gtLjYyNzQ0YTEuMDExMTksMS4wMTExOSwwLDAsMC0uNzQ4LjI5Njg4TDExLjY0NSw4LjU2NjQxYS41NDM1LjU0MzUsMCwwLDAtLjAyMi44NTg0bC4yODYxMy4zMDc2MmEuNTM4NjEuNTM4NjEsMCwwLDAsLjg0NzE3LjAzMzJsLjA5OTEyLS4wODc4OWExLjIxMzcsMS4yMTM3LDAsMCwwLC4yNDE3LS4zNTI1NGguMDIyNDZzLS4wMTEyMy4zMDg1OS0uMDExMjMuNjA1NDdWMTMuMjA5SDEyLjA0MWEuNTQwODUuNTQwODUsMCwwLDAtLjYwNS42MDU0N3YuNDM5NDVhLjU0MDg1LjU0MDg1LDAsMCwwLC42MDUuNjA1NDdoNC4wMjY4NmEuNTQwODUuNTQwODUsMCwwLDAsLjYwNS0uNjA1NDd2LS40Mzk0NUEuNTQwODUuNTQwODUsMCwwLDAsMTYuMDY3ODcsMTMuMjA5WlxcXCIvPiA8L3N2Zz5cIjtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxyZWN0IGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIGhlaWdodD1cXFwiMTBcXFwiIHdpZHRoPVxcXCIxMlxcXCIgeD1cXFwiM1xcXCIgeT1cXFwiNFxcXCI+PC9yZWN0PiA8Y2lyY2xlIGNsYXNzPVxcXCJxbC1maWxsXFxcIiBjeD1cXFwiNlxcXCIgY3k9XFxcIjdcXFwiIHI9XFxcIjFcXFwiPjwvY2lyY2xlPiA8cG9seWxpbmUgY2xhc3M9XFxcInFsLWV2ZW4gcWwtZmlsbFxcXCIgcG9pbnRzPVxcXCI1IDEyIDUgMTEgNyA5IDggMTAgMTEgNyAxMyA5IDEzIDEyIDUgMTJcXFwiPjwvcG9seWxpbmU+IDwvc3ZnPlwiO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjNcXFwiIHgyPVxcXCIxNVxcXCIgeTE9XFxcIjE0XFxcIiB5Mj1cXFwiMTRcXFwiPjwvbGluZT4gPGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjNcXFwiIHgyPVxcXCIxNVxcXCIgeTE9XFxcIjRcXFwiIHkyPVxcXCI0XFxcIj48L2xpbmU+IDxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCI5XFxcIiB4Mj1cXFwiMTVcXFwiIHkxPVxcXCI5XFxcIiB5Mj1cXFwiOVxcXCI+PC9saW5lPiA8cG9seWxpbmUgY2xhc3M9XFxcInFsLWZpbGwgcWwtc3Ryb2tlXFxcIiBwb2ludHM9XFxcIjMgNyAzIDExIDUgOSAzIDdcXFwiPjwvcG9seWxpbmU+IDwvc3ZnPlwiO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjdcXFwiIHgyPVxcXCIxM1xcXCIgeTE9XFxcIjRcXFwiIHkyPVxcXCI0XFxcIj48L2xpbmU+IDxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCI1XFxcIiB4Mj1cXFwiMTFcXFwiIHkxPVxcXCIxNFxcXCIgeTI9XFxcIjE0XFxcIj48L2xpbmU+IDxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCI4XFxcIiB4Mj1cXFwiMTBcXFwiIHkxPVxcXCIxNFxcXCIgeTI9XFxcIjRcXFwiPjwvbGluZT4gPC9zdmc+XCI7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGNvZGU7IiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiN1xcXCIgeDI9XFxcIjExXFxcIiB5MT1cXFwiN1xcXCIgeTI9XFxcIjExXFxcIj48L2xpbmU+IDxwYXRoIGNsYXNzPVxcXCJxbC1ldmVuIHFsLXN0cm9rZVxcXCIgZD1cXFwiTTguOSw0LjU3N2EzLjQ3NiwzLjQ3NiwwLDAsMSwuMzYsNC42NzlBMy40NzYsMy40NzYsMCwwLDEsNC41NzcsOC45QzMuMTg1LDcuNSwyLjAzNSw2LjQsNC4yMTcsNC4yMTdTNy41LDMuMTg1LDguOSw0LjU3N1pcXFwiPjwvcGF0aD4gPHBhdGggY2xhc3M9XFxcInFsLWV2ZW4gcWwtc3Ryb2tlXFxcIiBkPVxcXCJNMTMuNDIzLDkuMWEzLjQ3NiwzLjQ3NiwwLDAsMC00LjY3OS0uMzYsMy40NzYsMy40NzYsMCwwLDAsLjM2LDQuNjc5YzEuMzkyLDEuMzkyLDIuNSwyLjU0Miw0LjY3OS4zNlMxNC44MTUsMTAuNSwxMy40MjMsOS4xWlxcXCI+PC9wYXRoPiA8L3N2Zz5cIjtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCI2XFxcIiB4Mj1cXFwiMTVcXFwiIHkxPVxcXCI0XFxcIiB5Mj1cXFwiNFxcXCI+PC9saW5lPiA8bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiNlxcXCIgeDI9XFxcIjE1XFxcIiB5MT1cXFwiOVxcXCIgeTI9XFxcIjlcXFwiPjwvbGluZT4gPGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjZcXFwiIHgyPVxcXCIxNVxcXCIgeTE9XFxcIjE0XFxcIiB5Mj1cXFwiMTRcXFwiPjwvbGluZT4gPGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjNcXFwiIHgyPVxcXCIzXFxcIiB5MT1cXFwiNFxcXCIgeTI9XFxcIjRcXFwiPjwvbGluZT4gPGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjNcXFwiIHgyPVxcXCIzXFxcIiB5MT1cXFwiOVxcXCIgeTI9XFxcIjlcXFwiPjwvbGluZT4gPGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjNcXFwiIHgyPVxcXCIzXFxcIiB5MT1cXFwiMTRcXFwiIHkyPVxcXCIxNFxcXCI+PC9saW5lPiA8L3N2Zz5cIjtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8c3ZnIGNsYXNzPVxcXCJcXFwiIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCI5XFxcIiB4Mj1cXFwiMTVcXFwiIHkxPVxcXCI0XFxcIiB5Mj1cXFwiNFxcXCI+PC9saW5lPiA8cG9seWxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgcG9pbnRzPVxcXCIzIDQgNCA1IDYgM1xcXCI+PC9wb2x5bGluZT4gPGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjlcXFwiIHgyPVxcXCIxNVxcXCIgeTE9XFxcIjE0XFxcIiB5Mj1cXFwiMTRcXFwiPjwvbGluZT4gPHBvbHlsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHBvaW50cz1cXFwiMyAxNCA0IDE1IDYgMTNcXFwiPjwvcG9seWxpbmU+IDxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCI5XFxcIiB4Mj1cXFwiMTVcXFwiIHkxPVxcXCI5XFxcIiB5Mj1cXFwiOVxcXCI+PC9saW5lPiA8cG9seWxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgcG9pbnRzPVxcXCIzIDkgNCAxMCA2IDhcXFwiPjwvcG9seWxpbmU+IDwvc3ZnPlwiO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjdcXFwiIHgyPVxcXCIxNVxcXCIgeTE9XFxcIjRcXFwiIHkyPVxcXCI0XFxcIj48L2xpbmU+IDxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCI3XFxcIiB4Mj1cXFwiMTVcXFwiIHkxPVxcXCI5XFxcIiB5Mj1cXFwiOVxcXCI+PC9saW5lPiA8bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlXFxcIiB4MT1cXFwiN1xcXCIgeDI9XFxcIjE1XFxcIiB5MT1cXFwiMTRcXFwiIHkyPVxcXCIxNFxcXCI+PC9saW5lPiA8bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlIHFsLXRoaW5cXFwiIHgxPVxcXCIyLjVcXFwiIHgyPVxcXCI0LjVcXFwiIHkxPVxcXCI1LjVcXFwiIHkyPVxcXCI1LjVcXFwiPjwvbGluZT4gPHBhdGggY2xhc3M9XFxcInFsLWZpbGxcXFwiIGQ9XFxcIk0zLjUsNkEwLjUsMC41LDAsMCwxLDMsNS41VjMuMDg1bC0wLjI3Ni4xMzhBMC41LDAuNSwwLDAsMSwyLjA1MywzYy0wLjEyNC0uMjQ3LTAuMDIzLTAuMzI0LjIyNC0wLjQ0N2wxLS41QTAuNSwwLjUsMCwwLDEsNCwyLjV2M0EwLjUsMC41LDAsMCwxLDMuNSw2WlxcXCI+PC9wYXRoPiA8cGF0aCBjbGFzcz1cXFwicWwtc3Ryb2tlIHFsLXRoaW5cXFwiIGQ9XFxcIk00LjUsMTAuNWgtMmMwLS4yMzQsMS44NS0xLjA3NiwxLjg1LTIuMjM0QTAuOTU5LDAuOTU5LDAsMCwwLDIuNSw4LjE1NlxcXCI+PC9wYXRoPiA8cGF0aCBjbGFzcz1cXFwicWwtc3Ryb2tlIHFsLXRoaW5cXFwiIGQ9XFxcIk0yLjUsMTQuODQ2YTAuOTU5LDAuOTU5LDAsMCwwLDEuODUtLjEwOUEwLjcsMC43LDAsMCwwLDMuNzUsMTRhMC42ODgsMC42ODgsMCwwLDAsLjYtMC43MzYsMC45NTksMC45NTksMCwwLDAtMS44NS0uMTA5XFxcIj48L3BhdGg+IDwvc3ZnPlwiO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjNcXFwiIHgyPVxcXCIxNVxcXCIgeTE9XFxcIjE0XFxcIiB5Mj1cXFwiMTRcXFwiPjwvbGluZT4gPGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgeDE9XFxcIjNcXFwiIHgyPVxcXCIxNVxcXCIgeTE9XFxcIjRcXFwiIHkyPVxcXCI0XFxcIj48L2xpbmU+IDxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIHgxPVxcXCI5XFxcIiB4Mj1cXFwiMTVcXFwiIHkxPVxcXCI5XFxcIiB5Mj1cXFwiOVxcXCI+PC9saW5lPiA8cG9seWxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgcG9pbnRzPVxcXCI1IDcgNSAxMSAzIDkgNSA3XFxcIj48L3BvbHlsaW5lPiA8L3N2Zz5cIjtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2UgcWwtdGhpblxcXCIgeDE9XFxcIjE1LjVcXFwiIHgyPVxcXCIyLjVcXFwiIHkxPVxcXCI4LjVcXFwiIHkyPVxcXCI5LjVcXFwiPjwvbGluZT4gPHBhdGggY2xhc3M9XFxcInFsLWZpbGxcXFwiIGQ9XFxcIk05LjAwNyw4QzYuNTQyLDcuNzkxLDYsNy41MTksNiw2LjUsNiw1Ljc5Miw3LjI4Myw1LDksNWMxLjU3MSwwLDIuNzY1LjY3OSwyLjk2OSwxLjMwOWExLDEsMCwwLDAsMS45LS42MTdDMTMuMzU2LDQuMTA2LDExLjM1NCwzLDksMyw2LjIsMyw0LDQuNTM4LDQsNi41YTMuMiwzLjIsMCwwLDAsLjUsMS44NDNaXFxcIj48L3BhdGg+IDxwYXRoIGNsYXNzPVxcXCJxbC1maWxsXFxcIiBkPVxcXCJNOC45ODQsMTBDMTEuNDU3LDEwLjIwOCwxMiwxMC40NzksMTIsMTEuNWMwLDAuNzA4LTEuMjgzLDEuNS0zLDEuNS0xLjU3MSwwLTIuNzY1LS42NzktMi45NjktMS4zMDlhMSwxLDAsMSwwLTEuOS42MTdDNC42NDQsMTMuODk0LDYuNjQ2LDE1LDksMTVjMi44LDAsNS0xLjUzOCw1LTMuNWEzLjIsMy4yLDAsMCwwLS41LTEuODQzWlxcXCI+PC9wYXRoPiA8L3N2Zz5cIjtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxwYXRoIGNsYXNzPVxcXCJxbC1maWxsXFxcIiBkPVxcXCJNMTUuNSwxNUgxMy44NjFhMy44NTgsMy44NTgsMCwwLDAsMS45MTQtMi45NzUsMS44LDEuOCwwLDAsMC0xLjYtMS43NTFBMS45MjEsMS45MjEsMCwwLDAsMTIuMDIxLDExLjdhMC41MDAxMywwLjUwMDEzLDAsMSwwLC45NTcuMjkxaDBhMC45MTQsMC45MTQsMCwwLDEsMS4wNTMtLjcyNSwwLjgxLDAuODEsMCwwLDEsLjc0NC43NjJjMCwxLjA3Ni0xLjE2OTcxLDEuODY5ODItMS45Mzk3MSwyLjQzMDgyQTEuNDU2MzksMS40NTYzOSwwLDAsMCwxMiwxNS41YTAuNSwwLjUsMCwwLDAsLjUuNWgzQTAuNSwwLjUsMCwwLDAsMTUuNSwxNVpcXFwiLz4gPHBhdGggY2xhc3M9XFxcInFsLWZpbGxcXFwiIGQ9XFxcIk05LjY1LDUuMjQxYTEsMSwwLDAsMC0xLjQwOS4xMDhMNiw3Ljk2NCwzLjc1OSw1LjM0OUExLDEsMCwwLDAsMi4xOTIsNi41OTE3OFEyLjIxNTQxLDYuNjIxMywyLjI0MSw2LjY0OUw0LjY4NCw5LjUsMi4yNDEsMTIuMzVBMSwxLDAsMCwwLDMuNzEsMTMuNzA3MjJxMC4wMjU1Ny0uMDI3NjguMDQ5LTAuMDU3MjJMNiwxMS4wMzYsOC4yNDEsMTMuNjVhMSwxLDAsMSwwLDEuNTY3LTEuMjQyNzdROS43ODQ1OSwxMi4zNzc3LDkuNzU5LDEyLjM1TDcuMzE2LDkuNSw5Ljc1OSw2LjY1MUExLDEsMCwwLDAsOS42NSw1LjI0MVpcXFwiLz4gPC9zdmc+XCI7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGNvZGU7IiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8cGF0aCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgZD1cXFwiTTE1LjUsN0gxMy44NjFhNC4wMTUsNC4wMTUsMCwwLDAsMS45MTQtMi45NzUsMS44LDEuOCwwLDAsMC0xLjYtMS43NTFBMS45MjIsMS45MjIsMCwwLDAsMTIuMDIxLDMuN2EwLjUsMC41LDAsMSwwLC45NTcuMjkxLDAuOTE3LDAuOTE3LDAsMCwxLDEuMDUzLS43MjUsMC44MSwwLjgxLDAsMCwxLC43NDQuNzYyYzAsMS4wNzctMS4xNjQsMS45MjUtMS45MzQsMi40ODZBMS40MjMsMS40MjMsMCwwLDAsMTIsNy41YTAuNSwwLjUsMCwwLDAsLjUuNWgzQTAuNSwwLjUsMCwwLDAsMTUuNSw3WlxcXCIvPiA8cGF0aCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgZD1cXFwiTTkuNjUxLDUuMjQxYTEsMSwwLDAsMC0xLjQxLjEwOEw2LDcuOTY0LDMuNzU5LDUuMzQ5YTEsMSwwLDEsMC0xLjUxOSwxLjNMNC42ODMsOS41LDIuMjQxLDEyLjM1YTEsMSwwLDEsMCwxLjUxOSwxLjNMNiwxMS4wMzYsOC4yNDEsMTMuNjVhMSwxLDAsMCwwLDEuNTE5LTEuM0w3LjMxNyw5LjUsOS43NTksNi42NTFBMSwxLDAsMCwwLDkuNjUxLDUuMjQxWlxcXCIvPiA8L3N2Zz5cIjtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxwYXRoIGNsYXNzPVxcXCJxbC1zdHJva2VcXFwiIGQ9XFxcIk01LDNWOWE0LjAxMiw0LjAxMiwwLDAsMCw0LDRIOWE0LjAxMiw0LjAxMiwwLDAsMCw0LTRWM1xcXCI+PC9wYXRoPiA8cmVjdCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgaGVpZ2h0PVxcXCIxXFxcIiByeD1cXFwiMC41XFxcIiByeT1cXFwiMC41XFxcIiB3aWR0aD1cXFwiMTJcXFwiIHg9XFxcIjNcXFwiIHk9XFxcIjE1XFxcIj48L3JlY3Q+IDwvc3ZnPlwiO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHJlY3QgY2xhc3M9XFxcInFsLXN0cm9rZVxcXCIgaGVpZ2h0PVxcXCIxMlxcXCIgd2lkdGg9XFxcIjEyXFxcIiB4PVxcXCIzXFxcIiB5PVxcXCIzXFxcIj48L3JlY3Q+IDxyZWN0IGNsYXNzPVxcXCJxbC1maWxsXFxcIiBoZWlnaHQ9XFxcIjEyXFxcIiB3aWR0aD1cXFwiMVxcXCIgeD1cXFwiNVxcXCIgeT1cXFwiM1xcXCI+PC9yZWN0PiA8cmVjdCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgaGVpZ2h0PVxcXCIxMlxcXCIgd2lkdGg9XFxcIjFcXFwiIHg9XFxcIjEyXFxcIiB5PVxcXCIzXFxcIj48L3JlY3Q+IDxyZWN0IGNsYXNzPVxcXCJxbC1maWxsXFxcIiBoZWlnaHQ9XFxcIjJcXFwiIHdpZHRoPVxcXCI4XFxcIiB4PVxcXCI1XFxcIiB5PVxcXCI4XFxcIj48L3JlY3Q+IDxyZWN0IGNsYXNzPVxcXCJxbC1maWxsXFxcIiBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIzXFxcIiB4PVxcXCIzXFxcIiB5PVxcXCI1XFxcIj48L3JlY3Q+IDxyZWN0IGNsYXNzPVxcXCJxbC1maWxsXFxcIiBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIzXFxcIiB4PVxcXCIzXFxcIiB5PVxcXCI3XFxcIj48L3JlY3Q+IDxyZWN0IGNsYXNzPVxcXCJxbC1maWxsXFxcIiBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIzXFxcIiB4PVxcXCIzXFxcIiB5PVxcXCIxMFxcXCI+PC9yZWN0PiA8cmVjdCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiM1xcXCIgeD1cXFwiM1xcXCIgeT1cXFwiMTJcXFwiPjwvcmVjdD4gPHJlY3QgY2xhc3M9XFxcInFsLWZpbGxcXFwiIGhlaWdodD1cXFwiMVxcXCIgd2lkdGg9XFxcIjNcXFwiIHg9XFxcIjEyXFxcIiB5PVxcXCI1XFxcIj48L3JlY3Q+IDxyZWN0IGNsYXNzPVxcXCJxbC1maWxsXFxcIiBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIzXFxcIiB4PVxcXCIxMlxcXCIgeT1cXFwiN1xcXCI+PC9yZWN0PiA8cmVjdCBjbGFzcz1cXFwicWwtZmlsbFxcXCIgaGVpZ2h0PVxcXCIxXFxcIiB3aWR0aD1cXFwiM1xcXCIgeD1cXFwiMTJcXFwiIHk9XFxcIjEwXFxcIj48L3JlY3Q+IDxyZWN0IGNsYXNzPVxcXCJxbC1maWxsXFxcIiBoZWlnaHQ9XFxcIjFcXFwiIHdpZHRoPVxcXCIzXFxcIiB4PVxcXCIxMlxcXCIgeT1cXFwiMTJcXFwiPjwvcmVjdD4gPC9zdmc+XCI7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGNvZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzVG9TdHJpbmdUYWcgPSByZXF1aXJlKCdoYXMtdG9zdHJpbmd0YWcvc2hhbXMnKSgpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcblxudmFyICR0b1N0cmluZyA9IGNhbGxCb3VuZCgnT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZycpO1xuXG52YXIgaXNTdGFuZGFyZEFyZ3VtZW50cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG5cdGlmIChoYXNUb1N0cmluZ1RhZyAmJiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWx1ZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gJHRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG59O1xuXG52YXIgaXNMZWdhY3lBcmd1bWVudHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuXHRpZiAoaXNTdGFuZGFyZEFyZ3VtZW50cyh2YWx1ZSkpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRyZXR1cm4gdmFsdWUgIT09IG51bGwgJiZcblx0XHR0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG5cdFx0dHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcicgJiZcblx0XHR2YWx1ZS5sZW5ndGggPj0gMCAmJlxuXHRcdCR0b1N0cmluZyh2YWx1ZSkgIT09ICdbb2JqZWN0IEFycmF5XScgJiZcblx0XHQkdG9TdHJpbmcodmFsdWUuY2FsbGVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG5cbnZhciBzdXBwb3J0c1N0YW5kYXJkQXJndW1lbnRzID0gKGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIGlzU3RhbmRhcmRBcmd1bWVudHMoYXJndW1lbnRzKTtcbn0oKSk7XG5cbmlzU3RhbmRhcmRBcmd1bWVudHMuaXNMZWdhY3lBcmd1bWVudHMgPSBpc0xlZ2FjeUFyZ3VtZW50czsgLy8gZm9yIHRlc3RzXG5cbm1vZHVsZS5leHBvcnRzID0gc3VwcG9ydHNTdGFuZGFyZEFyZ3VtZW50cyA/IGlzU3RhbmRhcmRBcmd1bWVudHMgOiBpc0xlZ2FjeUFyZ3VtZW50cztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGdldERheSA9IERhdGUucHJvdG90eXBlLmdldERheTtcbnZhciB0cnlEYXRlT2JqZWN0ID0gZnVuY3Rpb24gdHJ5RGF0ZUdldERheUNhbGwodmFsdWUpIHtcblx0dHJ5IHtcblx0XHRnZXREYXkuY2FsbCh2YWx1ZSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn07XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZGF0ZUNsYXNzID0gJ1tvYmplY3QgRGF0ZV0nO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gcmVxdWlyZSgnaGFzLXRvc3RyaW5ndGFnL3NoYW1zJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0RhdGVPYmplY3QodmFsdWUpIHtcblx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgdmFsdWUgPT09IG51bGwpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuIGhhc1RvU3RyaW5nVGFnID8gdHJ5RGF0ZU9iamVjdCh2YWx1ZSkgOiB0b1N0ci5jYWxsKHZhbHVlKSA9PT0gZGF0ZUNsYXNzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJ2hhcy10b3N0cmluZ3RhZy9zaGFtcycpKCk7XG52YXIgaGFzO1xudmFyICRleGVjO1xudmFyIGlzUmVnZXhNYXJrZXI7XG52YXIgYmFkU3RyaW5naWZpZXI7XG5cbmlmIChoYXNUb1N0cmluZ1RhZykge1xuXHRoYXMgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHknKTtcblx0JGV4ZWMgPSBjYWxsQm91bmQoJ1JlZ0V4cC5wcm90b3R5cGUuZXhlYycpO1xuXHRpc1JlZ2V4TWFya2VyID0ge307XG5cblx0dmFyIHRocm93UmVnZXhNYXJrZXIgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhyb3cgaXNSZWdleE1hcmtlcjtcblx0fTtcblx0YmFkU3RyaW5naWZpZXIgPSB7XG5cdFx0dG9TdHJpbmc6IHRocm93UmVnZXhNYXJrZXIsXG5cdFx0dmFsdWVPZjogdGhyb3dSZWdleE1hcmtlclxuXHR9O1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sLnRvUHJpbWl0aXZlID09PSAnc3ltYm9sJykge1xuXHRcdGJhZFN0cmluZ2lmaWVyW1N5bWJvbC50b1ByaW1pdGl2ZV0gPSB0aHJvd1JlZ2V4TWFya2VyO1xuXHR9XG59XG5cbnZhciAkdG9TdHJpbmcgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciByZWdleENsYXNzID0gJ1tvYmplY3QgUmVnRXhwXSc7XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzVG9TdHJpbmdUYWdcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5cdD8gZnVuY3Rpb24gaXNSZWdleCh2YWx1ZSkge1xuXHRcdGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHZhciBkZXNjcmlwdG9yID0gZ09QRCh2YWx1ZSwgJ2xhc3RJbmRleCcpO1xuXHRcdHZhciBoYXNMYXN0SW5kZXhEYXRhUHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGhhcyhkZXNjcmlwdG9yLCAndmFsdWUnKTtcblx0XHRpZiAoIWhhc0xhc3RJbmRleERhdGFQcm9wZXJ0eSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHRyeSB7XG5cdFx0XHQkZXhlYyh2YWx1ZSwgYmFkU3RyaW5naWZpZXIpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiBlID09PSBpc1JlZ2V4TWFya2VyO1xuXHRcdH1cblx0fVxuXHQ6IGZ1bmN0aW9uIGlzUmVnZXgodmFsdWUpIHtcblx0XHQvLyBJbiBvbGRlciBicm93c2VycywgdHlwZW9mIHJlZ2V4IGluY29ycmVjdGx5IHJldHVybnMgJ2Z1bmN0aW9uJ1xuXHRcdGlmICghdmFsdWUgfHwgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiAkdG9TdHJpbmcodmFsdWUpID09PSByZWdleENsYXNzO1xuXHR9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbnVtYmVySXNOYU4gPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXMoYSwgYikge1xuXHRpZiAoYSA9PT0gMCAmJiBiID09PSAwKSB7XG5cdFx0cmV0dXJuIDEgLyBhID09PSAxIC8gYjtcblx0fVxuXHRpZiAoYSA9PT0gYikge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdGlmIChudW1iZXJJc05hTihhKSAmJiBudW1iZXJJc05hTihiKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdHJldHVybiBmYWxzZTtcbn07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCdjYWxsLWJpbmQnKTtcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIHNoaW0gPSByZXF1aXJlKCcuL3NoaW0nKTtcblxudmFyIHBvbHlmaWxsID0gY2FsbEJpbmQoZ2V0UG9seWZpbGwoKSwgT2JqZWN0KTtcblxuZGVmaW5lKHBvbHlmaWxsLCB7XG5cdGdldFBvbHlmaWxsOiBnZXRQb2x5ZmlsbCxcblx0aW1wbGVtZW50YXRpb246IGltcGxlbWVudGF0aW9uLFxuXHRzaGltOiBzaGltXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBwb2x5ZmlsbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXR1cm4gdHlwZW9mIE9iamVjdC5pcyA9PT0gJ2Z1bmN0aW9uJyA/IE9iamVjdC5pcyA6IGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbU9iamVjdElzKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoT2JqZWN0LCB7IGlzOiBwb2x5ZmlsbCB9LCB7XG5cdFx0aXM6IGZ1bmN0aW9uIHRlc3RPYmplY3RJcygpIHtcblx0XHRcdHJldHVybiBPYmplY3QuaXMgIT09IHBvbHlmaWxsO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBrZXlzU2hpbTtcbmlmICghT2JqZWN0LmtleXMpIHtcblx0Ly8gbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW1cblx0dmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cdHZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cdHZhciBpc0FyZ3MgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZ2xvYmFsLXJlcXVpcmVcblx0dmFyIGlzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cdHZhciBoYXNEb250RW51bUJ1ZyA9ICFpc0VudW1lcmFibGUuY2FsbCh7IHRvU3RyaW5nOiBudWxsIH0sICd0b1N0cmluZycpO1xuXHR2YXIgaGFzUHJvdG9FbnVtQnVnID0gaXNFbnVtZXJhYmxlLmNhbGwoZnVuY3Rpb24gKCkge30sICdwcm90b3R5cGUnKTtcblx0dmFyIGRvbnRFbnVtcyA9IFtcblx0XHQndG9TdHJpbmcnLFxuXHRcdCd0b0xvY2FsZVN0cmluZycsXG5cdFx0J3ZhbHVlT2YnLFxuXHRcdCdoYXNPd25Qcm9wZXJ0eScsXG5cdFx0J2lzUHJvdG90eXBlT2YnLFxuXHRcdCdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG5cdFx0J2NvbnN0cnVjdG9yJ1xuXHRdO1xuXHR2YXIgZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUgPSBmdW5jdGlvbiAobykge1xuXHRcdHZhciBjdG9yID0gby5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gY3RvciAmJiBjdG9yLnByb3RvdHlwZSA9PT0gbztcblx0fTtcblx0dmFyIGV4Y2x1ZGVkS2V5cyA9IHtcblx0XHQkYXBwbGljYXRpb25DYWNoZTogdHJ1ZSxcblx0XHQkY29uc29sZTogdHJ1ZSxcblx0XHQkZXh0ZXJuYWw6IHRydWUsXG5cdFx0JGZyYW1lOiB0cnVlLFxuXHRcdCRmcmFtZUVsZW1lbnQ6IHRydWUsXG5cdFx0JGZyYW1lczogdHJ1ZSxcblx0XHQkaW5uZXJIZWlnaHQ6IHRydWUsXG5cdFx0JGlubmVyV2lkdGg6IHRydWUsXG5cdFx0JG9ubW96ZnVsbHNjcmVlbmNoYW5nZTogdHJ1ZSxcblx0XHQkb25tb3pmdWxsc2NyZWVuZXJyb3I6IHRydWUsXG5cdFx0JG91dGVySGVpZ2h0OiB0cnVlLFxuXHRcdCRvdXRlcldpZHRoOiB0cnVlLFxuXHRcdCRwYWdlWE9mZnNldDogdHJ1ZSxcblx0XHQkcGFnZVlPZmZzZXQ6IHRydWUsXG5cdFx0JHBhcmVudDogdHJ1ZSxcblx0XHQkc2Nyb2xsTGVmdDogdHJ1ZSxcblx0XHQkc2Nyb2xsVG9wOiB0cnVlLFxuXHRcdCRzY3JvbGxYOiB0cnVlLFxuXHRcdCRzY3JvbGxZOiB0cnVlLFxuXHRcdCRzZWxmOiB0cnVlLFxuXHRcdCR3ZWJraXRJbmRleGVkREI6IHRydWUsXG5cdFx0JHdlYmtpdFN0b3JhZ2VJbmZvOiB0cnVlLFxuXHRcdCR3aW5kb3c6IHRydWVcblx0fTtcblx0dmFyIGhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1ZyA9IChmdW5jdGlvbiAoKSB7XG5cdFx0LyogZ2xvYmFsIHdpbmRvdyAqL1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRmb3IgKHZhciBrIGluIHdpbmRvdykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0aWYgKCFleGNsdWRlZEtleXNbJyQnICsga10gJiYgaGFzLmNhbGwod2luZG93LCBrKSAmJiB3aW5kb3dba10gIT09IG51bGwgJiYgdHlwZW9mIHdpbmRvd1trXSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0ZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUod2luZG93W2tdKTtcblx0XHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSgpKTtcblx0dmFyIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneSA9IGZ1bmN0aW9uIChvKSB7XG5cdFx0LyogZ2xvYmFsIHdpbmRvdyAqL1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCAhaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnKSB7XG5cdFx0XHRyZXR1cm4gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUobyk7XG5cdFx0fVxuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUobyk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fTtcblxuXHRrZXlzU2hpbSA9IGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG5cdFx0dmFyIGlzT2JqZWN0ID0gb2JqZWN0ICE9PSBudWxsICYmIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnO1xuXHRcdHZhciBpc0Z1bmN0aW9uID0gdG9TdHIuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXHRcdHZhciBpc0FyZ3VtZW50cyA9IGlzQXJncyhvYmplY3QpO1xuXHRcdHZhciBpc1N0cmluZyA9IGlzT2JqZWN0ICYmIHRvU3RyLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgU3RyaW5nXSc7XG5cdFx0dmFyIHRoZUtleXMgPSBbXTtcblxuXHRcdGlmICghaXNPYmplY3QgJiYgIWlzRnVuY3Rpb24gJiYgIWlzQXJndW1lbnRzKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3Qua2V5cyBjYWxsZWQgb24gYSBub24tb2JqZWN0Jyk7XG5cdFx0fVxuXG5cdFx0dmFyIHNraXBQcm90byA9IGhhc1Byb3RvRW51bUJ1ZyAmJiBpc0Z1bmN0aW9uO1xuXHRcdGlmIChpc1N0cmluZyAmJiBvYmplY3QubGVuZ3RoID4gMCAmJiAhaGFzLmNhbGwob2JqZWN0LCAwKSkge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBvYmplY3QubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhpKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGlzQXJndW1lbnRzICYmIG9iamVjdC5sZW5ndGggPiAwKSB7XG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IG9iamVjdC5sZW5ndGg7ICsraikge1xuXHRcdFx0XHR0aGVLZXlzLnB1c2goU3RyaW5nKGopKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICh2YXIgbmFtZSBpbiBvYmplY3QpIHtcblx0XHRcdFx0aWYgKCEoc2tpcFByb3RvICYmIG5hbWUgPT09ICdwcm90b3R5cGUnKSAmJiBoYXMuY2FsbChvYmplY3QsIG5hbWUpKSB7XG5cdFx0XHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhuYW1lKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoaGFzRG9udEVudW1CdWcpIHtcblx0XHRcdHZhciBza2lwQ29uc3RydWN0b3IgPSBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kob2JqZWN0KTtcblxuXHRcdFx0Zm9yICh2YXIgayA9IDA7IGsgPCBkb250RW51bXMubGVuZ3RoOyArK2spIHtcblx0XHRcdFx0aWYgKCEoc2tpcENvbnN0cnVjdG9yICYmIGRvbnRFbnVtc1trXSA9PT0gJ2NvbnN0cnVjdG9yJykgJiYgaGFzLmNhbGwob2JqZWN0LCBkb250RW51bXNba10pKSB7XG5cdFx0XHRcdFx0dGhlS2V5cy5wdXNoKGRvbnRFbnVtc1trXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRoZUtleXM7XG5cdH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGtleXNTaGltO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgaXNBcmdzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpO1xuXG52YXIgb3JpZ0tleXMgPSBPYmplY3Qua2V5cztcbnZhciBrZXlzU2hpbSA9IG9yaWdLZXlzID8gZnVuY3Rpb24ga2V5cyhvKSB7IHJldHVybiBvcmlnS2V5cyhvKTsgfSA6IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxudmFyIG9yaWdpbmFsS2V5cyA9IE9iamVjdC5rZXlzO1xuXG5rZXlzU2hpbS5zaGltID0gZnVuY3Rpb24gc2hpbU9iamVjdEtleXMoKSB7XG5cdGlmIChPYmplY3Qua2V5cykge1xuXHRcdHZhciBrZXlzV29ya3NXaXRoQXJndW1lbnRzID0gKGZ1bmN0aW9uICgpIHtcblx0XHRcdC8vIFNhZmFyaSA1LjAgYnVnXG5cdFx0XHR2YXIgYXJncyA9IE9iamVjdC5rZXlzKGFyZ3VtZW50cyk7XG5cdFx0XHRyZXR1cm4gYXJncyAmJiBhcmdzLmxlbmd0aCA9PT0gYXJndW1lbnRzLmxlbmd0aDtcblx0XHR9KDEsIDIpKTtcblx0XHRpZiAoIWtleXNXb3Jrc1dpdGhBcmd1bWVudHMpIHtcblx0XHRcdE9iamVjdC5rZXlzID0gZnVuY3Rpb24ga2V5cyhvYmplY3QpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmdW5jLW5hbWUtbWF0Y2hpbmdcblx0XHRcdFx0aWYgKGlzQXJncyhvYmplY3QpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9yaWdpbmFsS2V5cyhzbGljZS5jYWxsKG9iamVjdCkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBvcmlnaW5hbEtleXMob2JqZWN0KTtcblx0XHRcdH07XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdE9iamVjdC5rZXlzID0ga2V5c1NoaW07XG5cdH1cblx0cmV0dXJuIE9iamVjdC5rZXlzIHx8IGtleXNTaGltO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBrZXlzU2hpbTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuXHR2YXIgc3RyID0gdG9TdHIuY2FsbCh2YWx1ZSk7XG5cdHZhciBpc0FyZ3MgPSBzdHIgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXHRpZiAoIWlzQXJncykge1xuXHRcdGlzQXJncyA9IHN0ciAhPT0gJ1tvYmplY3QgQXJyYXldJyAmJlxuXHRcdFx0dmFsdWUgIT09IG51bGwgJiZcblx0XHRcdHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcblx0XHRcdHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInICYmXG5cdFx0XHR2YWx1ZS5sZW5ndGggPj0gMCAmJlxuXHRcdFx0dG9TdHIuY2FsbCh2YWx1ZS5jYWxsZWUpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXHR9XG5cdHJldHVybiBpc0FyZ3M7XG59O1xuIiwiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiUGFyY2htZW50XCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIlBhcmNobWVudFwiXSA9IGZhY3RvcnkoKTtcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gOSk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBQYXJjaG1lbnRFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUGFyY2htZW50RXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUGFyY2htZW50RXJyb3IobWVzc2FnZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBtZXNzYWdlID0gJ1tQYXJjaG1lbnRdICcgKyBtZXNzYWdlO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1lc3NhZ2UpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICBfdGhpcy5uYW1lID0gX3RoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gUGFyY2htZW50RXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnRzLlBhcmNobWVudEVycm9yID0gUGFyY2htZW50RXJyb3I7XG52YXIgYXR0cmlidXRlcyA9IHt9O1xudmFyIGNsYXNzZXMgPSB7fTtcbnZhciB0YWdzID0ge307XG52YXIgdHlwZXMgPSB7fTtcbmV4cG9ydHMuREFUQV9LRVkgPSAnX19ibG90JztcbnZhciBTY29wZTtcbihmdW5jdGlvbiAoU2NvcGUpIHtcbiAgICBTY29wZVtTY29wZVtcIlRZUEVcIl0gPSAzXSA9IFwiVFlQRVwiO1xuICAgIFNjb3BlW1Njb3BlW1wiTEVWRUxcIl0gPSAxMl0gPSBcIkxFVkVMXCI7XG4gICAgU2NvcGVbU2NvcGVbXCJBVFRSSUJVVEVcIl0gPSAxM10gPSBcIkFUVFJJQlVURVwiO1xuICAgIFNjb3BlW1Njb3BlW1wiQkxPVFwiXSA9IDE0XSA9IFwiQkxPVFwiO1xuICAgIFNjb3BlW1Njb3BlW1wiSU5MSU5FXCJdID0gN10gPSBcIklOTElORVwiO1xuICAgIFNjb3BlW1Njb3BlW1wiQkxPQ0tcIl0gPSAxMV0gPSBcIkJMT0NLXCI7XG4gICAgU2NvcGVbU2NvcGVbXCJCTE9DS19CTE9UXCJdID0gMTBdID0gXCJCTE9DS19CTE9UXCI7XG4gICAgU2NvcGVbU2NvcGVbXCJJTkxJTkVfQkxPVFwiXSA9IDZdID0gXCJJTkxJTkVfQkxPVFwiO1xuICAgIFNjb3BlW1Njb3BlW1wiQkxPQ0tfQVRUUklCVVRFXCJdID0gOV0gPSBcIkJMT0NLX0FUVFJJQlVURVwiO1xuICAgIFNjb3BlW1Njb3BlW1wiSU5MSU5FX0FUVFJJQlVURVwiXSA9IDVdID0gXCJJTkxJTkVfQVRUUklCVVRFXCI7XG4gICAgU2NvcGVbU2NvcGVbXCJBTllcIl0gPSAxNV0gPSBcIkFOWVwiO1xufSkoU2NvcGUgPSBleHBvcnRzLlNjb3BlIHx8IChleHBvcnRzLlNjb3BlID0ge30pKTtcbmZ1bmN0aW9uIGNyZWF0ZShpbnB1dCwgdmFsdWUpIHtcbiAgICB2YXIgbWF0Y2ggPSBxdWVyeShpbnB1dCk7XG4gICAgaWYgKG1hdGNoID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IFBhcmNobWVudEVycm9yKFwiVW5hYmxlIHRvIGNyZWF0ZSBcIiArIGlucHV0ICsgXCIgYmxvdFwiKTtcbiAgICB9XG4gICAgdmFyIEJsb3RDbGFzcyA9IG1hdGNoO1xuICAgIHZhciBub2RlID0gXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlucHV0IGluc3RhbmNlb2YgTm9kZSB8fCBpbnB1dFsnbm9kZVR5cGUnXSA9PT0gTm9kZS5URVhUX05PREUgPyBpbnB1dCA6IEJsb3RDbGFzcy5jcmVhdGUodmFsdWUpO1xuICAgIHJldHVybiBuZXcgQmxvdENsYXNzKG5vZGUsIHZhbHVlKTtcbn1cbmV4cG9ydHMuY3JlYXRlID0gY3JlYXRlO1xuZnVuY3Rpb24gZmluZChub2RlLCBidWJibGUpIHtcbiAgICBpZiAoYnViYmxlID09PSB2b2lkIDApIHsgYnViYmxlID0gZmFsc2U7IH1cbiAgICBpZiAobm9kZSA9PSBudWxsKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKG5vZGVbZXhwb3J0cy5EQVRBX0tFWV0gIT0gbnVsbClcbiAgICAgICAgcmV0dXJuIG5vZGVbZXhwb3J0cy5EQVRBX0tFWV0uYmxvdDtcbiAgICBpZiAoYnViYmxlKVxuICAgICAgICByZXR1cm4gZmluZChub2RlLnBhcmVudE5vZGUsIGJ1YmJsZSk7XG4gICAgcmV0dXJuIG51bGw7XG59XG5leHBvcnRzLmZpbmQgPSBmaW5kO1xuZnVuY3Rpb24gcXVlcnkocXVlcnksIHNjb3BlKSB7XG4gICAgaWYgKHNjb3BlID09PSB2b2lkIDApIHsgc2NvcGUgPSBTY29wZS5BTlk7IH1cbiAgICB2YXIgbWF0Y2g7XG4gICAgaWYgKHR5cGVvZiBxdWVyeSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWF0Y2ggPSB0eXBlc1txdWVyeV0gfHwgYXR0cmlidXRlc1txdWVyeV07XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICB9XG4gICAgZWxzZSBpZiAocXVlcnkgaW5zdGFuY2VvZiBUZXh0IHx8IHF1ZXJ5Wydub2RlVHlwZSddID09PSBOb2RlLlRFWFRfTk9ERSkge1xuICAgICAgICBtYXRjaCA9IHR5cGVzWyd0ZXh0J107XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBxdWVyeSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKHF1ZXJ5ICYgU2NvcGUuTEVWRUwgJiBTY29wZS5CTE9DSykge1xuICAgICAgICAgICAgbWF0Y2ggPSB0eXBlc1snYmxvY2snXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChxdWVyeSAmIFNjb3BlLkxFVkVMICYgU2NvcGUuSU5MSU5FKSB7XG4gICAgICAgICAgICBtYXRjaCA9IHR5cGVzWydpbmxpbmUnXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChxdWVyeSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgIHZhciBuYW1lcyA9IChxdWVyeS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpLnNwbGl0KC9cXHMrLyk7XG4gICAgICAgIGZvciAodmFyIGkgaW4gbmFtZXMpIHtcbiAgICAgICAgICAgIG1hdGNoID0gY2xhc3Nlc1tuYW1lc1tpXV07XG4gICAgICAgICAgICBpZiAobWF0Y2gpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbWF0Y2ggPSBtYXRjaCB8fCB0YWdzW3F1ZXJ5LnRhZ05hbWVdO1xuICAgIH1cbiAgICBpZiAobWF0Y2ggPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlmIChzY29wZSAmIFNjb3BlLkxFVkVMICYgbWF0Y2guc2NvcGUgJiYgc2NvcGUgJiBTY29wZS5UWVBFICYgbWF0Y2guc2NvcGUpXG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICByZXR1cm4gbnVsbDtcbn1cbmV4cG9ydHMucXVlcnkgPSBxdWVyeTtcbmZ1bmN0aW9uIHJlZ2lzdGVyKCkge1xuICAgIHZhciBEZWZpbml0aW9ucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIERlZmluaXRpb25zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIGlmIChEZWZpbml0aW9ucy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHJldHVybiBEZWZpbml0aW9ucy5tYXAoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgIHJldHVybiByZWdpc3RlcihkKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBEZWZpbml0aW9uID0gRGVmaW5pdGlvbnNbMF07XG4gICAgaWYgKHR5cGVvZiBEZWZpbml0aW9uLmJsb3ROYW1lICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgRGVmaW5pdGlvbi5hdHRyTmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IFBhcmNobWVudEVycm9yKCdJbnZhbGlkIGRlZmluaXRpb24nKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoRGVmaW5pdGlvbi5ibG90TmFtZSA9PT0gJ2Fic3RyYWN0Jykge1xuICAgICAgICB0aHJvdyBuZXcgUGFyY2htZW50RXJyb3IoJ0Nhbm5vdCByZWdpc3RlciBhYnN0cmFjdCBjbGFzcycpO1xuICAgIH1cbiAgICB0eXBlc1tEZWZpbml0aW9uLmJsb3ROYW1lIHx8IERlZmluaXRpb24uYXR0ck5hbWVdID0gRGVmaW5pdGlvbjtcbiAgICBpZiAodHlwZW9mIERlZmluaXRpb24ua2V5TmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYXR0cmlidXRlc1tEZWZpbml0aW9uLmtleU5hbWVdID0gRGVmaW5pdGlvbjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChEZWZpbml0aW9uLmNsYXNzTmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjbGFzc2VzW0RlZmluaXRpb24uY2xhc3NOYW1lXSA9IERlZmluaXRpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKERlZmluaXRpb24udGFnTmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShEZWZpbml0aW9uLnRhZ05hbWUpKSB7XG4gICAgICAgICAgICAgICAgRGVmaW5pdGlvbi50YWdOYW1lID0gRGVmaW5pdGlvbi50YWdOYW1lLm1hcChmdW5jdGlvbiAodGFnTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFnTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgRGVmaW5pdGlvbi50YWdOYW1lID0gRGVmaW5pdGlvbi50YWdOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdGFnTmFtZXMgPSBBcnJheS5pc0FycmF5KERlZmluaXRpb24udGFnTmFtZSkgPyBEZWZpbml0aW9uLnRhZ05hbWUgOiBbRGVmaW5pdGlvbi50YWdOYW1lXTtcbiAgICAgICAgICAgIHRhZ05hbWVzLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgICAgICAgICAgIGlmICh0YWdzW3RhZ10gPT0gbnVsbCB8fCBEZWZpbml0aW9uLmNsYXNzTmFtZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhZ3NbdGFnXSA9IERlZmluaXRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIERlZmluaXRpb247XG59XG5leHBvcnRzLnJlZ2lzdGVyID0gcmVnaXN0ZXI7XG5cblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIEF0dHJpYnV0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXR0cmlidXRvcihhdHRyTmFtZSwga2V5TmFtZSwgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB0aGlzLmF0dHJOYW1lID0gYXR0ck5hbWU7XG4gICAgICAgIHRoaXMua2V5TmFtZSA9IGtleU5hbWU7XG4gICAgICAgIHZhciBhdHRyaWJ1dGVCaXQgPSBSZWdpc3RyeS5TY29wZS5UWVBFICYgUmVnaXN0cnkuU2NvcGUuQVRUUklCVVRFO1xuICAgICAgICBpZiAob3B0aW9ucy5zY29wZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBJZ25vcmUgdHlwZSBiaXRzLCBmb3JjZSBhdHRyaWJ1dGUgYml0XG4gICAgICAgICAgICB0aGlzLnNjb3BlID0gKG9wdGlvbnMuc2NvcGUgJiBSZWdpc3RyeS5TY29wZS5MRVZFTCkgfCBhdHRyaWJ1dGVCaXQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNjb3BlID0gUmVnaXN0cnkuU2NvcGUuQVRUUklCVVRFO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLndoaXRlbGlzdCAhPSBudWxsKVxuICAgICAgICAgICAgdGhpcy53aGl0ZWxpc3QgPSBvcHRpb25zLndoaXRlbGlzdDtcbiAgICB9XG4gICAgQXR0cmlidXRvci5rZXlzID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIFtdLm1hcC5jYWxsKG5vZGUuYXR0cmlidXRlcywgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtLm5hbWU7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQXR0cmlidXRvci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKG5vZGUsIHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5jYW5BZGQobm9kZSwgdmFsdWUpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSh0aGlzLmtleU5hbWUsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBBdHRyaWJ1dG9yLnByb3RvdHlwZS5jYW5BZGQgPSBmdW5jdGlvbiAobm9kZSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gUmVnaXN0cnkucXVlcnkobm9kZSwgUmVnaXN0cnkuU2NvcGUuQkxPVCAmICh0aGlzLnNjb3BlIHwgUmVnaXN0cnkuU2NvcGUuVFlQRSkpO1xuICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMud2hpdGVsaXN0ID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndoaXRlbGlzdC5pbmRleE9mKHZhbHVlLnJlcGxhY2UoL1tcIiddL2csICcnKSkgPiAtMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndoaXRlbGlzdC5pbmRleE9mKHZhbHVlKSA+IC0xO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBdHRyaWJ1dG9yLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmtleU5hbWUpO1xuICAgIH07XG4gICAgQXR0cmlidXRvci5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBub2RlLmdldEF0dHJpYnV0ZSh0aGlzLmtleU5hbWUpO1xuICAgICAgICBpZiAodGhpcy5jYW5BZGQobm9kZSwgdmFsdWUpICYmIHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH07XG4gICAgcmV0dXJuIEF0dHJpYnV0b3I7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gQXR0cmlidXRvcjtcblxuXG4vKioqLyB9KSxcbi8qIDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGxpbmtlZF9saXN0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcbnZhciBzaGFkb3dfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIENvbnRhaW5lckJsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvbnRhaW5lckJsb3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29udGFpbmVyQmxvdChkb21Ob2RlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRvbU5vZGUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmJ1aWxkKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuYXBwZW5kQ2hpbGQgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICAgICAgdGhpcy5pbnNlcnRCZWZvcmUob3RoZXIpO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuYXR0YWNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmF0dGFjaC5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICBjaGlsZC5hdHRhY2goKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IG5ldyBsaW5rZWRfbGlzdF8xLmRlZmF1bHQoKTtcbiAgICAgICAgLy8gTmVlZCB0byBiZSByZXZlcnNlZCBmb3IgaWYgRE9NIG5vZGVzIGFscmVhZHkgaW4gb3JkZXJcbiAgICAgICAgW10uc2xpY2VcbiAgICAgICAgICAgIC5jYWxsKHRoaXMuZG9tTm9kZS5jaGlsZE5vZGVzKVxuICAgICAgICAgICAgLnJldmVyc2UoKVxuICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gbWFrZUJsb3Qobm9kZSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuaW5zZXJ0QmVmb3JlKGNoaWxkLCBfdGhpcy5jaGlsZHJlbi5oZWFkIHx8IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFJlZ2lzdHJ5LlBhcmNobWVudEVycm9yKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuZGVsZXRlQXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICAgICAgICBpZiAoaW5kZXggPT09IDAgJiYgbGVuZ3RoID09PSB0aGlzLmxlbmd0aCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2hBdChpbmRleCwgbGVuZ3RoLCBmdW5jdGlvbiAoY2hpbGQsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBjaGlsZC5kZWxldGVBdChvZmZzZXQsIGxlbmd0aCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuZGVzY2VuZGFudCA9IGZ1bmN0aW9uIChjcml0ZXJpYSwgaW5kZXgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5jaGlsZHJlbi5maW5kKGluZGV4KSwgY2hpbGQgPSBfYVswXSwgb2Zmc2V0ID0gX2FbMV07XG4gICAgICAgIGlmICgoY3JpdGVyaWEuYmxvdE5hbWUgPT0gbnVsbCAmJiBjcml0ZXJpYShjaGlsZCkpIHx8XG4gICAgICAgICAgICAoY3JpdGVyaWEuYmxvdE5hbWUgIT0gbnVsbCAmJiBjaGlsZCBpbnN0YW5jZW9mIGNyaXRlcmlhKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtjaGlsZCwgb2Zmc2V0XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjaGlsZCBpbnN0YW5jZW9mIENvbnRhaW5lckJsb3QpIHtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZC5kZXNjZW5kYW50KGNyaXRlcmlhLCBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFtudWxsLCAtMV07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmRlc2NlbmRhbnRzID0gZnVuY3Rpb24gKGNyaXRlcmlhLCBpbmRleCwgbGVuZ3RoKSB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7IGluZGV4ID0gMDsgfVxuICAgICAgICBpZiAobGVuZ3RoID09PSB2b2lkIDApIHsgbGVuZ3RoID0gTnVtYmVyLk1BWF9WQUxVRTsgfVxuICAgICAgICB2YXIgZGVzY2VuZGFudHMgPSBbXTtcbiAgICAgICAgdmFyIGxlbmd0aExlZnQgPSBsZW5ndGg7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaEF0KGluZGV4LCBsZW5ndGgsIGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgsIGxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKChjcml0ZXJpYS5ibG90TmFtZSA9PSBudWxsICYmIGNyaXRlcmlhKGNoaWxkKSkgfHxcbiAgICAgICAgICAgICAgICAoY3JpdGVyaWEuYmxvdE5hbWUgIT0gbnVsbCAmJiBjaGlsZCBpbnN0YW5jZW9mIGNyaXRlcmlhKSkge1xuICAgICAgICAgICAgICAgIGRlc2NlbmRhbnRzLnB1c2goY2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgQ29udGFpbmVyQmxvdCkge1xuICAgICAgICAgICAgICAgIGRlc2NlbmRhbnRzID0gZGVzY2VuZGFudHMuY29uY2F0KGNoaWxkLmRlc2NlbmRhbnRzKGNyaXRlcmlhLCBpbmRleCwgbGVuZ3RoTGVmdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGVuZ3RoTGVmdCAtPSBsZW5ndGg7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGVzY2VuZGFudHM7XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5kZXRhY2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgIGNoaWxkLmRldGFjaCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kZXRhY2guY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmZvcm1hdEF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaEF0KGluZGV4LCBsZW5ndGgsIGZ1bmN0aW9uIChjaGlsZCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGNoaWxkLmZvcm1hdEF0KG9mZnNldCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuaW5zZXJ0QXQgPSBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlLCBkZWYpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5jaGlsZHJlbi5maW5kKGluZGV4KSwgY2hpbGQgPSBfYVswXSwgb2Zmc2V0ID0gX2FbMV07XG4gICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgICAgY2hpbGQuaW5zZXJ0QXQob2Zmc2V0LCB2YWx1ZSwgZGVmKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBibG90ID0gZGVmID09IG51bGwgPyBSZWdpc3RyeS5jcmVhdGUoJ3RleHQnLCB2YWx1ZSkgOiBSZWdpc3RyeS5jcmVhdGUodmFsdWUsIGRlZik7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKGJsb3QpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5pbnNlcnRCZWZvcmUgPSBmdW5jdGlvbiAoY2hpbGRCbG90LCByZWZCbG90KSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRpY3MuYWxsb3dlZENoaWxkcmVuICE9IG51bGwgJiZcbiAgICAgICAgICAgICF0aGlzLnN0YXRpY3MuYWxsb3dlZENoaWxkcmVuLnNvbWUoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkQmxvdCBpbnN0YW5jZW9mIGNoaWxkO1xuICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZWdpc3RyeS5QYXJjaG1lbnRFcnJvcihcIkNhbm5vdCBpbnNlcnQgXCIgKyBjaGlsZEJsb3Quc3RhdGljcy5ibG90TmFtZSArIFwiIGludG8gXCIgKyB0aGlzLnN0YXRpY3MuYmxvdE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGNoaWxkQmxvdC5pbnNlcnRJbnRvKHRoaXMsIHJlZkJsb3QpO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUubGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGNoaWxkKSB7XG4gICAgICAgICAgICByZXR1cm4gbWVtbyArIGNoaWxkLmxlbmd0aCgpO1xuICAgICAgICB9LCAwKTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLm1vdmVDaGlsZHJlbiA9IGZ1bmN0aW9uICh0YXJnZXRQYXJlbnQsIHJlZk5vZGUpIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgdGFyZ2V0UGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgcmVmTm9kZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUub3B0aW1pemUgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm9wdGltaXplLmNhbGwodGhpcywgY29udGV4dCk7XG4gICAgICAgIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGljcy5kZWZhdWx0Q2hpbGQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IFJlZ2lzdHJ5LmNyZWF0ZSh0aGlzLnN0YXRpY3MuZGVmYXVsdENoaWxkKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgICAgICBjaGlsZC5vcHRpbWl6ZShjb250ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLnBhdGggPSBmdW5jdGlvbiAoaW5kZXgsIGluY2x1c2l2ZSkge1xuICAgICAgICBpZiAoaW5jbHVzaXZlID09PSB2b2lkIDApIHsgaW5jbHVzaXZlID0gZmFsc2U7IH1cbiAgICAgICAgdmFyIF9hID0gdGhpcy5jaGlsZHJlbi5maW5kKGluZGV4LCBpbmNsdXNpdmUpLCBjaGlsZCA9IF9hWzBdLCBvZmZzZXQgPSBfYVsxXTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gW1t0aGlzLCBpbmRleF1dO1xuICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBDb250YWluZXJCbG90KSB7XG4gICAgICAgICAgICByZXR1cm4gcG9zaXRpb24uY29uY2F0KGNoaWxkLnBhdGgob2Zmc2V0LCBpbmNsdXNpdmUpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjaGlsZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBwb3NpdGlvbi5wdXNoKFtjaGlsZCwgb2Zmc2V0XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBvc2l0aW9uO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5yZW1vdmUoY2hpbGQpO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIENvbnRhaW5lckJsb3QpIHtcbiAgICAgICAgICAgIHRhcmdldC5tb3ZlQ2hpbGRyZW4odGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5yZXBsYWNlLmNhbGwodGhpcywgdGFyZ2V0KTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gKGluZGV4LCBmb3JjZSkge1xuICAgICAgICBpZiAoZm9yY2UgPT09IHZvaWQgMCkgeyBmb3JjZSA9IGZhbHNlOyB9XG4gICAgICAgIGlmICghZm9yY2UpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gdGhpcy5sZW5ndGgoKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBhZnRlciA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKGFmdGVyLCB0aGlzLm5leHQpO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2hBdChpbmRleCwgdGhpcy5sZW5ndGgoKSwgZnVuY3Rpb24gKGNoaWxkLCBvZmZzZXQsIGxlbmd0aCkge1xuICAgICAgICAgICAgY2hpbGQgPSBjaGlsZC5zcGxpdChvZmZzZXQsIGZvcmNlKTtcbiAgICAgICAgICAgIGFmdGVyLmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhZnRlcjtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLnVud3JhcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5tb3ZlQ2hpbGRyZW4odGhpcy5wYXJlbnQsIHRoaXMubmV4dCk7XG4gICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAobXV0YXRpb25zLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBhZGRlZE5vZGVzID0gW107XG4gICAgICAgIHZhciByZW1vdmVkTm9kZXMgPSBbXTtcbiAgICAgICAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICAgICAgICBpZiAobXV0YXRpb24udGFyZ2V0ID09PSBfdGhpcy5kb21Ob2RlICYmIG11dGF0aW9uLnR5cGUgPT09ICdjaGlsZExpc3QnKSB7XG4gICAgICAgICAgICAgICAgYWRkZWROb2Rlcy5wdXNoLmFwcGx5KGFkZGVkTm9kZXMsIG11dGF0aW9uLmFkZGVkTm9kZXMpO1xuICAgICAgICAgICAgICAgIHJlbW92ZWROb2Rlcy5wdXNoLmFwcGx5KHJlbW92ZWROb2RlcywgbXV0YXRpb24ucmVtb3ZlZE5vZGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJlbW92ZWROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAvLyBDaGVjayBub2RlIGhhcyBhY3R1YWxseSBiZWVuIHJlbW92ZWRcbiAgICAgICAgICAgIC8vIE9uZSBleGNlcHRpb24gaXMgQ2hyb21lIGRvZXMgbm90IGltbWVkaWF0ZWx5IHJlbW92ZSBJRlJBTUVzXG4gICAgICAgICAgICAvLyBmcm9tIERPTSBidXQgTXV0YXRpb25SZWNvcmQgaXMgY29ycmVjdCBpbiBpdHMgcmVwb3J0ZWQgcmVtb3ZhbFxuICAgICAgICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIG5vZGUudGFnTmFtZSAhPT0gJ0lGUkFNRScgJiZcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG5vZGUpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9DT05UQUlORURfQlkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYmxvdCA9IFJlZ2lzdHJ5LmZpbmQobm9kZSk7XG4gICAgICAgICAgICBpZiAoYmxvdCA9PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGlmIChibG90LmRvbU5vZGUucGFyZW50Tm9kZSA9PSBudWxsIHx8IGJsb3QuZG9tTm9kZS5wYXJlbnROb2RlID09PSBfdGhpcy5kb21Ob2RlKSB7XG4gICAgICAgICAgICAgICAgYmxvdC5kZXRhY2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGFkZGVkTm9kZXNcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlLnBhcmVudE5vZGUgPT0gX3RoaXMuZG9tTm9kZTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICBpZiAoYSA9PT0gYilcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIGlmIChhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICB2YXIgcmVmQmxvdCA9IG51bGw7XG4gICAgICAgICAgICBpZiAobm9kZS5uZXh0U2libGluZyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVmQmxvdCA9IFJlZ2lzdHJ5LmZpbmQobm9kZS5uZXh0U2libGluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYmxvdCA9IG1ha2VCbG90KG5vZGUpO1xuICAgICAgICAgICAgaWYgKGJsb3QubmV4dCAhPSByZWZCbG90IHx8IGJsb3QubmV4dCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJsb3QucGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgYmxvdC5wYXJlbnQucmVtb3ZlQ2hpbGQoX3RoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5pbnNlcnRCZWZvcmUoYmxvdCwgcmVmQmxvdCB8fCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBDb250YWluZXJCbG90O1xufShzaGFkb3dfMS5kZWZhdWx0KSk7XG5mdW5jdGlvbiBtYWtlQmxvdChub2RlKSB7XG4gICAgdmFyIGJsb3QgPSBSZWdpc3RyeS5maW5kKG5vZGUpO1xuICAgIGlmIChibG90ID09IG51bGwpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGJsb3QgPSBSZWdpc3RyeS5jcmVhdGUobm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGJsb3QgPSBSZWdpc3RyeS5jcmVhdGUoUmVnaXN0cnkuU2NvcGUuSU5MSU5FKTtcbiAgICAgICAgICAgIFtdLnNsaWNlLmNhbGwobm9kZS5jaGlsZE5vZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBibG90LmRvbU5vZGUuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChibG90LmRvbU5vZGUsIG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmxvdC5hdHRhY2goKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYmxvdDtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IENvbnRhaW5lckJsb3Q7XG5cblxuLyoqKi8gfSksXG4vKiAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBhdHRyaWJ1dG9yXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIHN0b3JlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xudmFyIGNvbnRhaW5lcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbnZhciBSZWdpc3RyeSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgRm9ybWF0QmxvdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRm9ybWF0QmxvdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGb3JtYXRCbG90KGRvbU5vZGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZG9tTm9kZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYXR0cmlidXRlcyA9IG5ldyBzdG9yZV8xLmRlZmF1bHQoX3RoaXMuZG9tTm9kZSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRm9ybWF0QmxvdC5mb3JtYXRzID0gZnVuY3Rpb24gKGRvbU5vZGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnRhZ05hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRoaXMudGFnTmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBkb21Ob2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgRm9ybWF0QmxvdC5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSBSZWdpc3RyeS5xdWVyeShuYW1lKTtcbiAgICAgICAgaWYgKGZvcm1hdCBpbnN0YW5jZW9mIGF0dHJpYnV0b3JfMS5kZWZhdWx0KSB7XG4gICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuYXR0cmlidXRlKGZvcm1hdCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ICE9IG51bGwgJiYgKG5hbWUgIT09IHRoaXMuc3RhdGljcy5ibG90TmFtZSB8fCB0aGlzLmZvcm1hdHMoKVtuYW1lXSAhPT0gdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXBsYWNlV2l0aChuYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEZvcm1hdEJsb3QucHJvdG90eXBlLmZvcm1hdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBmb3JtYXRzID0gdGhpcy5hdHRyaWJ1dGVzLnZhbHVlcygpO1xuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5zdGF0aWNzLmZvcm1hdHModGhpcy5kb21Ob2RlKTtcbiAgICAgICAgaWYgKGZvcm1hdCAhPSBudWxsKSB7XG4gICAgICAgICAgICBmb3JtYXRzW3RoaXMuc3RhdGljcy5ibG90TmFtZV0gPSBmb3JtYXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvcm1hdHM7XG4gICAgfTtcbiAgICBGb3JtYXRCbG90LnByb3RvdHlwZS5yZXBsYWNlV2l0aCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBfc3VwZXIucHJvdG90eXBlLnJlcGxhY2VXaXRoLmNhbGwodGhpcywgbmFtZSwgdmFsdWUpO1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuY29weShyZXBsYWNlbWVudCk7XG4gICAgICAgIHJldHVybiByZXBsYWNlbWVudDtcbiAgICB9O1xuICAgIEZvcm1hdEJsb3QucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChtdXRhdGlvbnMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51cGRhdGUuY2FsbCh0aGlzLCBtdXRhdGlvbnMsIGNvbnRleHQpO1xuICAgICAgICBpZiAobXV0YXRpb25zLnNvbWUoZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gbXV0YXRpb24udGFyZ2V0ID09PSBfdGhpcy5kb21Ob2RlICYmIG11dGF0aW9uLnR5cGUgPT09ICdhdHRyaWJ1dGVzJztcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5idWlsZCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBGb3JtYXRCbG90LnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0gX3N1cGVyLnByb3RvdHlwZS53cmFwLmNhbGwodGhpcywgbmFtZSwgdmFsdWUpO1xuICAgICAgICBpZiAod3JhcHBlciBpbnN0YW5jZW9mIEZvcm1hdEJsb3QgJiYgd3JhcHBlci5zdGF0aWNzLnNjb3BlID09PSB0aGlzLnN0YXRpY3Muc2NvcGUpIHtcbiAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5tb3ZlKHdyYXBwZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH07XG4gICAgcmV0dXJuIEZvcm1hdEJsb3Q7XG59KGNvbnRhaW5lcl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IEZvcm1hdEJsb3Q7XG5cblxuLyoqKi8gfSksXG4vKiA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBzaGFkb3dfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIExlYWZCbG90ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhMZWFmQmxvdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBMZWFmQmxvdCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBMZWFmQmxvdC52YWx1ZSA9IGZ1bmN0aW9uIChkb21Ob2RlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgTGVhZkJsb3QucHJvdG90eXBlLmluZGV4ID0gZnVuY3Rpb24gKG5vZGUsIG9mZnNldCkge1xuICAgICAgICBpZiAodGhpcy5kb21Ob2RlID09PSBub2RlIHx8XG4gICAgICAgICAgICB0aGlzLmRvbU5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24obm9kZSkgJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0NPTlRBSU5FRF9CWSkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWluKG9mZnNldCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG4gICAgTGVhZkJsb3QucHJvdG90eXBlLnBvc2l0aW9uID0gZnVuY3Rpb24gKGluZGV4LCBpbmNsdXNpdmUpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IFtdLmluZGV4T2YuY2FsbCh0aGlzLnBhcmVudC5kb21Ob2RlLmNoaWxkTm9kZXMsIHRoaXMuZG9tTm9kZSk7XG4gICAgICAgIGlmIChpbmRleCA+IDApXG4gICAgICAgICAgICBvZmZzZXQgKz0gMTtcbiAgICAgICAgcmV0dXJuIFt0aGlzLnBhcmVudC5kb21Ob2RlLCBvZmZzZXRdO1xuICAgIH07XG4gICAgTGVhZkJsb3QucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX2EgPSB7fSwgX2FbdGhpcy5zdGF0aWNzLmJsb3ROYW1lXSA9IHRoaXMuc3RhdGljcy52YWx1ZSh0aGlzLmRvbU5vZGUpIHx8IHRydWUsIF9hO1xuICAgICAgICB2YXIgX2E7XG4gICAgfTtcbiAgICBMZWFmQmxvdC5zY29wZSA9IFJlZ2lzdHJ5LlNjb3BlLklOTElORV9CTE9UO1xuICAgIHJldHVybiBMZWFmQmxvdDtcbn0oc2hhZG93XzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gTGVhZkJsb3Q7XG5cblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIFNoYWRvd0Jsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2hhZG93QmxvdChkb21Ob2RlKSB7XG4gICAgICAgIHRoaXMuZG9tTm9kZSA9IGRvbU5vZGU7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXSA9IHsgYmxvdDogdGhpcyB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2hhZG93QmxvdC5wcm90b3R5cGUsIFwic3RhdGljc1wiLCB7XG4gICAgICAgIC8vIEhhY2sgZm9yIGFjY2Vzc2luZyBpbmhlcml0ZWQgc3RhdGljIG1ldGhvZHNcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RvcjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgU2hhZG93QmxvdC5jcmVhdGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMudGFnTmFtZSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVnaXN0cnkuUGFyY2htZW50RXJyb3IoJ0Jsb3QgZGVmaW5pdGlvbiBtaXNzaW5nIHRhZ05hbWUnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbm9kZTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy50YWdOYW1lKSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KHZhbHVlKS50b1N0cmluZygpID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcnNlSW50KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMudGFnTmFtZVt2YWx1ZSAtIDFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMudGFnTmFtZS5pbmRleE9mKHZhbHVlKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGhpcy50YWdOYW1lWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMudGFnTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBub2RlLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUuYXR0YWNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5wYXJlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGwgPSB0aGlzLnBhcmVudC5zY3JvbGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZG9tTm9kZSA9IHRoaXMuZG9tTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICByZXR1cm4gUmVnaXN0cnkuY3JlYXRlKGRvbU5vZGUpO1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUuZGV0YWNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5wYXJlbnQgIT0gbnVsbClcbiAgICAgICAgICAgIHRoaXMucGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGRlbGV0ZSB0aGlzLmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldO1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUuZGVsZXRlQXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICAgICAgICB2YXIgYmxvdCA9IHRoaXMuaXNvbGF0ZShpbmRleCwgbGVuZ3RoKTtcbiAgICAgICAgYmxvdC5yZW1vdmUoKTtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLmZvcm1hdEF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHZhciBibG90ID0gdGhpcy5pc29sYXRlKGluZGV4LCBsZW5ndGgpO1xuICAgICAgICBpZiAoUmVnaXN0cnkucXVlcnkobmFtZSwgUmVnaXN0cnkuU2NvcGUuQkxPVCkgIT0gbnVsbCAmJiB2YWx1ZSkge1xuICAgICAgICAgICAgYmxvdC53cmFwKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChSZWdpc3RyeS5xdWVyeShuYW1lLCBSZWdpc3RyeS5TY29wZS5BVFRSSUJVVEUpICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBwYXJlbnRfMSA9IFJlZ2lzdHJ5LmNyZWF0ZSh0aGlzLnN0YXRpY3Muc2NvcGUpO1xuICAgICAgICAgICAgYmxvdC53cmFwKHBhcmVudF8xKTtcbiAgICAgICAgICAgIHBhcmVudF8xLmZvcm1hdChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLmluc2VydEF0ID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSwgZGVmKSB7XG4gICAgICAgIHZhciBibG90ID0gZGVmID09IG51bGwgPyBSZWdpc3RyeS5jcmVhdGUoJ3RleHQnLCB2YWx1ZSkgOiBSZWdpc3RyeS5jcmVhdGUodmFsdWUsIGRlZik7XG4gICAgICAgIHZhciByZWYgPSB0aGlzLnNwbGl0KGluZGV4KTtcbiAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKGJsb3QsIHJlZik7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5pbnNlcnRJbnRvID0gZnVuY3Rpb24gKHBhcmVudEJsb3QsIHJlZkJsb3QpIHtcbiAgICAgICAgaWYgKHJlZkJsb3QgPT09IHZvaWQgMCkgeyByZWZCbG90ID0gbnVsbDsgfVxuICAgICAgICBpZiAodGhpcy5wYXJlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQuY2hpbGRyZW4ucmVtb3ZlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZWZEb21Ob2RlID0gbnVsbDtcbiAgICAgICAgcGFyZW50QmxvdC5jaGlsZHJlbi5pbnNlcnRCZWZvcmUodGhpcywgcmVmQmxvdCk7XG4gICAgICAgIGlmIChyZWZCbG90ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlZkRvbU5vZGUgPSByZWZCbG90LmRvbU5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZG9tTm9kZS5wYXJlbnROb2RlICE9IHBhcmVudEJsb3QuZG9tTm9kZSB8fFxuICAgICAgICAgICAgdGhpcy5kb21Ob2RlLm5leHRTaWJsaW5nICE9IHJlZkRvbU5vZGUpIHtcbiAgICAgICAgICAgIHBhcmVudEJsb3QuZG9tTm9kZS5pbnNlcnRCZWZvcmUodGhpcy5kb21Ob2RlLCByZWZEb21Ob2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudEJsb3Q7XG4gICAgICAgIHRoaXMuYXR0YWNoKCk7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5pc29sYXRlID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMuc3BsaXQoaW5kZXgpO1xuICAgICAgICB0YXJnZXQuc3BsaXQobGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLmxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5vZmZzZXQgPSBmdW5jdGlvbiAocm9vdCkge1xuICAgICAgICBpZiAocm9vdCA9PT0gdm9pZCAwKSB7IHJvb3QgPSB0aGlzLnBhcmVudDsgfVxuICAgICAgICBpZiAodGhpcy5wYXJlbnQgPT0gbnVsbCB8fCB0aGlzID09IHJvb3QpXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmNoaWxkcmVuLm9mZnNldCh0aGlzKSArIHRoaXMucGFyZW50Lm9mZnNldChyb290KTtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLm9wdGltaXplID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgLy8gVE9ETyBjbGVhbiB1cCBvbmNlIHdlIHVzZSBXZWFrTWFwXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKHRoaXMuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0ubXV0YXRpb25zO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmRvbU5vZGUucGFyZW50Tm9kZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmRvbU5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmRvbU5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGV0YWNoKCk7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICBpZiAodGFyZ2V0LnBhcmVudCA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0YXJnZXQucGFyZW50Lmluc2VydEJlZm9yZSh0aGlzLCB0YXJnZXQubmV4dCk7XG4gICAgICAgIHRhcmdldC5yZW1vdmUoKTtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLnJlcGxhY2VXaXRoID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHZhciByZXBsYWNlbWVudCA9IHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyA/IFJlZ2lzdHJ5LmNyZWF0ZShuYW1lLCB2YWx1ZSkgOiBuYW1lO1xuICAgICAgICByZXBsYWNlbWVudC5yZXBsYWNlKHRoaXMpO1xuICAgICAgICByZXR1cm4gcmVwbGFjZW1lbnQ7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIChpbmRleCwgZm9yY2UpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4ID09PSAwID8gdGhpcyA6IHRoaXMubmV4dDtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChtdXRhdGlvbnMsIGNvbnRleHQpIHtcbiAgICAgICAgLy8gTm90aGluZyB0byBkbyBieSBkZWZhdWx0XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0gdHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnID8gUmVnaXN0cnkuY3JlYXRlKG5hbWUsIHZhbHVlKSA6IG5hbWU7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5pbnNlcnRCZWZvcmUod3JhcHBlciwgdGhpcy5uZXh0KTtcbiAgICAgICAgfVxuICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMpO1xuICAgICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QuYmxvdE5hbWUgPSAnYWJzdHJhY3QnO1xuICAgIHJldHVybiBTaGFkb3dCbG90O1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFNoYWRvd0Jsb3Q7XG5cblxuLyoqKi8gfSksXG4vKiA2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYXR0cmlidXRvcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBjbGFzc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcbnZhciBzdHlsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcbnZhciBSZWdpc3RyeSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgQXR0cmlidXRvclN0b3JlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEF0dHJpYnV0b3JTdG9yZShkb21Ob2RlKSB7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuICAgICAgICB0aGlzLmRvbU5vZGUgPSBkb21Ob2RlO1xuICAgICAgICB0aGlzLmJ1aWxkKCk7XG4gICAgfVxuICAgIEF0dHJpYnV0b3JTdG9yZS5wcm90b3R5cGUuYXR0cmlidXRlID0gZnVuY3Rpb24gKGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICAgICAgLy8gdmVyYlxuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUuYWRkKHRoaXMuZG9tTm9kZSwgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZS52YWx1ZSh0aGlzLmRvbU5vZGUpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5hdHRyTmFtZV0gPSBhdHRyaWJ1dGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5hdHRyTmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXR0cmlidXRlLnJlbW92ZSh0aGlzLmRvbU5vZGUpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuYXR0cmlidXRlc1thdHRyaWJ1dGUuYXR0ck5hbWVdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBdHRyaWJ1dG9yU3RvcmUucHJvdG90eXBlLmJ1aWxkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBhdHRyaWJ1dG9yXzEuZGVmYXVsdC5rZXlzKHRoaXMuZG9tTm9kZSk7XG4gICAgICAgIHZhciBjbGFzc2VzID0gY2xhc3NfMS5kZWZhdWx0LmtleXModGhpcy5kb21Ob2RlKTtcbiAgICAgICAgdmFyIHN0eWxlcyA9IHN0eWxlXzEuZGVmYXVsdC5rZXlzKHRoaXMuZG9tTm9kZSk7XG4gICAgICAgIGF0dHJpYnV0ZXNcbiAgICAgICAgICAgIC5jb25jYXQoY2xhc3NlcylcbiAgICAgICAgICAgIC5jb25jYXQoc3R5bGVzKVxuICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHZhciBhdHRyID0gUmVnaXN0cnkucXVlcnkobmFtZSwgUmVnaXN0cnkuU2NvcGUuQVRUUklCVVRFKTtcbiAgICAgICAgICAgIGlmIChhdHRyIGluc3RhbmNlb2YgYXR0cmlidXRvcl8xLmRlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5hdHRyaWJ1dGVzW2F0dHIuYXR0ck5hbWVdID0gYXR0cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBBdHRyaWJ1dG9yU3RvcmUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBfdGhpcy5hdHRyaWJ1dGVzW2tleV0udmFsdWUoX3RoaXMuZG9tTm9kZSk7XG4gICAgICAgICAgICB0YXJnZXQuZm9ybWF0KGtleSwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEF0dHJpYnV0b3JTdG9yZS5wcm90b3R5cGUubW92ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5jb3B5KHRhcmdldCk7XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBfdGhpcy5hdHRyaWJ1dGVzW2tleV0ucmVtb3ZlKF90aGlzLmRvbU5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0ge307XG4gICAgfTtcbiAgICBBdHRyaWJ1dG9yU3RvcmUucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuYXR0cmlidXRlcykucmVkdWNlKGZ1bmN0aW9uIChhdHRyaWJ1dGVzLCBuYW1lKSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzW25hbWVdID0gX3RoaXMuYXR0cmlidXRlc1tuYW1lXS52YWx1ZShfdGhpcy5kb21Ob2RlKTtcbiAgICAgICAgICAgIHJldHVybiBhdHRyaWJ1dGVzO1xuICAgICAgICB9LCB7fSk7XG4gICAgfTtcbiAgICByZXR1cm4gQXR0cmlidXRvclN0b3JlO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IEF0dHJpYnV0b3JTdG9yZTtcblxuXG4vKioqLyB9KSxcbi8qIDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGF0dHJpYnV0b3JfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5mdW5jdGlvbiBtYXRjaChub2RlLCBwcmVmaXgpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJyc7XG4gICAgcmV0dXJuIGNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pLmZpbHRlcihmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gbmFtZS5pbmRleE9mKHByZWZpeCArIFwiLVwiKSA9PT0gMDtcbiAgICB9KTtcbn1cbnZhciBDbGFzc0F0dHJpYnV0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENsYXNzQXR0cmlidXRvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDbGFzc0F0dHJpYnV0b3IoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgQ2xhc3NBdHRyaWJ1dG9yLmtleXMgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICByZXR1cm4gKG5vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKS5zcGxpdCgvXFxzKy8pLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5hbWVcbiAgICAgICAgICAgICAgICAuc3BsaXQoJy0nKVxuICAgICAgICAgICAgICAgIC5zbGljZSgwLCAtMSlcbiAgICAgICAgICAgICAgICAuam9pbignLScpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENsYXNzQXR0cmlidXRvci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKG5vZGUsIHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5jYW5BZGQobm9kZSwgdmFsdWUpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB0aGlzLnJlbW92ZShub2RlKTtcbiAgICAgICAgbm9kZS5jbGFzc0xpc3QuYWRkKHRoaXMua2V5TmFtZSArIFwiLVwiICsgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIENsYXNzQXR0cmlidXRvci5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSBtYXRjaChub2RlLCB0aGlzLmtleU5hbWUpO1xuICAgICAgICBtYXRjaGVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIG5vZGUuY2xhc3NMaXN0LnJlbW92ZShuYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChub2RlLmNsYXNzTGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDbGFzc0F0dHJpYnV0b3IucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG1hdGNoKG5vZGUsIHRoaXMua2V5TmFtZSlbMF0gfHwgJyc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC5zbGljZSh0aGlzLmtleU5hbWUubGVuZ3RoICsgMSk7IC8vICsxIGZvciBoeXBoZW5cbiAgICAgICAgcmV0dXJuIHRoaXMuY2FuQWRkKG5vZGUsIHZhbHVlKSA/IHZhbHVlIDogJyc7XG4gICAgfTtcbiAgICByZXR1cm4gQ2xhc3NBdHRyaWJ1dG9yO1xufShhdHRyaWJ1dG9yXzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gQ2xhc3NBdHRyaWJ1dG9yO1xuXG5cbi8qKiovIH0pLFxuLyogOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYXR0cmlidXRvcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbmZ1bmN0aW9uIGNhbWVsaXplKG5hbWUpIHtcbiAgICB2YXIgcGFydHMgPSBuYW1lLnNwbGl0KCctJyk7XG4gICAgdmFyIHJlc3QgPSBwYXJ0c1xuICAgICAgICAuc2xpY2UoMSlcbiAgICAgICAgLm1hcChmdW5jdGlvbiAocGFydCkge1xuICAgICAgICByZXR1cm4gcGFydFswXS50b1VwcGVyQ2FzZSgpICsgcGFydC5zbGljZSgxKTtcbiAgICB9KVxuICAgICAgICAuam9pbignJyk7XG4gICAgcmV0dXJuIHBhcnRzWzBdICsgcmVzdDtcbn1cbnZhciBTdHlsZUF0dHJpYnV0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN0eWxlQXR0cmlidXRvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdHlsZUF0dHJpYnV0b3IoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgU3R5bGVBdHRyaWJ1dG9yLmtleXMgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICByZXR1cm4gKG5vZGUuZ2V0QXR0cmlidXRlKCdzdHlsZScpIHx8ICcnKS5zcGxpdCgnOycpLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBhcnIgPSB2YWx1ZS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgcmV0dXJuIGFyclswXS50cmltKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgU3R5bGVBdHRyaWJ1dG9yLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAobm9kZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNhbkFkZChub2RlLCB2YWx1ZSkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgbm9kZS5zdHlsZVtjYW1lbGl6ZSh0aGlzLmtleU5hbWUpXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIFN0eWxlQXR0cmlidXRvci5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBub2RlLnN0eWxlW2NhbWVsaXplKHRoaXMua2V5TmFtZSldID0gJyc7XG4gICAgICAgIGlmICghbm9kZS5nZXRBdHRyaWJ1dGUoJ3N0eWxlJykpIHtcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdHlsZUF0dHJpYnV0b3IucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB2YXIgdmFsdWUgPSBub2RlLnN0eWxlW2NhbWVsaXplKHRoaXMua2V5TmFtZSldO1xuICAgICAgICByZXR1cm4gdGhpcy5jYW5BZGQobm9kZSwgdmFsdWUpID8gdmFsdWUgOiAnJztcbiAgICB9O1xuICAgIHJldHVybiBTdHlsZUF0dHJpYnV0b3I7XG59KGF0dHJpYnV0b3JfMS5kZWZhdWx0KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBTdHlsZUF0dHJpYnV0b3I7XG5cblxuLyoqKi8gfSksXG4vKiA5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG5cblxuLyoqKi8gfSksXG4vKiAxMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGNvbnRhaW5lcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbnZhciBmb3JtYXRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG52YXIgbGVhZl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbnZhciBzY3JvbGxfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xudmFyIGlubGluZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG52YXIgYmxvY2tfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xudmFyIGVtYmVkXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcbnZhciB0ZXh0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcbnZhciBhdHRyaWJ1dG9yXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIGNsYXNzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xudmFyIHN0eWxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xudmFyIHN0b3JlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBQYXJjaG1lbnQgPSB7XG4gICAgU2NvcGU6IFJlZ2lzdHJ5LlNjb3BlLFxuICAgIGNyZWF0ZTogUmVnaXN0cnkuY3JlYXRlLFxuICAgIGZpbmQ6IFJlZ2lzdHJ5LmZpbmQsXG4gICAgcXVlcnk6IFJlZ2lzdHJ5LnF1ZXJ5LFxuICAgIHJlZ2lzdGVyOiBSZWdpc3RyeS5yZWdpc3RlcixcbiAgICBDb250YWluZXI6IGNvbnRhaW5lcl8xLmRlZmF1bHQsXG4gICAgRm9ybWF0OiBmb3JtYXRfMS5kZWZhdWx0LFxuICAgIExlYWY6IGxlYWZfMS5kZWZhdWx0LFxuICAgIEVtYmVkOiBlbWJlZF8xLmRlZmF1bHQsXG4gICAgU2Nyb2xsOiBzY3JvbGxfMS5kZWZhdWx0LFxuICAgIEJsb2NrOiBibG9ja18xLmRlZmF1bHQsXG4gICAgSW5saW5lOiBpbmxpbmVfMS5kZWZhdWx0LFxuICAgIFRleHQ6IHRleHRfMS5kZWZhdWx0LFxuICAgIEF0dHJpYnV0b3I6IHtcbiAgICAgICAgQXR0cmlidXRlOiBhdHRyaWJ1dG9yXzEuZGVmYXVsdCxcbiAgICAgICAgQ2xhc3M6IGNsYXNzXzEuZGVmYXVsdCxcbiAgICAgICAgU3R5bGU6IHN0eWxlXzEuZGVmYXVsdCxcbiAgICAgICAgU3RvcmU6IHN0b3JlXzEuZGVmYXVsdCxcbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IFBhcmNobWVudDtcblxuXG4vKioqLyB9KSxcbi8qIDExICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgTGlua2VkTGlzdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMaW5rZWRMaXN0KCkge1xuICAgICAgICB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgfVxuICAgIExpbmtlZExpc3QucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5vZGVzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBub2Rlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5zZXJ0QmVmb3JlKG5vZGVzWzBdLCBudWxsKTtcbiAgICAgICAgaWYgKG5vZGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kLmFwcGx5KHRoaXMsIG5vZGVzLnNsaWNlKDEpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGlua2VkTGlzdC5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICB2YXIgY3VyLCBuZXh0ID0gdGhpcy5pdGVyYXRvcigpO1xuICAgICAgICB3aGlsZSAoKGN1ciA9IG5leHQoKSkpIHtcbiAgICAgICAgICAgIGlmIChjdXIgPT09IG5vZGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgTGlua2VkTGlzdC5wcm90b3R5cGUuaW5zZXJ0QmVmb3JlID0gZnVuY3Rpb24gKG5vZGUsIHJlZk5vZGUpIHtcbiAgICAgICAgaWYgKCFub2RlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBub2RlLm5leHQgPSByZWZOb2RlO1xuICAgICAgICBpZiAocmVmTm9kZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBub2RlLnByZXYgPSByZWZOb2RlLnByZXY7XG4gICAgICAgICAgICBpZiAocmVmTm9kZS5wcmV2ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZWZOb2RlLnByZXYubmV4dCA9IG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWZOb2RlLnByZXYgPSBub2RlO1xuICAgICAgICAgICAgaWYgKHJlZk5vZGUgPT09IHRoaXMuaGVhZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGVhZCA9IG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy50YWlsICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudGFpbC5uZXh0ID0gbm9kZTtcbiAgICAgICAgICAgIG5vZGUucHJldiA9IHRoaXMudGFpbDtcbiAgICAgICAgICAgIHRoaXMudGFpbCA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub2RlLnByZXYgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxlbmd0aCArPSAxO1xuICAgIH07XG4gICAgTGlua2VkTGlzdC5wcm90b3R5cGUub2Zmc2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICB2YXIgaW5kZXggPSAwLCBjdXIgPSB0aGlzLmhlYWQ7XG4gICAgICAgIHdoaWxlIChjdXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGN1ciA9PT0gdGFyZ2V0KVxuICAgICAgICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgICAgIGluZGV4ICs9IGN1ci5sZW5ndGgoKTtcbiAgICAgICAgICAgIGN1ciA9IGN1ci5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIGlmICghdGhpcy5jb250YWlucyhub2RlKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKG5vZGUucHJldiAhPSBudWxsKVxuICAgICAgICAgICAgbm9kZS5wcmV2Lm5leHQgPSBub2RlLm5leHQ7XG4gICAgICAgIGlmIChub2RlLm5leHQgIT0gbnVsbClcbiAgICAgICAgICAgIG5vZGUubmV4dC5wcmV2ID0gbm9kZS5wcmV2O1xuICAgICAgICBpZiAobm9kZSA9PT0gdGhpcy5oZWFkKVxuICAgICAgICAgICAgdGhpcy5oZWFkID0gbm9kZS5uZXh0O1xuICAgICAgICBpZiAobm9kZSA9PT0gdGhpcy50YWlsKVxuICAgICAgICAgICAgdGhpcy50YWlsID0gbm9kZS5wcmV2O1xuICAgICAgICB0aGlzLmxlbmd0aCAtPSAxO1xuICAgIH07XG4gICAgTGlua2VkTGlzdC5wcm90b3R5cGUuaXRlcmF0b3IgPSBmdW5jdGlvbiAoY3VyTm9kZSkge1xuICAgICAgICBpZiAoY3VyTm9kZSA9PT0gdm9pZCAwKSB7IGN1ck5vZGUgPSB0aGlzLmhlYWQ7IH1cbiAgICAgICAgLy8gVE9ETyB1c2UgeWllbGQgd2hlbiB3ZSBjYW5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXQgPSBjdXJOb2RlO1xuICAgICAgICAgICAgaWYgKGN1ck5vZGUgIT0gbnVsbClcbiAgICAgICAgICAgICAgICBjdXJOb2RlID0gY3VyTm9kZS5uZXh0O1xuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbiAoaW5kZXgsIGluY2x1c2l2ZSkge1xuICAgICAgICBpZiAoaW5jbHVzaXZlID09PSB2b2lkIDApIHsgaW5jbHVzaXZlID0gZmFsc2U7IH1cbiAgICAgICAgdmFyIGN1ciwgbmV4dCA9IHRoaXMuaXRlcmF0b3IoKTtcbiAgICAgICAgd2hpbGUgKChjdXIgPSBuZXh0KCkpKSB7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoXzEgPSBjdXIubGVuZ3RoKCk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCBsZW5ndGhfMSB8fFxuICAgICAgICAgICAgICAgIChpbmNsdXNpdmUgJiYgaW5kZXggPT09IGxlbmd0aF8xICYmIChjdXIubmV4dCA9PSBudWxsIHx8IGN1ci5uZXh0Lmxlbmd0aCgpICE9PSAwKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW2N1ciwgaW5kZXhdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5kZXggLT0gbGVuZ3RoXzE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtudWxsLCAwXTtcbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGN1ciwgbmV4dCA9IHRoaXMuaXRlcmF0b3IoKTtcbiAgICAgICAgd2hpbGUgKChjdXIgPSBuZXh0KCkpKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhjdXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBMaW5rZWRMaXN0LnByb3RvdHlwZS5mb3JFYWNoQXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGxlbmd0aCA8PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLmZpbmQoaW5kZXgpLCBzdGFydE5vZGUgPSBfYVswXSwgb2Zmc2V0ID0gX2FbMV07XG4gICAgICAgIHZhciBjdXIsIGN1ckluZGV4ID0gaW5kZXggLSBvZmZzZXQsIG5leHQgPSB0aGlzLml0ZXJhdG9yKHN0YXJ0Tm9kZSk7XG4gICAgICAgIHdoaWxlICgoY3VyID0gbmV4dCgpKSAmJiBjdXJJbmRleCA8IGluZGV4ICsgbGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgY3VyTGVuZ3RoID0gY3VyLmxlbmd0aCgpO1xuICAgICAgICAgICAgaWYgKGluZGV4ID4gY3VySW5kZXgpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhjdXIsIGluZGV4IC0gY3VySW5kZXgsIE1hdGgubWluKGxlbmd0aCwgY3VySW5kZXggKyBjdXJMZW5ndGggLSBpbmRleCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soY3VyLCAwLCBNYXRoLm1pbihjdXJMZW5ndGgsIGluZGV4ICsgbGVuZ3RoIC0gY3VySW5kZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1ckluZGV4ICs9IGN1ckxlbmd0aDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGlua2VkTGlzdC5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZHVjZShmdW5jdGlvbiAobWVtbywgY3VyKSB7XG4gICAgICAgICAgICBtZW1vLnB1c2goY2FsbGJhY2soY3VyKSk7XG4gICAgICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgICAgfSwgW10pO1xuICAgIH07XG4gICAgTGlua2VkTGlzdC5wcm90b3R5cGUucmVkdWNlID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBtZW1vKSB7XG4gICAgICAgIHZhciBjdXIsIG5leHQgPSB0aGlzLml0ZXJhdG9yKCk7XG4gICAgICAgIHdoaWxlICgoY3VyID0gbmV4dCgpKSkge1xuICAgICAgICAgICAgbWVtbyA9IGNhbGxiYWNrKG1lbW8sIGN1cik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgfTtcbiAgICByZXR1cm4gTGlua2VkTGlzdDtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBMaW5rZWRMaXN0O1xuXG5cbi8qKiovIH0pLFxuLyogMTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGNvbnRhaW5lcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbnZhciBSZWdpc3RyeSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgT0JTRVJWRVJfQ09ORklHID0ge1xuICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgY2hhcmFjdGVyRGF0YTogdHJ1ZSxcbiAgICBjaGFyYWN0ZXJEYXRhT2xkVmFsdWU6IHRydWUsXG4gICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgIHN1YnRyZWU6IHRydWUsXG59O1xudmFyIE1BWF9PUFRJTUlaRV9JVEVSQVRJT05TID0gMTAwO1xudmFyIFNjcm9sbEJsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNjcm9sbEJsb3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2Nyb2xsQmxvdChub2RlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG5vZGUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjcm9sbCA9IF90aGlzO1xuICAgICAgICBfdGhpcy5vYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uIChtdXRhdGlvbnMpIHtcbiAgICAgICAgICAgIF90aGlzLnVwZGF0ZShtdXRhdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMub2JzZXJ2ZXIub2JzZXJ2ZShfdGhpcy5kb21Ob2RlLCBPQlNFUlZFUl9DT05GSUcpO1xuICAgICAgICBfdGhpcy5hdHRhY2goKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTY3JvbGxCbG90LnByb3RvdHlwZS5kZXRhY2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGV0YWNoLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH07XG4gICAgU2Nyb2xsQmxvdC5wcm90b3R5cGUuZGVsZXRlQXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICBpZiAoaW5kZXggPT09IDAgJiYgbGVuZ3RoID09PSB0aGlzLmxlbmd0aCgpKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgY2hpbGQucmVtb3ZlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGVsZXRlQXQuY2FsbCh0aGlzLCBpbmRleCwgbGVuZ3RoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2Nyb2xsQmxvdC5wcm90b3R5cGUuZm9ybWF0QXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JtYXRBdC5jYWxsKHRoaXMsIGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuICAgIFNjcm9sbEJsb3QucHJvdG90eXBlLmluc2VydEF0ID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSwgZGVmKSB7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuaW5zZXJ0QXQuY2FsbCh0aGlzLCBpbmRleCwgdmFsdWUsIGRlZik7XG4gICAgfTtcbiAgICBTY3JvbGxCbG90LnByb3RvdHlwZS5vcHRpbWl6ZSA9IGZ1bmN0aW9uIChtdXRhdGlvbnMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKG11dGF0aW9ucyA9PT0gdm9pZCAwKSB7IG11dGF0aW9ucyA9IFtdOyB9XG4gICAgICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHsgY29udGV4dCA9IHt9OyB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUub3B0aW1pemUuY2FsbCh0aGlzLCBjb250ZXh0KTtcbiAgICAgICAgLy8gV2UgbXVzdCBtb2RpZnkgbXV0YXRpb25zIGRpcmVjdGx5LCBjYW5ub3QgbWFrZSBjb3B5IGFuZCB0aGVuIG1vZGlmeVxuICAgICAgICB2YXIgcmVjb3JkcyA9IFtdLnNsaWNlLmNhbGwodGhpcy5vYnNlcnZlci50YWtlUmVjb3JkcygpKTtcbiAgICAgICAgLy8gQXJyYXkucHVzaCBjdXJyZW50bHkgc2VlbXMgdG8gYmUgaW1wbGVtZW50ZWQgYnkgYSBub24tdGFpbCByZWN1cnNpdmUgZnVuY3Rpb25cbiAgICAgICAgLy8gc28gd2UgY2Fubm90IGp1c3QgbXV0YXRpb25zLnB1c2guYXBwbHkobXV0YXRpb25zLCB0aGlzLm9ic2VydmVyLnRha2VSZWNvcmRzKCkpO1xuICAgICAgICB3aGlsZSAocmVjb3Jkcy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgbXV0YXRpb25zLnB1c2gocmVjb3Jkcy5wb3AoKSk7XG4gICAgICAgIC8vIFRPRE8gdXNlIFdlYWtNYXBcbiAgICAgICAgdmFyIG1hcmsgPSBmdW5jdGlvbiAoYmxvdCwgbWFya1BhcmVudCkge1xuICAgICAgICAgICAgaWYgKG1hcmtQYXJlbnQgPT09IHZvaWQgMCkgeyBtYXJrUGFyZW50ID0gdHJ1ZTsgfVxuICAgICAgICAgICAgaWYgKGJsb3QgPT0gbnVsbCB8fCBibG90ID09PSBfdGhpcylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBpZiAoYmxvdC5kb21Ob2RlLnBhcmVudE5vZGUgPT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBpZiAoYmxvdC5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXS5tdXRhdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBibG90LmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldLm11dGF0aW9ucyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hcmtQYXJlbnQpXG4gICAgICAgICAgICAgICAgbWFyayhibG90LnBhcmVudCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBvcHRpbWl6ZSA9IGZ1bmN0aW9uIChibG90KSB7XG4gICAgICAgICAgICAvLyBQb3N0LW9yZGVyIHRyYXZlcnNhbFxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgYmxvdC5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXSA9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIGJsb3QuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0ubXV0YXRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmxvdCBpbnN0YW5jZW9mIGNvbnRhaW5lcl8xLmRlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICBibG90LmNoaWxkcmVuLmZvckVhY2gob3B0aW1pemUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmxvdC5vcHRpbWl6ZShjb250ZXh0KTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlbWFpbmluZyA9IG11dGF0aW9ucztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IHJlbWFpbmluZy5sZW5ndGggPiAwOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChpID49IE1BWF9PUFRJTUlaRV9JVEVSQVRJT05TKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbUGFyY2htZW50XSBNYXhpbXVtIG9wdGltaXplIGl0ZXJhdGlvbnMgcmVhY2hlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVtYWluaW5nLmZvckVhY2goZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJsb3QgPSBSZWdpc3RyeS5maW5kKG11dGF0aW9uLnRhcmdldCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGJsb3QgPT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGlmIChibG90LmRvbU5vZGUgPT09IG11dGF0aW9uLnRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2NoaWxkTGlzdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmsoUmVnaXN0cnkuZmluZChtdXRhdGlvbi5wcmV2aW91c1NpYmxpbmcsIGZhbHNlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwobXV0YXRpb24uYWRkZWROb2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBSZWdpc3RyeS5maW5kKG5vZGUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrKGNoaWxkLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgY29udGFpbmVyXzEuZGVmYXVsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChncmFuZENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrKGdyYW5kQ2hpbGQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2F0dHJpYnV0ZXMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrKGJsb3QucHJldik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWFyayhibG90KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKG9wdGltaXplKTtcbiAgICAgICAgICAgIHJlbWFpbmluZyA9IFtdLnNsaWNlLmNhbGwodGhpcy5vYnNlcnZlci50YWtlUmVjb3JkcygpKTtcbiAgICAgICAgICAgIHJlY29yZHMgPSByZW1haW5pbmcuc2xpY2UoKTtcbiAgICAgICAgICAgIHdoaWxlIChyZWNvcmRzLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgbXV0YXRpb25zLnB1c2gocmVjb3Jkcy5wb3AoKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNjcm9sbEJsb3QucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChtdXRhdGlvbnMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkgeyBjb250ZXh0ID0ge307IH1cbiAgICAgICAgbXV0YXRpb25zID0gbXV0YXRpb25zIHx8IHRoaXMub2JzZXJ2ZXIudGFrZVJlY29yZHMoKTtcbiAgICAgICAgLy8gVE9ETyB1c2UgV2Vha01hcFxuICAgICAgICBtdXRhdGlvbnNcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICAgICAgICB2YXIgYmxvdCA9IFJlZ2lzdHJ5LmZpbmQobXV0YXRpb24udGFyZ2V0LCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChibG90ID09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBpZiAoYmxvdC5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXS5tdXRhdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBibG90LmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldLm11dGF0aW9ucyA9IFttdXRhdGlvbl07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJsb3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgYmxvdC5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXS5tdXRhdGlvbnMucHVzaChtdXRhdGlvbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoYmxvdCkge1xuICAgICAgICAgICAgaWYgKGJsb3QgPT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgIGJsb3QgPT09IF90aGlzIHx8XG4gICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgYmxvdC5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXSA9PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGJsb3QudXBkYXRlKGJsb3QuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0ubXV0YXRpb25zIHx8IFtdLCBjb250ZXh0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKHRoaXMuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0ubXV0YXRpb25zICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUudXBkYXRlLmNhbGwodGhpcywgdGhpcy5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXS5tdXRhdGlvbnMsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW1pemUobXV0YXRpb25zLCBjb250ZXh0KTtcbiAgICB9O1xuICAgIFNjcm9sbEJsb3QuYmxvdE5hbWUgPSAnc2Nyb2xsJztcbiAgICBTY3JvbGxCbG90LmRlZmF1bHRDaGlsZCA9ICdibG9jayc7XG4gICAgU2Nyb2xsQmxvdC5zY29wZSA9IFJlZ2lzdHJ5LlNjb3BlLkJMT0NLX0JMT1Q7XG4gICAgU2Nyb2xsQmxvdC50YWdOYW1lID0gJ0RJVic7XG4gICAgcmV0dXJuIFNjcm9sbEJsb3Q7XG59KGNvbnRhaW5lcl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFNjcm9sbEJsb3Q7XG5cblxuLyoqKi8gfSksXG4vKiAxMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZm9ybWF0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8vIFNoYWxsb3cgb2JqZWN0IGNvbXBhcmlzb25cbmZ1bmN0aW9uIGlzRXF1YWwob2JqMSwgb2JqMikge1xuICAgIGlmIChPYmplY3Qua2V5cyhvYmoxKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKG9iajIpLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBmb3IgKHZhciBwcm9wIGluIG9iajEpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAob2JqMVtwcm9wXSAhPT0gb2JqMltwcm9wXSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG52YXIgSW5saW5lQmxvdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSW5saW5lQmxvdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJbmxpbmVCbG90KCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIElubGluZUJsb3QuZm9ybWF0cyA9IGZ1bmN0aW9uIChkb21Ob2RlKSB7XG4gICAgICAgIGlmIChkb21Ob2RlLnRhZ05hbWUgPT09IElubGluZUJsb3QudGFnTmFtZSlcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBfc3VwZXIuZm9ybWF0cy5jYWxsKHRoaXMsIGRvbU5vZGUpO1xuICAgIH07XG4gICAgSW5saW5lQmxvdC5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChuYW1lID09PSB0aGlzLnN0YXRpY3MuYmxvdE5hbWUgJiYgIXZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoY2hpbGQgaW5zdGFuY2VvZiBmb3JtYXRfMS5kZWZhdWx0KSkge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZCA9IGNoaWxkLndyYXAoSW5saW5lQmxvdC5ibG90TmFtZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLmF0dHJpYnV0ZXMuY29weShjaGlsZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMudW53cmFwKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmZvcm1hdC5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5saW5lQmxvdC5wcm90b3R5cGUuZm9ybWF0QXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuZm9ybWF0cygpW25hbWVdICE9IG51bGwgfHwgUmVnaXN0cnkucXVlcnkobmFtZSwgUmVnaXN0cnkuU2NvcGUuQVRUUklCVVRFKSkge1xuICAgICAgICAgICAgdmFyIGJsb3QgPSB0aGlzLmlzb2xhdGUoaW5kZXgsIGxlbmd0aCk7XG4gICAgICAgICAgICBibG90LmZvcm1hdChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmZvcm1hdEF0LmNhbGwodGhpcywgaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbmxpbmVCbG90LnByb3RvdHlwZS5vcHRpbWl6ZSA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUub3B0aW1pemUuY2FsbCh0aGlzLCBjb250ZXh0KTtcbiAgICAgICAgdmFyIGZvcm1hdHMgPSB0aGlzLmZvcm1hdHMoKTtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKGZvcm1hdHMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudW53cmFwKCk7IC8vIHVuZm9ybWF0dGVkIHNwYW5cbiAgICAgICAgfVxuICAgICAgICB2YXIgbmV4dCA9IHRoaXMubmV4dDtcbiAgICAgICAgaWYgKG5leHQgaW5zdGFuY2VvZiBJbmxpbmVCbG90ICYmIG5leHQucHJldiA9PT0gdGhpcyAmJiBpc0VxdWFsKGZvcm1hdHMsIG5leHQuZm9ybWF0cygpKSkge1xuICAgICAgICAgICAgbmV4dC5tb3ZlQ2hpbGRyZW4odGhpcyk7XG4gICAgICAgICAgICBuZXh0LnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbmxpbmVCbG90LmJsb3ROYW1lID0gJ2lubGluZSc7XG4gICAgSW5saW5lQmxvdC5zY29wZSA9IFJlZ2lzdHJ5LlNjb3BlLklOTElORV9CTE9UO1xuICAgIElubGluZUJsb3QudGFnTmFtZSA9ICdTUEFOJztcbiAgICByZXR1cm4gSW5saW5lQmxvdDtcbn0oZm9ybWF0XzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gSW5saW5lQmxvdDtcblxuXG4vKioqLyB9KSxcbi8qIDE0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBmb3JtYXRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIEJsb2NrQmxvdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQmxvY2tCbG90LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJsb2NrQmxvdCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBCbG9ja0Jsb3QuZm9ybWF0cyA9IGZ1bmN0aW9uIChkb21Ob2RlKSB7XG4gICAgICAgIHZhciB0YWdOYW1lID0gUmVnaXN0cnkucXVlcnkoQmxvY2tCbG90LmJsb3ROYW1lKS50YWdOYW1lO1xuICAgICAgICBpZiAoZG9tTm9kZS50YWdOYW1lID09PSB0YWdOYW1lKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5mb3JtYXRzLmNhbGwodGhpcywgZG9tTm9kZSk7XG4gICAgfTtcbiAgICBCbG9ja0Jsb3QucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICBpZiAoUmVnaXN0cnkucXVlcnkobmFtZSwgUmVnaXN0cnkuU2NvcGUuQkxPQ0spID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChuYW1lID09PSB0aGlzLnN0YXRpY3MuYmxvdE5hbWUgJiYgIXZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VXaXRoKEJsb2NrQmxvdC5ibG90TmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmZvcm1hdC5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQmxvY2tCbG90LnByb3RvdHlwZS5mb3JtYXRBdCA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICBpZiAoUmVnaXN0cnkucXVlcnkobmFtZSwgUmVnaXN0cnkuU2NvcGUuQkxPQ0spICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybWF0KG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuZm9ybWF0QXQuY2FsbCh0aGlzLCBpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJsb2NrQmxvdC5wcm90b3R5cGUuaW5zZXJ0QXQgPSBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlLCBkZWYpIHtcbiAgICAgICAgaWYgKGRlZiA9PSBudWxsIHx8IFJlZ2lzdHJ5LnF1ZXJ5KHZhbHVlLCBSZWdpc3RyeS5TY29wZS5JTkxJTkUpICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEluc2VydCB0ZXh0IG9yIGlubGluZVxuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5pbnNlcnRBdC5jYWxsKHRoaXMsIGluZGV4LCB2YWx1ZSwgZGVmKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBhZnRlciA9IHRoaXMuc3BsaXQoaW5kZXgpO1xuICAgICAgICAgICAgdmFyIGJsb3QgPSBSZWdpc3RyeS5jcmVhdGUodmFsdWUsIGRlZik7XG4gICAgICAgICAgICBhZnRlci5wYXJlbnQuaW5zZXJ0QmVmb3JlKGJsb3QsIGFmdGVyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQmxvY2tCbG90LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAobXV0YXRpb25zLCBjb250ZXh0KSB7XG4gICAgICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9UcmlkZW50LykpIHtcbiAgICAgICAgICAgIHRoaXMuYnVpbGQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUudXBkYXRlLmNhbGwodGhpcywgbXV0YXRpb25zLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQmxvY2tCbG90LmJsb3ROYW1lID0gJ2Jsb2NrJztcbiAgICBCbG9ja0Jsb3Quc2NvcGUgPSBSZWdpc3RyeS5TY29wZS5CTE9DS19CTE9UO1xuICAgIEJsb2NrQmxvdC50YWdOYW1lID0gJ1AnO1xuICAgIHJldHVybiBCbG9ja0Jsb3Q7XG59KGZvcm1hdF8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IEJsb2NrQmxvdDtcblxuXG4vKioqLyB9KSxcbi8qIDE1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBsZWFmXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xudmFyIEVtYmVkQmxvdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRW1iZWRCbG90LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEVtYmVkQmxvdCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBFbWJlZEJsb3QuZm9ybWF0cyA9IGZ1bmN0aW9uIChkb21Ob2RlKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBFbWJlZEJsb3QucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICAvLyBzdXBlci5mb3JtYXRBdCB3cmFwcywgd2hpY2ggaXMgd2hhdCB3ZSB3YW50IGluIGdlbmVyYWwsXG4gICAgICAgIC8vIGJ1dCB0aGlzIGFsbG93cyBzdWJjbGFzc2VzIHRvIG92ZXJ3cml0ZSBmb3IgZm9ybWF0c1xuICAgICAgICAvLyB0aGF0IGp1c3QgYXBwbHkgdG8gcGFydGljdWxhciBlbWJlZHNcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JtYXRBdC5jYWxsKHRoaXMsIDAsIHRoaXMubGVuZ3RoKCksIG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuICAgIEVtYmVkQmxvdC5wcm90b3R5cGUuZm9ybWF0QXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGluZGV4ID09PSAwICYmIGxlbmd0aCA9PT0gdGhpcy5sZW5ndGgoKSkge1xuICAgICAgICAgICAgdGhpcy5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JtYXRBdC5jYWxsKHRoaXMsIGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRW1iZWRCbG90LnByb3RvdHlwZS5mb3JtYXRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0aWNzLmZvcm1hdHModGhpcy5kb21Ob2RlKTtcbiAgICB9O1xuICAgIHJldHVybiBFbWJlZEJsb3Q7XG59KGxlYWZfMS5kZWZhdWx0KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBFbWJlZEJsb3Q7XG5cblxuLyoqKi8gfSksXG4vKiAxNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgbGVhZl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbnZhciBSZWdpc3RyeSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgVGV4dEJsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRleHRCbG90LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRleHRCbG90KG5vZGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbm9kZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudGV4dCA9IF90aGlzLnN0YXRpY3MudmFsdWUoX3RoaXMuZG9tTm9kZSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVGV4dEJsb3QuY3JlYXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh2YWx1ZSk7XG4gICAgfTtcbiAgICBUZXh0QmxvdC52YWx1ZSA9IGZ1bmN0aW9uIChkb21Ob2RlKSB7XG4gICAgICAgIHZhciB0ZXh0ID0gZG9tTm9kZS5kYXRhO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmICh0ZXh0Wydub3JtYWxpemUnXSlcbiAgICAgICAgICAgIHRleHQgPSB0ZXh0Wydub3JtYWxpemUnXSgpO1xuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9O1xuICAgIFRleHRCbG90LnByb3RvdHlwZS5kZWxldGVBdCA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuZG9tTm9kZS5kYXRhID0gdGhpcy50ZXh0ID0gdGhpcy50ZXh0LnNsaWNlKDAsIGluZGV4KSArIHRoaXMudGV4dC5zbGljZShpbmRleCArIGxlbmd0aCk7XG4gICAgfTtcbiAgICBUZXh0QmxvdC5wcm90b3R5cGUuaW5kZXggPSBmdW5jdGlvbiAobm9kZSwgb2Zmc2V0KSB7XG4gICAgICAgIGlmICh0aGlzLmRvbU5vZGUgPT09IG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG4gICAgVGV4dEJsb3QucHJvdG90eXBlLmluc2VydEF0ID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSwgZGVmKSB7XG4gICAgICAgIGlmIChkZWYgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy50ZXh0ID0gdGhpcy50ZXh0LnNsaWNlKDAsIGluZGV4KSArIHZhbHVlICsgdGhpcy50ZXh0LnNsaWNlKGluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuZG9tTm9kZS5kYXRhID0gdGhpcy50ZXh0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5pbnNlcnRBdC5jYWxsKHRoaXMsIGluZGV4LCB2YWx1ZSwgZGVmKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGV4dEJsb3QucHJvdG90eXBlLmxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dC5sZW5ndGg7XG4gICAgfTtcbiAgICBUZXh0QmxvdC5wcm90b3R5cGUub3B0aW1pemUgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm9wdGltaXplLmNhbGwodGhpcywgY29udGV4dCk7XG4gICAgICAgIHRoaXMudGV4dCA9IHRoaXMuc3RhdGljcy52YWx1ZSh0aGlzLmRvbU5vZGUpO1xuICAgICAgICBpZiAodGhpcy50ZXh0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLm5leHQgaW5zdGFuY2VvZiBUZXh0QmxvdCAmJiB0aGlzLm5leHQucHJldiA9PT0gdGhpcykge1xuICAgICAgICAgICAgdGhpcy5pbnNlcnRBdCh0aGlzLmxlbmd0aCgpLCB0aGlzLm5leHQudmFsdWUoKSk7XG4gICAgICAgICAgICB0aGlzLm5leHQucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRleHRCbG90LnByb3RvdHlwZS5wb3NpdGlvbiA9IGZ1bmN0aW9uIChpbmRleCwgaW5jbHVzaXZlKSB7XG4gICAgICAgIGlmIChpbmNsdXNpdmUgPT09IHZvaWQgMCkgeyBpbmNsdXNpdmUgPSBmYWxzZTsgfVxuICAgICAgICByZXR1cm4gW3RoaXMuZG9tTm9kZSwgaW5kZXhdO1xuICAgIH07XG4gICAgVGV4dEJsb3QucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gKGluZGV4LCBmb3JjZSkge1xuICAgICAgICBpZiAoZm9yY2UgPT09IHZvaWQgMCkgeyBmb3JjZSA9IGZhbHNlOyB9XG4gICAgICAgIGlmICghZm9yY2UpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gdGhpcy5sZW5ndGgoKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBhZnRlciA9IFJlZ2lzdHJ5LmNyZWF0ZSh0aGlzLmRvbU5vZGUuc3BsaXRUZXh0KGluZGV4KSk7XG4gICAgICAgIHRoaXMucGFyZW50Lmluc2VydEJlZm9yZShhZnRlciwgdGhpcy5uZXh0KTtcbiAgICAgICAgdGhpcy50ZXh0ID0gdGhpcy5zdGF0aWNzLnZhbHVlKHRoaXMuZG9tTm9kZSk7XG4gICAgICAgIHJldHVybiBhZnRlcjtcbiAgICB9O1xuICAgIFRleHRCbG90LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAobXV0YXRpb25zLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChtdXRhdGlvbnMuc29tZShmdW5jdGlvbiAobXV0YXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBtdXRhdGlvbi50eXBlID09PSAnY2hhcmFjdGVyRGF0YScgJiYgbXV0YXRpb24udGFyZ2V0ID09PSBfdGhpcy5kb21Ob2RlO1xuICAgICAgICB9KSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0ID0gdGhpcy5zdGF0aWNzLnZhbHVlKHRoaXMuZG9tTm9kZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRleHRCbG90LnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dDtcbiAgICB9O1xuICAgIFRleHRCbG90LmJsb3ROYW1lID0gJ3RleHQnO1xuICAgIFRleHRCbG90LnNjb3BlID0gUmVnaXN0cnkuU2NvcGUuSU5MSU5FX0JMT1Q7XG4gICAgcmV0dXJuIFRleHRCbG90O1xufShsZWFmXzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gVGV4dEJsb3Q7XG5cblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJjaG1lbnQuanMubWFwIiwidmFyIGRpZmYgPSByZXF1aXJlKCdmYXN0LWRpZmYnKTtcbnZhciBlcXVhbCA9IHJlcXVpcmUoJ2RlZXAtZXF1YWwnKTtcbnZhciBleHRlbmQgPSByZXF1aXJlKCdleHRlbmQnKTtcbnZhciBvcCA9IHJlcXVpcmUoJy4vb3AnKTtcblxuXG52YXIgTlVMTF9DSEFSQUNURVIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDApOyAgLy8gUGxhY2Vob2xkZXIgY2hhciBmb3IgZW1iZWQgaW4gZGlmZigpXG5cblxudmFyIERlbHRhID0gZnVuY3Rpb24gKG9wcykge1xuICAvLyBBc3N1bWUgd2UgYXJlIGdpdmVuIGEgd2VsbCBmb3JtZWQgb3BzXG4gIGlmIChBcnJheS5pc0FycmF5KG9wcykpIHtcbiAgICB0aGlzLm9wcyA9IG9wcztcbiAgfSBlbHNlIGlmIChvcHMgIT0gbnVsbCAmJiBBcnJheS5pc0FycmF5KG9wcy5vcHMpKSB7XG4gICAgdGhpcy5vcHMgPSBvcHMub3BzO1xuICB9IGVsc2Uge1xuICAgIHRoaXMub3BzID0gW107XG4gIH1cbn07XG5cblxuRGVsdGEucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uICh0ZXh0LCBhdHRyaWJ1dGVzKSB7XG4gIHZhciBuZXdPcCA9IHt9O1xuICBpZiAodGV4dC5sZW5ndGggPT09IDApIHJldHVybiB0aGlzO1xuICBuZXdPcC5pbnNlcnQgPSB0ZXh0O1xuICBpZiAoYXR0cmlidXRlcyAhPSBudWxsICYmIHR5cGVvZiBhdHRyaWJ1dGVzID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5sZW5ndGggPiAwKSB7XG4gICAgbmV3T3AuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG4gIH1cbiAgcmV0dXJuIHRoaXMucHVzaChuZXdPcCk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICBpZiAobGVuZ3RoIDw9IDApIHJldHVybiB0aGlzO1xuICByZXR1cm4gdGhpcy5wdXNoKHsgJ2RlbGV0ZSc6IGxlbmd0aCB9KTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5yZXRhaW4gPSBmdW5jdGlvbiAobGVuZ3RoLCBhdHRyaWJ1dGVzKSB7XG4gIGlmIChsZW5ndGggPD0gMCkgcmV0dXJuIHRoaXM7XG4gIHZhciBuZXdPcCA9IHsgcmV0YWluOiBsZW5ndGggfTtcbiAgaWYgKGF0dHJpYnV0ZXMgIT0gbnVsbCAmJiB0eXBlb2YgYXR0cmlidXRlcyA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoID4gMCkge1xuICAgIG5ld09wLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xuICB9XG4gIHJldHVybiB0aGlzLnB1c2gobmV3T3ApO1xufTtcblxuRGVsdGEucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAobmV3T3ApIHtcbiAgdmFyIGluZGV4ID0gdGhpcy5vcHMubGVuZ3RoO1xuICB2YXIgbGFzdE9wID0gdGhpcy5vcHNbaW5kZXggLSAxXTtcbiAgbmV3T3AgPSBleHRlbmQodHJ1ZSwge30sIG5ld09wKTtcbiAgaWYgKHR5cGVvZiBsYXN0T3AgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHR5cGVvZiBuZXdPcFsnZGVsZXRlJ10gPT09ICdudW1iZXInICYmIHR5cGVvZiBsYXN0T3BbJ2RlbGV0ZSddID09PSAnbnVtYmVyJykge1xuICAgICAgdGhpcy5vcHNbaW5kZXggLSAxXSA9IHsgJ2RlbGV0ZSc6IGxhc3RPcFsnZGVsZXRlJ10gKyBuZXdPcFsnZGVsZXRlJ10gfTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvLyBTaW5jZSBpdCBkb2VzIG5vdCBtYXR0ZXIgaWYgd2UgaW5zZXJ0IGJlZm9yZSBvciBhZnRlciBkZWxldGluZyBhdCB0aGUgc2FtZSBpbmRleCxcbiAgICAvLyBhbHdheXMgcHJlZmVyIHRvIGluc2VydCBmaXJzdFxuICAgIGlmICh0eXBlb2YgbGFzdE9wWydkZWxldGUnXSA9PT0gJ251bWJlcicgJiYgbmV3T3AuaW5zZXJ0ICE9IG51bGwpIHtcbiAgICAgIGluZGV4IC09IDE7XG4gICAgICBsYXN0T3AgPSB0aGlzLm9wc1tpbmRleCAtIDFdO1xuICAgICAgaWYgKHR5cGVvZiBsYXN0T3AgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRoaXMub3BzLnVuc2hpZnQobmV3T3ApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVxdWFsKG5ld09wLmF0dHJpYnV0ZXMsIGxhc3RPcC5hdHRyaWJ1dGVzKSkge1xuICAgICAgaWYgKHR5cGVvZiBuZXdPcC5pbnNlcnQgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBsYXN0T3AuaW5zZXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLm9wc1tpbmRleCAtIDFdID0geyBpbnNlcnQ6IGxhc3RPcC5pbnNlcnQgKyBuZXdPcC5pbnNlcnQgfTtcbiAgICAgICAgaWYgKHR5cGVvZiBuZXdPcC5hdHRyaWJ1dGVzID09PSAnb2JqZWN0JykgdGhpcy5vcHNbaW5kZXggLSAxXS5hdHRyaWJ1dGVzID0gbmV3T3AuYXR0cmlidXRlc1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5ld09wLnJldGFpbiA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGxhc3RPcC5yZXRhaW4gPT09ICdudW1iZXInKSB7XG4gICAgICAgIHRoaXMub3BzW2luZGV4IC0gMV0gPSB7IHJldGFpbjogbGFzdE9wLnJldGFpbiArIG5ld09wLnJldGFpbiB9O1xuICAgICAgICBpZiAodHlwZW9mIG5ld09wLmF0dHJpYnV0ZXMgPT09ICdvYmplY3QnKSB0aGlzLm9wc1tpbmRleCAtIDFdLmF0dHJpYnV0ZXMgPSBuZXdPcC5hdHRyaWJ1dGVzXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoaW5kZXggPT09IHRoaXMub3BzLmxlbmd0aCkge1xuICAgIHRoaXMub3BzLnB1c2gobmV3T3ApO1xuICB9IGVsc2Uge1xuICAgIHRoaXMub3BzLnNwbGljZShpbmRleCwgMCwgbmV3T3ApO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuRGVsdGEucHJvdG90eXBlLmNob3AgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsYXN0T3AgPSB0aGlzLm9wc1t0aGlzLm9wcy5sZW5ndGggLSAxXTtcbiAgaWYgKGxhc3RPcCAmJiBsYXN0T3AucmV0YWluICYmICFsYXN0T3AuYXR0cmlidXRlcykge1xuICAgIHRoaXMub3BzLnBvcCgpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuRGVsdGEucHJvdG90eXBlLmZpbHRlciA9IGZ1bmN0aW9uIChwcmVkaWNhdGUpIHtcbiAgcmV0dXJuIHRoaXMub3BzLmZpbHRlcihwcmVkaWNhdGUpO1xufTtcblxuRGVsdGEucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAocHJlZGljYXRlKSB7XG4gIHRoaXMub3BzLmZvckVhY2gocHJlZGljYXRlKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiAocHJlZGljYXRlKSB7XG4gIHJldHVybiB0aGlzLm9wcy5tYXAocHJlZGljYXRlKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5wYXJ0aXRpb24gPSBmdW5jdGlvbiAocHJlZGljYXRlKSB7XG4gIHZhciBwYXNzZWQgPSBbXSwgZmFpbGVkID0gW107XG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbihvcCkge1xuICAgIHZhciB0YXJnZXQgPSBwcmVkaWNhdGUob3ApID8gcGFzc2VkIDogZmFpbGVkO1xuICAgIHRhcmdldC5wdXNoKG9wKTtcbiAgfSk7XG4gIHJldHVybiBbcGFzc2VkLCBmYWlsZWRdO1xufTtcblxuRGVsdGEucHJvdG90eXBlLnJlZHVjZSA9IGZ1bmN0aW9uIChwcmVkaWNhdGUsIGluaXRpYWwpIHtcbiAgcmV0dXJuIHRoaXMub3BzLnJlZHVjZShwcmVkaWNhdGUsIGluaXRpYWwpO1xufTtcblxuRGVsdGEucHJvdG90eXBlLmNoYW5nZUxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMucmVkdWNlKGZ1bmN0aW9uIChsZW5ndGgsIGVsZW0pIHtcbiAgICBpZiAoZWxlbS5pbnNlcnQpIHtcbiAgICAgIHJldHVybiBsZW5ndGggKyBvcC5sZW5ndGgoZWxlbSk7XG4gICAgfSBlbHNlIGlmIChlbGVtLmRlbGV0ZSkge1xuICAgICAgcmV0dXJuIGxlbmd0aCAtIGVsZW0uZGVsZXRlO1xuICAgIH1cbiAgICByZXR1cm4gbGVuZ3RoO1xuICB9LCAwKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnJlZHVjZShmdW5jdGlvbiAobGVuZ3RoLCBlbGVtKSB7XG4gICAgcmV0dXJuIGxlbmd0aCArIG9wLmxlbmd0aChlbGVtKTtcbiAgfSwgMCk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIGlmICh0eXBlb2YgZW5kICE9PSAnbnVtYmVyJykgZW5kID0gSW5maW5pdHk7XG4gIHZhciBvcHMgPSBbXTtcbiAgdmFyIGl0ZXIgPSBvcC5pdGVyYXRvcih0aGlzLm9wcyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHdoaWxlIChpbmRleCA8IGVuZCAmJiBpdGVyLmhhc05leHQoKSkge1xuICAgIHZhciBuZXh0T3A7XG4gICAgaWYgKGluZGV4IDwgc3RhcnQpIHtcbiAgICAgIG5leHRPcCA9IGl0ZXIubmV4dChzdGFydCAtIGluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dE9wID0gaXRlci5uZXh0KGVuZCAtIGluZGV4KTtcbiAgICAgIG9wcy5wdXNoKG5leHRPcCk7XG4gICAgfVxuICAgIGluZGV4ICs9IG9wLmxlbmd0aChuZXh0T3ApO1xuICB9XG4gIHJldHVybiBuZXcgRGVsdGEob3BzKTtcbn07XG5cblxuRGVsdGEucHJvdG90eXBlLmNvbXBvc2UgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgdmFyIHRoaXNJdGVyID0gb3AuaXRlcmF0b3IodGhpcy5vcHMpO1xuICB2YXIgb3RoZXJJdGVyID0gb3AuaXRlcmF0b3Iob3RoZXIub3BzKTtcbiAgdmFyIG9wcyA9IFtdO1xuICB2YXIgZmlyc3RPdGhlciA9IG90aGVySXRlci5wZWVrKCk7XG4gIGlmIChmaXJzdE90aGVyICE9IG51bGwgJiYgdHlwZW9mIGZpcnN0T3RoZXIucmV0YWluID09PSAnbnVtYmVyJyAmJiBmaXJzdE90aGVyLmF0dHJpYnV0ZXMgPT0gbnVsbCkge1xuICAgIHZhciBmaXJzdExlZnQgPSBmaXJzdE90aGVyLnJldGFpbjtcbiAgICB3aGlsZSAodGhpc0l0ZXIucGVla1R5cGUoKSA9PT0gJ2luc2VydCcgJiYgdGhpc0l0ZXIucGVla0xlbmd0aCgpIDw9IGZpcnN0TGVmdCkge1xuICAgICAgZmlyc3RMZWZ0IC09IHRoaXNJdGVyLnBlZWtMZW5ndGgoKTtcbiAgICAgIG9wcy5wdXNoKHRoaXNJdGVyLm5leHQoKSk7XG4gICAgfVxuICAgIGlmIChmaXJzdE90aGVyLnJldGFpbiAtIGZpcnN0TGVmdCA+IDApIHtcbiAgICAgIG90aGVySXRlci5uZXh0KGZpcnN0T3RoZXIucmV0YWluIC0gZmlyc3RMZWZ0KTtcbiAgICB9XG4gIH1cbiAgdmFyIGRlbHRhID0gbmV3IERlbHRhKG9wcyk7XG4gIHdoaWxlICh0aGlzSXRlci5oYXNOZXh0KCkgfHwgb3RoZXJJdGVyLmhhc05leHQoKSkge1xuICAgIGlmIChvdGhlckl0ZXIucGVla1R5cGUoKSA9PT0gJ2luc2VydCcpIHtcbiAgICAgIGRlbHRhLnB1c2gob3RoZXJJdGVyLm5leHQoKSk7XG4gICAgfSBlbHNlIGlmICh0aGlzSXRlci5wZWVrVHlwZSgpID09PSAnZGVsZXRlJykge1xuICAgICAgZGVsdGEucHVzaCh0aGlzSXRlci5uZXh0KCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbGVuZ3RoID0gTWF0aC5taW4odGhpc0l0ZXIucGVla0xlbmd0aCgpLCBvdGhlckl0ZXIucGVla0xlbmd0aCgpKTtcbiAgICAgIHZhciB0aGlzT3AgPSB0aGlzSXRlci5uZXh0KGxlbmd0aCk7XG4gICAgICB2YXIgb3RoZXJPcCA9IG90aGVySXRlci5uZXh0KGxlbmd0aCk7XG4gICAgICBpZiAodHlwZW9mIG90aGVyT3AucmV0YWluID09PSAnbnVtYmVyJykge1xuICAgICAgICB2YXIgbmV3T3AgPSB7fTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzT3AucmV0YWluID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIG5ld09wLnJldGFpbiA9IGxlbmd0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdPcC5pbnNlcnQgPSB0aGlzT3AuaW5zZXJ0O1xuICAgICAgICB9XG4gICAgICAgIC8vIFByZXNlcnZlIG51bGwgd2hlbiBjb21wb3Npbmcgd2l0aCBhIHJldGFpbiwgb3RoZXJ3aXNlIHJlbW92ZSBpdCBmb3IgaW5zZXJ0c1xuICAgICAgICB2YXIgYXR0cmlidXRlcyA9IG9wLmF0dHJpYnV0ZXMuY29tcG9zZSh0aGlzT3AuYXR0cmlidXRlcywgb3RoZXJPcC5hdHRyaWJ1dGVzLCB0eXBlb2YgdGhpc09wLnJldGFpbiA9PT0gJ251bWJlcicpO1xuICAgICAgICBpZiAoYXR0cmlidXRlcykgbmV3T3AuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG4gICAgICAgIGRlbHRhLnB1c2gobmV3T3ApO1xuXG4gICAgICAgIC8vIE9wdGltaXphdGlvbiBpZiByZXN0IG9mIG90aGVyIGlzIGp1c3QgcmV0YWluXG4gICAgICAgIGlmICghb3RoZXJJdGVyLmhhc05leHQoKSAmJiBlcXVhbChkZWx0YS5vcHNbZGVsdGEub3BzLmxlbmd0aCAtIDFdLCBuZXdPcCkpIHtcbiAgICAgICAgICB2YXIgcmVzdCA9IG5ldyBEZWx0YSh0aGlzSXRlci5yZXN0KCkpO1xuICAgICAgICAgIHJldHVybiBkZWx0YS5jb25jYXQocmVzdCkuY2hvcCgpO1xuICAgICAgICB9XG5cbiAgICAgIC8vIE90aGVyIG9wIHNob3VsZCBiZSBkZWxldGUsIHdlIGNvdWxkIGJlIGFuIGluc2VydCBvciByZXRhaW5cbiAgICAgIC8vIEluc2VydCArIGRlbGV0ZSBjYW5jZWxzIG91dFxuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb3RoZXJPcFsnZGVsZXRlJ10gPT09ICdudW1iZXInICYmIHR5cGVvZiB0aGlzT3AucmV0YWluID09PSAnbnVtYmVyJykge1xuICAgICAgICBkZWx0YS5wdXNoKG90aGVyT3ApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGVsdGEuY2hvcCgpO1xufTtcblxuRGVsdGEucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICB2YXIgZGVsdGEgPSBuZXcgRGVsdGEodGhpcy5vcHMuc2xpY2UoKSk7XG4gIGlmIChvdGhlci5vcHMubGVuZ3RoID4gMCkge1xuICAgIGRlbHRhLnB1c2gob3RoZXIub3BzWzBdKTtcbiAgICBkZWx0YS5vcHMgPSBkZWx0YS5vcHMuY29uY2F0KG90aGVyLm9wcy5zbGljZSgxKSk7XG4gIH1cbiAgcmV0dXJuIGRlbHRhO1xufTtcblxuRGVsdGEucHJvdG90eXBlLmRpZmYgPSBmdW5jdGlvbiAob3RoZXIsIGluZGV4KSB7XG4gIGlmICh0aGlzLm9wcyA9PT0gb3RoZXIub3BzKSB7XG4gICAgcmV0dXJuIG5ldyBEZWx0YSgpO1xuICB9XG4gIHZhciBzdHJpbmdzID0gW3RoaXMsIG90aGVyXS5tYXAoZnVuY3Rpb24gKGRlbHRhKSB7XG4gICAgcmV0dXJuIGRlbHRhLm1hcChmdW5jdGlvbiAob3ApIHtcbiAgICAgIGlmIChvcC5pbnNlcnQgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9wLmluc2VydCA9PT0gJ3N0cmluZycgPyBvcC5pbnNlcnQgOiBOVUxMX0NIQVJBQ1RFUjtcbiAgICAgIH1cbiAgICAgIHZhciBwcmVwID0gKGRlbHRhID09PSBvdGhlcikgPyAnb24nIDogJ3dpdGgnO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdkaWZmKCkgY2FsbGVkICcgKyBwcmVwICsgJyBub24tZG9jdW1lbnQnKTtcbiAgICB9KS5qb2luKCcnKTtcbiAgfSk7XG4gIHZhciBkZWx0YSA9IG5ldyBEZWx0YSgpO1xuICB2YXIgZGlmZlJlc3VsdCA9IGRpZmYoc3RyaW5nc1swXSwgc3RyaW5nc1sxXSwgaW5kZXgpO1xuICB2YXIgdGhpc0l0ZXIgPSBvcC5pdGVyYXRvcih0aGlzLm9wcyk7XG4gIHZhciBvdGhlckl0ZXIgPSBvcC5pdGVyYXRvcihvdGhlci5vcHMpO1xuICBkaWZmUmVzdWx0LmZvckVhY2goZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuICAgIHZhciBsZW5ndGggPSBjb21wb25lbnRbMV0ubGVuZ3RoO1xuICAgIHdoaWxlIChsZW5ndGggPiAwKSB7XG4gICAgICB2YXIgb3BMZW5ndGggPSAwO1xuICAgICAgc3dpdGNoIChjb21wb25lbnRbMF0pIHtcbiAgICAgICAgY2FzZSBkaWZmLklOU0VSVDpcbiAgICAgICAgICBvcExlbmd0aCA9IE1hdGgubWluKG90aGVySXRlci5wZWVrTGVuZ3RoKCksIGxlbmd0aCk7XG4gICAgICAgICAgZGVsdGEucHVzaChvdGhlckl0ZXIubmV4dChvcExlbmd0aCkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGRpZmYuREVMRVRFOlxuICAgICAgICAgIG9wTGVuZ3RoID0gTWF0aC5taW4obGVuZ3RoLCB0aGlzSXRlci5wZWVrTGVuZ3RoKCkpO1xuICAgICAgICAgIHRoaXNJdGVyLm5leHQob3BMZW5ndGgpO1xuICAgICAgICAgIGRlbHRhWydkZWxldGUnXShvcExlbmd0aCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgZGlmZi5FUVVBTDpcbiAgICAgICAgICBvcExlbmd0aCA9IE1hdGgubWluKHRoaXNJdGVyLnBlZWtMZW5ndGgoKSwgb3RoZXJJdGVyLnBlZWtMZW5ndGgoKSwgbGVuZ3RoKTtcbiAgICAgICAgICB2YXIgdGhpc09wID0gdGhpc0l0ZXIubmV4dChvcExlbmd0aCk7XG4gICAgICAgICAgdmFyIG90aGVyT3AgPSBvdGhlckl0ZXIubmV4dChvcExlbmd0aCk7XG4gICAgICAgICAgaWYgKGVxdWFsKHRoaXNPcC5pbnNlcnQsIG90aGVyT3AuaW5zZXJ0KSkge1xuICAgICAgICAgICAgZGVsdGEucmV0YWluKG9wTGVuZ3RoLCBvcC5hdHRyaWJ1dGVzLmRpZmYodGhpc09wLmF0dHJpYnV0ZXMsIG90aGVyT3AuYXR0cmlidXRlcykpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWx0YS5wdXNoKG90aGVyT3ApWydkZWxldGUnXShvcExlbmd0aCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgbGVuZ3RoIC09IG9wTGVuZ3RoO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkZWx0YS5jaG9wKCk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuZWFjaExpbmUgPSBmdW5jdGlvbiAocHJlZGljYXRlLCBuZXdsaW5lKSB7XG4gIG5ld2xpbmUgPSBuZXdsaW5lIHx8ICdcXG4nO1xuICB2YXIgaXRlciA9IG9wLml0ZXJhdG9yKHRoaXMub3BzKTtcbiAgdmFyIGxpbmUgPSBuZXcgRGVsdGEoKTtcbiAgdmFyIGkgPSAwO1xuICB3aGlsZSAoaXRlci5oYXNOZXh0KCkpIHtcbiAgICBpZiAoaXRlci5wZWVrVHlwZSgpICE9PSAnaW5zZXJ0JykgcmV0dXJuO1xuICAgIHZhciB0aGlzT3AgPSBpdGVyLnBlZWsoKTtcbiAgICB2YXIgc3RhcnQgPSBvcC5sZW5ndGgodGhpc09wKSAtIGl0ZXIucGVla0xlbmd0aCgpO1xuICAgIHZhciBpbmRleCA9IHR5cGVvZiB0aGlzT3AuaW5zZXJ0ID09PSAnc3RyaW5nJyA/XG4gICAgICB0aGlzT3AuaW5zZXJ0LmluZGV4T2YobmV3bGluZSwgc3RhcnQpIC0gc3RhcnQgOiAtMTtcbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICBsaW5lLnB1c2goaXRlci5uZXh0KCkpO1xuICAgIH0gZWxzZSBpZiAoaW5kZXggPiAwKSB7XG4gICAgICBsaW5lLnB1c2goaXRlci5uZXh0KGluZGV4KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcmVkaWNhdGUobGluZSwgaXRlci5uZXh0KDEpLmF0dHJpYnV0ZXMgfHwge30sIGkpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpICs9IDE7XG4gICAgICBsaW5lID0gbmV3IERlbHRhKCk7XG4gICAgfVxuICB9XG4gIGlmIChsaW5lLmxlbmd0aCgpID4gMCkge1xuICAgIHByZWRpY2F0ZShsaW5lLCB7fSwgaSk7XG4gIH1cbn07XG5cbkRlbHRhLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiAob3RoZXIsIHByaW9yaXR5KSB7XG4gIHByaW9yaXR5ID0gISFwcmlvcml0eTtcbiAgaWYgKHR5cGVvZiBvdGhlciA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm1Qb3NpdGlvbihvdGhlciwgcHJpb3JpdHkpO1xuICB9XG4gIHZhciB0aGlzSXRlciA9IG9wLml0ZXJhdG9yKHRoaXMub3BzKTtcbiAgdmFyIG90aGVySXRlciA9IG9wLml0ZXJhdG9yKG90aGVyLm9wcyk7XG4gIHZhciBkZWx0YSA9IG5ldyBEZWx0YSgpO1xuICB3aGlsZSAodGhpc0l0ZXIuaGFzTmV4dCgpIHx8IG90aGVySXRlci5oYXNOZXh0KCkpIHtcbiAgICBpZiAodGhpc0l0ZXIucGVla1R5cGUoKSA9PT0gJ2luc2VydCcgJiYgKHByaW9yaXR5IHx8IG90aGVySXRlci5wZWVrVHlwZSgpICE9PSAnaW5zZXJ0JykpIHtcbiAgICAgIGRlbHRhLnJldGFpbihvcC5sZW5ndGgodGhpc0l0ZXIubmV4dCgpKSk7XG4gICAgfSBlbHNlIGlmIChvdGhlckl0ZXIucGVla1R5cGUoKSA9PT0gJ2luc2VydCcpIHtcbiAgICAgIGRlbHRhLnB1c2gob3RoZXJJdGVyLm5leHQoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsZW5ndGggPSBNYXRoLm1pbih0aGlzSXRlci5wZWVrTGVuZ3RoKCksIG90aGVySXRlci5wZWVrTGVuZ3RoKCkpO1xuICAgICAgdmFyIHRoaXNPcCA9IHRoaXNJdGVyLm5leHQobGVuZ3RoKTtcbiAgICAgIHZhciBvdGhlck9wID0gb3RoZXJJdGVyLm5leHQobGVuZ3RoKTtcbiAgICAgIGlmICh0aGlzT3BbJ2RlbGV0ZSddKSB7XG4gICAgICAgIC8vIE91ciBkZWxldGUgZWl0aGVyIG1ha2VzIHRoZWlyIGRlbGV0ZSByZWR1bmRhbnQgb3IgcmVtb3ZlcyB0aGVpciByZXRhaW5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2UgaWYgKG90aGVyT3BbJ2RlbGV0ZSddKSB7XG4gICAgICAgIGRlbHRhLnB1c2gob3RoZXJPcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBXZSByZXRhaW4gZWl0aGVyIHRoZWlyIHJldGFpbiBvciBpbnNlcnRcbiAgICAgICAgZGVsdGEucmV0YWluKGxlbmd0aCwgb3AuYXR0cmlidXRlcy50cmFuc2Zvcm0odGhpc09wLmF0dHJpYnV0ZXMsIG90aGVyT3AuYXR0cmlidXRlcywgcHJpb3JpdHkpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlbHRhLmNob3AoKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS50cmFuc2Zvcm1Qb3NpdGlvbiA9IGZ1bmN0aW9uIChpbmRleCwgcHJpb3JpdHkpIHtcbiAgcHJpb3JpdHkgPSAhIXByaW9yaXR5O1xuICB2YXIgdGhpc0l0ZXIgPSBvcC5pdGVyYXRvcih0aGlzLm9wcyk7XG4gIHZhciBvZmZzZXQgPSAwO1xuICB3aGlsZSAodGhpc0l0ZXIuaGFzTmV4dCgpICYmIG9mZnNldCA8PSBpbmRleCkge1xuICAgIHZhciBsZW5ndGggPSB0aGlzSXRlci5wZWVrTGVuZ3RoKCk7XG4gICAgdmFyIG5leHRUeXBlID0gdGhpc0l0ZXIucGVla1R5cGUoKTtcbiAgICB0aGlzSXRlci5uZXh0KCk7XG4gICAgaWYgKG5leHRUeXBlID09PSAnZGVsZXRlJykge1xuICAgICAgaW5kZXggLT0gTWF0aC5taW4obGVuZ3RoLCBpbmRleCAtIG9mZnNldCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9IGVsc2UgaWYgKG5leHRUeXBlID09PSAnaW5zZXJ0JyAmJiAob2Zmc2V0IDwgaW5kZXggfHwgIXByaW9yaXR5KSkge1xuICAgICAgaW5kZXggKz0gbGVuZ3RoO1xuICAgIH1cbiAgICBvZmZzZXQgKz0gbGVuZ3RoO1xuICB9XG4gIHJldHVybiBpbmRleDtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBEZWx0YTtcbiIsInZhciBlcXVhbCA9IHJlcXVpcmUoJ2RlZXAtZXF1YWwnKTtcbnZhciBleHRlbmQgPSByZXF1aXJlKCdleHRlbmQnKTtcblxuXG52YXIgbGliID0ge1xuICBhdHRyaWJ1dGVzOiB7XG4gICAgY29tcG9zZTogZnVuY3Rpb24gKGEsIGIsIGtlZXBOdWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGEgIT09ICdvYmplY3QnKSBhID0ge307XG4gICAgICBpZiAodHlwZW9mIGIgIT09ICdvYmplY3QnKSBiID0ge307XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IGV4dGVuZCh0cnVlLCB7fSwgYik7XG4gICAgICBpZiAoIWtlZXBOdWxsKSB7XG4gICAgICAgIGF0dHJpYnV0ZXMgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5yZWR1Y2UoZnVuY3Rpb24gKGNvcHksIGtleSkge1xuICAgICAgICAgIGlmIChhdHRyaWJ1dGVzW2tleV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgY29weVtrZXldID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY29weTtcbiAgICAgICAgfSwge30pO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIGEpIHtcbiAgICAgICAgaWYgKGFba2V5XSAhPT0gdW5kZWZpbmVkICYmIGJba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgYXR0cmlidXRlc1trZXldID0gYVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoID4gMCA/IGF0dHJpYnV0ZXMgOiB1bmRlZmluZWQ7XG4gICAgfSxcblxuICAgIGRpZmY6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIGlmICh0eXBlb2YgYSAhPT0gJ29iamVjdCcpIGEgPSB7fTtcbiAgICAgIGlmICh0eXBlb2YgYiAhPT0gJ29iamVjdCcpIGIgPSB7fTtcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gT2JqZWN0LmtleXMoYSkuY29uY2F0KE9iamVjdC5rZXlzKGIpKS5yZWR1Y2UoZnVuY3Rpb24gKGF0dHJpYnV0ZXMsIGtleSkge1xuICAgICAgICBpZiAoIWVxdWFsKGFba2V5XSwgYltrZXldKSkge1xuICAgICAgICAgIGF0dHJpYnV0ZXNba2V5XSA9IGJba2V5XSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGJba2V5XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgICAgIH0sIHt9KTtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5sZW5ndGggPiAwID8gYXR0cmlidXRlcyA6IHVuZGVmaW5lZDtcbiAgICB9LFxuXG4gICAgdHJhbnNmb3JtOiBmdW5jdGlvbiAoYSwgYiwgcHJpb3JpdHkpIHtcbiAgICAgIGlmICh0eXBlb2YgYSAhPT0gJ29iamVjdCcpIHJldHVybiBiO1xuICAgICAgaWYgKHR5cGVvZiBiICE9PSAnb2JqZWN0JykgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIGlmICghcHJpb3JpdHkpIHJldHVybiBiOyAgLy8gYiBzaW1wbHkgb3ZlcndyaXRlcyB1cyB3aXRob3V0IHByaW9yaXR5XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IE9iamVjdC5rZXlzKGIpLnJlZHVjZShmdW5jdGlvbiAoYXR0cmlidXRlcywga2V5KSB7XG4gICAgICAgIGlmIChhW2tleV0gPT09IHVuZGVmaW5lZCkgYXR0cmlidXRlc1trZXldID0gYltrZXldOyAgLy8gbnVsbCBpcyBhIHZhbGlkIHZhbHVlXG4gICAgICAgIHJldHVybiBhdHRyaWJ1dGVzO1xuICAgICAgfSwge30pO1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmxlbmd0aCA+IDAgPyBhdHRyaWJ1dGVzIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcblxuICBpdGVyYXRvcjogZnVuY3Rpb24gKG9wcykge1xuICAgIHJldHVybiBuZXcgSXRlcmF0b3Iob3BzKTtcbiAgfSxcblxuICBsZW5ndGg6IGZ1bmN0aW9uIChvcCkge1xuICAgIGlmICh0eXBlb2Ygb3BbJ2RlbGV0ZSddID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIG9wWydkZWxldGUnXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcC5yZXRhaW4gPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gb3AucmV0YWluO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9wLmluc2VydCA9PT0gJ3N0cmluZycgPyBvcC5pbnNlcnQubGVuZ3RoIDogMTtcbiAgICB9XG4gIH1cbn07XG5cblxuZnVuY3Rpb24gSXRlcmF0b3Iob3BzKSB7XG4gIHRoaXMub3BzID0gb3BzO1xuICB0aGlzLmluZGV4ID0gMDtcbiAgdGhpcy5vZmZzZXQgPSAwO1xufTtcblxuSXRlcmF0b3IucHJvdG90eXBlLmhhc05leHQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnBlZWtMZW5ndGgoKSA8IEluZmluaXR5O1xufTtcblxuSXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAobGVuZ3RoKSB7XG4gIGlmICghbGVuZ3RoKSBsZW5ndGggPSBJbmZpbml0eTtcbiAgdmFyIG5leHRPcCA9IHRoaXMub3BzW3RoaXMuaW5kZXhdO1xuICBpZiAobmV4dE9wKSB7XG4gICAgdmFyIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgIHZhciBvcExlbmd0aCA9IGxpYi5sZW5ndGgobmV4dE9wKVxuICAgIGlmIChsZW5ndGggPj0gb3BMZW5ndGggLSBvZmZzZXQpIHtcbiAgICAgIGxlbmd0aCA9IG9wTGVuZ3RoIC0gb2Zmc2V0O1xuICAgICAgdGhpcy5pbmRleCArPSAxO1xuICAgICAgdGhpcy5vZmZzZXQgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9mZnNldCArPSBsZW5ndGg7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbmV4dE9wWydkZWxldGUnXSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiB7ICdkZWxldGUnOiBsZW5ndGggfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHJldE9wID0ge307XG4gICAgICBpZiAobmV4dE9wLmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgcmV0T3AuYXR0cmlidXRlcyA9IG5leHRPcC5hdHRyaWJ1dGVzO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBuZXh0T3AucmV0YWluID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXRPcC5yZXRhaW4gPSBsZW5ndGg7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBuZXh0T3AuaW5zZXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXRPcC5pbnNlcnQgPSBuZXh0T3AuaW5zZXJ0LnN1YnN0cihvZmZzZXQsIGxlbmd0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBvZmZzZXQgc2hvdWxkID09PSAwLCBsZW5ndGggc2hvdWxkID09PSAxXG4gICAgICAgIHJldE9wLmluc2VydCA9IG5leHRPcC5pbnNlcnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0T3A7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB7IHJldGFpbjogSW5maW5pdHkgfTtcbiAgfVxufTtcblxuSXRlcmF0b3IucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLm9wc1t0aGlzLmluZGV4XTtcbn07XG5cbkl0ZXJhdG9yLnByb3RvdHlwZS5wZWVrTGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5vcHNbdGhpcy5pbmRleF0pIHtcbiAgICAvLyBTaG91bGQgbmV2ZXIgcmV0dXJuIDAgaWYgb3VyIGluZGV4IGlzIGJlaW5nIG1hbmFnZWQgY29ycmVjdGx5XG4gICAgcmV0dXJuIGxpYi5sZW5ndGgodGhpcy5vcHNbdGhpcy5pbmRleF0pIC0gdGhpcy5vZmZzZXQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEluZmluaXR5O1xuICB9XG59O1xuXG5JdGVyYXRvci5wcm90b3R5cGUucGVla1R5cGUgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLm9wc1t0aGlzLmluZGV4XSkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5vcHNbdGhpcy5pbmRleF1bJ2RlbGV0ZSddID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuICdkZWxldGUnO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMub3BzW3RoaXMuaW5kZXhdLnJldGFpbiA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiAncmV0YWluJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICdpbnNlcnQnO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJ3JldGFpbic7XG59O1xuXG5JdGVyYXRvci5wcm90b3R5cGUucmVzdCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLmhhc05leHQoKSkge1xuICAgIHJldHVybiBbXTtcbiAgfSBlbHNlIGlmICh0aGlzLm9mZnNldCA9PT0gMCkge1xuICAgIHJldHVybiB0aGlzLm9wcy5zbGljZSh0aGlzLmluZGV4KTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleDtcbiAgICB2YXIgbmV4dCA9IHRoaXMubmV4dCgpO1xuICAgIHZhciByZXN0ID0gdGhpcy5vcHMuc2xpY2UodGhpcy5pbmRleCk7XG4gICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XG4gICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgIHJldHVybiBbbmV4dF0uY29uY2F0KHJlc3QpO1xuICB9XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gbGliO1xuIiwibGV0IGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbmVsZW0uY2xhc3NMaXN0LnRvZ2dsZSgndGVzdC1jbGFzcycsIGZhbHNlKTtcbmlmIChlbGVtLmNsYXNzTGlzdC5jb250YWlucygndGVzdC1jbGFzcycpKSB7XG4gIGxldCBfdG9nZ2xlID0gRE9NVG9rZW5MaXN0LnByb3RvdHlwZS50b2dnbGU7XG4gIERPTVRva2VuTGlzdC5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24odG9rZW4sIGZvcmNlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxICYmICF0aGlzLmNvbnRhaW5zKHRva2VuKSA9PT0gIWZvcmNlKSB7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBfdG9nZ2xlLmNhbGwodGhpcywgdG9rZW4pO1xuICAgIH1cbiAgfTtcbn1cblxuaWYgKCFTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgpIHtcbiAgU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoID0gZnVuY3Rpb24oc2VhcmNoU3RyaW5nLCBwb3NpdGlvbil7XG4gICAgcG9zaXRpb24gPSBwb3NpdGlvbiB8fCAwO1xuICAgIHJldHVybiB0aGlzLnN1YnN0cihwb3NpdGlvbiwgc2VhcmNoU3RyaW5nLmxlbmd0aCkgPT09IHNlYXJjaFN0cmluZztcbiAgfTtcbn1cblxuaWYgKCFTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKSB7XG4gIFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGggPSBmdW5jdGlvbihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKSB7XG4gICAgdmFyIHN1YmplY3RTdHJpbmcgPSB0aGlzLnRvU3RyaW5nKCk7XG4gICAgaWYgKHR5cGVvZiBwb3NpdGlvbiAhPT0gJ251bWJlcicgfHwgIWlzRmluaXRlKHBvc2l0aW9uKSB8fCBNYXRoLmZsb29yKHBvc2l0aW9uKSAhPT0gcG9zaXRpb24gfHwgcG9zaXRpb24gPiBzdWJqZWN0U3RyaW5nLmxlbmd0aCkge1xuICAgICAgcG9zaXRpb24gPSBzdWJqZWN0U3RyaW5nLmxlbmd0aDtcbiAgICB9XG4gICAgcG9zaXRpb24gLT0gc2VhcmNoU3RyaW5nLmxlbmd0aDtcbiAgICB2YXIgbGFzdEluZGV4ID0gc3ViamVjdFN0cmluZy5pbmRleE9mKHNlYXJjaFN0cmluZywgcG9zaXRpb24pO1xuICAgIHJldHVybiBsYXN0SW5kZXggIT09IC0xICYmIGxhc3RJbmRleCA9PT0gcG9zaXRpb247XG4gIH07XG59XG5cbmlmICghQXJyYXkucHJvdG90eXBlLmZpbmQpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgXCJmaW5kXCIsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUuZmluZCBjYWxsZWQgb24gbnVsbCBvciB1bmRlZmluZWQnKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcHJlZGljYXRlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ByZWRpY2F0ZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICAgIHZhciBsaXN0ID0gT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoID4+PiAwO1xuICAgICAgdmFyIHRoaXNBcmcgPSBhcmd1bWVudHNbMV07XG4gICAgICB2YXIgdmFsdWU7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWUgPSBsaXN0W2ldO1xuICAgICAgICBpZiAocHJlZGljYXRlLmNhbGwodGhpc0FyZywgdmFsdWUsIGksIGxpc3QpKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSk7XG59XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uKCkge1xuICAvLyBEaXNhYmxlIHJlc2l6aW5nIGluIEZpcmVmb3hcbiAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJlbmFibGVPYmplY3RSZXNpemluZ1wiLCBmYWxzZSwgZmFsc2UpO1xuICAvLyBEaXNhYmxlIGF1dG9tYXRpYyBsaW5raWZ5aW5nIGluIElFMTFcbiAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJhdXRvVXJsRGV0ZWN0XCIsIGZhbHNlLCBmYWxzZSk7XG59KTtcbiIsIi8qIVxuICogUXVpbGwgRWRpdG9yIHYxLjMuN1xuICogaHR0cHM6Ly9xdWlsbGpzLmNvbS9cbiAqIENvcHlyaWdodCAoYykgMjAxNCwgSmFzb24gQ2hlblxuICogQ29weXJpZ2h0IChjKSAyMDEzLCBzYWxlc2ZvcmNlLmNvbVxuICovXG4oZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJRdWlsbFwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJRdWlsbFwiXSA9IGZhY3RvcnkoKTtcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTA5KTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb250YWluZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xudmFyIGZvcm1hdF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG52YXIgbGVhZl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG52YXIgc2Nyb2xsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1KTtcbnZhciBpbmxpbmVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDYpO1xudmFyIGJsb2NrXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3KTtcbnZhciBlbWJlZF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OCk7XG52YXIgdGV4dF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OSk7XG52YXIgYXR0cmlidXRvcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG52YXIgY2xhc3NfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpO1xudmFyIHN0eWxlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKTtcbnZhciBzdG9yZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMSk7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIFBhcmNobWVudCA9IHtcbiAgICBTY29wZTogUmVnaXN0cnkuU2NvcGUsXG4gICAgY3JlYXRlOiBSZWdpc3RyeS5jcmVhdGUsXG4gICAgZmluZDogUmVnaXN0cnkuZmluZCxcbiAgICBxdWVyeTogUmVnaXN0cnkucXVlcnksXG4gICAgcmVnaXN0ZXI6IFJlZ2lzdHJ5LnJlZ2lzdGVyLFxuICAgIENvbnRhaW5lcjogY29udGFpbmVyXzEuZGVmYXVsdCxcbiAgICBGb3JtYXQ6IGZvcm1hdF8xLmRlZmF1bHQsXG4gICAgTGVhZjogbGVhZl8xLmRlZmF1bHQsXG4gICAgRW1iZWQ6IGVtYmVkXzEuZGVmYXVsdCxcbiAgICBTY3JvbGw6IHNjcm9sbF8xLmRlZmF1bHQsXG4gICAgQmxvY2s6IGJsb2NrXzEuZGVmYXVsdCxcbiAgICBJbmxpbmU6IGlubGluZV8xLmRlZmF1bHQsXG4gICAgVGV4dDogdGV4dF8xLmRlZmF1bHQsXG4gICAgQXR0cmlidXRvcjoge1xuICAgICAgICBBdHRyaWJ1dGU6IGF0dHJpYnV0b3JfMS5kZWZhdWx0LFxuICAgICAgICBDbGFzczogY2xhc3NfMS5kZWZhdWx0LFxuICAgICAgICBTdHlsZTogc3R5bGVfMS5kZWZhdWx0LFxuICAgICAgICBTdG9yZTogc3RvcmVfMS5kZWZhdWx0LFxuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gUGFyY2htZW50O1xuXG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgUGFyY2htZW50RXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFBhcmNobWVudEVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBhcmNobWVudEVycm9yKG1lc3NhZ2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgbWVzc2FnZSA9ICdbUGFyY2htZW50XSAnICsgbWVzc2FnZTtcbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtZXNzYWdlKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgX3RoaXMubmFtZSA9IF90aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFBhcmNobWVudEVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0cy5QYXJjaG1lbnRFcnJvciA9IFBhcmNobWVudEVycm9yO1xudmFyIGF0dHJpYnV0ZXMgPSB7fTtcbnZhciBjbGFzc2VzID0ge307XG52YXIgdGFncyA9IHt9O1xudmFyIHR5cGVzID0ge307XG5leHBvcnRzLkRBVEFfS0VZID0gJ19fYmxvdCc7XG52YXIgU2NvcGU7XG4oZnVuY3Rpb24gKFNjb3BlKSB7XG4gICAgU2NvcGVbU2NvcGVbXCJUWVBFXCJdID0gM10gPSBcIlRZUEVcIjtcbiAgICBTY29wZVtTY29wZVtcIkxFVkVMXCJdID0gMTJdID0gXCJMRVZFTFwiO1xuICAgIFNjb3BlW1Njb3BlW1wiQVRUUklCVVRFXCJdID0gMTNdID0gXCJBVFRSSUJVVEVcIjtcbiAgICBTY29wZVtTY29wZVtcIkJMT1RcIl0gPSAxNF0gPSBcIkJMT1RcIjtcbiAgICBTY29wZVtTY29wZVtcIklOTElORVwiXSA9IDddID0gXCJJTkxJTkVcIjtcbiAgICBTY29wZVtTY29wZVtcIkJMT0NLXCJdID0gMTFdID0gXCJCTE9DS1wiO1xuICAgIFNjb3BlW1Njb3BlW1wiQkxPQ0tfQkxPVFwiXSA9IDEwXSA9IFwiQkxPQ0tfQkxPVFwiO1xuICAgIFNjb3BlW1Njb3BlW1wiSU5MSU5FX0JMT1RcIl0gPSA2XSA9IFwiSU5MSU5FX0JMT1RcIjtcbiAgICBTY29wZVtTY29wZVtcIkJMT0NLX0FUVFJJQlVURVwiXSA9IDldID0gXCJCTE9DS19BVFRSSUJVVEVcIjtcbiAgICBTY29wZVtTY29wZVtcIklOTElORV9BVFRSSUJVVEVcIl0gPSA1XSA9IFwiSU5MSU5FX0FUVFJJQlVURVwiO1xuICAgIFNjb3BlW1Njb3BlW1wiQU5ZXCJdID0gMTVdID0gXCJBTllcIjtcbn0pKFNjb3BlID0gZXhwb3J0cy5TY29wZSB8fCAoZXhwb3J0cy5TY29wZSA9IHt9KSk7XG5mdW5jdGlvbiBjcmVhdGUoaW5wdXQsIHZhbHVlKSB7XG4gICAgdmFyIG1hdGNoID0gcXVlcnkoaW5wdXQpO1xuICAgIGlmIChtYXRjaCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBQYXJjaG1lbnRFcnJvcihcIlVuYWJsZSB0byBjcmVhdGUgXCIgKyBpbnB1dCArIFwiIGJsb3RcIik7XG4gICAgfVxuICAgIHZhciBCbG90Q2xhc3MgPSBtYXRjaDtcbiAgICB2YXIgbm9kZSA9IFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpbnB1dCBpbnN0YW5jZW9mIE5vZGUgfHwgaW5wdXRbJ25vZGVUeXBlJ10gPT09IE5vZGUuVEVYVF9OT0RFID8gaW5wdXQgOiBCbG90Q2xhc3MuY3JlYXRlKHZhbHVlKTtcbiAgICByZXR1cm4gbmV3IEJsb3RDbGFzcyhub2RlLCB2YWx1ZSk7XG59XG5leHBvcnRzLmNyZWF0ZSA9IGNyZWF0ZTtcbmZ1bmN0aW9uIGZpbmQobm9kZSwgYnViYmxlKSB7XG4gICAgaWYgKGJ1YmJsZSA9PT0gdm9pZCAwKSB7IGJ1YmJsZSA9IGZhbHNlOyB9XG4gICAgaWYgKG5vZGUgPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlmIChub2RlW2V4cG9ydHMuREFUQV9LRVldICE9IG51bGwpXG4gICAgICAgIHJldHVybiBub2RlW2V4cG9ydHMuREFUQV9LRVldLmJsb3Q7XG4gICAgaWYgKGJ1YmJsZSlcbiAgICAgICAgcmV0dXJuIGZpbmQobm9kZS5wYXJlbnROb2RlLCBidWJibGUpO1xuICAgIHJldHVybiBudWxsO1xufVxuZXhwb3J0cy5maW5kID0gZmluZDtcbmZ1bmN0aW9uIHF1ZXJ5KHF1ZXJ5LCBzY29wZSkge1xuICAgIGlmIChzY29wZSA9PT0gdm9pZCAwKSB7IHNjb3BlID0gU2NvcGUuQU5ZOyB9XG4gICAgdmFyIG1hdGNoO1xuICAgIGlmICh0eXBlb2YgcXVlcnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG1hdGNoID0gdHlwZXNbcXVlcnldIHx8IGF0dHJpYnV0ZXNbcXVlcnldO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgfVxuICAgIGVsc2UgaWYgKHF1ZXJ5IGluc3RhbmNlb2YgVGV4dCB8fCBxdWVyeVsnbm9kZVR5cGUnXSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgICAgbWF0Y2ggPSB0eXBlc1sndGV4dCddO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcXVlcnkgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGlmIChxdWVyeSAmIFNjb3BlLkxFVkVMICYgU2NvcGUuQkxPQ0spIHtcbiAgICAgICAgICAgIG1hdGNoID0gdHlwZXNbJ2Jsb2NrJ107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocXVlcnkgJiBTY29wZS5MRVZFTCAmIFNjb3BlLklOTElORSkge1xuICAgICAgICAgICAgbWF0Y2ggPSB0eXBlc1snaW5saW5lJ107XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAocXVlcnkgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICB2YXIgbmFtZXMgPSAocXVlcnkuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKS5zcGxpdCgvXFxzKy8pO1xuICAgICAgICBmb3IgKHZhciBpIGluIG5hbWVzKSB7XG4gICAgICAgICAgICBtYXRjaCA9IGNsYXNzZXNbbmFtZXNbaV1dO1xuICAgICAgICAgICAgaWYgKG1hdGNoKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG1hdGNoID0gbWF0Y2ggfHwgdGFnc1txdWVyeS50YWdOYW1lXTtcbiAgICB9XG4gICAgaWYgKG1hdGNoID09IG51bGwpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAoc2NvcGUgJiBTY29wZS5MRVZFTCAmIG1hdGNoLnNjb3BlICYmIHNjb3BlICYgU2NvcGUuVFlQRSAmIG1hdGNoLnNjb3BlKVxuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgcmV0dXJuIG51bGw7XG59XG5leHBvcnRzLnF1ZXJ5ID0gcXVlcnk7XG5mdW5jdGlvbiByZWdpc3RlcigpIHtcbiAgICB2YXIgRGVmaW5pdGlvbnMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBEZWZpbml0aW9uc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICBpZiAoRGVmaW5pdGlvbnMubGVuZ3RoID4gMSkge1xuICAgICAgICByZXR1cm4gRGVmaW5pdGlvbnMubWFwKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVnaXN0ZXIoZCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgRGVmaW5pdGlvbiA9IERlZmluaXRpb25zWzBdO1xuICAgIGlmICh0eXBlb2YgRGVmaW5pdGlvbi5ibG90TmFtZSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIERlZmluaXRpb24uYXR0ck5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBQYXJjaG1lbnRFcnJvcignSW52YWxpZCBkZWZpbml0aW9uJyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKERlZmluaXRpb24uYmxvdE5hbWUgPT09ICdhYnN0cmFjdCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFBhcmNobWVudEVycm9yKCdDYW5ub3QgcmVnaXN0ZXIgYWJzdHJhY3QgY2xhc3MnKTtcbiAgICB9XG4gICAgdHlwZXNbRGVmaW5pdGlvbi5ibG90TmFtZSB8fCBEZWZpbml0aW9uLmF0dHJOYW1lXSA9IERlZmluaXRpb247XG4gICAgaWYgKHR5cGVvZiBEZWZpbml0aW9uLmtleU5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGF0dHJpYnV0ZXNbRGVmaW5pdGlvbi5rZXlOYW1lXSA9IERlZmluaXRpb247XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoRGVmaW5pdGlvbi5jbGFzc05hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgY2xhc3Nlc1tEZWZpbml0aW9uLmNsYXNzTmFtZV0gPSBEZWZpbml0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChEZWZpbml0aW9uLnRhZ05hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoRGVmaW5pdGlvbi50YWdOYW1lKSkge1xuICAgICAgICAgICAgICAgIERlZmluaXRpb24udGFnTmFtZSA9IERlZmluaXRpb24udGFnTmFtZS5tYXAoZnVuY3Rpb24gKHRhZ05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhZ05hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIERlZmluaXRpb24udGFnTmFtZSA9IERlZmluaXRpb24udGFnTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRhZ05hbWVzID0gQXJyYXkuaXNBcnJheShEZWZpbml0aW9uLnRhZ05hbWUpID8gRGVmaW5pdGlvbi50YWdOYW1lIDogW0RlZmluaXRpb24udGFnTmFtZV07XG4gICAgICAgICAgICB0YWdOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFnc1t0YWddID09IG51bGwgfHwgRGVmaW5pdGlvbi5jbGFzc05hbWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0YWdzW3RhZ10gPSBEZWZpbml0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBEZWZpbml0aW9uO1xufVxuZXhwb3J0cy5yZWdpc3RlciA9IHJlZ2lzdGVyO1xuXG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZGlmZiA9IF9fd2VicGFja19yZXF1aXJlX18oNTEpO1xudmFyIGVxdWFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG52YXIgZXh0ZW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbnZhciBvcCA9IF9fd2VicGFja19yZXF1aXJlX18oMjApO1xuXG5cbnZhciBOVUxMX0NIQVJBQ1RFUiA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMCk7ICAvLyBQbGFjZWhvbGRlciBjaGFyIGZvciBlbWJlZCBpbiBkaWZmKClcblxuXG52YXIgRGVsdGEgPSBmdW5jdGlvbiAob3BzKSB7XG4gIC8vIEFzc3VtZSB3ZSBhcmUgZ2l2ZW4gYSB3ZWxsIGZvcm1lZCBvcHNcbiAgaWYgKEFycmF5LmlzQXJyYXkob3BzKSkge1xuICAgIHRoaXMub3BzID0gb3BzO1xuICB9IGVsc2UgaWYgKG9wcyAhPSBudWxsICYmIEFycmF5LmlzQXJyYXkob3BzLm9wcykpIHtcbiAgICB0aGlzLm9wcyA9IG9wcy5vcHM7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5vcHMgPSBbXTtcbiAgfVxufTtcblxuXG5EZWx0YS5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24gKHRleHQsIGF0dHJpYnV0ZXMpIHtcbiAgdmFyIG5ld09wID0ge307XG4gIGlmICh0ZXh0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIHRoaXM7XG4gIG5ld09wLmluc2VydCA9IHRleHQ7XG4gIGlmIChhdHRyaWJ1dGVzICE9IG51bGwgJiYgdHlwZW9mIGF0dHJpYnV0ZXMgPT09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmxlbmd0aCA+IDApIHtcbiAgICBuZXdPcC5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcbiAgfVxuICByZXR1cm4gdGhpcy5wdXNoKG5ld09wKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbiAobGVuZ3RoKSB7XG4gIGlmIChsZW5ndGggPD0gMCkgcmV0dXJuIHRoaXM7XG4gIHJldHVybiB0aGlzLnB1c2goeyAnZGVsZXRlJzogbGVuZ3RoIH0pO1xufTtcblxuRGVsdGEucHJvdG90eXBlLnJldGFpbiA9IGZ1bmN0aW9uIChsZW5ndGgsIGF0dHJpYnV0ZXMpIHtcbiAgaWYgKGxlbmd0aCA8PSAwKSByZXR1cm4gdGhpcztcbiAgdmFyIG5ld09wID0geyByZXRhaW46IGxlbmd0aCB9O1xuICBpZiAoYXR0cmlidXRlcyAhPSBudWxsICYmIHR5cGVvZiBhdHRyaWJ1dGVzID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5sZW5ndGggPiAwKSB7XG4gICAgbmV3T3AuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG4gIH1cbiAgcmV0dXJuIHRoaXMucHVzaChuZXdPcCk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChuZXdPcCkge1xuICB2YXIgaW5kZXggPSB0aGlzLm9wcy5sZW5ndGg7XG4gIHZhciBsYXN0T3AgPSB0aGlzLm9wc1tpbmRleCAtIDFdO1xuICBuZXdPcCA9IGV4dGVuZCh0cnVlLCB7fSwgbmV3T3ApO1xuICBpZiAodHlwZW9mIGxhc3RPcCA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAodHlwZW9mIG5ld09wWydkZWxldGUnXSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGxhc3RPcFsnZGVsZXRlJ10gPT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLm9wc1tpbmRleCAtIDFdID0geyAnZGVsZXRlJzogbGFzdE9wWydkZWxldGUnXSArIG5ld09wWydkZWxldGUnXSB9O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIFNpbmNlIGl0IGRvZXMgbm90IG1hdHRlciBpZiB3ZSBpbnNlcnQgYmVmb3JlIG9yIGFmdGVyIGRlbGV0aW5nIGF0IHRoZSBzYW1lIGluZGV4LFxuICAgIC8vIGFsd2F5cyBwcmVmZXIgdG8gaW5zZXJ0IGZpcnN0XG4gICAgaWYgKHR5cGVvZiBsYXN0T3BbJ2RlbGV0ZSddID09PSAnbnVtYmVyJyAmJiBuZXdPcC5pbnNlcnQgIT0gbnVsbCkge1xuICAgICAgaW5kZXggLT0gMTtcbiAgICAgIGxhc3RPcCA9IHRoaXMub3BzW2luZGV4IC0gMV07XG4gICAgICBpZiAodHlwZW9mIGxhc3RPcCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgdGhpcy5vcHMudW5zaGlmdChuZXdPcCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZXF1YWwobmV3T3AuYXR0cmlidXRlcywgbGFzdE9wLmF0dHJpYnV0ZXMpKSB7XG4gICAgICBpZiAodHlwZW9mIG5ld09wLmluc2VydCA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIGxhc3RPcC5pbnNlcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMub3BzW2luZGV4IC0gMV0gPSB7IGluc2VydDogbGFzdE9wLmluc2VydCArIG5ld09wLmluc2VydCB9O1xuICAgICAgICBpZiAodHlwZW9mIG5ld09wLmF0dHJpYnV0ZXMgPT09ICdvYmplY3QnKSB0aGlzLm9wc1tpbmRleCAtIDFdLmF0dHJpYnV0ZXMgPSBuZXdPcC5hdHRyaWJ1dGVzXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbmV3T3AucmV0YWluID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgbGFzdE9wLnJldGFpbiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhpcy5vcHNbaW5kZXggLSAxXSA9IHsgcmV0YWluOiBsYXN0T3AucmV0YWluICsgbmV3T3AucmV0YWluIH07XG4gICAgICAgIGlmICh0eXBlb2YgbmV3T3AuYXR0cmlidXRlcyA9PT0gJ29iamVjdCcpIHRoaXMub3BzW2luZGV4IC0gMV0uYXR0cmlidXRlcyA9IG5ld09wLmF0dHJpYnV0ZXNcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChpbmRleCA9PT0gdGhpcy5vcHMubGVuZ3RoKSB7XG4gICAgdGhpcy5vcHMucHVzaChuZXdPcCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5vcHMuc3BsaWNlKGluZGV4LCAwLCBuZXdPcCk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuY2hvcCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxhc3RPcCA9IHRoaXMub3BzW3RoaXMub3BzLmxlbmd0aCAtIDFdO1xuICBpZiAobGFzdE9wICYmIGxhc3RPcC5yZXRhaW4gJiYgIWxhc3RPcC5hdHRyaWJ1dGVzKSB7XG4gICAgdGhpcy5vcHMucG9wKCk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuZmlsdGVyID0gZnVuY3Rpb24gKHByZWRpY2F0ZSkge1xuICByZXR1cm4gdGhpcy5vcHMuZmlsdGVyKHByZWRpY2F0ZSk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChwcmVkaWNhdGUpIHtcbiAgdGhpcy5vcHMuZm9yRWFjaChwcmVkaWNhdGUpO1xufTtcblxuRGVsdGEucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIChwcmVkaWNhdGUpIHtcbiAgcmV0dXJuIHRoaXMub3BzLm1hcChwcmVkaWNhdGUpO1xufTtcblxuRGVsdGEucHJvdG90eXBlLnBhcnRpdGlvbiA9IGZ1bmN0aW9uIChwcmVkaWNhdGUpIHtcbiAgdmFyIHBhc3NlZCA9IFtdLCBmYWlsZWQgPSBbXTtcbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKG9wKSB7XG4gICAgdmFyIHRhcmdldCA9IHByZWRpY2F0ZShvcCkgPyBwYXNzZWQgOiBmYWlsZWQ7XG4gICAgdGFyZ2V0LnB1c2gob3ApO1xuICB9KTtcbiAgcmV0dXJuIFtwYXNzZWQsIGZhaWxlZF07XG59O1xuXG5EZWx0YS5wcm90b3R5cGUucmVkdWNlID0gZnVuY3Rpb24gKHByZWRpY2F0ZSwgaW5pdGlhbCkge1xuICByZXR1cm4gdGhpcy5vcHMucmVkdWNlKHByZWRpY2F0ZSwgaW5pdGlhbCk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuY2hhbmdlTGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5yZWR1Y2UoZnVuY3Rpb24gKGxlbmd0aCwgZWxlbSkge1xuICAgIGlmIChlbGVtLmluc2VydCkge1xuICAgICAgcmV0dXJuIGxlbmd0aCArIG9wLmxlbmd0aChlbGVtKTtcbiAgICB9IGVsc2UgaWYgKGVsZW0uZGVsZXRlKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoIC0gZWxlbS5kZWxldGU7XG4gICAgfVxuICAgIHJldHVybiBsZW5ndGg7XG4gIH0sIDApO1xufTtcblxuRGVsdGEucHJvdG90eXBlLmxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMucmVkdWNlKGZ1bmN0aW9uIChsZW5ndGgsIGVsZW0pIHtcbiAgICByZXR1cm4gbGVuZ3RoICsgb3AubGVuZ3RoKGVsZW0pO1xuICB9LCAwKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgaWYgKHR5cGVvZiBlbmQgIT09ICdudW1iZXInKSBlbmQgPSBJbmZpbml0eTtcbiAgdmFyIG9wcyA9IFtdO1xuICB2YXIgaXRlciA9IG9wLml0ZXJhdG9yKHRoaXMub3BzKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgd2hpbGUgKGluZGV4IDwgZW5kICYmIGl0ZXIuaGFzTmV4dCgpKSB7XG4gICAgdmFyIG5leHRPcDtcbiAgICBpZiAoaW5kZXggPCBzdGFydCkge1xuICAgICAgbmV4dE9wID0gaXRlci5uZXh0KHN0YXJ0IC0gaW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXh0T3AgPSBpdGVyLm5leHQoZW5kIC0gaW5kZXgpO1xuICAgICAgb3BzLnB1c2gobmV4dE9wKTtcbiAgICB9XG4gICAgaW5kZXggKz0gb3AubGVuZ3RoKG5leHRPcCk7XG4gIH1cbiAgcmV0dXJuIG5ldyBEZWx0YShvcHMpO1xufTtcblxuXG5EZWx0YS5wcm90b3R5cGUuY29tcG9zZSA9IGZ1bmN0aW9uIChvdGhlcikge1xuICB2YXIgdGhpc0l0ZXIgPSBvcC5pdGVyYXRvcih0aGlzLm9wcyk7XG4gIHZhciBvdGhlckl0ZXIgPSBvcC5pdGVyYXRvcihvdGhlci5vcHMpO1xuICB2YXIgb3BzID0gW107XG4gIHZhciBmaXJzdE90aGVyID0gb3RoZXJJdGVyLnBlZWsoKTtcbiAgaWYgKGZpcnN0T3RoZXIgIT0gbnVsbCAmJiB0eXBlb2YgZmlyc3RPdGhlci5yZXRhaW4gPT09ICdudW1iZXInICYmIGZpcnN0T3RoZXIuYXR0cmlidXRlcyA9PSBudWxsKSB7XG4gICAgdmFyIGZpcnN0TGVmdCA9IGZpcnN0T3RoZXIucmV0YWluO1xuICAgIHdoaWxlICh0aGlzSXRlci5wZWVrVHlwZSgpID09PSAnaW5zZXJ0JyAmJiB0aGlzSXRlci5wZWVrTGVuZ3RoKCkgPD0gZmlyc3RMZWZ0KSB7XG4gICAgICBmaXJzdExlZnQgLT0gdGhpc0l0ZXIucGVla0xlbmd0aCgpO1xuICAgICAgb3BzLnB1c2godGhpc0l0ZXIubmV4dCgpKTtcbiAgICB9XG4gICAgaWYgKGZpcnN0T3RoZXIucmV0YWluIC0gZmlyc3RMZWZ0ID4gMCkge1xuICAgICAgb3RoZXJJdGVyLm5leHQoZmlyc3RPdGhlci5yZXRhaW4gLSBmaXJzdExlZnQpO1xuICAgIH1cbiAgfVxuICB2YXIgZGVsdGEgPSBuZXcgRGVsdGEob3BzKTtcbiAgd2hpbGUgKHRoaXNJdGVyLmhhc05leHQoKSB8fCBvdGhlckl0ZXIuaGFzTmV4dCgpKSB7XG4gICAgaWYgKG90aGVySXRlci5wZWVrVHlwZSgpID09PSAnaW5zZXJ0Jykge1xuICAgICAgZGVsdGEucHVzaChvdGhlckl0ZXIubmV4dCgpKTtcbiAgICB9IGVsc2UgaWYgKHRoaXNJdGVyLnBlZWtUeXBlKCkgPT09ICdkZWxldGUnKSB7XG4gICAgICBkZWx0YS5wdXNoKHRoaXNJdGVyLm5leHQoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsZW5ndGggPSBNYXRoLm1pbih0aGlzSXRlci5wZWVrTGVuZ3RoKCksIG90aGVySXRlci5wZWVrTGVuZ3RoKCkpO1xuICAgICAgdmFyIHRoaXNPcCA9IHRoaXNJdGVyLm5leHQobGVuZ3RoKTtcbiAgICAgIHZhciBvdGhlck9wID0gb3RoZXJJdGVyLm5leHQobGVuZ3RoKTtcbiAgICAgIGlmICh0eXBlb2Ygb3RoZXJPcC5yZXRhaW4gPT09ICdudW1iZXInKSB7XG4gICAgICAgIHZhciBuZXdPcCA9IHt9O1xuICAgICAgICBpZiAodHlwZW9mIHRoaXNPcC5yZXRhaW4gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgbmV3T3AucmV0YWluID0gbGVuZ3RoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld09wLmluc2VydCA9IHRoaXNPcC5pbnNlcnQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUHJlc2VydmUgbnVsbCB3aGVuIGNvbXBvc2luZyB3aXRoIGEgcmV0YWluLCBvdGhlcndpc2UgcmVtb3ZlIGl0IGZvciBpbnNlcnRzXG4gICAgICAgIHZhciBhdHRyaWJ1dGVzID0gb3AuYXR0cmlidXRlcy5jb21wb3NlKHRoaXNPcC5hdHRyaWJ1dGVzLCBvdGhlck9wLmF0dHJpYnV0ZXMsIHR5cGVvZiB0aGlzT3AucmV0YWluID09PSAnbnVtYmVyJyk7XG4gICAgICAgIGlmIChhdHRyaWJ1dGVzKSBuZXdPcC5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcbiAgICAgICAgZGVsdGEucHVzaChuZXdPcCk7XG5cbiAgICAgICAgLy8gT3B0aW1pemF0aW9uIGlmIHJlc3Qgb2Ygb3RoZXIgaXMganVzdCByZXRhaW5cbiAgICAgICAgaWYgKCFvdGhlckl0ZXIuaGFzTmV4dCgpICYmIGVxdWFsKGRlbHRhLm9wc1tkZWx0YS5vcHMubGVuZ3RoIC0gMV0sIG5ld09wKSkge1xuICAgICAgICAgIHZhciByZXN0ID0gbmV3IERlbHRhKHRoaXNJdGVyLnJlc3QoKSk7XG4gICAgICAgICAgcmV0dXJuIGRlbHRhLmNvbmNhdChyZXN0KS5jaG9wKCk7XG4gICAgICAgIH1cblxuICAgICAgLy8gT3RoZXIgb3Agc2hvdWxkIGJlIGRlbGV0ZSwgd2UgY291bGQgYmUgYW4gaW5zZXJ0IG9yIHJldGFpblxuICAgICAgLy8gSW5zZXJ0ICsgZGVsZXRlIGNhbmNlbHMgb3V0XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvdGhlck9wWydkZWxldGUnXSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHRoaXNPcC5yZXRhaW4gPT09ICdudW1iZXInKSB7XG4gICAgICAgIGRlbHRhLnB1c2gob3RoZXJPcCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWx0YS5jaG9wKCk7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gIHZhciBkZWx0YSA9IG5ldyBEZWx0YSh0aGlzLm9wcy5zbGljZSgpKTtcbiAgaWYgKG90aGVyLm9wcy5sZW5ndGggPiAwKSB7XG4gICAgZGVsdGEucHVzaChvdGhlci5vcHNbMF0pO1xuICAgIGRlbHRhLm9wcyA9IGRlbHRhLm9wcy5jb25jYXQob3RoZXIub3BzLnNsaWNlKDEpKTtcbiAgfVxuICByZXR1cm4gZGVsdGE7XG59O1xuXG5EZWx0YS5wcm90b3R5cGUuZGlmZiA9IGZ1bmN0aW9uIChvdGhlciwgaW5kZXgpIHtcbiAgaWYgKHRoaXMub3BzID09PSBvdGhlci5vcHMpIHtcbiAgICByZXR1cm4gbmV3IERlbHRhKCk7XG4gIH1cbiAgdmFyIHN0cmluZ3MgPSBbdGhpcywgb3RoZXJdLm1hcChmdW5jdGlvbiAoZGVsdGEpIHtcbiAgICByZXR1cm4gZGVsdGEubWFwKGZ1bmN0aW9uIChvcCkge1xuICAgICAgaWYgKG9wLmluc2VydCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb3AuaW5zZXJ0ID09PSAnc3RyaW5nJyA/IG9wLmluc2VydCA6IE5VTExfQ0hBUkFDVEVSO1xuICAgICAgfVxuICAgICAgdmFyIHByZXAgPSAoZGVsdGEgPT09IG90aGVyKSA/ICdvbicgOiAnd2l0aCc7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RpZmYoKSBjYWxsZWQgJyArIHByZXAgKyAnIG5vbi1kb2N1bWVudCcpO1xuICAgIH0pLmpvaW4oJycpO1xuICB9KTtcbiAgdmFyIGRlbHRhID0gbmV3IERlbHRhKCk7XG4gIHZhciBkaWZmUmVzdWx0ID0gZGlmZihzdHJpbmdzWzBdLCBzdHJpbmdzWzFdLCBpbmRleCk7XG4gIHZhciB0aGlzSXRlciA9IG9wLml0ZXJhdG9yKHRoaXMub3BzKTtcbiAgdmFyIG90aGVySXRlciA9IG9wLml0ZXJhdG9yKG90aGVyLm9wcyk7XG4gIGRpZmZSZXN1bHQuZm9yRWFjaChmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgdmFyIGxlbmd0aCA9IGNvbXBvbmVudFsxXS5sZW5ndGg7XG4gICAgd2hpbGUgKGxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBvcExlbmd0aCA9IDA7XG4gICAgICBzd2l0Y2ggKGNvbXBvbmVudFswXSkge1xuICAgICAgICBjYXNlIGRpZmYuSU5TRVJUOlxuICAgICAgICAgIG9wTGVuZ3RoID0gTWF0aC5taW4ob3RoZXJJdGVyLnBlZWtMZW5ndGgoKSwgbGVuZ3RoKTtcbiAgICAgICAgICBkZWx0YS5wdXNoKG90aGVySXRlci5uZXh0KG9wTGVuZ3RoKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgZGlmZi5ERUxFVEU6XG4gICAgICAgICAgb3BMZW5ndGggPSBNYXRoLm1pbihsZW5ndGgsIHRoaXNJdGVyLnBlZWtMZW5ndGgoKSk7XG4gICAgICAgICAgdGhpc0l0ZXIubmV4dChvcExlbmd0aCk7XG4gICAgICAgICAgZGVsdGFbJ2RlbGV0ZSddKG9wTGVuZ3RoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBkaWZmLkVRVUFMOlxuICAgICAgICAgIG9wTGVuZ3RoID0gTWF0aC5taW4odGhpc0l0ZXIucGVla0xlbmd0aCgpLCBvdGhlckl0ZXIucGVla0xlbmd0aCgpLCBsZW5ndGgpO1xuICAgICAgICAgIHZhciB0aGlzT3AgPSB0aGlzSXRlci5uZXh0KG9wTGVuZ3RoKTtcbiAgICAgICAgICB2YXIgb3RoZXJPcCA9IG90aGVySXRlci5uZXh0KG9wTGVuZ3RoKTtcbiAgICAgICAgICBpZiAoZXF1YWwodGhpc09wLmluc2VydCwgb3RoZXJPcC5pbnNlcnQpKSB7XG4gICAgICAgICAgICBkZWx0YS5yZXRhaW4ob3BMZW5ndGgsIG9wLmF0dHJpYnV0ZXMuZGlmZih0aGlzT3AuYXR0cmlidXRlcywgb3RoZXJPcC5hdHRyaWJ1dGVzKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlbHRhLnB1c2gob3RoZXJPcClbJ2RlbGV0ZSddKG9wTGVuZ3RoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBsZW5ndGggLT0gb3BMZW5ndGg7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRlbHRhLmNob3AoKTtcbn07XG5cbkRlbHRhLnByb3RvdHlwZS5lYWNoTGluZSA9IGZ1bmN0aW9uIChwcmVkaWNhdGUsIG5ld2xpbmUpIHtcbiAgbmV3bGluZSA9IG5ld2xpbmUgfHwgJ1xcbic7XG4gIHZhciBpdGVyID0gb3AuaXRlcmF0b3IodGhpcy5vcHMpO1xuICB2YXIgbGluZSA9IG5ldyBEZWx0YSgpO1xuICB2YXIgaSA9IDA7XG4gIHdoaWxlIChpdGVyLmhhc05leHQoKSkge1xuICAgIGlmIChpdGVyLnBlZWtUeXBlKCkgIT09ICdpbnNlcnQnKSByZXR1cm47XG4gICAgdmFyIHRoaXNPcCA9IGl0ZXIucGVlaygpO1xuICAgIHZhciBzdGFydCA9IG9wLmxlbmd0aCh0aGlzT3ApIC0gaXRlci5wZWVrTGVuZ3RoKCk7XG4gICAgdmFyIGluZGV4ID0gdHlwZW9mIHRoaXNPcC5pbnNlcnQgPT09ICdzdHJpbmcnID9cbiAgICAgIHRoaXNPcC5pbnNlcnQuaW5kZXhPZihuZXdsaW5lLCBzdGFydCkgLSBzdGFydCA6IC0xO1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgIGxpbmUucHVzaChpdGVyLm5leHQoKSk7XG4gICAgfSBlbHNlIGlmIChpbmRleCA+IDApIHtcbiAgICAgIGxpbmUucHVzaChpdGVyLm5leHQoaW5kZXgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByZWRpY2F0ZShsaW5lLCBpdGVyLm5leHQoMSkuYXR0cmlidXRlcyB8fCB7fSwgaSkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGkgKz0gMTtcbiAgICAgIGxpbmUgPSBuZXcgRGVsdGEoKTtcbiAgICB9XG4gIH1cbiAgaWYgKGxpbmUubGVuZ3RoKCkgPiAwKSB7XG4gICAgcHJlZGljYXRlKGxpbmUsIHt9LCBpKTtcbiAgfVxufTtcblxuRGVsdGEucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uIChvdGhlciwgcHJpb3JpdHkpIHtcbiAgcHJpb3JpdHkgPSAhIXByaW9yaXR5O1xuICBpZiAodHlwZW9mIG90aGVyID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybVBvc2l0aW9uKG90aGVyLCBwcmlvcml0eSk7XG4gIH1cbiAgdmFyIHRoaXNJdGVyID0gb3AuaXRlcmF0b3IodGhpcy5vcHMpO1xuICB2YXIgb3RoZXJJdGVyID0gb3AuaXRlcmF0b3Iob3RoZXIub3BzKTtcbiAgdmFyIGRlbHRhID0gbmV3IERlbHRhKCk7XG4gIHdoaWxlICh0aGlzSXRlci5oYXNOZXh0KCkgfHwgb3RoZXJJdGVyLmhhc05leHQoKSkge1xuICAgIGlmICh0aGlzSXRlci5wZWVrVHlwZSgpID09PSAnaW5zZXJ0JyAmJiAocHJpb3JpdHkgfHwgb3RoZXJJdGVyLnBlZWtUeXBlKCkgIT09ICdpbnNlcnQnKSkge1xuICAgICAgZGVsdGEucmV0YWluKG9wLmxlbmd0aCh0aGlzSXRlci5uZXh0KCkpKTtcbiAgICB9IGVsc2UgaWYgKG90aGVySXRlci5wZWVrVHlwZSgpID09PSAnaW5zZXJ0Jykge1xuICAgICAgZGVsdGEucHVzaChvdGhlckl0ZXIubmV4dCgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxlbmd0aCA9IE1hdGgubWluKHRoaXNJdGVyLnBlZWtMZW5ndGgoKSwgb3RoZXJJdGVyLnBlZWtMZW5ndGgoKSk7XG4gICAgICB2YXIgdGhpc09wID0gdGhpc0l0ZXIubmV4dChsZW5ndGgpO1xuICAgICAgdmFyIG90aGVyT3AgPSBvdGhlckl0ZXIubmV4dChsZW5ndGgpO1xuICAgICAgaWYgKHRoaXNPcFsnZGVsZXRlJ10pIHtcbiAgICAgICAgLy8gT3VyIGRlbGV0ZSBlaXRoZXIgbWFrZXMgdGhlaXIgZGVsZXRlIHJlZHVuZGFudCBvciByZW1vdmVzIHRoZWlyIHJldGFpblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSBpZiAob3RoZXJPcFsnZGVsZXRlJ10pIHtcbiAgICAgICAgZGVsdGEucHVzaChvdGhlck9wKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFdlIHJldGFpbiBlaXRoZXIgdGhlaXIgcmV0YWluIG9yIGluc2VydFxuICAgICAgICBkZWx0YS5yZXRhaW4obGVuZ3RoLCBvcC5hdHRyaWJ1dGVzLnRyYW5zZm9ybSh0aGlzT3AuYXR0cmlidXRlcywgb3RoZXJPcC5hdHRyaWJ1dGVzLCBwcmlvcml0eSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGVsdGEuY2hvcCgpO1xufTtcblxuRGVsdGEucHJvdG90eXBlLnRyYW5zZm9ybVBvc2l0aW9uID0gZnVuY3Rpb24gKGluZGV4LCBwcmlvcml0eSkge1xuICBwcmlvcml0eSA9ICEhcHJpb3JpdHk7XG4gIHZhciB0aGlzSXRlciA9IG9wLml0ZXJhdG9yKHRoaXMub3BzKTtcbiAgdmFyIG9mZnNldCA9IDA7XG4gIHdoaWxlICh0aGlzSXRlci5oYXNOZXh0KCkgJiYgb2Zmc2V0IDw9IGluZGV4KSB7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXNJdGVyLnBlZWtMZW5ndGgoKTtcbiAgICB2YXIgbmV4dFR5cGUgPSB0aGlzSXRlci5wZWVrVHlwZSgpO1xuICAgIHRoaXNJdGVyLm5leHQoKTtcbiAgICBpZiAobmV4dFR5cGUgPT09ICdkZWxldGUnKSB7XG4gICAgICBpbmRleCAtPSBNYXRoLm1pbihsZW5ndGgsIGluZGV4IC0gb2Zmc2V0KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSBpZiAobmV4dFR5cGUgPT09ICdpbnNlcnQnICYmIChvZmZzZXQgPCBpbmRleCB8fCAhcHJpb3JpdHkpKSB7XG4gICAgICBpbmRleCArPSBsZW5ndGg7XG4gICAgfVxuICAgIG9mZnNldCArPSBsZW5ndGg7XG4gIH1cbiAgcmV0dXJuIGluZGV4O1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IERlbHRhO1xuXG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxudmFyIGlzQXJyYXkgPSBmdW5jdGlvbiBpc0FycmF5KGFycikge1xuXHRpZiAodHlwZW9mIEFycmF5LmlzQXJyYXkgPT09ICdmdW5jdGlvbicpIHtcblx0XHRyZXR1cm4gQXJyYXkuaXNBcnJheShhcnIpO1xuXHR9XG5cblx0cmV0dXJuIHRvU3RyLmNhbGwoYXJyKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbnZhciBpc1BsYWluT2JqZWN0ID0gZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcblx0aWYgKCFvYmogfHwgdG9TdHIuY2FsbChvYmopICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHZhciBoYXNPd25Db25zdHJ1Y3RvciA9IGhhc093bi5jYWxsKG9iaiwgJ2NvbnN0cnVjdG9yJyk7XG5cdHZhciBoYXNJc1Byb3RvdHlwZU9mID0gb2JqLmNvbnN0cnVjdG9yICYmIG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgJiYgaGFzT3duLmNhbGwob2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwgJ2lzUHJvdG90eXBlT2YnKTtcblx0Ly8gTm90IG93biBjb25zdHJ1Y3RvciBwcm9wZXJ0eSBtdXN0IGJlIE9iamVjdFxuXHRpZiAob2JqLmNvbnN0cnVjdG9yICYmICFoYXNPd25Db25zdHJ1Y3RvciAmJiAhaGFzSXNQcm90b3R5cGVPZikge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIE93biBwcm9wZXJ0aWVzIGFyZSBlbnVtZXJhdGVkIGZpcnN0bHksIHNvIHRvIHNwZWVkIHVwLFxuXHQvLyBpZiBsYXN0IG9uZSBpcyBvd24sIHRoZW4gYWxsIHByb3BlcnRpZXMgYXJlIG93bi5cblx0dmFyIGtleTtcblx0Zm9yIChrZXkgaW4gb2JqKSB7IC8qKi8gfVxuXG5cdHJldHVybiB0eXBlb2Yga2V5ID09PSAndW5kZWZpbmVkJyB8fCBoYXNPd24uY2FsbChvYmosIGtleSk7XG59O1xuXG4vLyBJZiBuYW1lIGlzICdfX3Byb3RvX18nLCBhbmQgT2JqZWN0LmRlZmluZVByb3BlcnR5IGlzIGF2YWlsYWJsZSwgZGVmaW5lIF9fcHJvdG9fXyBhcyBhbiBvd24gcHJvcGVydHkgb24gdGFyZ2V0XG52YXIgc2V0UHJvcGVydHkgPSBmdW5jdGlvbiBzZXRQcm9wZXJ0eSh0YXJnZXQsIG9wdGlvbnMpIHtcblx0aWYgKGRlZmluZVByb3BlcnR5ICYmIG9wdGlvbnMubmFtZSA9PT0gJ19fcHJvdG9fXycpIHtcblx0XHRkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG9wdGlvbnMubmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdHZhbHVlOiBvcHRpb25zLm5ld1ZhbHVlLFxuXHRcdFx0d3JpdGFibGU6IHRydWVcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR0YXJnZXRbb3B0aW9ucy5uYW1lXSA9IG9wdGlvbnMubmV3VmFsdWU7XG5cdH1cbn07XG5cbi8vIFJldHVybiB1bmRlZmluZWQgaW5zdGVhZCBvZiBfX3Byb3RvX18gaWYgJ19fcHJvdG9fXycgaXMgbm90IGFuIG93biBwcm9wZXJ0eVxudmFyIGdldFByb3BlcnR5ID0gZnVuY3Rpb24gZ2V0UHJvcGVydHkob2JqLCBuYW1lKSB7XG5cdGlmIChuYW1lID09PSAnX19wcm90b19fJykge1xuXHRcdGlmICghaGFzT3duLmNhbGwob2JqLCBuYW1lKSkge1xuXHRcdFx0cmV0dXJuIHZvaWQgMDtcblx0XHR9IGVsc2UgaWYgKGdPUEQpIHtcblx0XHRcdC8vIEluIGVhcmx5IHZlcnNpb25zIG9mIG5vZGUsIG9ialsnX19wcm90b19fJ10gaXMgYnVnZ3kgd2hlbiBvYmogaGFzXG5cdFx0XHQvLyBfX3Byb3RvX18gYXMgYW4gb3duIHByb3BlcnR5LiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKCkgd29ya3MuXG5cdFx0XHRyZXR1cm4gZ09QRChvYmosIG5hbWUpLnZhbHVlO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBvYmpbbmFtZV07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGV4dGVuZCgpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lO1xuXHR2YXIgdGFyZ2V0ID0gYXJndW1lbnRzWzBdO1xuXHR2YXIgaSA9IDE7XG5cdHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuXHR2YXIgZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKHR5cGVvZiB0YXJnZXQgPT09ICdib29sZWFuJykge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuXHRcdC8vIHNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHRpID0gMjtcblx0fVxuXHRpZiAodGFyZ2V0ID09IG51bGwgfHwgKHR5cGVvZiB0YXJnZXQgIT09ICdvYmplY3QnICYmIHR5cGVvZiB0YXJnZXQgIT09ICdmdW5jdGlvbicpKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHRmb3IgKDsgaSA8IGxlbmd0aDsgKytpKSB7XG5cdFx0b3B0aW9ucyA9IGFyZ3VtZW50c1tpXTtcblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKG9wdGlvbnMgIT0gbnVsbCkge1xuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yIChuYW1lIGluIG9wdGlvbnMpIHtcblx0XHRcdFx0c3JjID0gZ2V0UHJvcGVydHkodGFyZ2V0LCBuYW1lKTtcblx0XHRcdFx0Y29weSA9IGdldFByb3BlcnR5KG9wdGlvbnMsIG5hbWUpO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKHRhcmdldCAhPT0gY29weSkge1xuXHRcdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRcdGlmIChkZWVwICYmIGNvcHkgJiYgKGlzUGxhaW5PYmplY3QoY29weSkgfHwgKGNvcHlJc0FycmF5ID0gaXNBcnJheShjb3B5KSkpKSB7XG5cdFx0XHRcdFx0XHRpZiAoY29weUlzQXJyYXkpIHtcblx0XHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgaXNBcnJheShzcmMpID8gc3JjIDogW107XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBpc1BsYWluT2JqZWN0KHNyYykgPyBzcmMgOiB7fTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0XHRzZXRQcm9wZXJ0eSh0YXJnZXQsIHsgbmFtZTogbmFtZSwgbmV3VmFsdWU6IGV4dGVuZChkZWVwLCBjbG9uZSwgY29weSkgfSk7XG5cblx0XHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0eXBlb2YgY29weSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRcdHNldFByb3BlcnR5KHRhcmdldCwgeyBuYW1lOiBuYW1lLCBuZXdWYWx1ZTogY29weSB9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuQmxvY2tFbWJlZCA9IGV4cG9ydHMuYnViYmxlRm9ybWF0cyA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX2V4dGVuZCA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfZXh0ZW5kMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZCk7XG5cbnZhciBfcXVpbGxEZWx0YSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cbnZhciBfcXVpbGxEZWx0YTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWlsbERlbHRhKTtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG52YXIgX2JyZWFrID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cbnZhciBfYnJlYWsyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYnJlYWspO1xuXG52YXIgX2lubGluZSA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cbnZhciBfaW5saW5lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lubGluZSk7XG5cbnZhciBfdGV4dCA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cbnZhciBfdGV4dDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90ZXh0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgTkVXTElORV9MRU5HVEggPSAxO1xuXG52YXIgQmxvY2tFbWJlZCA9IGZ1bmN0aW9uIChfUGFyY2htZW50JEVtYmVkKSB7XG4gIF9pbmhlcml0cyhCbG9ja0VtYmVkLCBfUGFyY2htZW50JEVtYmVkKTtcblxuICBmdW5jdGlvbiBCbG9ja0VtYmVkKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCbG9ja0VtYmVkKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQmxvY2tFbWJlZC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJsb2NrRW1iZWQpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhCbG9ja0VtYmVkLCBbe1xuICAgIGtleTogJ2F0dGFjaCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGF0dGFjaCgpIHtcbiAgICAgIF9nZXQoQmxvY2tFbWJlZC5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCbG9ja0VtYmVkLnByb3RvdHlwZSksICdhdHRhY2gnLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5hdHRyaWJ1dGVzID0gbmV3IF9wYXJjaG1lbnQyLmRlZmF1bHQuQXR0cmlidXRvci5TdG9yZSh0aGlzLmRvbU5vZGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RlbHRhJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsdGEoKSB7XG4gICAgICByZXR1cm4gbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkuaW5zZXJ0KHRoaXMudmFsdWUoKSwgKDAsIF9leHRlbmQyLmRlZmF1bHQpKHRoaXMuZm9ybWF0cygpLCB0aGlzLmF0dHJpYnV0ZXMudmFsdWVzKCkpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXQobmFtZSwgdmFsdWUpIHtcbiAgICAgIHZhciBhdHRyaWJ1dGUgPSBfcGFyY2htZW50Mi5kZWZhdWx0LnF1ZXJ5KG5hbWUsIF9wYXJjaG1lbnQyLmRlZmF1bHQuU2NvcGUuQkxPQ0tfQVRUUklCVVRFKTtcbiAgICAgIGlmIChhdHRyaWJ1dGUgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuYXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Zvcm1hdEF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0QXQoaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgIHRoaXMuZm9ybWF0KG5hbWUsIHZhbHVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpbnNlcnRBdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc2VydEF0KGluZGV4LCB2YWx1ZSwgZGVmKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5lbmRzV2l0aCgnXFxuJykpIHtcbiAgICAgICAgdmFyIGJsb2NrID0gX3BhcmNobWVudDIuZGVmYXVsdC5jcmVhdGUoQmxvY2suYmxvdE5hbWUpO1xuICAgICAgICB0aGlzLnBhcmVudC5pbnNlcnRCZWZvcmUoYmxvY2ssIGluZGV4ID09PSAwID8gdGhpcyA6IHRoaXMubmV4dCk7XG4gICAgICAgIGJsb2NrLmluc2VydEF0KDAsIHZhbHVlLnNsaWNlKDAsIC0xKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfZ2V0KEJsb2NrRW1iZWQucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmxvY2tFbWJlZC5wcm90b3R5cGUpLCAnaW5zZXJ0QXQnLCB0aGlzKS5jYWxsKHRoaXMsIGluZGV4LCB2YWx1ZSwgZGVmKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQmxvY2tFbWJlZDtcbn0oX3BhcmNobWVudDIuZGVmYXVsdC5FbWJlZCk7XG5cbkJsb2NrRW1iZWQuc2NvcGUgPSBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLkJMT0NLX0JMT1Q7XG4vLyBJdCBpcyBpbXBvcnRhbnQgZm9yIGN1cnNvciBiZWhhdmlvciBCbG9ja0VtYmVkcyB1c2UgdGFncyB0aGF0IGFyZSBibG9jayBsZXZlbCBlbGVtZW50c1xuXG5cbnZhciBCbG9jayA9IGZ1bmN0aW9uIChfUGFyY2htZW50JEJsb2NrKSB7XG4gIF9pbmhlcml0cyhCbG9jaywgX1BhcmNobWVudCRCbG9jayk7XG5cbiAgZnVuY3Rpb24gQmxvY2soZG9tTm9kZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCbG9jayk7XG5cbiAgICB2YXIgX3RoaXMyID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEJsb2NrLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmxvY2spKS5jYWxsKHRoaXMsIGRvbU5vZGUpKTtcblxuICAgIF90aGlzMi5jYWNoZSA9IHt9O1xuICAgIHJldHVybiBfdGhpczI7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQmxvY2ssIFt7XG4gICAga2V5OiAnZGVsdGEnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWx0YSgpIHtcbiAgICAgIGlmICh0aGlzLmNhY2hlLmRlbHRhID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5jYWNoZS5kZWx0YSA9IHRoaXMuZGVzY2VuZGFudHMoX3BhcmNobWVudDIuZGVmYXVsdC5MZWFmKS5yZWR1Y2UoZnVuY3Rpb24gKGRlbHRhLCBsZWFmKSB7XG4gICAgICAgICAgaWYgKGxlYWYubGVuZ3RoKCkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBkZWx0YTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGRlbHRhLmluc2VydChsZWFmLnZhbHVlKCksIGJ1YmJsZUZvcm1hdHMobGVhZikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkpLmluc2VydCgnXFxuJywgYnViYmxlRm9ybWF0cyh0aGlzKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZS5kZWx0YTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZWxldGVBdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZUF0KGluZGV4LCBsZW5ndGgpIHtcbiAgICAgIF9nZXQoQmxvY2sucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmxvY2sucHJvdG90eXBlKSwgJ2RlbGV0ZUF0JywgdGhpcykuY2FsbCh0aGlzLCBpbmRleCwgbGVuZ3RoKTtcbiAgICAgIHRoaXMuY2FjaGUgPSB7fTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXRBdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdEF0KGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKSB7XG4gICAgICBpZiAobGVuZ3RoIDw9IDApIHJldHVybjtcbiAgICAgIGlmIChfcGFyY2htZW50Mi5kZWZhdWx0LnF1ZXJ5KG5hbWUsIF9wYXJjaG1lbnQyLmRlZmF1bHQuU2NvcGUuQkxPQ0spKSB7XG4gICAgICAgIGlmIChpbmRleCArIGxlbmd0aCA9PT0gdGhpcy5sZW5ndGgoKSkge1xuICAgICAgICAgIHRoaXMuZm9ybWF0KG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2dldChCbG9jay5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCbG9jay5wcm90b3R5cGUpLCAnZm9ybWF0QXQnLCB0aGlzKS5jYWxsKHRoaXMsIGluZGV4LCBNYXRoLm1pbihsZW5ndGgsIHRoaXMubGVuZ3RoKCkgLSBpbmRleCAtIDEpLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICB0aGlzLmNhY2hlID0ge307XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaW5zZXJ0QXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnRBdChpbmRleCwgdmFsdWUsIGRlZikge1xuICAgICAgaWYgKGRlZiAhPSBudWxsKSByZXR1cm4gX2dldChCbG9jay5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCbG9jay5wcm90b3R5cGUpLCAnaW5zZXJ0QXQnLCB0aGlzKS5jYWxsKHRoaXMsIGluZGV4LCB2YWx1ZSwgZGVmKTtcbiAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgIHZhciBsaW5lcyA9IHZhbHVlLnNwbGl0KCdcXG4nKTtcbiAgICAgIHZhciB0ZXh0ID0gbGluZXMuc2hpZnQoKTtcbiAgICAgIGlmICh0ZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKGluZGV4IDwgdGhpcy5sZW5ndGgoKSAtIDEgfHwgdGhpcy5jaGlsZHJlbi50YWlsID09IG51bGwpIHtcbiAgICAgICAgICBfZ2V0KEJsb2NrLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJsb2NrLnByb3RvdHlwZSksICdpbnNlcnRBdCcsIHRoaXMpLmNhbGwodGhpcywgTWF0aC5taW4oaW5kZXgsIHRoaXMubGVuZ3RoKCkgLSAxKSwgdGV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5jaGlsZHJlbi50YWlsLmluc2VydEF0KHRoaXMuY2hpbGRyZW4udGFpbC5sZW5ndGgoKSwgdGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYWNoZSA9IHt9O1xuICAgICAgfVxuICAgICAgdmFyIGJsb2NrID0gdGhpcztcbiAgICAgIGxpbmVzLnJlZHVjZShmdW5jdGlvbiAoaW5kZXgsIGxpbmUpIHtcbiAgICAgICAgYmxvY2sgPSBibG9jay5zcGxpdChpbmRleCwgdHJ1ZSk7XG4gICAgICAgIGJsb2NrLmluc2VydEF0KDAsIGxpbmUpO1xuICAgICAgICByZXR1cm4gbGluZS5sZW5ndGg7XG4gICAgICB9LCBpbmRleCArIHRleHQubGVuZ3RoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpbnNlcnRCZWZvcmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnRCZWZvcmUoYmxvdCwgcmVmKSB7XG4gICAgICB2YXIgaGVhZCA9IHRoaXMuY2hpbGRyZW4uaGVhZDtcbiAgICAgIF9nZXQoQmxvY2sucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmxvY2sucHJvdG90eXBlKSwgJ2luc2VydEJlZm9yZScsIHRoaXMpLmNhbGwodGhpcywgYmxvdCwgcmVmKTtcbiAgICAgIGlmIChoZWFkIGluc3RhbmNlb2YgX2JyZWFrMi5kZWZhdWx0KSB7XG4gICAgICAgIGhlYWQucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmNhY2hlID0ge307XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbGVuZ3RoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGVuZ3RoKCkge1xuICAgICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5jYWNoZS5sZW5ndGggPSBfZ2V0KEJsb2NrLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJsb2NrLnByb3RvdHlwZSksICdsZW5ndGgnLCB0aGlzKS5jYWxsKHRoaXMpICsgTkVXTElORV9MRU5HVEg7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZS5sZW5ndGg7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbW92ZUNoaWxkcmVuJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZUNoaWxkcmVuKHRhcmdldCwgcmVmKSB7XG4gICAgICBfZ2V0KEJsb2NrLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJsb2NrLnByb3RvdHlwZSksICdtb3ZlQ2hpbGRyZW4nLCB0aGlzKS5jYWxsKHRoaXMsIHRhcmdldCwgcmVmKTtcbiAgICAgIHRoaXMuY2FjaGUgPSB7fTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdvcHRpbWl6ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9wdGltaXplKGNvbnRleHQpIHtcbiAgICAgIF9nZXQoQmxvY2sucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmxvY2sucHJvdG90eXBlKSwgJ29wdGltaXplJywgdGhpcykuY2FsbCh0aGlzLCBjb250ZXh0KTtcbiAgICAgIHRoaXMuY2FjaGUgPSB7fTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwYXRoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF0aChpbmRleCkge1xuICAgICAgcmV0dXJuIF9nZXQoQmxvY2sucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmxvY2sucHJvdG90eXBlKSwgJ3BhdGgnLCB0aGlzKS5jYWxsKHRoaXMsIGluZGV4LCB0cnVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmVDaGlsZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUNoaWxkKGNoaWxkKSB7XG4gICAgICBfZ2V0KEJsb2NrLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJsb2NrLnByb3RvdHlwZSksICdyZW1vdmVDaGlsZCcsIHRoaXMpLmNhbGwodGhpcywgY2hpbGQpO1xuICAgICAgdGhpcy5jYWNoZSA9IHt9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NwbGl0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3BsaXQoaW5kZXgpIHtcbiAgICAgIHZhciBmb3JjZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgICAgIGlmIChmb3JjZSAmJiAoaW5kZXggPT09IDAgfHwgaW5kZXggPj0gdGhpcy5sZW5ndGgoKSAtIE5FV0xJTkVfTEVOR1RIKSkge1xuICAgICAgICB2YXIgY2xvbmUgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMucGFyZW50Lmluc2VydEJlZm9yZShjbG9uZSwgdGhpcyk7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKGNsb25lLCB0aGlzLm5leHQpO1xuICAgICAgICAgIHJldHVybiBjbG9uZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG5leHQgPSBfZ2V0KEJsb2NrLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJsb2NrLnByb3RvdHlwZSksICdzcGxpdCcsIHRoaXMpLmNhbGwodGhpcywgaW5kZXgsIGZvcmNlKTtcbiAgICAgICAgdGhpcy5jYWNoZSA9IHt9O1xuICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQmxvY2s7XG59KF9wYXJjaG1lbnQyLmRlZmF1bHQuQmxvY2spO1xuXG5CbG9jay5ibG90TmFtZSA9ICdibG9jayc7XG5CbG9jay50YWdOYW1lID0gJ1AnO1xuQmxvY2suZGVmYXVsdENoaWxkID0gJ2JyZWFrJztcbkJsb2NrLmFsbG93ZWRDaGlsZHJlbiA9IFtfaW5saW5lMi5kZWZhdWx0LCBfcGFyY2htZW50Mi5kZWZhdWx0LkVtYmVkLCBfdGV4dDIuZGVmYXVsdF07XG5cbmZ1bmN0aW9uIGJ1YmJsZUZvcm1hdHMoYmxvdCkge1xuICB2YXIgZm9ybWF0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgaWYgKGJsb3QgPT0gbnVsbCkgcmV0dXJuIGZvcm1hdHM7XG4gIGlmICh0eXBlb2YgYmxvdC5mb3JtYXRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm9ybWF0cyA9ICgwLCBfZXh0ZW5kMi5kZWZhdWx0KShmb3JtYXRzLCBibG90LmZvcm1hdHMoKSk7XG4gIH1cbiAgaWYgKGJsb3QucGFyZW50ID09IG51bGwgfHwgYmxvdC5wYXJlbnQuYmxvdE5hbWUgPT0gJ3Njcm9sbCcgfHwgYmxvdC5wYXJlbnQuc3RhdGljcy5zY29wZSAhPT0gYmxvdC5zdGF0aWNzLnNjb3BlKSB7XG4gICAgcmV0dXJuIGZvcm1hdHM7XG4gIH1cbiAgcmV0dXJuIGJ1YmJsZUZvcm1hdHMoYmxvdC5wYXJlbnQsIGZvcm1hdHMpO1xufVxuXG5leHBvcnRzLmJ1YmJsZUZvcm1hdHMgPSBidWJibGVGb3JtYXRzO1xuZXhwb3J0cy5CbG9ja0VtYmVkID0gQmxvY2tFbWJlZDtcbmV4cG9ydHMuZGVmYXVsdCA9IEJsb2NrO1xuXG4vKioqLyB9KSxcbi8qIDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMub3ZlcmxvYWQgPSBleHBvcnRzLmV4cGFuZENvbmZpZyA9IHVuZGVmaW5lZDtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbl9fd2VicGFja19yZXF1aXJlX18oNTApO1xuXG52YXIgX3F1aWxsRGVsdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX3F1aWxsRGVsdGEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVpbGxEZWx0YSk7XG5cbnZhciBfZWRpdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG5cbnZhciBfZWRpdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VkaXRvcik7XG5cbnZhciBfZW1pdHRlcjMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG52YXIgX2VtaXR0ZXI0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZW1pdHRlcjMpO1xuXG52YXIgX21vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cbnZhciBfbW9kdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vZHVsZSk7XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxudmFyIF9zZWxlY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcblxudmFyIF9zZWxlY3Rpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VsZWN0aW9uKTtcblxudmFyIF9leHRlbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX2V4dGVuZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmQpO1xuXG52YXIgX2xvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXG52YXIgX2xvZ2dlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2dnZXIpO1xuXG52YXIgX3RoZW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNCk7XG5cbnZhciBfdGhlbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGhlbWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgZGVidWcgPSAoMCwgX2xvZ2dlcjIuZGVmYXVsdCkoJ3F1aWxsJyk7XG5cbnZhciBRdWlsbCA9IGZ1bmN0aW9uICgpIHtcbiAgX2NyZWF0ZUNsYXNzKFF1aWxsLCBudWxsLCBbe1xuICAgIGtleTogJ2RlYnVnJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVidWcobGltaXQpIHtcbiAgICAgIGlmIChsaW1pdCA9PT0gdHJ1ZSkge1xuICAgICAgICBsaW1pdCA9ICdsb2cnO1xuICAgICAgfVxuICAgICAgX2xvZ2dlcjIuZGVmYXVsdC5sZXZlbChsaW1pdCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZmluZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmQobm9kZSkge1xuICAgICAgcmV0dXJuIG5vZGUuX19xdWlsbCB8fCBfcGFyY2htZW50Mi5kZWZhdWx0LmZpbmQobm9kZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaW1wb3J0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2ltcG9ydChuYW1lKSB7XG4gICAgICBpZiAodGhpcy5pbXBvcnRzW25hbWVdID09IG51bGwpIHtcbiAgICAgICAgZGVidWcuZXJyb3IoJ0Nhbm5vdCBpbXBvcnQgJyArIG5hbWUgKyAnLiBBcmUgeW91IHN1cmUgaXQgd2FzIHJlZ2lzdGVyZWQ/Jyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5pbXBvcnRzW25hbWVdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlZ2lzdGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXIocGF0aCwgdGFyZ2V0KSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB2YXIgb3ZlcndyaXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICAgICAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgbmFtZSA9IHBhdGguYXR0ck5hbWUgfHwgcGF0aC5ibG90TmFtZTtcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIC8vIHJlZ2lzdGVyKEJsb3QgfCBBdHRyaWJ1dG9yLCBvdmVyd3JpdGUpXG4gICAgICAgICAgdGhpcy5yZWdpc3RlcignZm9ybWF0cy8nICsgbmFtZSwgcGF0aCwgdGFyZ2V0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBPYmplY3Qua2V5cyhwYXRoKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIF90aGlzLnJlZ2lzdGVyKGtleSwgcGF0aFtrZXldLCB0YXJnZXQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5pbXBvcnRzW3BhdGhdICE9IG51bGwgJiYgIW92ZXJ3cml0ZSkge1xuICAgICAgICAgIGRlYnVnLndhcm4oJ092ZXJ3cml0aW5nICcgKyBwYXRoICsgJyB3aXRoJywgdGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmltcG9ydHNbcGF0aF0gPSB0YXJnZXQ7XG4gICAgICAgIGlmICgocGF0aC5zdGFydHNXaXRoKCdibG90cy8nKSB8fCBwYXRoLnN0YXJ0c1dpdGgoJ2Zvcm1hdHMvJykpICYmIHRhcmdldC5ibG90TmFtZSAhPT0gJ2Fic3RyYWN0Jykge1xuICAgICAgICAgIF9wYXJjaG1lbnQyLmRlZmF1bHQucmVnaXN0ZXIodGFyZ2V0KTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXRoLnN0YXJ0c1dpdGgoJ21vZHVsZXMnKSAmJiB0eXBlb2YgdGFyZ2V0LnJlZ2lzdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGFyZ2V0LnJlZ2lzdGVyKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICBmdW5jdGlvbiBRdWlsbChjb250YWluZXIpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBRdWlsbCk7XG5cbiAgICB0aGlzLm9wdGlvbnMgPSBleHBhbmRDb25maWcoY29udGFpbmVyLCBvcHRpb25zKTtcbiAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMub3B0aW9ucy5jb250YWluZXI7XG4gICAgaWYgKHRoaXMuY29udGFpbmVyID09IG51bGwpIHtcbiAgICAgIHJldHVybiBkZWJ1Zy5lcnJvcignSW52YWxpZCBRdWlsbCBjb250YWluZXInLCBjb250YWluZXIpO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLmRlYnVnKSB7XG4gICAgICBRdWlsbC5kZWJ1Zyh0aGlzLm9wdGlvbnMuZGVidWcpO1xuICAgIH1cbiAgICB2YXIgaHRtbCA9IHRoaXMuY29udGFpbmVyLmlubmVySFRNTC50cmltKCk7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgncWwtY29udGFpbmVyJyk7XG4gICAgdGhpcy5jb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG4gICAgdGhpcy5jb250YWluZXIuX19xdWlsbCA9IHRoaXM7XG4gICAgdGhpcy5yb290ID0gdGhpcy5hZGRDb250YWluZXIoJ3FsLWVkaXRvcicpO1xuICAgIHRoaXMucm9vdC5jbGFzc0xpc3QuYWRkKCdxbC1ibGFuaycpO1xuICAgIHRoaXMucm9vdC5zZXRBdHRyaWJ1dGUoJ2RhdGEtZ3JhbW0nLCBmYWxzZSk7XG4gICAgdGhpcy5zY3JvbGxpbmdDb250YWluZXIgPSB0aGlzLm9wdGlvbnMuc2Nyb2xsaW5nQ29udGFpbmVyIHx8IHRoaXMucm9vdDtcbiAgICB0aGlzLmVtaXR0ZXIgPSBuZXcgX2VtaXR0ZXI0LmRlZmF1bHQoKTtcbiAgICB0aGlzLnNjcm9sbCA9IF9wYXJjaG1lbnQyLmRlZmF1bHQuY3JlYXRlKHRoaXMucm9vdCwge1xuICAgICAgZW1pdHRlcjogdGhpcy5lbWl0dGVyLFxuICAgICAgd2hpdGVsaXN0OiB0aGlzLm9wdGlvbnMuZm9ybWF0c1xuICAgIH0pO1xuICAgIHRoaXMuZWRpdG9yID0gbmV3IF9lZGl0b3IyLmRlZmF1bHQodGhpcy5zY3JvbGwpO1xuICAgIHRoaXMuc2VsZWN0aW9uID0gbmV3IF9zZWxlY3Rpb24yLmRlZmF1bHQodGhpcy5zY3JvbGwsIHRoaXMuZW1pdHRlcik7XG4gICAgdGhpcy50aGVtZSA9IG5ldyB0aGlzLm9wdGlvbnMudGhlbWUodGhpcywgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLmtleWJvYXJkID0gdGhpcy50aGVtZS5hZGRNb2R1bGUoJ2tleWJvYXJkJyk7XG4gICAgdGhpcy5jbGlwYm9hcmQgPSB0aGlzLnRoZW1lLmFkZE1vZHVsZSgnY2xpcGJvYXJkJyk7XG4gICAgdGhpcy5oaXN0b3J5ID0gdGhpcy50aGVtZS5hZGRNb2R1bGUoJ2hpc3RvcnknKTtcbiAgICB0aGlzLnRoZW1lLmluaXQoKTtcbiAgICB0aGlzLmVtaXR0ZXIub24oX2VtaXR0ZXI0LmRlZmF1bHQuZXZlbnRzLkVESVRPUl9DSEFOR0UsIGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBpZiAodHlwZSA9PT0gX2VtaXR0ZXI0LmRlZmF1bHQuZXZlbnRzLlRFWFRfQ0hBTkdFKSB7XG4gICAgICAgIF90aGlzMi5yb290LmNsYXNzTGlzdC50b2dnbGUoJ3FsLWJsYW5rJywgX3RoaXMyLmVkaXRvci5pc0JsYW5rKCkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuZW1pdHRlci5vbihfZW1pdHRlcjQuZGVmYXVsdC5ldmVudHMuU0NST0xMX1VQREFURSwgZnVuY3Rpb24gKHNvdXJjZSwgbXV0YXRpb25zKSB7XG4gICAgICB2YXIgcmFuZ2UgPSBfdGhpczIuc2VsZWN0aW9uLmxhc3RSYW5nZTtcbiAgICAgIHZhciBpbmRleCA9IHJhbmdlICYmIHJhbmdlLmxlbmd0aCA9PT0gMCA/IHJhbmdlLmluZGV4IDogdW5kZWZpbmVkO1xuICAgICAgbW9kaWZ5LmNhbGwoX3RoaXMyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuZWRpdG9yLnVwZGF0ZShudWxsLCBtdXRhdGlvbnMsIGluZGV4KTtcbiAgICAgIH0sIHNvdXJjZSk7XG4gICAgfSk7XG4gICAgdmFyIGNvbnRlbnRzID0gdGhpcy5jbGlwYm9hcmQuY29udmVydCgnPGRpdiBjbGFzcz1cXCdxbC1lZGl0b3JcXCcgc3R5bGU9XCJ3aGl0ZS1zcGFjZTogbm9ybWFsO1wiPicgKyBodG1sICsgJzxwPjxicj48L3A+PC9kaXY+Jyk7XG4gICAgdGhpcy5zZXRDb250ZW50cyhjb250ZW50cyk7XG4gICAgdGhpcy5oaXN0b3J5LmNsZWFyKCk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5wbGFjZWhvbGRlcikge1xuICAgICAgdGhpcy5yb290LnNldEF0dHJpYnV0ZSgnZGF0YS1wbGFjZWhvbGRlcicsIHRoaXMub3B0aW9ucy5wbGFjZWhvbGRlcik7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMucmVhZE9ubHkpIHtcbiAgICAgIHRoaXMuZGlzYWJsZSgpO1xuICAgIH1cbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhRdWlsbCwgW3tcbiAgICBrZXk6ICdhZGRDb250YWluZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRDb250YWluZXIoY29udGFpbmVyKSB7XG4gICAgICB2YXIgcmVmTm9kZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbnVsbDtcblxuICAgICAgaWYgKHR5cGVvZiBjb250YWluZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciBjbGFzc05hbWUgPSBjb250YWluZXI7XG4gICAgICAgIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgICAgfVxuICAgICAgdGhpcy5jb250YWluZXIuaW5zZXJ0QmVmb3JlKGNvbnRhaW5lciwgcmVmTm9kZSk7XG4gICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2JsdXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBibHVyKCkge1xuICAgICAgdGhpcy5zZWxlY3Rpb24uc2V0UmFuZ2UobnVsbCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVsZXRlVGV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZVRleHQoaW5kZXgsIGxlbmd0aCwgc291cmNlKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIF9vdmVybG9hZCA9IG92ZXJsb2FkKGluZGV4LCBsZW5ndGgsIHNvdXJjZSk7XG5cbiAgICAgIHZhciBfb3ZlcmxvYWQyID0gX3NsaWNlZFRvQXJyYXkoX292ZXJsb2FkLCA0KTtcblxuICAgICAgaW5kZXggPSBfb3ZlcmxvYWQyWzBdO1xuICAgICAgbGVuZ3RoID0gX292ZXJsb2FkMlsxXTtcbiAgICAgIHNvdXJjZSA9IF9vdmVybG9hZDJbM107XG5cbiAgICAgIHJldHVybiBtb2RpZnkuY2FsbCh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczMuZWRpdG9yLmRlbGV0ZVRleHQoaW5kZXgsIGxlbmd0aCk7XG4gICAgICB9LCBzb3VyY2UsIGluZGV4LCAtMSAqIGxlbmd0aCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGlzYWJsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICB0aGlzLmVuYWJsZShmYWxzZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZW5hYmxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgICAgdmFyIGVuYWJsZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRydWU7XG5cbiAgICAgIHRoaXMuc2Nyb2xsLmVuYWJsZShlbmFibGVkKTtcbiAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ3FsLWRpc2FibGVkJywgIWVuYWJsZWQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2ZvY3VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICB2YXIgc2Nyb2xsVG9wID0gdGhpcy5zY3JvbGxpbmdDb250YWluZXIuc2Nyb2xsVG9wO1xuICAgICAgdGhpcy5zZWxlY3Rpb24uZm9jdXMoKTtcbiAgICAgIHRoaXMuc2Nyb2xsaW5nQ29udGFpbmVyLnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgIHRoaXMuc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXQobmFtZSwgdmFsdWUpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLkFQSTtcblxuICAgICAgcmV0dXJuIG1vZGlmeS5jYWxsKHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJhbmdlID0gX3RoaXM0LmdldFNlbGVjdGlvbih0cnVlKTtcbiAgICAgICAgdmFyIGNoYW5nZSA9IG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpO1xuICAgICAgICBpZiAocmFuZ2UgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBjaGFuZ2U7XG4gICAgICAgIH0gZWxzZSBpZiAoX3BhcmNobWVudDIuZGVmYXVsdC5xdWVyeShuYW1lLCBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLkJMT0NLKSkge1xuICAgICAgICAgIGNoYW5nZSA9IF90aGlzNC5lZGl0b3IuZm9ybWF0TGluZShyYW5nZS5pbmRleCwgcmFuZ2UubGVuZ3RoLCBfZGVmaW5lUHJvcGVydHkoe30sIG5hbWUsIHZhbHVlKSk7XG4gICAgICAgIH0gZWxzZSBpZiAocmFuZ2UubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgX3RoaXM0LnNlbGVjdGlvbi5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgICAgICAgIHJldHVybiBjaGFuZ2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlID0gX3RoaXM0LmVkaXRvci5mb3JtYXRUZXh0KHJhbmdlLmluZGV4LCByYW5nZS5sZW5ndGgsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgbmFtZSwgdmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpczQuc2V0U2VsZWN0aW9uKHJhbmdlLCBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgICAgIHJldHVybiBjaGFuZ2U7XG4gICAgICB9LCBzb3VyY2UpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Zvcm1hdExpbmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRMaW5lKGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlLCBzb3VyY2UpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICB2YXIgZm9ybWF0cyA9IHZvaWQgMDtcblxuICAgICAgdmFyIF9vdmVybG9hZDMgPSBvdmVybG9hZChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSwgc291cmNlKTtcblxuICAgICAgdmFyIF9vdmVybG9hZDQgPSBfc2xpY2VkVG9BcnJheShfb3ZlcmxvYWQzLCA0KTtcblxuICAgICAgaW5kZXggPSBfb3ZlcmxvYWQ0WzBdO1xuICAgICAgbGVuZ3RoID0gX292ZXJsb2FkNFsxXTtcbiAgICAgIGZvcm1hdHMgPSBfb3ZlcmxvYWQ0WzJdO1xuICAgICAgc291cmNlID0gX292ZXJsb2FkNFszXTtcblxuICAgICAgcmV0dXJuIG1vZGlmeS5jYWxsKHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzNS5lZGl0b3IuZm9ybWF0TGluZShpbmRleCwgbGVuZ3RoLCBmb3JtYXRzKTtcbiAgICAgIH0sIHNvdXJjZSwgaW5kZXgsIDApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Zvcm1hdFRleHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRUZXh0KGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlLCBzb3VyY2UpIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICB2YXIgZm9ybWF0cyA9IHZvaWQgMDtcblxuICAgICAgdmFyIF9vdmVybG9hZDUgPSBvdmVybG9hZChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSwgc291cmNlKTtcblxuICAgICAgdmFyIF9vdmVybG9hZDYgPSBfc2xpY2VkVG9BcnJheShfb3ZlcmxvYWQ1LCA0KTtcblxuICAgICAgaW5kZXggPSBfb3ZlcmxvYWQ2WzBdO1xuICAgICAgbGVuZ3RoID0gX292ZXJsb2FkNlsxXTtcbiAgICAgIGZvcm1hdHMgPSBfb3ZlcmxvYWQ2WzJdO1xuICAgICAgc291cmNlID0gX292ZXJsb2FkNlszXTtcblxuICAgICAgcmV0dXJuIG1vZGlmeS5jYWxsKHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzNi5lZGl0b3IuZm9ybWF0VGV4dChpbmRleCwgbGVuZ3RoLCBmb3JtYXRzKTtcbiAgICAgIH0sIHNvdXJjZSwgaW5kZXgsIDApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEJvdW5kcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEJvdW5kcyhpbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcblxuICAgICAgdmFyIGJvdW5kcyA9IHZvaWQgMDtcbiAgICAgIGlmICh0eXBlb2YgaW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICAgIGJvdW5kcyA9IHRoaXMuc2VsZWN0aW9uLmdldEJvdW5kcyhpbmRleCwgbGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJvdW5kcyA9IHRoaXMuc2VsZWN0aW9uLmdldEJvdW5kcyhpbmRleC5pbmRleCwgaW5kZXgubGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIHZhciBjb250YWluZXJCb3VuZHMgPSB0aGlzLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJvdHRvbTogYm91bmRzLmJvdHRvbSAtIGNvbnRhaW5lckJvdW5kcy50b3AsXG4gICAgICAgIGhlaWdodDogYm91bmRzLmhlaWdodCxcbiAgICAgICAgbGVmdDogYm91bmRzLmxlZnQgLSBjb250YWluZXJCb3VuZHMubGVmdCxcbiAgICAgICAgcmlnaHQ6IGJvdW5kcy5yaWdodCAtIGNvbnRhaW5lckJvdW5kcy5sZWZ0LFxuICAgICAgICB0b3A6IGJvdW5kcy50b3AgLSBjb250YWluZXJCb3VuZHMudG9wLFxuICAgICAgICB3aWR0aDogYm91bmRzLndpZHRoXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldENvbnRlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29udGVudHMoKSB7XG4gICAgICB2YXIgaW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLmdldExlbmd0aCgpIC0gaW5kZXg7XG5cbiAgICAgIHZhciBfb3ZlcmxvYWQ3ID0gb3ZlcmxvYWQoaW5kZXgsIGxlbmd0aCk7XG5cbiAgICAgIHZhciBfb3ZlcmxvYWQ4ID0gX3NsaWNlZFRvQXJyYXkoX292ZXJsb2FkNywgMik7XG5cbiAgICAgIGluZGV4ID0gX292ZXJsb2FkOFswXTtcbiAgICAgIGxlbmd0aCA9IF9vdmVybG9hZDhbMV07XG5cbiAgICAgIHJldHVybiB0aGlzLmVkaXRvci5nZXRDb250ZW50cyhpbmRleCwgbGVuZ3RoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRGb3JtYXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGb3JtYXQoKSB7XG4gICAgICB2YXIgaW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRoaXMuZ2V0U2VsZWN0aW9uKHRydWUpO1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcblxuICAgICAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLmdldEZvcm1hdChpbmRleCwgbGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVkaXRvci5nZXRGb3JtYXQoaW5kZXguaW5kZXgsIGluZGV4Lmxlbmd0aCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0SW5kZXgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJbmRleChibG90KSB7XG4gICAgICByZXR1cm4gYmxvdC5vZmZzZXQodGhpcy5zY3JvbGwpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldExlbmd0aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldExlbmd0aCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNjcm9sbC5sZW5ndGgoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRMZWFmJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGVhZihpbmRleCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2Nyb2xsLmxlYWYoaW5kZXgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldExpbmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMaW5lKGluZGV4KSB7XG4gICAgICByZXR1cm4gdGhpcy5zY3JvbGwubGluZShpbmRleCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0TGluZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMaW5lcygpIHtcbiAgICAgIHZhciBpbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IE51bWJlci5NQVhfVkFMVUU7XG5cbiAgICAgIGlmICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjcm9sbC5saW5lcyhpbmRleC5pbmRleCwgaW5kZXgubGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjcm9sbC5saW5lcyhpbmRleCwgbGVuZ3RoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRNb2R1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNb2R1bGUobmFtZSkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbWUubW9kdWxlc1tuYW1lXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRTZWxlY3Rpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTZWxlY3Rpb24oKSB7XG4gICAgICB2YXIgZm9jdXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgICBpZiAoZm9jdXMpIHRoaXMuZm9jdXMoKTtcbiAgICAgIHRoaXMudXBkYXRlKCk7IC8vIE1ha2Ugc3VyZSB3ZSBhY2Nlc3MgZ2V0UmFuZ2Ugd2l0aCBlZGl0b3IgaW4gY29uc2lzdGVudCBzdGF0ZVxuICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uLmdldFJhbmdlKClbMF07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0VGV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRleHQoKSB7XG4gICAgICB2YXIgaW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLmdldExlbmd0aCgpIC0gaW5kZXg7XG5cbiAgICAgIHZhciBfb3ZlcmxvYWQ5ID0gb3ZlcmxvYWQoaW5kZXgsIGxlbmd0aCk7XG5cbiAgICAgIHZhciBfb3ZlcmxvYWQxMCA9IF9zbGljZWRUb0FycmF5KF9vdmVybG9hZDksIDIpO1xuXG4gICAgICBpbmRleCA9IF9vdmVybG9hZDEwWzBdO1xuICAgICAgbGVuZ3RoID0gX292ZXJsb2FkMTBbMV07XG5cbiAgICAgIHJldHVybiB0aGlzLmVkaXRvci5nZXRUZXh0KGluZGV4LCBsZW5ndGgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2hhc0ZvY3VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzRm9jdXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZWxlY3Rpb24uaGFzRm9jdXMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpbnNlcnRFbWJlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc2VydEVtYmVkKGluZGV4LCBlbWJlZCwgdmFsdWUpIHtcbiAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBRdWlsbC5zb3VyY2VzLkFQSTtcblxuICAgICAgcmV0dXJuIG1vZGlmeS5jYWxsKHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzNy5lZGl0b3IuaW5zZXJ0RW1iZWQoaW5kZXgsIGVtYmVkLCB2YWx1ZSk7XG4gICAgICB9LCBzb3VyY2UsIGluZGV4KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpbnNlcnRUZXh0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5zZXJ0VGV4dChpbmRleCwgdGV4dCwgbmFtZSwgdmFsdWUsIHNvdXJjZSkge1xuICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAgIHZhciBmb3JtYXRzID0gdm9pZCAwO1xuXG4gICAgICB2YXIgX292ZXJsb2FkMTEgPSBvdmVybG9hZChpbmRleCwgMCwgbmFtZSwgdmFsdWUsIHNvdXJjZSk7XG5cbiAgICAgIHZhciBfb3ZlcmxvYWQxMiA9IF9zbGljZWRUb0FycmF5KF9vdmVybG9hZDExLCA0KTtcblxuICAgICAgaW5kZXggPSBfb3ZlcmxvYWQxMlswXTtcbiAgICAgIGZvcm1hdHMgPSBfb3ZlcmxvYWQxMlsyXTtcbiAgICAgIHNvdXJjZSA9IF9vdmVybG9hZDEyWzNdO1xuXG4gICAgICByZXR1cm4gbW9kaWZ5LmNhbGwodGhpcywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXM4LmVkaXRvci5pbnNlcnRUZXh0KGluZGV4LCB0ZXh0LCBmb3JtYXRzKTtcbiAgICAgIH0sIHNvdXJjZSwgaW5kZXgsIHRleHQubGVuZ3RoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpc0VuYWJsZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc0VuYWJsZWQoKSB7XG4gICAgICByZXR1cm4gIXRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5jb250YWlucygncWwtZGlzYWJsZWQnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdvZmYnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvZmYoKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9mZi5hcHBseSh0aGlzLmVtaXR0ZXIsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24uYXBwbHkodGhpcy5lbWl0dGVyLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ29uY2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbmNlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZW1pdHRlci5vbmNlLmFwcGx5KHRoaXMuZW1pdHRlciwgYXJndW1lbnRzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwYXN0ZUhUTUwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXN0ZUhUTUwoaW5kZXgsIGh0bWwsIHNvdXJjZSkge1xuICAgICAgdGhpcy5jbGlwYm9hcmQuZGFuZ2Vyb3VzbHlQYXN0ZUhUTUwoaW5kZXgsIGh0bWwsIHNvdXJjZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlRm9ybWF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlRm9ybWF0KGluZGV4LCBsZW5ndGgsIHNvdXJjZSkge1xuICAgICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICAgIHZhciBfb3ZlcmxvYWQxMyA9IG92ZXJsb2FkKGluZGV4LCBsZW5ndGgsIHNvdXJjZSk7XG5cbiAgICAgIHZhciBfb3ZlcmxvYWQxNCA9IF9zbGljZWRUb0FycmF5KF9vdmVybG9hZDEzLCA0KTtcblxuICAgICAgaW5kZXggPSBfb3ZlcmxvYWQxNFswXTtcbiAgICAgIGxlbmd0aCA9IF9vdmVybG9hZDE0WzFdO1xuICAgICAgc291cmNlID0gX292ZXJsb2FkMTRbM107XG5cbiAgICAgIHJldHVybiBtb2RpZnkuY2FsbCh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczkuZWRpdG9yLnJlbW92ZUZvcm1hdChpbmRleCwgbGVuZ3RoKTtcbiAgICAgIH0sIHNvdXJjZSwgaW5kZXgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Njcm9sbEludG9WaWV3JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Nyb2xsSW50b1ZpZXcoKSB7XG4gICAgICB0aGlzLnNlbGVjdGlvbi5zY3JvbGxJbnRvVmlldyh0aGlzLnNjcm9sbGluZ0NvbnRhaW5lcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0Q29udGVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDb250ZW50cyhkZWx0YSkge1xuICAgICAgdmFyIF90aGlzMTAgPSB0aGlzO1xuXG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLkFQSTtcblxuICAgICAgcmV0dXJuIG1vZGlmeS5jYWxsKHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVsdGEgPSBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoZGVsdGEpO1xuICAgICAgICB2YXIgbGVuZ3RoID0gX3RoaXMxMC5nZXRMZW5ndGgoKTtcbiAgICAgICAgdmFyIGRlbGV0ZWQgPSBfdGhpczEwLmVkaXRvci5kZWxldGVUZXh0KDAsIGxlbmd0aCk7XG4gICAgICAgIHZhciBhcHBsaWVkID0gX3RoaXMxMC5lZGl0b3IuYXBwbHlEZWx0YShkZWx0YSk7XG4gICAgICAgIHZhciBsYXN0T3AgPSBhcHBsaWVkLm9wc1thcHBsaWVkLm9wcy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKGxhc3RPcCAhPSBudWxsICYmIHR5cGVvZiBsYXN0T3AuaW5zZXJ0ID09PSAnc3RyaW5nJyAmJiBsYXN0T3AuaW5zZXJ0W2xhc3RPcC5pbnNlcnQubGVuZ3RoIC0gMV0gPT09ICdcXG4nKSB7XG4gICAgICAgICAgX3RoaXMxMC5lZGl0b3IuZGVsZXRlVGV4dChfdGhpczEwLmdldExlbmd0aCgpIC0gMSwgMSk7XG4gICAgICAgICAgYXBwbGllZC5kZWxldGUoMSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJldCA9IGRlbGV0ZWQuY29tcG9zZShhcHBsaWVkKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH0sIHNvdXJjZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0U2VsZWN0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2VsZWN0aW9uKGluZGV4LCBsZW5ndGgsIHNvdXJjZSkge1xuICAgICAgaWYgKGluZGV4ID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb24uc2V0UmFuZ2UobnVsbCwgbGVuZ3RoIHx8IFF1aWxsLnNvdXJjZXMuQVBJKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBfb3ZlcmxvYWQxNSA9IG92ZXJsb2FkKGluZGV4LCBsZW5ndGgsIHNvdXJjZSk7XG5cbiAgICAgICAgdmFyIF9vdmVybG9hZDE2ID0gX3NsaWNlZFRvQXJyYXkoX292ZXJsb2FkMTUsIDQpO1xuXG4gICAgICAgIGluZGV4ID0gX292ZXJsb2FkMTZbMF07XG4gICAgICAgIGxlbmd0aCA9IF9vdmVybG9hZDE2WzFdO1xuICAgICAgICBzb3VyY2UgPSBfb3ZlcmxvYWQxNlszXTtcblxuICAgICAgICB0aGlzLnNlbGVjdGlvbi5zZXRSYW5nZShuZXcgX3NlbGVjdGlvbi5SYW5nZShpbmRleCwgbGVuZ3RoKSwgc291cmNlKTtcbiAgICAgICAgaWYgKHNvdXJjZSAhPT0gX2VtaXR0ZXI0LmRlZmF1bHQuc291cmNlcy5TSUxFTlQpIHtcbiAgICAgICAgICB0aGlzLnNlbGVjdGlvbi5zY3JvbGxJbnRvVmlldyh0aGlzLnNjcm9sbGluZ0NvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRUZXh0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0VGV4dCh0ZXh0KSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLkFQSTtcblxuICAgICAgdmFyIGRlbHRhID0gbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkuaW5zZXJ0KHRleHQpO1xuICAgICAgcmV0dXJuIHRoaXMuc2V0Q29udGVudHMoZGVsdGEsIHNvdXJjZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogX2VtaXR0ZXI0LmRlZmF1bHQuc291cmNlcy5VU0VSO1xuXG4gICAgICB2YXIgY2hhbmdlID0gdGhpcy5zY3JvbGwudXBkYXRlKHNvdXJjZSk7IC8vIFdpbGwgdXBkYXRlIHNlbGVjdGlvbiBiZWZvcmUgc2VsZWN0aW9uLnVwZGF0ZSgpIGRvZXMgaWYgdGV4dCBjaGFuZ2VzXG4gICAgICB0aGlzLnNlbGVjdGlvbi51cGRhdGUoc291cmNlKTtcbiAgICAgIHJldHVybiBjaGFuZ2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlQ29udGVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVDb250ZW50cyhkZWx0YSkge1xuICAgICAgdmFyIF90aGlzMTEgPSB0aGlzO1xuXG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLkFQSTtcblxuICAgICAgcmV0dXJuIG1vZGlmeS5jYWxsKHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVsdGEgPSBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoZGVsdGEpO1xuICAgICAgICByZXR1cm4gX3RoaXMxMS5lZGl0b3IuYXBwbHlEZWx0YShkZWx0YSwgc291cmNlKTtcbiAgICAgIH0sIHNvdXJjZSwgdHJ1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFF1aWxsO1xufSgpO1xuXG5RdWlsbC5ERUZBVUxUUyA9IHtcbiAgYm91bmRzOiBudWxsLFxuICBmb3JtYXRzOiBudWxsLFxuICBtb2R1bGVzOiB7fSxcbiAgcGxhY2Vob2xkZXI6ICcnLFxuICByZWFkT25seTogZmFsc2UsXG4gIHNjcm9sbGluZ0NvbnRhaW5lcjogbnVsbCxcbiAgc3RyaWN0OiB0cnVlLFxuICB0aGVtZTogJ2RlZmF1bHQnXG59O1xuUXVpbGwuZXZlbnRzID0gX2VtaXR0ZXI0LmRlZmF1bHQuZXZlbnRzO1xuUXVpbGwuc291cmNlcyA9IF9lbWl0dGVyNC5kZWZhdWx0LnNvdXJjZXM7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcblF1aWxsLnZlcnNpb24gPSAgZmFsc2UgPyAnZGV2JyA6IFwiMS4zLjdcIjtcblxuUXVpbGwuaW1wb3J0cyA9IHtcbiAgJ2RlbHRhJzogX3F1aWxsRGVsdGEyLmRlZmF1bHQsXG4gICdwYXJjaG1lbnQnOiBfcGFyY2htZW50Mi5kZWZhdWx0LFxuICAnY29yZS9tb2R1bGUnOiBfbW9kdWxlMi5kZWZhdWx0LFxuICAnY29yZS90aGVtZSc6IF90aGVtZTIuZGVmYXVsdFxufTtcblxuZnVuY3Rpb24gZXhwYW5kQ29uZmlnKGNvbnRhaW5lciwgdXNlckNvbmZpZykge1xuICB1c2VyQ29uZmlnID0gKDAsIF9leHRlbmQyLmRlZmF1bHQpKHRydWUsIHtcbiAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICBtb2R1bGVzOiB7XG4gICAgICBjbGlwYm9hcmQ6IHRydWUsXG4gICAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICAgIGhpc3Rvcnk6IHRydWVcbiAgICB9XG4gIH0sIHVzZXJDb25maWcpO1xuICBpZiAoIXVzZXJDb25maWcudGhlbWUgfHwgdXNlckNvbmZpZy50aGVtZSA9PT0gUXVpbGwuREVGQVVMVFMudGhlbWUpIHtcbiAgICB1c2VyQ29uZmlnLnRoZW1lID0gX3RoZW1lMi5kZWZhdWx0O1xuICB9IGVsc2Uge1xuICAgIHVzZXJDb25maWcudGhlbWUgPSBRdWlsbC5pbXBvcnQoJ3RoZW1lcy8nICsgdXNlckNvbmZpZy50aGVtZSk7XG4gICAgaWYgKHVzZXJDb25maWcudGhlbWUgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHRoZW1lICcgKyB1c2VyQ29uZmlnLnRoZW1lICsgJy4gRGlkIHlvdSByZWdpc3RlciBpdD8nKTtcbiAgICB9XG4gIH1cbiAgdmFyIHRoZW1lQ29uZmlnID0gKDAsIF9leHRlbmQyLmRlZmF1bHQpKHRydWUsIHt9LCB1c2VyQ29uZmlnLnRoZW1lLkRFRkFVTFRTKTtcbiAgW3RoZW1lQ29uZmlnLCB1c2VyQ29uZmlnXS5mb3JFYWNoKGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICBjb25maWcubW9kdWxlcyA9IGNvbmZpZy5tb2R1bGVzIHx8IHt9O1xuICAgIE9iamVjdC5rZXlzKGNvbmZpZy5tb2R1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGUpIHtcbiAgICAgIGlmIChjb25maWcubW9kdWxlc1ttb2R1bGVdID09PSB0cnVlKSB7XG4gICAgICAgIGNvbmZpZy5tb2R1bGVzW21vZHVsZV0gPSB7fTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHZhciBtb2R1bGVOYW1lcyA9IE9iamVjdC5rZXlzKHRoZW1lQ29uZmlnLm1vZHVsZXMpLmNvbmNhdChPYmplY3Qua2V5cyh1c2VyQ29uZmlnLm1vZHVsZXMpKTtcbiAgdmFyIG1vZHVsZUNvbmZpZyA9IG1vZHVsZU5hbWVzLnJlZHVjZShmdW5jdGlvbiAoY29uZmlnLCBuYW1lKSB7XG4gICAgdmFyIG1vZHVsZUNsYXNzID0gUXVpbGwuaW1wb3J0KCdtb2R1bGVzLycgKyBuYW1lKTtcbiAgICBpZiAobW9kdWxlQ2xhc3MgPT0gbnVsbCkge1xuICAgICAgZGVidWcuZXJyb3IoJ0Nhbm5vdCBsb2FkICcgKyBuYW1lICsgJyBtb2R1bGUuIEFyZSB5b3Ugc3VyZSB5b3UgcmVnaXN0ZXJlZCBpdD8nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlnW25hbWVdID0gbW9kdWxlQ2xhc3MuREVGQVVMVFMgfHwge307XG4gICAgfVxuICAgIHJldHVybiBjb25maWc7XG4gIH0sIHt9KTtcbiAgLy8gU3BlY2lhbCBjYXNlIHRvb2xiYXIgc2hvcnRoYW5kXG4gIGlmICh1c2VyQ29uZmlnLm1vZHVsZXMgIT0gbnVsbCAmJiB1c2VyQ29uZmlnLm1vZHVsZXMudG9vbGJhciAmJiB1c2VyQ29uZmlnLm1vZHVsZXMudG9vbGJhci5jb25zdHJ1Y3RvciAhPT0gT2JqZWN0KSB7XG4gICAgdXNlckNvbmZpZy5tb2R1bGVzLnRvb2xiYXIgPSB7XG4gICAgICBjb250YWluZXI6IHVzZXJDb25maWcubW9kdWxlcy50b29sYmFyXG4gICAgfTtcbiAgfVxuICB1c2VyQ29uZmlnID0gKDAsIF9leHRlbmQyLmRlZmF1bHQpKHRydWUsIHt9LCBRdWlsbC5ERUZBVUxUUywgeyBtb2R1bGVzOiBtb2R1bGVDb25maWcgfSwgdGhlbWVDb25maWcsIHVzZXJDb25maWcpO1xuICBbJ2JvdW5kcycsICdjb250YWluZXInLCAnc2Nyb2xsaW5nQ29udGFpbmVyJ10uZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKHR5cGVvZiB1c2VyQ29uZmlnW2tleV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICB1c2VyQ29uZmlnW2tleV0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHVzZXJDb25maWdba2V5XSk7XG4gICAgfVxuICB9KTtcbiAgdXNlckNvbmZpZy5tb2R1bGVzID0gT2JqZWN0LmtleXModXNlckNvbmZpZy5tb2R1bGVzKS5yZWR1Y2UoZnVuY3Rpb24gKGNvbmZpZywgbmFtZSkge1xuICAgIGlmICh1c2VyQ29uZmlnLm1vZHVsZXNbbmFtZV0pIHtcbiAgICAgIGNvbmZpZ1tuYW1lXSA9IHVzZXJDb25maWcubW9kdWxlc1tuYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfSwge30pO1xuICByZXR1cm4gdXNlckNvbmZpZztcbn1cblxuLy8gSGFuZGxlIHNlbGVjdGlvbiBwcmVzZXJ2YXRpb24gYW5kIFRFWFRfQ0hBTkdFIGVtaXNzaW9uXG4vLyBjb21tb24gdG8gbW9kaWZpY2F0aW9uIEFQSXNcbmZ1bmN0aW9uIG1vZGlmeShtb2RpZmllciwgc291cmNlLCBpbmRleCwgc2hpZnQpIHtcbiAgaWYgKHRoaXMub3B0aW9ucy5zdHJpY3QgJiYgIXRoaXMuaXNFbmFibGVkKCkgJiYgc291cmNlID09PSBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLlVTRVIpIHtcbiAgICByZXR1cm4gbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCk7XG4gIH1cbiAgdmFyIHJhbmdlID0gaW5kZXggPT0gbnVsbCA/IG51bGwgOiB0aGlzLmdldFNlbGVjdGlvbigpO1xuICB2YXIgb2xkRGVsdGEgPSB0aGlzLmVkaXRvci5kZWx0YTtcbiAgdmFyIGNoYW5nZSA9IG1vZGlmaWVyKCk7XG4gIGlmIChyYW5nZSAhPSBudWxsKSB7XG4gICAgaWYgKGluZGV4ID09PSB0cnVlKSBpbmRleCA9IHJhbmdlLmluZGV4O1xuICAgIGlmIChzaGlmdCA9PSBudWxsKSB7XG4gICAgICByYW5nZSA9IHNoaWZ0UmFuZ2UocmFuZ2UsIGNoYW5nZSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHNoaWZ0ICE9PSAwKSB7XG4gICAgICByYW5nZSA9IHNoaWZ0UmFuZ2UocmFuZ2UsIGluZGV4LCBzaGlmdCwgc291cmNlKTtcbiAgICB9XG4gICAgdGhpcy5zZXRTZWxlY3Rpb24ocmFuZ2UsIF9lbWl0dGVyNC5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKTtcbiAgfVxuICBpZiAoY2hhbmdlLmxlbmd0aCgpID4gMCkge1xuICAgIHZhciBfZW1pdHRlcjtcblxuICAgIHZhciBhcmdzID0gW19lbWl0dGVyNC5kZWZhdWx0LmV2ZW50cy5URVhUX0NIQU5HRSwgY2hhbmdlLCBvbGREZWx0YSwgc291cmNlXTtcbiAgICAoX2VtaXR0ZXIgPSB0aGlzLmVtaXR0ZXIpLmVtaXQuYXBwbHkoX2VtaXR0ZXIsIFtfZW1pdHRlcjQuZGVmYXVsdC5ldmVudHMuRURJVE9SX0NIQU5HRV0uY29uY2F0KGFyZ3MpKTtcbiAgICBpZiAoc291cmNlICE9PSBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCkge1xuICAgICAgdmFyIF9lbWl0dGVyMjtcblxuICAgICAgKF9lbWl0dGVyMiA9IHRoaXMuZW1pdHRlcikuZW1pdC5hcHBseShfZW1pdHRlcjIsIGFyZ3MpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY2hhbmdlO1xufVxuXG5mdW5jdGlvbiBvdmVybG9hZChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSwgc291cmNlKSB7XG4gIHZhciBmb3JtYXRzID0ge307XG4gIGlmICh0eXBlb2YgaW5kZXguaW5kZXggPT09ICdudW1iZXInICYmIHR5cGVvZiBpbmRleC5sZW5ndGggPT09ICdudW1iZXInKSB7XG4gICAgLy8gQWxsb3cgZm9yIHRocm93YXdheSBlbmQgKHVzZWQgYnkgaW5zZXJ0VGV4dC9pbnNlcnRFbWJlZClcbiAgICBpZiAodHlwZW9mIGxlbmd0aCAhPT0gJ251bWJlcicpIHtcbiAgICAgIHNvdXJjZSA9IHZhbHVlLCB2YWx1ZSA9IG5hbWUsIG5hbWUgPSBsZW5ndGgsIGxlbmd0aCA9IGluZGV4Lmxlbmd0aCwgaW5kZXggPSBpbmRleC5pbmRleDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gaW5kZXgubGVuZ3RoLCBpbmRleCA9IGluZGV4LmluZGV4O1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgbGVuZ3RoICE9PSAnbnVtYmVyJykge1xuICAgIHNvdXJjZSA9IHZhbHVlLCB2YWx1ZSA9IG5hbWUsIG5hbWUgPSBsZW5ndGgsIGxlbmd0aCA9IDA7XG4gIH1cbiAgLy8gSGFuZGxlIGZvcm1hdCBiZWluZyBvYmplY3QsIHR3byBmb3JtYXQgbmFtZS92YWx1ZSBzdHJpbmdzIG9yIGV4Y2x1ZGVkXG4gIGlmICgodHlwZW9mIG5hbWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG5hbWUpKSA9PT0gJ29iamVjdCcpIHtcbiAgICBmb3JtYXRzID0gbmFtZTtcbiAgICBzb3VyY2UgPSB2YWx1ZTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgZm9ybWF0c1tuYW1lXSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBzb3VyY2UgPSBuYW1lO1xuICAgIH1cbiAgfVxuICAvLyBIYW5kbGUgb3B0aW9uYWwgc291cmNlXG4gIHNvdXJjZSA9IHNvdXJjZSB8fCBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLkFQSTtcbiAgcmV0dXJuIFtpbmRleCwgbGVuZ3RoLCBmb3JtYXRzLCBzb3VyY2VdO1xufVxuXG5mdW5jdGlvbiBzaGlmdFJhbmdlKHJhbmdlLCBpbmRleCwgbGVuZ3RoLCBzb3VyY2UpIHtcbiAgaWYgKHJhbmdlID09IG51bGwpIHJldHVybiBudWxsO1xuICB2YXIgc3RhcnQgPSB2b2lkIDAsXG4gICAgICBlbmQgPSB2b2lkIDA7XG4gIGlmIChpbmRleCBpbnN0YW5jZW9mIF9xdWlsbERlbHRhMi5kZWZhdWx0KSB7XG4gICAgdmFyIF9tYXAgPSBbcmFuZ2UuaW5kZXgsIHJhbmdlLmluZGV4ICsgcmFuZ2UubGVuZ3RoXS5tYXAoZnVuY3Rpb24gKHBvcykge1xuICAgICAgcmV0dXJuIGluZGV4LnRyYW5zZm9ybVBvc2l0aW9uKHBvcywgc291cmNlICE9PSBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgIH0pO1xuXG4gICAgdmFyIF9tYXAyID0gX3NsaWNlZFRvQXJyYXkoX21hcCwgMik7XG5cbiAgICBzdGFydCA9IF9tYXAyWzBdO1xuICAgIGVuZCA9IF9tYXAyWzFdO1xuICB9IGVsc2Uge1xuICAgIHZhciBfbWFwMyA9IFtyYW5nZS5pbmRleCwgcmFuZ2UuaW5kZXggKyByYW5nZS5sZW5ndGhdLm1hcChmdW5jdGlvbiAocG9zKSB7XG4gICAgICBpZiAocG9zIDwgaW5kZXggfHwgcG9zID09PSBpbmRleCAmJiBzb3VyY2UgPT09IF9lbWl0dGVyNC5kZWZhdWx0LnNvdXJjZXMuVVNFUikgcmV0dXJuIHBvcztcbiAgICAgIGlmIChsZW5ndGggPj0gMCkge1xuICAgICAgICByZXR1cm4gcG9zICsgbGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KGluZGV4LCBwb3MgKyBsZW5ndGgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIF9tYXA0ID0gX3NsaWNlZFRvQXJyYXkoX21hcDMsIDIpO1xuXG4gICAgc3RhcnQgPSBfbWFwNFswXTtcbiAgICBlbmQgPSBfbWFwNFsxXTtcbiAgfVxuICByZXR1cm4gbmV3IF9zZWxlY3Rpb24uUmFuZ2Uoc3RhcnQsIGVuZCAtIHN0YXJ0KTtcbn1cblxuZXhwb3J0cy5leHBhbmRDb25maWcgPSBleHBhbmRDb25maWc7XG5leHBvcnRzLm92ZXJsb2FkID0gb3ZlcmxvYWQ7XG5leHBvcnRzLmRlZmF1bHQgPSBRdWlsbDtcblxuLyoqKi8gfSksXG4vKiA2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF90ZXh0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxudmFyIF90ZXh0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RleHQpO1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIElubGluZSA9IGZ1bmN0aW9uIChfUGFyY2htZW50JElubGluZSkge1xuICBfaW5oZXJpdHMoSW5saW5lLCBfUGFyY2htZW50JElubGluZSk7XG5cbiAgZnVuY3Rpb24gSW5saW5lKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbmxpbmUpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChJbmxpbmUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJbmxpbmUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhJbmxpbmUsIFt7XG4gICAga2V5OiAnZm9ybWF0QXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRBdChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgaWYgKElubGluZS5jb21wYXJlKHRoaXMuc3RhdGljcy5ibG90TmFtZSwgbmFtZSkgPCAwICYmIF9wYXJjaG1lbnQyLmRlZmF1bHQucXVlcnkobmFtZSwgX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5CTE9UKSkge1xuICAgICAgICB2YXIgYmxvdCA9IHRoaXMuaXNvbGF0ZShpbmRleCwgbGVuZ3RoKTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgYmxvdC53cmFwKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2dldChJbmxpbmUucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSW5saW5lLnByb3RvdHlwZSksICdmb3JtYXRBdCcsIHRoaXMpLmNhbGwodGhpcywgaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ29wdGltaXplJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb3B0aW1pemUoY29udGV4dCkge1xuICAgICAgX2dldChJbmxpbmUucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSW5saW5lLnByb3RvdHlwZSksICdvcHRpbWl6ZScsIHRoaXMpLmNhbGwodGhpcywgY29udGV4dCk7XG4gICAgICBpZiAodGhpcy5wYXJlbnQgaW5zdGFuY2VvZiBJbmxpbmUgJiYgSW5saW5lLmNvbXBhcmUodGhpcy5zdGF0aWNzLmJsb3ROYW1lLCB0aGlzLnBhcmVudC5zdGF0aWNzLmJsb3ROYW1lKSA+IDApIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Lmlzb2xhdGUodGhpcy5vZmZzZXQoKSwgdGhpcy5sZW5ndGgoKSk7XG4gICAgICAgIHRoaXMubW92ZUNoaWxkcmVuKHBhcmVudCk7XG4gICAgICAgIHBhcmVudC53cmFwKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiAnY29tcGFyZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBhcmUoc2VsZiwgb3RoZXIpIHtcbiAgICAgIHZhciBzZWxmSW5kZXggPSBJbmxpbmUub3JkZXIuaW5kZXhPZihzZWxmKTtcbiAgICAgIHZhciBvdGhlckluZGV4ID0gSW5saW5lLm9yZGVyLmluZGV4T2Yob3RoZXIpO1xuICAgICAgaWYgKHNlbGZJbmRleCA+PSAwIHx8IG90aGVySW5kZXggPj0gMCkge1xuICAgICAgICByZXR1cm4gc2VsZkluZGV4IC0gb3RoZXJJbmRleDtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZiA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9IGVsc2UgaWYgKHNlbGYgPCBvdGhlcikge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSW5saW5lO1xufShfcGFyY2htZW50Mi5kZWZhdWx0LklubGluZSk7XG5cbklubGluZS5hbGxvd2VkQ2hpbGRyZW4gPSBbSW5saW5lLCBfcGFyY2htZW50Mi5kZWZhdWx0LkVtYmVkLCBfdGV4dDIuZGVmYXVsdF07XG4vLyBMb3dlciBpbmRleCBtZWFucyBkZWVwZXIgaW4gdGhlIERPTSB0cmVlLCBzaW5jZSBub3QgZm91bmQgKC0xKSBpcyBmb3IgZW1iZWRzXG5JbmxpbmUub3JkZXIgPSBbJ2N1cnNvcicsICdpbmxpbmUnLCAvLyBNdXN0IGJlIGxvd2VyXG4ndW5kZXJsaW5lJywgJ3N0cmlrZScsICdpdGFsaWMnLCAnYm9sZCcsICdzY3JpcHQnLCAnbGluaycsICdjb2RlJyAvLyBNdXN0IGJlIGhpZ2hlclxuXTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gSW5saW5lO1xuXG4vKioqLyB9KSxcbi8qIDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBUZXh0QmxvdCA9IGZ1bmN0aW9uIChfUGFyY2htZW50JFRleHQpIHtcbiAgX2luaGVyaXRzKFRleHRCbG90LCBfUGFyY2htZW50JFRleHQpO1xuXG4gIGZ1bmN0aW9uIFRleHRCbG90KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUZXh0QmxvdCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFRleHRCbG90Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGV4dEJsb3QpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBUZXh0QmxvdDtcbn0oX3BhcmNobWVudDIuZGVmYXVsdC5UZXh0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gVGV4dEJsb3Q7XG5cbi8qKiovIH0pLFxuLyogOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfZXZlbnRlbWl0dGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NCk7XG5cbnZhciBfZXZlbnRlbWl0dGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V2ZW50ZW1pdHRlcik7XG5cbnZhciBfbG9nZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG5cbnZhciBfbG9nZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xvZ2dlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIGRlYnVnID0gKDAsIF9sb2dnZXIyLmRlZmF1bHQpKCdxdWlsbDpldmVudHMnKTtcblxudmFyIEVWRU5UUyA9IFsnc2VsZWN0aW9uY2hhbmdlJywgJ21vdXNlZG93bicsICdtb3VzZXVwJywgJ2NsaWNrJ107XG5cbkVWRU5UUy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5xbC1jb250YWluZXInKSkuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgLy8gVE9ETyB1c2UgV2Vha01hcFxuICAgICAgaWYgKG5vZGUuX19xdWlsbCAmJiBub2RlLl9fcXVpbGwuZW1pdHRlcikge1xuICAgICAgICB2YXIgX25vZGUkX19xdWlsbCRlbWl0dGVyO1xuXG4gICAgICAgIChfbm9kZSRfX3F1aWxsJGVtaXR0ZXIgPSBub2RlLl9fcXVpbGwuZW1pdHRlcikuaGFuZGxlRE9NLmFwcGx5KF9ub2RlJF9fcXVpbGwkZW1pdHRlciwgYXJncyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbnZhciBFbWl0dGVyID0gZnVuY3Rpb24gKF9FdmVudEVtaXR0ZXIpIHtcbiAgX2luaGVyaXRzKEVtaXR0ZXIsIF9FdmVudEVtaXR0ZXIpO1xuXG4gIGZ1bmN0aW9uIEVtaXR0ZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEVtaXR0ZXIpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEVtaXR0ZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihFbWl0dGVyKSkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5saXN0ZW5lcnMgPSB7fTtcbiAgICBfdGhpcy5vbignZXJyb3InLCBkZWJ1Zy5lcnJvcik7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEVtaXR0ZXIsIFt7XG4gICAga2V5OiAnZW1pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVtaXQoKSB7XG4gICAgICBkZWJ1Zy5sb2cuYXBwbHkoZGVidWcsIGFyZ3VtZW50cyk7XG4gICAgICBfZ2V0KEVtaXR0ZXIucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRW1pdHRlci5wcm90b3R5cGUpLCAnZW1pdCcsIHRoaXMpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaGFuZGxlRE9NJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlRE9NKGV2ZW50KSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgICh0aGlzLmxpc3RlbmVyc1tldmVudC50eXBlXSB8fCBbXSkuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgbm9kZSA9IF9yZWYubm9kZSxcbiAgICAgICAgICAgIGhhbmRsZXIgPSBfcmVmLmhhbmRsZXI7XG5cbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gbm9kZSB8fCBub2RlLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgICBoYW5kbGVyLmFwcGx5KHVuZGVmaW5lZCwgW2V2ZW50XS5jb25jYXQoYXJncykpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdsaXN0ZW5ET00nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW5ET00oZXZlbnROYW1lLCBub2RlLCBoYW5kbGVyKSB7XG4gICAgICBpZiAoIXRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXSA9IFtdO1xuICAgICAgfVxuICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXS5wdXNoKHsgbm9kZTogbm9kZSwgaGFuZGxlcjogaGFuZGxlciB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRW1pdHRlcjtcbn0oX2V2ZW50ZW1pdHRlcjIuZGVmYXVsdCk7XG5cbkVtaXR0ZXIuZXZlbnRzID0ge1xuICBFRElUT1JfQ0hBTkdFOiAnZWRpdG9yLWNoYW5nZScsXG4gIFNDUk9MTF9CRUZPUkVfVVBEQVRFOiAnc2Nyb2xsLWJlZm9yZS11cGRhdGUnLFxuICBTQ1JPTExfT1BUSU1JWkU6ICdzY3JvbGwtb3B0aW1pemUnLFxuICBTQ1JPTExfVVBEQVRFOiAnc2Nyb2xsLXVwZGF0ZScsXG4gIFNFTEVDVElPTl9DSEFOR0U6ICdzZWxlY3Rpb24tY2hhbmdlJyxcbiAgVEVYVF9DSEFOR0U6ICd0ZXh0LWNoYW5nZSdcbn07XG5FbWl0dGVyLnNvdXJjZXMgPSB7XG4gIEFQSTogJ2FwaScsXG4gIFNJTEVOVDogJ3NpbGVudCcsXG4gIFVTRVI6ICd1c2VyJ1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRW1pdHRlcjtcblxuLyoqKi8gfSksXG4vKiA5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBNb2R1bGUgPSBmdW5jdGlvbiBNb2R1bGUocXVpbGwpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNb2R1bGUpO1xuXG4gIHRoaXMucXVpbGwgPSBxdWlsbDtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbn07XG5cbk1vZHVsZS5ERUZBVUxUUyA9IHt9O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBNb2R1bGU7XG5cbi8qKiovIH0pLFxuLyogMTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBsZXZlbHMgPSBbJ2Vycm9yJywgJ3dhcm4nLCAnbG9nJywgJ2luZm8nXTtcbnZhciBsZXZlbCA9ICd3YXJuJztcblxuZnVuY3Rpb24gZGVidWcobWV0aG9kKSB7XG4gIGlmIChsZXZlbHMuaW5kZXhPZihtZXRob2QpIDw9IGxldmVscy5pbmRleE9mKGxldmVsKSkge1xuICAgIHZhciBfY29uc29sZTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgKF9jb25zb2xlID0gY29uc29sZSlbbWV0aG9kXS5hcHBseShfY29uc29sZSwgYXJncyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICB9XG59XG5cbmZ1bmN0aW9uIG5hbWVzcGFjZShucykge1xuICByZXR1cm4gbGV2ZWxzLnJlZHVjZShmdW5jdGlvbiAobG9nZ2VyLCBtZXRob2QpIHtcbiAgICBsb2dnZXJbbWV0aG9kXSA9IGRlYnVnLmJpbmQoY29uc29sZSwgbWV0aG9kLCBucyk7XG4gICAgcmV0dXJuIGxvZ2dlcjtcbiAgfSwge30pO1xufVxuXG5kZWJ1Zy5sZXZlbCA9IG5hbWVzcGFjZS5sZXZlbCA9IGZ1bmN0aW9uIChuZXdMZXZlbCkge1xuICBsZXZlbCA9IG5ld0xldmVsO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gbmFtZXNwYWNlO1xuXG4vKioqLyB9KSxcbi8qIDExICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBwU2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgb2JqZWN0S2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oNTIpO1xudmFyIGlzQXJndW1lbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Myk7XG5cbnZhciBkZWVwRXF1YWwgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhY3R1YWwsIGV4cGVjdGVkLCBvcHRzKSB7XG4gIGlmICghb3B0cykgb3B0cyA9IHt9O1xuICAvLyA3LjEuIEFsbCBpZGVudGljYWwgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBhcyBkZXRlcm1pbmVkIGJ5ID09PS5cbiAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB9IGVsc2UgaWYgKGFjdHVhbCBpbnN0YW5jZW9mIERhdGUgJiYgZXhwZWN0ZWQgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgcmV0dXJuIGFjdHVhbC5nZXRUaW1lKCkgPT09IGV4cGVjdGVkLmdldFRpbWUoKTtcblxuICAvLyA3LjMuIE90aGVyIHBhaXJzIHRoYXQgZG8gbm90IGJvdGggcGFzcyB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcsXG4gIC8vIGVxdWl2YWxlbmNlIGlzIGRldGVybWluZWQgYnkgPT0uXG4gIH0gZWxzZSBpZiAoIWFjdHVhbCB8fCAhZXhwZWN0ZWQgfHwgdHlwZW9mIGFjdHVhbCAhPSAnb2JqZWN0JyAmJiB0eXBlb2YgZXhwZWN0ZWQgIT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gb3B0cy5zdHJpY3QgPyBhY3R1YWwgPT09IGV4cGVjdGVkIDogYWN0dWFsID09IGV4cGVjdGVkO1xuXG4gIC8vIDcuNC4gRm9yIGFsbCBvdGhlciBPYmplY3QgcGFpcnMsIGluY2x1ZGluZyBBcnJheSBvYmplY3RzLCBlcXVpdmFsZW5jZSBpc1xuICAvLyBkZXRlcm1pbmVkIGJ5IGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoYXMgdmVyaWZpZWRcbiAgLy8gd2l0aCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwpLCB0aGUgc2FtZSBzZXQgb2Yga2V5c1xuICAvLyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSwgZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5XG4gIC8vIGNvcnJlc3BvbmRpbmcga2V5LCBhbmQgYW4gaWRlbnRpY2FsICdwcm90b3R5cGUnIHByb3BlcnR5LiBOb3RlOiB0aGlzXG4gIC8vIGFjY291bnRzIGZvciBib3RoIG5hbWVkIGFuZCBpbmRleGVkIHByb3BlcnRpZXMgb24gQXJyYXlzLlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBvYmpFcXVpdihhY3R1YWwsIGV4cGVjdGVkLCBvcHRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZE9yTnVsbCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKHgpIHtcbiAgaWYgKCF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0JyB8fCB0eXBlb2YgeC5sZW5ndGggIT09ICdudW1iZXInKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgeC5jb3B5ICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB4LnNsaWNlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh4Lmxlbmd0aCA+IDAgJiYgdHlwZW9mIHhbMF0gIT09ICdudW1iZXInKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBvYmpFcXVpdihhLCBiLCBvcHRzKSB7XG4gIHZhciBpLCBrZXk7XG4gIGlmIChpc1VuZGVmaW5lZE9yTnVsbChhKSB8fCBpc1VuZGVmaW5lZE9yTnVsbChiKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIC8vIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS5cbiAgaWYgKGEucHJvdG90eXBlICE9PSBiLnByb3RvdHlwZSkgcmV0dXJuIGZhbHNlO1xuICAvL35+fkkndmUgbWFuYWdlZCB0byBicmVhayBPYmplY3Qua2V5cyB0aHJvdWdoIHNjcmV3eSBhcmd1bWVudHMgcGFzc2luZy5cbiAgLy8gICBDb252ZXJ0aW5nIHRvIGFycmF5IHNvbHZlcyB0aGUgcHJvYmxlbS5cbiAgaWYgKGlzQXJndW1lbnRzKGEpKSB7XG4gICAgaWYgKCFpc0FyZ3VtZW50cyhiKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBhID0gcFNsaWNlLmNhbGwoYSk7XG4gICAgYiA9IHBTbGljZS5jYWxsKGIpO1xuICAgIHJldHVybiBkZWVwRXF1YWwoYSwgYiwgb3B0cyk7XG4gIH1cbiAgaWYgKGlzQnVmZmVyKGEpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihiKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhW2ldICE9PSBiW2ldKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHRyeSB7XG4gICAgdmFyIGthID0gb2JqZWN0S2V5cyhhKSxcbiAgICAgICAga2IgPSBvYmplY3RLZXlzKGIpO1xuICB9IGNhdGNoIChlKSB7Ly9oYXBwZW5zIHdoZW4gb25lIGlzIGEgc3RyaW5nIGxpdGVyYWwgYW5kIHRoZSBvdGhlciBpc24ndFxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGtleXMgaW5jb3Jwb3JhdGVzXG4gIC8vIGhhc093blByb3BlcnR5KVxuICBpZiAoa2EubGVuZ3RoICE9IGtiLmxlbmd0aClcbiAgICByZXR1cm4gZmFsc2U7XG4gIC8vdGhlIHNhbWUgc2V0IG9mIGtleXMgKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksXG4gIGthLnNvcnQoKTtcbiAga2Iuc29ydCgpO1xuICAvL35+fmNoZWFwIGtleSB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKGthW2ldICE9IGtiW2ldKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5IGNvcnJlc3BvbmRpbmcga2V5LCBhbmRcbiAgLy9+fn5wb3NzaWJseSBleHBlbnNpdmUgZGVlcCB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAga2V5ID0ga2FbaV07XG4gICAgaWYgKCFkZWVwRXF1YWwoYVtrZXldLCBiW2tleV0sIG9wdHMpKSByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHR5cGVvZiBhID09PSB0eXBlb2YgYjtcbn1cblxuXG4vKioqLyB9KSxcbi8qIDEyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIEF0dHJpYnV0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXR0cmlidXRvcihhdHRyTmFtZSwga2V5TmFtZSwgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB0aGlzLmF0dHJOYW1lID0gYXR0ck5hbWU7XG4gICAgICAgIHRoaXMua2V5TmFtZSA9IGtleU5hbWU7XG4gICAgICAgIHZhciBhdHRyaWJ1dGVCaXQgPSBSZWdpc3RyeS5TY29wZS5UWVBFICYgUmVnaXN0cnkuU2NvcGUuQVRUUklCVVRFO1xuICAgICAgICBpZiAob3B0aW9ucy5zY29wZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBJZ25vcmUgdHlwZSBiaXRzLCBmb3JjZSBhdHRyaWJ1dGUgYml0XG4gICAgICAgICAgICB0aGlzLnNjb3BlID0gKG9wdGlvbnMuc2NvcGUgJiBSZWdpc3RyeS5TY29wZS5MRVZFTCkgfCBhdHRyaWJ1dGVCaXQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNjb3BlID0gUmVnaXN0cnkuU2NvcGUuQVRUUklCVVRFO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLndoaXRlbGlzdCAhPSBudWxsKVxuICAgICAgICAgICAgdGhpcy53aGl0ZWxpc3QgPSBvcHRpb25zLndoaXRlbGlzdDtcbiAgICB9XG4gICAgQXR0cmlidXRvci5rZXlzID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIFtdLm1hcC5jYWxsKG5vZGUuYXR0cmlidXRlcywgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtLm5hbWU7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQXR0cmlidXRvci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKG5vZGUsIHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5jYW5BZGQobm9kZSwgdmFsdWUpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSh0aGlzLmtleU5hbWUsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBBdHRyaWJ1dG9yLnByb3RvdHlwZS5jYW5BZGQgPSBmdW5jdGlvbiAobm9kZSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gUmVnaXN0cnkucXVlcnkobm9kZSwgUmVnaXN0cnkuU2NvcGUuQkxPVCAmICh0aGlzLnNjb3BlIHwgUmVnaXN0cnkuU2NvcGUuVFlQRSkpO1xuICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMud2hpdGVsaXN0ID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndoaXRlbGlzdC5pbmRleE9mKHZhbHVlLnJlcGxhY2UoL1tcIiddL2csICcnKSkgPiAtMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndoaXRlbGlzdC5pbmRleE9mKHZhbHVlKSA+IC0xO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBdHRyaWJ1dG9yLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmtleU5hbWUpO1xuICAgIH07XG4gICAgQXR0cmlidXRvci5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBub2RlLmdldEF0dHJpYnV0ZSh0aGlzLmtleU5hbWUpO1xuICAgICAgICBpZiAodGhpcy5jYW5BZGQobm9kZSwgdmFsdWUpICYmIHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH07XG4gICAgcmV0dXJuIEF0dHJpYnV0b3I7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gQXR0cmlidXRvcjtcblxuXG4vKioqLyB9KSxcbi8qIDEzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLkNvZGUgPSB1bmRlZmluZWQ7XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX3F1aWxsRGVsdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX3F1aWxsRGVsdGEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVpbGxEZWx0YSk7XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxudmFyIF9ibG9jayA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfYmxvY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYmxvY2spO1xuXG52YXIgX2lubGluZSA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cbnZhciBfaW5saW5lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lubGluZSk7XG5cbnZhciBfdGV4dCA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cbnZhciBfdGV4dDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90ZXh0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgQ29kZSA9IGZ1bmN0aW9uIChfSW5saW5lKSB7XG4gIF9pbmhlcml0cyhDb2RlLCBfSW5saW5lKTtcblxuICBmdW5jdGlvbiBDb2RlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2RlKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ29kZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvZGUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBDb2RlO1xufShfaW5saW5lMi5kZWZhdWx0KTtcblxuQ29kZS5ibG90TmFtZSA9ICdjb2RlJztcbkNvZGUudGFnTmFtZSA9ICdDT0RFJztcblxudmFyIENvZGVCbG9jayA9IGZ1bmN0aW9uIChfQmxvY2spIHtcbiAgX2luaGVyaXRzKENvZGVCbG9jaywgX0Jsb2NrKTtcblxuICBmdW5jdGlvbiBDb2RlQmxvY2soKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvZGVCbG9jayk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENvZGVCbG9jay5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvZGVCbG9jaykpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENvZGVCbG9jaywgW3tcbiAgICBrZXk6ICdkZWx0YScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlbHRhKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciB0ZXh0ID0gdGhpcy5kb21Ob2RlLnRleHRDb250ZW50O1xuICAgICAgaWYgKHRleHQuZW5kc1dpdGgoJ1xcbicpKSB7XG4gICAgICAgIC8vIFNob3VsZCBhbHdheXMgYmUgdHJ1ZVxuICAgICAgICB0ZXh0ID0gdGV4dC5zbGljZSgwLCAtMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGV4dC5zcGxpdCgnXFxuJykucmVkdWNlKGZ1bmN0aW9uIChkZWx0YSwgZnJhZykge1xuICAgICAgICByZXR1cm4gZGVsdGEuaW5zZXJ0KGZyYWcpLmluc2VydCgnXFxuJywgX3RoaXMzLmZvcm1hdHMoKSk7XG4gICAgICB9LCBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZm9ybWF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0KG5hbWUsIHZhbHVlKSB7XG4gICAgICBpZiAobmFtZSA9PT0gdGhpcy5zdGF0aWNzLmJsb3ROYW1lICYmIHZhbHVlKSByZXR1cm47XG5cbiAgICAgIHZhciBfZGVzY2VuZGFudCA9IHRoaXMuZGVzY2VuZGFudChfdGV4dDIuZGVmYXVsdCwgdGhpcy5sZW5ndGgoKSAtIDEpLFxuICAgICAgICAgIF9kZXNjZW5kYW50MiA9IF9zbGljZWRUb0FycmF5KF9kZXNjZW5kYW50LCAxKSxcbiAgICAgICAgICB0ZXh0ID0gX2Rlc2NlbmRhbnQyWzBdO1xuXG4gICAgICBpZiAodGV4dCAhPSBudWxsKSB7XG4gICAgICAgIHRleHQuZGVsZXRlQXQodGV4dC5sZW5ndGgoKSAtIDEsIDEpO1xuICAgICAgfVxuICAgICAgX2dldChDb2RlQmxvY2sucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ29kZUJsb2NrLnByb3RvdHlwZSksICdmb3JtYXQnLCB0aGlzKS5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXRBdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdEF0KGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKSB7XG4gICAgICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICBpZiAoX3BhcmNobWVudDIuZGVmYXVsdC5xdWVyeShuYW1lLCBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLkJMT0NLKSA9PSBudWxsIHx8IG5hbWUgPT09IHRoaXMuc3RhdGljcy5ibG90TmFtZSAmJiB2YWx1ZSA9PT0gdGhpcy5zdGF0aWNzLmZvcm1hdHModGhpcy5kb21Ob2RlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmV4dE5ld2xpbmUgPSB0aGlzLm5ld2xpbmVJbmRleChpbmRleCk7XG4gICAgICBpZiAobmV4dE5ld2xpbmUgPCAwIHx8IG5leHROZXdsaW5lID49IGluZGV4ICsgbGVuZ3RoKSByZXR1cm47XG4gICAgICB2YXIgcHJldk5ld2xpbmUgPSB0aGlzLm5ld2xpbmVJbmRleChpbmRleCwgdHJ1ZSkgKyAxO1xuICAgICAgdmFyIGlzb2xhdGVMZW5ndGggPSBuZXh0TmV3bGluZSAtIHByZXZOZXdsaW5lICsgMTtcbiAgICAgIHZhciBibG90ID0gdGhpcy5pc29sYXRlKHByZXZOZXdsaW5lLCBpc29sYXRlTGVuZ3RoKTtcbiAgICAgIHZhciBuZXh0ID0gYmxvdC5uZXh0O1xuICAgICAgYmxvdC5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgICAgaWYgKG5leHQgaW5zdGFuY2VvZiBDb2RlQmxvY2spIHtcbiAgICAgICAgbmV4dC5mb3JtYXRBdCgwLCBpbmRleCAtIHByZXZOZXdsaW5lICsgbGVuZ3RoIC0gaXNvbGF0ZUxlbmd0aCwgbmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2luc2VydEF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5zZXJ0QXQoaW5kZXgsIHZhbHVlLCBkZWYpIHtcbiAgICAgIGlmIChkZWYgIT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgICB2YXIgX2Rlc2NlbmRhbnQzID0gdGhpcy5kZXNjZW5kYW50KF90ZXh0Mi5kZWZhdWx0LCBpbmRleCksXG4gICAgICAgICAgX2Rlc2NlbmRhbnQ0ID0gX3NsaWNlZFRvQXJyYXkoX2Rlc2NlbmRhbnQzLCAyKSxcbiAgICAgICAgICB0ZXh0ID0gX2Rlc2NlbmRhbnQ0WzBdLFxuICAgICAgICAgIG9mZnNldCA9IF9kZXNjZW5kYW50NFsxXTtcblxuICAgICAgdGV4dC5pbnNlcnRBdChvZmZzZXQsIHZhbHVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdsZW5ndGgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsZW5ndGgoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gdGhpcy5kb21Ob2RlLnRleHRDb250ZW50Lmxlbmd0aDtcbiAgICAgIGlmICghdGhpcy5kb21Ob2RlLnRleHRDb250ZW50LmVuZHNXaXRoKCdcXG4nKSkge1xuICAgICAgICByZXR1cm4gbGVuZ3RoICsgMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbmV3bGluZUluZGV4JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbmV3bGluZUluZGV4KHNlYXJjaEluZGV4KSB7XG4gICAgICB2YXIgcmV2ZXJzZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgICAgIGlmICghcmV2ZXJzZSkge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5kb21Ob2RlLnRleHRDb250ZW50LnNsaWNlKHNlYXJjaEluZGV4KS5pbmRleE9mKCdcXG4nKTtcbiAgICAgICAgcmV0dXJuIG9mZnNldCA+IC0xID8gc2VhcmNoSW5kZXggKyBvZmZzZXQgOiAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvbU5vZGUudGV4dENvbnRlbnQuc2xpY2UoMCwgc2VhcmNoSW5kZXgpLmxhc3RJbmRleE9mKCdcXG4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdvcHRpbWl6ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9wdGltaXplKGNvbnRleHQpIHtcbiAgICAgIGlmICghdGhpcy5kb21Ob2RlLnRleHRDb250ZW50LmVuZHNXaXRoKCdcXG4nKSkge1xuICAgICAgICB0aGlzLmFwcGVuZENoaWxkKF9wYXJjaG1lbnQyLmRlZmF1bHQuY3JlYXRlKCd0ZXh0JywgJ1xcbicpKTtcbiAgICAgIH1cbiAgICAgIF9nZXQoQ29kZUJsb2NrLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvZGVCbG9jay5wcm90b3R5cGUpLCAnb3B0aW1pemUnLCB0aGlzKS5jYWxsKHRoaXMsIGNvbnRleHQpO1xuICAgICAgdmFyIG5leHQgPSB0aGlzLm5leHQ7XG4gICAgICBpZiAobmV4dCAhPSBudWxsICYmIG5leHQucHJldiA9PT0gdGhpcyAmJiBuZXh0LnN0YXRpY3MuYmxvdE5hbWUgPT09IHRoaXMuc3RhdGljcy5ibG90TmFtZSAmJiB0aGlzLnN0YXRpY3MuZm9ybWF0cyh0aGlzLmRvbU5vZGUpID09PSBuZXh0LnN0YXRpY3MuZm9ybWF0cyhuZXh0LmRvbU5vZGUpKSB7XG4gICAgICAgIG5leHQub3B0aW1pemUoY29udGV4dCk7XG4gICAgICAgIG5leHQubW92ZUNoaWxkcmVuKHRoaXMpO1xuICAgICAgICBuZXh0LnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlcGxhY2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXBsYWNlKHRhcmdldCkge1xuICAgICAgX2dldChDb2RlQmxvY2sucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ29kZUJsb2NrLnByb3RvdHlwZSksICdyZXBsYWNlJywgdGhpcykuY2FsbCh0aGlzLCB0YXJnZXQpO1xuICAgICAgW10uc2xpY2UuY2FsbCh0aGlzLmRvbU5vZGUucXVlcnlTZWxlY3RvckFsbCgnKicpKS5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHZhciBibG90ID0gX3BhcmNobWVudDIuZGVmYXVsdC5maW5kKG5vZGUpO1xuICAgICAgICBpZiAoYmxvdCA9PSBudWxsKSB7XG4gICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgICAgICB9IGVsc2UgaWYgKGJsb3QgaW5zdGFuY2VvZiBfcGFyY2htZW50Mi5kZWZhdWx0LkVtYmVkKSB7XG4gICAgICAgICAgYmxvdC5yZW1vdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBibG90LnVud3JhcCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogJ2NyZWF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgdmFyIGRvbU5vZGUgPSBfZ2V0KENvZGVCbG9jay5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvZGVCbG9jayksICdjcmVhdGUnLCB0aGlzKS5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICAgIGRvbU5vZGUuc2V0QXR0cmlidXRlKCdzcGVsbGNoZWNrJywgZmFsc2UpO1xuICAgICAgcmV0dXJuIGRvbU5vZGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZm9ybWF0cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdHMoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29kZUJsb2NrO1xufShfYmxvY2syLmRlZmF1bHQpO1xuXG5Db2RlQmxvY2suYmxvdE5hbWUgPSAnY29kZS1ibG9jayc7XG5Db2RlQmxvY2sudGFnTmFtZSA9ICdQUkUnO1xuQ29kZUJsb2NrLlRBQiA9ICcgICc7XG5cbmV4cG9ydHMuQ29kZSA9IENvZGU7XG5leHBvcnRzLmRlZmF1bHQgPSBDb2RlQmxvY2s7XG5cbi8qKiovIH0pLFxuLyogMTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcXVpbGxEZWx0YSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cbnZhciBfcXVpbGxEZWx0YTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWlsbERlbHRhKTtcblxudmFyIF9vcCA9IF9fd2VicGFja19yZXF1aXJlX18oMjApO1xuXG52YXIgX29wMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29wKTtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG52YXIgX2NvZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcblxudmFyIF9jb2RlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvZGUpO1xuXG52YXIgX2N1cnNvciA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpO1xuXG52YXIgX2N1cnNvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jdXJzb3IpO1xuXG52YXIgX2Jsb2NrID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxudmFyIF9ibG9jazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ibG9jayk7XG5cbnZhciBfYnJlYWsgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcblxudmFyIF9icmVhazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9icmVhayk7XG5cbnZhciBfY2xvbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcblxudmFyIF9jbG9uZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbG9uZSk7XG5cbnZhciBfZGVlcEVxdWFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cbnZhciBfZGVlcEVxdWFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZXBFcXVhbCk7XG5cbnZhciBfZXh0ZW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIF9leHRlbmQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEFTQ0lJID0gL15bIC1+XSokLztcblxudmFyIEVkaXRvciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRWRpdG9yKHNjcm9sbCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFZGl0b3IpO1xuXG4gICAgdGhpcy5zY3JvbGwgPSBzY3JvbGw7XG4gICAgdGhpcy5kZWx0YSA9IHRoaXMuZ2V0RGVsdGEoKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhFZGl0b3IsIFt7XG4gICAga2V5OiAnYXBwbHlEZWx0YScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5RGVsdGEoZGVsdGEpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciBjb25zdW1lTmV4dE5ld2xpbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuc2Nyb2xsLnVwZGF0ZSgpO1xuICAgICAgdmFyIHNjcm9sbExlbmd0aCA9IHRoaXMuc2Nyb2xsLmxlbmd0aCgpO1xuICAgICAgdGhpcy5zY3JvbGwuYmF0Y2hTdGFydCgpO1xuICAgICAgZGVsdGEgPSBub3JtYWxpemVEZWx0YShkZWx0YSk7XG4gICAgICBkZWx0YS5yZWR1Y2UoZnVuY3Rpb24gKGluZGV4LCBvcCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gb3AucmV0YWluIHx8IG9wLmRlbGV0ZSB8fCBvcC5pbnNlcnQubGVuZ3RoIHx8IDE7XG4gICAgICAgIHZhciBhdHRyaWJ1dGVzID0gb3AuYXR0cmlidXRlcyB8fCB7fTtcbiAgICAgICAgaWYgKG9wLmluc2VydCAhPSBudWxsKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBvcC5pbnNlcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YXIgdGV4dCA9IG9wLmluc2VydDtcbiAgICAgICAgICAgIGlmICh0ZXh0LmVuZHNXaXRoKCdcXG4nKSAmJiBjb25zdW1lTmV4dE5ld2xpbmUpIHtcbiAgICAgICAgICAgICAgY29uc3VtZU5leHROZXdsaW5lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnNsaWNlKDAsIC0xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbmRleCA+PSBzY3JvbGxMZW5ndGggJiYgIXRleHQuZW5kc1dpdGgoJ1xcbicpKSB7XG4gICAgICAgICAgICAgIGNvbnN1bWVOZXh0TmV3bGluZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5zY3JvbGwuaW5zZXJ0QXQoaW5kZXgsIHRleHQpO1xuXG4gICAgICAgICAgICB2YXIgX3Njcm9sbCRsaW5lID0gX3RoaXMuc2Nyb2xsLmxpbmUoaW5kZXgpLFxuICAgICAgICAgICAgICAgIF9zY3JvbGwkbGluZTIgPSBfc2xpY2VkVG9BcnJheShfc2Nyb2xsJGxpbmUsIDIpLFxuICAgICAgICAgICAgICAgIGxpbmUgPSBfc2Nyb2xsJGxpbmUyWzBdLFxuICAgICAgICAgICAgICAgIG9mZnNldCA9IF9zY3JvbGwkbGluZTJbMV07XG5cbiAgICAgICAgICAgIHZhciBmb3JtYXRzID0gKDAsIF9leHRlbmQyLmRlZmF1bHQpKHt9LCAoMCwgX2Jsb2NrLmJ1YmJsZUZvcm1hdHMpKGxpbmUpKTtcbiAgICAgICAgICAgIGlmIChsaW5lIGluc3RhbmNlb2YgX2Jsb2NrMi5kZWZhdWx0KSB7XG4gICAgICAgICAgICAgIHZhciBfbGluZSRkZXNjZW5kYW50ID0gbGluZS5kZXNjZW5kYW50KF9wYXJjaG1lbnQyLmRlZmF1bHQuTGVhZiwgb2Zmc2V0KSxcbiAgICAgICAgICAgICAgICAgIF9saW5lJGRlc2NlbmRhbnQyID0gX3NsaWNlZFRvQXJyYXkoX2xpbmUkZGVzY2VuZGFudCwgMSksXG4gICAgICAgICAgICAgICAgICBsZWFmID0gX2xpbmUkZGVzY2VuZGFudDJbMF07XG5cbiAgICAgICAgICAgICAgZm9ybWF0cyA9ICgwLCBfZXh0ZW5kMi5kZWZhdWx0KShmb3JtYXRzLCAoMCwgX2Jsb2NrLmJ1YmJsZUZvcm1hdHMpKGxlYWYpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF0dHJpYnV0ZXMgPSBfb3AyLmRlZmF1bHQuYXR0cmlidXRlcy5kaWZmKGZvcm1hdHMsIGF0dHJpYnV0ZXMpIHx8IHt9O1xuICAgICAgICAgIH0gZWxzZSBpZiAoX3R5cGVvZihvcC5pbnNlcnQpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdmFyIGtleSA9IE9iamVjdC5rZXlzKG9wLmluc2VydClbMF07IC8vIFRoZXJlIHNob3VsZCBvbmx5IGJlIG9uZSBrZXlcbiAgICAgICAgICAgIGlmIChrZXkgPT0gbnVsbCkgcmV0dXJuIGluZGV4O1xuICAgICAgICAgICAgX3RoaXMuc2Nyb2xsLmluc2VydEF0KGluZGV4LCBrZXksIG9wLmluc2VydFtrZXldKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2Nyb2xsTGVuZ3RoICs9IGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgX3RoaXMuc2Nyb2xsLmZvcm1hdEF0KGluZGV4LCBsZW5ndGgsIG5hbWUsIGF0dHJpYnV0ZXNbbmFtZV0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGluZGV4ICsgbGVuZ3RoO1xuICAgICAgfSwgMCk7XG4gICAgICBkZWx0YS5yZWR1Y2UoZnVuY3Rpb24gKGluZGV4LCBvcCkge1xuICAgICAgICBpZiAodHlwZW9mIG9wLmRlbGV0ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBfdGhpcy5zY3JvbGwuZGVsZXRlQXQoaW5kZXgsIG9wLmRlbGV0ZSk7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbmRleCArIChvcC5yZXRhaW4gfHwgb3AuaW5zZXJ0Lmxlbmd0aCB8fCAxKTtcbiAgICAgIH0sIDApO1xuICAgICAgdGhpcy5zY3JvbGwuYmF0Y2hFbmQoKTtcbiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZShkZWx0YSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVsZXRlVGV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZVRleHQoaW5kZXgsIGxlbmd0aCkge1xuICAgICAgdGhpcy5zY3JvbGwuZGVsZXRlQXQoaW5kZXgsIGxlbmd0aCk7XG4gICAgICByZXR1cm4gdGhpcy51cGRhdGUobmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkucmV0YWluKGluZGV4KS5kZWxldGUobGVuZ3RoKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZm9ybWF0TGluZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdExpbmUoaW5kZXgsIGxlbmd0aCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBmb3JtYXRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblxuICAgICAgdGhpcy5zY3JvbGwudXBkYXRlKCk7XG4gICAgICBPYmplY3Qua2V5cyhmb3JtYXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgaWYgKF90aGlzMi5zY3JvbGwud2hpdGVsaXN0ICE9IG51bGwgJiYgIV90aGlzMi5zY3JvbGwud2hpdGVsaXN0W2Zvcm1hdF0pIHJldHVybjtcbiAgICAgICAgdmFyIGxpbmVzID0gX3RoaXMyLnNjcm9sbC5saW5lcyhpbmRleCwgTWF0aC5tYXgobGVuZ3RoLCAxKSk7XG4gICAgICAgIHZhciBsZW5ndGhSZW1haW5pbmcgPSBsZW5ndGg7XG4gICAgICAgIGxpbmVzLmZvckVhY2goZnVuY3Rpb24gKGxpbmUpIHtcbiAgICAgICAgICB2YXIgbGluZUxlbmd0aCA9IGxpbmUubGVuZ3RoKCk7XG4gICAgICAgICAgaWYgKCEobGluZSBpbnN0YW5jZW9mIF9jb2RlMi5kZWZhdWx0KSkge1xuICAgICAgICAgICAgbGluZS5mb3JtYXQoZm9ybWF0LCBmb3JtYXRzW2Zvcm1hdF0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgY29kZUluZGV4ID0gaW5kZXggLSBsaW5lLm9mZnNldChfdGhpczIuc2Nyb2xsKTtcbiAgICAgICAgICAgIHZhciBjb2RlTGVuZ3RoID0gbGluZS5uZXdsaW5lSW5kZXgoY29kZUluZGV4ICsgbGVuZ3RoUmVtYWluaW5nKSAtIGNvZGVJbmRleCArIDE7XG4gICAgICAgICAgICBsaW5lLmZvcm1hdEF0KGNvZGVJbmRleCwgY29kZUxlbmd0aCwgZm9ybWF0LCBmb3JtYXRzW2Zvcm1hdF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGhSZW1haW5pbmcgLT0gbGluZUxlbmd0aDtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuc2Nyb2xsLm9wdGltaXplKCk7XG4gICAgICByZXR1cm4gdGhpcy51cGRhdGUobmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkucmV0YWluKGluZGV4KS5yZXRhaW4obGVuZ3RoLCAoMCwgX2Nsb25lMi5kZWZhdWx0KShmb3JtYXRzKSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Zvcm1hdFRleHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRUZXh0KGluZGV4LCBsZW5ndGgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgZm9ybWF0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cbiAgICAgIE9iamVjdC5rZXlzKGZvcm1hdHMpLmZvckVhY2goZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICBfdGhpczMuc2Nyb2xsLmZvcm1hdEF0KGluZGV4LCBsZW5ndGgsIGZvcm1hdCwgZm9ybWF0c1tmb3JtYXRdKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlKG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLnJldGFpbihpbmRleCkucmV0YWluKGxlbmd0aCwgKDAsIF9jbG9uZTIuZGVmYXVsdCkoZm9ybWF0cykpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRDb250ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvbnRlbnRzKGluZGV4LCBsZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbHRhLnNsaWNlKGluZGV4LCBpbmRleCArIGxlbmd0aCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0RGVsdGEnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZWx0YSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNjcm9sbC5saW5lcygpLnJlZHVjZShmdW5jdGlvbiAoZGVsdGEsIGxpbmUpIHtcbiAgICAgICAgcmV0dXJuIGRlbHRhLmNvbmNhdChsaW5lLmRlbHRhKCkpO1xuICAgICAgfSwgbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEZvcm1hdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZvcm1hdChpbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcblxuICAgICAgdmFyIGxpbmVzID0gW10sXG4gICAgICAgICAgbGVhdmVzID0gW107XG4gICAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsLnBhdGgoaW5kZXgpLmZvckVhY2goZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgICB2YXIgX3BhdGggPSBfc2xpY2VkVG9BcnJheShwYXRoLCAxKSxcbiAgICAgICAgICAgICAgYmxvdCA9IF9wYXRoWzBdO1xuXG4gICAgICAgICAgaWYgKGJsb3QgaW5zdGFuY2VvZiBfYmxvY2syLmRlZmF1bHQpIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goYmxvdCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChibG90IGluc3RhbmNlb2YgX3BhcmNobWVudDIuZGVmYXVsdC5MZWFmKSB7XG4gICAgICAgICAgICBsZWF2ZXMucHVzaChibG90KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGluZXMgPSB0aGlzLnNjcm9sbC5saW5lcyhpbmRleCwgbGVuZ3RoKTtcbiAgICAgICAgbGVhdmVzID0gdGhpcy5zY3JvbGwuZGVzY2VuZGFudHMoX3BhcmNobWVudDIuZGVmYXVsdC5MZWFmLCBpbmRleCwgbGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIHZhciBmb3JtYXRzQXJyID0gW2xpbmVzLCBsZWF2ZXNdLm1hcChmdW5jdGlvbiAoYmxvdHMpIHtcbiAgICAgICAgaWYgKGJsb3RzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHt9O1xuICAgICAgICB2YXIgZm9ybWF0cyA9ICgwLCBfYmxvY2suYnViYmxlRm9ybWF0cykoYmxvdHMuc2hpZnQoKSk7XG4gICAgICAgIHdoaWxlIChPYmplY3Qua2V5cyhmb3JtYXRzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIGJsb3QgPSBibG90cy5zaGlmdCgpO1xuICAgICAgICAgIGlmIChibG90ID09IG51bGwpIHJldHVybiBmb3JtYXRzO1xuICAgICAgICAgIGZvcm1hdHMgPSBjb21iaW5lRm9ybWF0cygoMCwgX2Jsb2NrLmJ1YmJsZUZvcm1hdHMpKGJsb3QpLCBmb3JtYXRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9ybWF0cztcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIF9leHRlbmQyLmRlZmF1bHQuYXBwbHkoX2V4dGVuZDIuZGVmYXVsdCwgZm9ybWF0c0Fycik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0VGV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRleHQoaW5kZXgsIGxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29udGVudHMoaW5kZXgsIGxlbmd0aCkuZmlsdGVyKGZ1bmN0aW9uIChvcCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9wLmluc2VydCA9PT0gJ3N0cmluZyc7XG4gICAgICB9KS5tYXAoZnVuY3Rpb24gKG9wKSB7XG4gICAgICAgIHJldHVybiBvcC5pbnNlcnQ7XG4gICAgICB9KS5qb2luKCcnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpbnNlcnRFbWJlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc2VydEVtYmVkKGluZGV4LCBlbWJlZCwgdmFsdWUpIHtcbiAgICAgIHRoaXMuc2Nyb2xsLmluc2VydEF0KGluZGV4LCBlbWJlZCwgdmFsdWUpO1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlKG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLnJldGFpbihpbmRleCkuaW5zZXJ0KF9kZWZpbmVQcm9wZXJ0eSh7fSwgZW1iZWQsIHZhbHVlKSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2luc2VydFRleHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnRUZXh0KGluZGV4LCB0ZXh0KSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIGZvcm1hdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXG4gICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHJcXG4vZywgJ1xcbicpLnJlcGxhY2UoL1xcci9nLCAnXFxuJyk7XG4gICAgICB0aGlzLnNjcm9sbC5pbnNlcnRBdChpbmRleCwgdGV4dCk7XG4gICAgICBPYmplY3Qua2V5cyhmb3JtYXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgX3RoaXM0LnNjcm9sbC5mb3JtYXRBdChpbmRleCwgdGV4dC5sZW5ndGgsIGZvcm1hdCwgZm9ybWF0c1tmb3JtYXRdKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlKG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLnJldGFpbihpbmRleCkuaW5zZXJ0KHRleHQsICgwLCBfY2xvbmUyLmRlZmF1bHQpKGZvcm1hdHMpKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaXNCbGFuaycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzQmxhbmsoKSB7XG4gICAgICBpZiAodGhpcy5zY3JvbGwuY2hpbGRyZW4ubGVuZ3RoID09IDApIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHRoaXMuc2Nyb2xsLmNoaWxkcmVuLmxlbmd0aCA+IDEpIHJldHVybiBmYWxzZTtcbiAgICAgIHZhciBibG9jayA9IHRoaXMuc2Nyb2xsLmNoaWxkcmVuLmhlYWQ7XG4gICAgICBpZiAoYmxvY2suc3RhdGljcy5ibG90TmFtZSAhPT0gX2Jsb2NrMi5kZWZhdWx0LmJsb3ROYW1lKSByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAoYmxvY2suY2hpbGRyZW4ubGVuZ3RoID4gMSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIGJsb2NrLmNoaWxkcmVuLmhlYWQgaW5zdGFuY2VvZiBfYnJlYWsyLmRlZmF1bHQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlRm9ybWF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlRm9ybWF0KGluZGV4LCBsZW5ndGgpIHtcbiAgICAgIHZhciB0ZXh0ID0gdGhpcy5nZXRUZXh0KGluZGV4LCBsZW5ndGgpO1xuXG4gICAgICB2YXIgX3Njcm9sbCRsaW5lMyA9IHRoaXMuc2Nyb2xsLmxpbmUoaW5kZXggKyBsZW5ndGgpLFxuICAgICAgICAgIF9zY3JvbGwkbGluZTQgPSBfc2xpY2VkVG9BcnJheShfc2Nyb2xsJGxpbmUzLCAyKSxcbiAgICAgICAgICBsaW5lID0gX3Njcm9sbCRsaW5lNFswXSxcbiAgICAgICAgICBvZmZzZXQgPSBfc2Nyb2xsJGxpbmU0WzFdO1xuXG4gICAgICB2YXIgc3VmZml4TGVuZ3RoID0gMCxcbiAgICAgICAgICBzdWZmaXggPSBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKTtcbiAgICAgIGlmIChsaW5lICE9IG51bGwpIHtcbiAgICAgICAgaWYgKCEobGluZSBpbnN0YW5jZW9mIF9jb2RlMi5kZWZhdWx0KSkge1xuICAgICAgICAgIHN1ZmZpeExlbmd0aCA9IGxpbmUubGVuZ3RoKCkgLSBvZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3VmZml4TGVuZ3RoID0gbGluZS5uZXdsaW5lSW5kZXgob2Zmc2V0KSAtIG9mZnNldCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgc3VmZml4ID0gbGluZS5kZWx0YSgpLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgc3VmZml4TGVuZ3RoIC0gMSkuaW5zZXJ0KCdcXG4nKTtcbiAgICAgIH1cbiAgICAgIHZhciBjb250ZW50cyA9IHRoaXMuZ2V0Q29udGVudHMoaW5kZXgsIGxlbmd0aCArIHN1ZmZpeExlbmd0aCk7XG4gICAgICB2YXIgZGlmZiA9IGNvbnRlbnRzLmRpZmYobmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkuaW5zZXJ0KHRleHQpLmNvbmNhdChzdWZmaXgpKTtcbiAgICAgIHZhciBkZWx0YSA9IG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLnJldGFpbihpbmRleCkuY29uY2F0KGRpZmYpO1xuICAgICAgcmV0dXJuIHRoaXMuYXBwbHlEZWx0YShkZWx0YSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKGNoYW5nZSkge1xuICAgICAgdmFyIG11dGF0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogW107XG4gICAgICB2YXIgY3Vyc29ySW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgdmFyIG9sZERlbHRhID0gdGhpcy5kZWx0YTtcbiAgICAgIGlmIChtdXRhdGlvbnMubGVuZ3RoID09PSAxICYmIG11dGF0aW9uc1swXS50eXBlID09PSAnY2hhcmFjdGVyRGF0YScgJiYgbXV0YXRpb25zWzBdLnRhcmdldC5kYXRhLm1hdGNoKEFTQ0lJKSAmJiBfcGFyY2htZW50Mi5kZWZhdWx0LmZpbmQobXV0YXRpb25zWzBdLnRhcmdldCkpIHtcbiAgICAgICAgLy8gT3B0aW1pemF0aW9uIGZvciBjaGFyYWN0ZXIgY2hhbmdlc1xuICAgICAgICB2YXIgdGV4dEJsb3QgPSBfcGFyY2htZW50Mi5kZWZhdWx0LmZpbmQobXV0YXRpb25zWzBdLnRhcmdldCk7XG4gICAgICAgIHZhciBmb3JtYXRzID0gKDAsIF9ibG9jay5idWJibGVGb3JtYXRzKSh0ZXh0QmxvdCk7XG4gICAgICAgIHZhciBpbmRleCA9IHRleHRCbG90Lm9mZnNldCh0aGlzLnNjcm9sbCk7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IG11dGF0aW9uc1swXS5vbGRWYWx1ZS5yZXBsYWNlKF9jdXJzb3IyLmRlZmF1bHQuQ09OVEVOVFMsICcnKTtcbiAgICAgICAgdmFyIG9sZFRleHQgPSBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKS5pbnNlcnQob2xkVmFsdWUpO1xuICAgICAgICB2YXIgbmV3VGV4dCA9IG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLmluc2VydCh0ZXh0QmxvdC52YWx1ZSgpKTtcbiAgICAgICAgdmFyIGRpZmZEZWx0YSA9IG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLnJldGFpbihpbmRleCkuY29uY2F0KG9sZFRleHQuZGlmZihuZXdUZXh0LCBjdXJzb3JJbmRleCkpO1xuICAgICAgICBjaGFuZ2UgPSBkaWZmRGVsdGEucmVkdWNlKGZ1bmN0aW9uIChkZWx0YSwgb3ApIHtcbiAgICAgICAgICBpZiAob3AuaW5zZXJ0KSB7XG4gICAgICAgICAgICByZXR1cm4gZGVsdGEuaW5zZXJ0KG9wLmluc2VydCwgZm9ybWF0cyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBkZWx0YS5wdXNoKG9wKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpKTtcbiAgICAgICAgdGhpcy5kZWx0YSA9IG9sZERlbHRhLmNvbXBvc2UoY2hhbmdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGVsdGEgPSB0aGlzLmdldERlbHRhKCk7XG4gICAgICAgIGlmICghY2hhbmdlIHx8ICEoMCwgX2RlZXBFcXVhbDIuZGVmYXVsdCkob2xkRGVsdGEuY29tcG9zZShjaGFuZ2UpLCB0aGlzLmRlbHRhKSkge1xuICAgICAgICAgIGNoYW5nZSA9IG9sZERlbHRhLmRpZmYodGhpcy5kZWx0YSwgY3Vyc29ySW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gY2hhbmdlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBFZGl0b3I7XG59KCk7XG5cbmZ1bmN0aW9uIGNvbWJpbmVGb3JtYXRzKGZvcm1hdHMsIGNvbWJpbmVkKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhjb21iaW5lZCkucmVkdWNlKGZ1bmN0aW9uIChtZXJnZWQsIG5hbWUpIHtcbiAgICBpZiAoZm9ybWF0c1tuYW1lXSA9PSBudWxsKSByZXR1cm4gbWVyZ2VkO1xuICAgIGlmIChjb21iaW5lZFtuYW1lXSA9PT0gZm9ybWF0c1tuYW1lXSkge1xuICAgICAgbWVyZ2VkW25hbWVdID0gY29tYmluZWRbbmFtZV07XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGNvbWJpbmVkW25hbWVdKSkge1xuICAgICAgaWYgKGNvbWJpbmVkW25hbWVdLmluZGV4T2YoZm9ybWF0c1tuYW1lXSkgPCAwKSB7XG4gICAgICAgIG1lcmdlZFtuYW1lXSA9IGNvbWJpbmVkW25hbWVdLmNvbmNhdChbZm9ybWF0c1tuYW1lXV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtZXJnZWRbbmFtZV0gPSBbY29tYmluZWRbbmFtZV0sIGZvcm1hdHNbbmFtZV1dO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkO1xuICB9LCB7fSk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZURlbHRhKGRlbHRhKSB7XG4gIHJldHVybiBkZWx0YS5yZWR1Y2UoZnVuY3Rpb24gKGRlbHRhLCBvcCkge1xuICAgIGlmIChvcC5pbnNlcnQgPT09IDEpIHtcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gKDAsIF9jbG9uZTIuZGVmYXVsdCkob3AuYXR0cmlidXRlcyk7XG4gICAgICBkZWxldGUgYXR0cmlidXRlc1snaW1hZ2UnXTtcbiAgICAgIHJldHVybiBkZWx0YS5pbnNlcnQoeyBpbWFnZTogb3AuYXR0cmlidXRlcy5pbWFnZSB9LCBhdHRyaWJ1dGVzKTtcbiAgICB9XG4gICAgaWYgKG9wLmF0dHJpYnV0ZXMgIT0gbnVsbCAmJiAob3AuYXR0cmlidXRlcy5saXN0ID09PSB0cnVlIHx8IG9wLmF0dHJpYnV0ZXMuYnVsbGV0ID09PSB0cnVlKSkge1xuICAgICAgb3AgPSAoMCwgX2Nsb25lMi5kZWZhdWx0KShvcCk7XG4gICAgICBpZiAob3AuYXR0cmlidXRlcy5saXN0KSB7XG4gICAgICAgIG9wLmF0dHJpYnV0ZXMubGlzdCA9ICdvcmRlcmVkJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wLmF0dHJpYnV0ZXMubGlzdCA9ICdidWxsZXQnO1xuICAgICAgICBkZWxldGUgb3AuYXR0cmlidXRlcy5idWxsZXQ7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3AuaW5zZXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHRleHQgPSBvcC5pbnNlcnQucmVwbGFjZSgvXFxyXFxuL2csICdcXG4nKS5yZXBsYWNlKC9cXHIvZywgJ1xcbicpO1xuICAgICAgcmV0dXJuIGRlbHRhLmluc2VydCh0ZXh0LCBvcC5hdHRyaWJ1dGVzKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlbHRhLnB1c2gob3ApO1xuICB9LCBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKSk7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEVkaXRvcjtcblxuLyoqKi8gfSksXG4vKiAxNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5SYW5nZSA9IHVuZGVmaW5lZDtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbnZhciBfY2xvbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcblxudmFyIF9jbG9uZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbG9uZSk7XG5cbnZhciBfZGVlcEVxdWFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cbnZhciBfZGVlcEVxdWFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZXBFcXVhbCk7XG5cbnZhciBfZW1pdHRlcjMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG52YXIgX2VtaXR0ZXI0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZW1pdHRlcjMpO1xuXG52YXIgX2xvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXG52YXIgX2xvZ2dlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2dnZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIGRlYnVnID0gKDAsIF9sb2dnZXIyLmRlZmF1bHQpKCdxdWlsbDpzZWxlY3Rpb24nKTtcblxudmFyIFJhbmdlID0gZnVuY3Rpb24gUmFuZ2UoaW5kZXgpIHtcbiAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcblxuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmFuZ2UpO1xuXG4gIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XG59O1xuXG52YXIgU2VsZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTZWxlY3Rpb24oc2Nyb2xsLCBlbWl0dGVyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZWxlY3Rpb24pO1xuXG4gICAgdGhpcy5lbWl0dGVyID0gZW1pdHRlcjtcbiAgICB0aGlzLnNjcm9sbCA9IHNjcm9sbDtcbiAgICB0aGlzLmNvbXBvc2luZyA9IGZhbHNlO1xuICAgIHRoaXMubW91c2VEb3duID0gZmFsc2U7XG4gICAgdGhpcy5yb290ID0gdGhpcy5zY3JvbGwuZG9tTm9kZTtcbiAgICB0aGlzLmN1cnNvciA9IF9wYXJjaG1lbnQyLmRlZmF1bHQuY3JlYXRlKCdjdXJzb3InLCB0aGlzKTtcbiAgICAvLyBzYXZlZFJhbmdlIGlzIGxhc3Qgbm9uLW51bGwgcmFuZ2VcbiAgICB0aGlzLmxhc3RSYW5nZSA9IHRoaXMuc2F2ZWRSYW5nZSA9IG5ldyBSYW5nZSgwLCAwKTtcbiAgICB0aGlzLmhhbmRsZUNvbXBvc2l0aW9uKCk7XG4gICAgdGhpcy5oYW5kbGVEcmFnZ2luZygpO1xuICAgIHRoaXMuZW1pdHRlci5saXN0ZW5ET00oJ3NlbGVjdGlvbmNoYW5nZScsIGRvY3VtZW50LCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLm1vdXNlRG93bikge1xuICAgICAgICBzZXRUaW1lb3V0KF90aGlzLnVwZGF0ZS5iaW5kKF90aGlzLCBfZW1pdHRlcjQuZGVmYXVsdC5zb3VyY2VzLlVTRVIpLCAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmVtaXR0ZXIub24oX2VtaXR0ZXI0LmRlZmF1bHQuZXZlbnRzLkVESVRPUl9DSEFOR0UsIGZ1bmN0aW9uICh0eXBlLCBkZWx0YSkge1xuICAgICAgaWYgKHR5cGUgPT09IF9lbWl0dGVyNC5kZWZhdWx0LmV2ZW50cy5URVhUX0NIQU5HRSAmJiBkZWx0YS5sZW5ndGgoKSA+IDApIHtcbiAgICAgICAgX3RoaXMudXBkYXRlKF9lbWl0dGVyNC5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmVtaXR0ZXIub24oX2VtaXR0ZXI0LmRlZmF1bHQuZXZlbnRzLlNDUk9MTF9CRUZPUkVfVVBEQVRFLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLmhhc0ZvY3VzKCkpIHJldHVybjtcbiAgICAgIHZhciBuYXRpdmUgPSBfdGhpcy5nZXROYXRpdmVSYW5nZSgpO1xuICAgICAgaWYgKG5hdGl2ZSA9PSBudWxsKSByZXR1cm47XG4gICAgICBpZiAobmF0aXZlLnN0YXJ0Lm5vZGUgPT09IF90aGlzLmN1cnNvci50ZXh0Tm9kZSkgcmV0dXJuOyAvLyBjdXJzb3IucmVzdG9yZSgpIHdpbGwgaGFuZGxlXG4gICAgICAvLyBUT0RPIHVuY2xlYXIgaWYgdGhpcyBoYXMgbmVnYXRpdmUgc2lkZSBlZmZlY3RzXG4gICAgICBfdGhpcy5lbWl0dGVyLm9uY2UoX2VtaXR0ZXI0LmRlZmF1bHQuZXZlbnRzLlNDUk9MTF9VUERBVEUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBfdGhpcy5zZXROYXRpdmVSYW5nZShuYXRpdmUuc3RhcnQubm9kZSwgbmF0aXZlLnN0YXJ0Lm9mZnNldCwgbmF0aXZlLmVuZC5ub2RlLCBuYXRpdmUuZW5kLm9mZnNldCk7XG4gICAgICAgIH0gY2F0Y2ggKGlnbm9yZWQpIHt9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB0aGlzLmVtaXR0ZXIub24oX2VtaXR0ZXI0LmRlZmF1bHQuZXZlbnRzLlNDUk9MTF9PUFRJTUlaRSwgZnVuY3Rpb24gKG11dGF0aW9ucywgY29udGV4dCkge1xuICAgICAgaWYgKGNvbnRleHQucmFuZ2UpIHtcbiAgICAgICAgdmFyIF9jb250ZXh0JHJhbmdlID0gY29udGV4dC5yYW5nZSxcbiAgICAgICAgICAgIHN0YXJ0Tm9kZSA9IF9jb250ZXh0JHJhbmdlLnN0YXJ0Tm9kZSxcbiAgICAgICAgICAgIHN0YXJ0T2Zmc2V0ID0gX2NvbnRleHQkcmFuZ2Uuc3RhcnRPZmZzZXQsXG4gICAgICAgICAgICBlbmROb2RlID0gX2NvbnRleHQkcmFuZ2UuZW5kTm9kZSxcbiAgICAgICAgICAgIGVuZE9mZnNldCA9IF9jb250ZXh0JHJhbmdlLmVuZE9mZnNldDtcblxuICAgICAgICBfdGhpcy5zZXROYXRpdmVSYW5nZShzdGFydE5vZGUsIHN0YXJ0T2Zmc2V0LCBlbmROb2RlLCBlbmRPZmZzZXQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMudXBkYXRlKF9lbWl0dGVyNC5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTZWxlY3Rpb24sIFt7XG4gICAga2V5OiAnaGFuZGxlQ29tcG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVDb21wb3NpdGlvbigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB0aGlzLnJvb3QuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25zdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLmNvbXBvc2luZyA9IHRydWU7XG4gICAgICB9KTtcbiAgICAgIHRoaXMucm9vdC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbmVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLmNvbXBvc2luZyA9IGZhbHNlO1xuICAgICAgICBpZiAoX3RoaXMyLmN1cnNvci5wYXJlbnQpIHtcbiAgICAgICAgICB2YXIgcmFuZ2UgPSBfdGhpczIuY3Vyc29yLnJlc3RvcmUoKTtcbiAgICAgICAgICBpZiAoIXJhbmdlKSByZXR1cm47XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczIuc2V0TmF0aXZlUmFuZ2UocmFuZ2Uuc3RhcnROb2RlLCByYW5nZS5zdGFydE9mZnNldCwgcmFuZ2UuZW5kTm9kZSwgcmFuZ2UuZW5kT2Zmc2V0KTtcbiAgICAgICAgICB9LCAxKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaGFuZGxlRHJhZ2dpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVEcmFnZ2luZygpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB0aGlzLmVtaXR0ZXIubGlzdGVuRE9NKCdtb3VzZWRvd24nLCBkb2N1bWVudC5ib2R5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5tb3VzZURvd24gPSB0cnVlO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmVtaXR0ZXIubGlzdGVuRE9NKCdtb3VzZXVwJywgZG9jdW1lbnQuYm9keSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMubW91c2VEb3duID0gZmFsc2U7XG4gICAgICAgIF90aGlzMy51cGRhdGUoX2VtaXR0ZXI0LmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2ZvY3VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICBpZiAodGhpcy5oYXNGb2N1cygpKSByZXR1cm47XG4gICAgICB0aGlzLnJvb3QuZm9jdXMoKTtcbiAgICAgIHRoaXMuc2V0UmFuZ2UodGhpcy5zYXZlZFJhbmdlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXQoX2Zvcm1hdCwgdmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLnNjcm9sbC53aGl0ZWxpc3QgIT0gbnVsbCAmJiAhdGhpcy5zY3JvbGwud2hpdGVsaXN0W19mb3JtYXRdKSByZXR1cm47XG4gICAgICB0aGlzLnNjcm9sbC51cGRhdGUoKTtcbiAgICAgIHZhciBuYXRpdmVSYW5nZSA9IHRoaXMuZ2V0TmF0aXZlUmFuZ2UoKTtcbiAgICAgIGlmIChuYXRpdmVSYW5nZSA9PSBudWxsIHx8ICFuYXRpdmVSYW5nZS5uYXRpdmUuY29sbGFwc2VkIHx8IF9wYXJjaG1lbnQyLmRlZmF1bHQucXVlcnkoX2Zvcm1hdCwgX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5CTE9DSykpIHJldHVybjtcbiAgICAgIGlmIChuYXRpdmVSYW5nZS5zdGFydC5ub2RlICE9PSB0aGlzLmN1cnNvci50ZXh0Tm9kZSkge1xuICAgICAgICB2YXIgYmxvdCA9IF9wYXJjaG1lbnQyLmRlZmF1bHQuZmluZChuYXRpdmVSYW5nZS5zdGFydC5ub2RlLCBmYWxzZSk7XG4gICAgICAgIGlmIChibG90ID09IG51bGwpIHJldHVybjtcbiAgICAgICAgLy8gVE9ETyBHaXZlIGJsb3QgYWJpbGl0eSB0byBub3Qgc3BsaXRcbiAgICAgICAgaWYgKGJsb3QgaW5zdGFuY2VvZiBfcGFyY2htZW50Mi5kZWZhdWx0LkxlYWYpIHtcbiAgICAgICAgICB2YXIgYWZ0ZXIgPSBibG90LnNwbGl0KG5hdGl2ZVJhbmdlLnN0YXJ0Lm9mZnNldCk7XG4gICAgICAgICAgYmxvdC5wYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMuY3Vyc29yLCBhZnRlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYmxvdC5pbnNlcnRCZWZvcmUodGhpcy5jdXJzb3IsIG5hdGl2ZVJhbmdlLnN0YXJ0Lm5vZGUpOyAvLyBTaG91bGQgbmV2ZXIgaGFwcGVuXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJzb3IuYXR0YWNoKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmN1cnNvci5mb3JtYXQoX2Zvcm1hdCwgdmFsdWUpO1xuICAgICAgdGhpcy5zY3JvbGwub3B0aW1pemUoKTtcbiAgICAgIHRoaXMuc2V0TmF0aXZlUmFuZ2UodGhpcy5jdXJzb3IudGV4dE5vZGUsIHRoaXMuY3Vyc29yLnRleHROb2RlLmRhdGEubGVuZ3RoKTtcbiAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0Qm91bmRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Qm91bmRzKGluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuXG4gICAgICB2YXIgc2Nyb2xsTGVuZ3RoID0gdGhpcy5zY3JvbGwubGVuZ3RoKCk7XG4gICAgICBpbmRleCA9IE1hdGgubWluKGluZGV4LCBzY3JvbGxMZW5ndGggLSAxKTtcbiAgICAgIGxlbmd0aCA9IE1hdGgubWluKGluZGV4ICsgbGVuZ3RoLCBzY3JvbGxMZW5ndGggLSAxKSAtIGluZGV4O1xuICAgICAgdmFyIG5vZGUgPSB2b2lkIDAsXG4gICAgICAgICAgX3Njcm9sbCRsZWFmID0gdGhpcy5zY3JvbGwubGVhZihpbmRleCksXG4gICAgICAgICAgX3Njcm9sbCRsZWFmMiA9IF9zbGljZWRUb0FycmF5KF9zY3JvbGwkbGVhZiwgMiksXG4gICAgICAgICAgbGVhZiA9IF9zY3JvbGwkbGVhZjJbMF0sXG4gICAgICAgICAgb2Zmc2V0ID0gX3Njcm9sbCRsZWFmMlsxXTtcbiAgICAgIGlmIChsZWFmID09IG51bGwpIHJldHVybiBudWxsO1xuXG4gICAgICB2YXIgX2xlYWYkcG9zaXRpb24gPSBsZWFmLnBvc2l0aW9uKG9mZnNldCwgdHJ1ZSk7XG5cbiAgICAgIHZhciBfbGVhZiRwb3NpdGlvbjIgPSBfc2xpY2VkVG9BcnJheShfbGVhZiRwb3NpdGlvbiwgMik7XG5cbiAgICAgIG5vZGUgPSBfbGVhZiRwb3NpdGlvbjJbMF07XG4gICAgICBvZmZzZXQgPSBfbGVhZiRwb3NpdGlvbjJbMV07XG5cbiAgICAgIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICBpZiAobGVuZ3RoID4gMCkge1xuICAgICAgICByYW5nZS5zZXRTdGFydChub2RlLCBvZmZzZXQpO1xuXG4gICAgICAgIHZhciBfc2Nyb2xsJGxlYWYzID0gdGhpcy5zY3JvbGwubGVhZihpbmRleCArIGxlbmd0aCk7XG5cbiAgICAgICAgdmFyIF9zY3JvbGwkbGVhZjQgPSBfc2xpY2VkVG9BcnJheShfc2Nyb2xsJGxlYWYzLCAyKTtcblxuICAgICAgICBsZWFmID0gX3Njcm9sbCRsZWFmNFswXTtcbiAgICAgICAgb2Zmc2V0ID0gX3Njcm9sbCRsZWFmNFsxXTtcblxuICAgICAgICBpZiAobGVhZiA9PSBudWxsKSByZXR1cm4gbnVsbDtcblxuICAgICAgICB2YXIgX2xlYWYkcG9zaXRpb24zID0gbGVhZi5wb3NpdGlvbihvZmZzZXQsIHRydWUpO1xuXG4gICAgICAgIHZhciBfbGVhZiRwb3NpdGlvbjQgPSBfc2xpY2VkVG9BcnJheShfbGVhZiRwb3NpdGlvbjMsIDIpO1xuXG4gICAgICAgIG5vZGUgPSBfbGVhZiRwb3NpdGlvbjRbMF07XG4gICAgICAgIG9mZnNldCA9IF9sZWFmJHBvc2l0aW9uNFsxXTtcblxuICAgICAgICByYW5nZS5zZXRFbmQobm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIHJhbmdlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNpZGUgPSAnbGVmdCc7XG4gICAgICAgIHZhciByZWN0ID0gdm9pZCAwO1xuICAgICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIFRleHQpIHtcbiAgICAgICAgICBpZiAob2Zmc2V0IDwgbm9kZS5kYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQobm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgIHJhbmdlLnNldEVuZChub2RlLCBvZmZzZXQgKyAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQobm9kZSwgb2Zmc2V0IC0gMSk7XG4gICAgICAgICAgICByYW5nZS5zZXRFbmQobm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgIHNpZGUgPSAncmlnaHQnO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZWN0ID0gcmFuZ2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVjdCA9IGxlYWYuZG9tTm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICBpZiAob2Zmc2V0ID4gMCkgc2lkZSA9ICdyaWdodCc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBib3R0b206IHJlY3QudG9wICsgcmVjdC5oZWlnaHQsXG4gICAgICAgICAgaGVpZ2h0OiByZWN0LmhlaWdodCxcbiAgICAgICAgICBsZWZ0OiByZWN0W3NpZGVdLFxuICAgICAgICAgIHJpZ2h0OiByZWN0W3NpZGVdLFxuICAgICAgICAgIHRvcDogcmVjdC50b3AsXG4gICAgICAgICAgd2lkdGg6IDBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXROYXRpdmVSYW5nZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE5hdGl2ZVJhbmdlKCkge1xuICAgICAgdmFyIHNlbGVjdGlvbiA9IGRvY3VtZW50LmdldFNlbGVjdGlvbigpO1xuICAgICAgaWYgKHNlbGVjdGlvbiA9PSBudWxsIHx8IHNlbGVjdGlvbi5yYW5nZUNvdW50IDw9IDApIHJldHVybiBudWxsO1xuICAgICAgdmFyIG5hdGl2ZVJhbmdlID0gc2VsZWN0aW9uLmdldFJhbmdlQXQoMCk7XG4gICAgICBpZiAobmF0aXZlUmFuZ2UgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgcmFuZ2UgPSB0aGlzLm5vcm1hbGl6ZU5hdGl2ZShuYXRpdmVSYW5nZSk7XG4gICAgICBkZWJ1Zy5pbmZvKCdnZXROYXRpdmVSYW5nZScsIHJhbmdlKTtcbiAgICAgIHJldHVybiByYW5nZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRSYW5nZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJhbmdlKCkge1xuICAgICAgdmFyIG5vcm1hbGl6ZWQgPSB0aGlzLmdldE5hdGl2ZVJhbmdlKCk7XG4gICAgICBpZiAobm9ybWFsaXplZCA9PSBudWxsKSByZXR1cm4gW251bGwsIG51bGxdO1xuICAgICAgdmFyIHJhbmdlID0gdGhpcy5ub3JtYWxpemVkVG9SYW5nZShub3JtYWxpemVkKTtcbiAgICAgIHJldHVybiBbcmFuZ2UsIG5vcm1hbGl6ZWRdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2hhc0ZvY3VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzRm9jdXMoKSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gdGhpcy5yb290O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ25vcm1hbGl6ZWRUb1JhbmdlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbm9ybWFsaXplZFRvUmFuZ2UocmFuZ2UpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB2YXIgcG9zaXRpb25zID0gW1tyYW5nZS5zdGFydC5ub2RlLCByYW5nZS5zdGFydC5vZmZzZXRdXTtcbiAgICAgIGlmICghcmFuZ2UubmF0aXZlLmNvbGxhcHNlZCkge1xuICAgICAgICBwb3NpdGlvbnMucHVzaChbcmFuZ2UuZW5kLm5vZGUsIHJhbmdlLmVuZC5vZmZzZXRdKTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleGVzID0gcG9zaXRpb25zLm1hcChmdW5jdGlvbiAocG9zaXRpb24pIHtcbiAgICAgICAgdmFyIF9wb3NpdGlvbiA9IF9zbGljZWRUb0FycmF5KHBvc2l0aW9uLCAyKSxcbiAgICAgICAgICAgIG5vZGUgPSBfcG9zaXRpb25bMF0sXG4gICAgICAgICAgICBvZmZzZXQgPSBfcG9zaXRpb25bMV07XG5cbiAgICAgICAgdmFyIGJsb3QgPSBfcGFyY2htZW50Mi5kZWZhdWx0LmZpbmQobm9kZSwgdHJ1ZSk7XG4gICAgICAgIHZhciBpbmRleCA9IGJsb3Qub2Zmc2V0KF90aGlzNC5zY3JvbGwpO1xuICAgICAgICBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9IGVsc2UgaWYgKGJsb3QgaW5zdGFuY2VvZiBfcGFyY2htZW50Mi5kZWZhdWx0LkNvbnRhaW5lcikge1xuICAgICAgICAgIHJldHVybiBpbmRleCArIGJsb3QubGVuZ3RoKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4ICsgYmxvdC5pbmRleChub2RlLCBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHZhciBlbmQgPSBNYXRoLm1pbihNYXRoLm1heC5hcHBseShNYXRoLCBfdG9Db25zdW1hYmxlQXJyYXkoaW5kZXhlcykpLCB0aGlzLnNjcm9sbC5sZW5ndGgoKSAtIDEpO1xuICAgICAgdmFyIHN0YXJ0ID0gTWF0aC5taW4uYXBwbHkoTWF0aCwgW2VuZF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShpbmRleGVzKSkpO1xuICAgICAgcmV0dXJuIG5ldyBSYW5nZShzdGFydCwgZW5kIC0gc3RhcnQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ25vcm1hbGl6ZU5hdGl2ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG5vcm1hbGl6ZU5hdGl2ZShuYXRpdmVSYW5nZSkge1xuICAgICAgaWYgKCFjb250YWlucyh0aGlzLnJvb3QsIG5hdGl2ZVJhbmdlLnN0YXJ0Q29udGFpbmVyKSB8fCAhbmF0aXZlUmFuZ2UuY29sbGFwc2VkICYmICFjb250YWlucyh0aGlzLnJvb3QsIG5hdGl2ZVJhbmdlLmVuZENvbnRhaW5lcikpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICB2YXIgcmFuZ2UgPSB7XG4gICAgICAgIHN0YXJ0OiB7IG5vZGU6IG5hdGl2ZVJhbmdlLnN0YXJ0Q29udGFpbmVyLCBvZmZzZXQ6IG5hdGl2ZVJhbmdlLnN0YXJ0T2Zmc2V0IH0sXG4gICAgICAgIGVuZDogeyBub2RlOiBuYXRpdmVSYW5nZS5lbmRDb250YWluZXIsIG9mZnNldDogbmF0aXZlUmFuZ2UuZW5kT2Zmc2V0IH0sXG4gICAgICAgIG5hdGl2ZTogbmF0aXZlUmFuZ2VcbiAgICAgIH07XG4gICAgICBbcmFuZ2Uuc3RhcnQsIHJhbmdlLmVuZF0uZm9yRWFjaChmdW5jdGlvbiAocG9zaXRpb24pIHtcbiAgICAgICAgdmFyIG5vZGUgPSBwb3NpdGlvbi5ub2RlLFxuICAgICAgICAgICAgb2Zmc2V0ID0gcG9zaXRpb24ub2Zmc2V0O1xuICAgICAgICB3aGlsZSAoIShub2RlIGluc3RhbmNlb2YgVGV4dCkgJiYgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpZiAobm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA+IG9mZnNldCkge1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGROb2Rlc1tvZmZzZXRdO1xuICAgICAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggPT09IG9mZnNldCkge1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUubGFzdENoaWxkO1xuICAgICAgICAgICAgb2Zmc2V0ID0gbm9kZSBpbnN0YW5jZW9mIFRleHQgPyBub2RlLmRhdGEubGVuZ3RoIDogbm9kZS5jaGlsZE5vZGVzLmxlbmd0aCArIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwb3NpdGlvbi5ub2RlID0gbm9kZSwgcG9zaXRpb24ub2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmFuZ2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmFuZ2VUb05hdGl2ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJhbmdlVG9OYXRpdmUocmFuZ2UpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICB2YXIgaW5kZXhlcyA9IHJhbmdlLmNvbGxhcHNlZCA/IFtyYW5nZS5pbmRleF0gOiBbcmFuZ2UuaW5kZXgsIHJhbmdlLmluZGV4ICsgcmFuZ2UubGVuZ3RoXTtcbiAgICAgIHZhciBhcmdzID0gW107XG4gICAgICB2YXIgc2Nyb2xsTGVuZ3RoID0gdGhpcy5zY3JvbGwubGVuZ3RoKCk7XG4gICAgICBpbmRleGVzLmZvckVhY2goZnVuY3Rpb24gKGluZGV4LCBpKSB7XG4gICAgICAgIGluZGV4ID0gTWF0aC5taW4oc2Nyb2xsTGVuZ3RoIC0gMSwgaW5kZXgpO1xuICAgICAgICB2YXIgbm9kZSA9IHZvaWQgMCxcbiAgICAgICAgICAgIF9zY3JvbGwkbGVhZjUgPSBfdGhpczUuc2Nyb2xsLmxlYWYoaW5kZXgpLFxuICAgICAgICAgICAgX3Njcm9sbCRsZWFmNiA9IF9zbGljZWRUb0FycmF5KF9zY3JvbGwkbGVhZjUsIDIpLFxuICAgICAgICAgICAgbGVhZiA9IF9zY3JvbGwkbGVhZjZbMF0sXG4gICAgICAgICAgICBvZmZzZXQgPSBfc2Nyb2xsJGxlYWY2WzFdO1xuICAgICAgICB2YXIgX2xlYWYkcG9zaXRpb241ID0gbGVhZi5wb3NpdGlvbihvZmZzZXQsIGkgIT09IDApO1xuXG4gICAgICAgIHZhciBfbGVhZiRwb3NpdGlvbjYgPSBfc2xpY2VkVG9BcnJheShfbGVhZiRwb3NpdGlvbjUsIDIpO1xuXG4gICAgICAgIG5vZGUgPSBfbGVhZiRwb3NpdGlvbjZbMF07XG4gICAgICAgIG9mZnNldCA9IF9sZWFmJHBvc2l0aW9uNlsxXTtcblxuICAgICAgICBhcmdzLnB1c2gobm9kZSwgb2Zmc2V0KTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGFyZ3MubGVuZ3RoIDwgMikge1xuICAgICAgICBhcmdzID0gYXJncy5jb25jYXQoYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJncztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzY3JvbGxJbnRvVmlldycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNjcm9sbEludG9WaWV3KHNjcm9sbGluZ0NvbnRhaW5lcikge1xuICAgICAgdmFyIHJhbmdlID0gdGhpcy5sYXN0UmFuZ2U7XG4gICAgICBpZiAocmFuZ2UgPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgdmFyIGJvdW5kcyA9IHRoaXMuZ2V0Qm91bmRzKHJhbmdlLmluZGV4LCByYW5nZS5sZW5ndGgpO1xuICAgICAgaWYgKGJvdW5kcyA9PSBudWxsKSByZXR1cm47XG4gICAgICB2YXIgbGltaXQgPSB0aGlzLnNjcm9sbC5sZW5ndGgoKSAtIDE7XG5cbiAgICAgIHZhciBfc2Nyb2xsJGxpbmUgPSB0aGlzLnNjcm9sbC5saW5lKE1hdGgubWluKHJhbmdlLmluZGV4LCBsaW1pdCkpLFxuICAgICAgICAgIF9zY3JvbGwkbGluZTIgPSBfc2xpY2VkVG9BcnJheShfc2Nyb2xsJGxpbmUsIDEpLFxuICAgICAgICAgIGZpcnN0ID0gX3Njcm9sbCRsaW5lMlswXTtcblxuICAgICAgdmFyIGxhc3QgPSBmaXJzdDtcbiAgICAgIGlmIChyYW5nZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBfc2Nyb2xsJGxpbmUzID0gdGhpcy5zY3JvbGwubGluZShNYXRoLm1pbihyYW5nZS5pbmRleCArIHJhbmdlLmxlbmd0aCwgbGltaXQpKTtcblxuICAgICAgICB2YXIgX3Njcm9sbCRsaW5lNCA9IF9zbGljZWRUb0FycmF5KF9zY3JvbGwkbGluZTMsIDEpO1xuXG4gICAgICAgIGxhc3QgPSBfc2Nyb2xsJGxpbmU0WzBdO1xuICAgICAgfVxuICAgICAgaWYgKGZpcnN0ID09IG51bGwgfHwgbGFzdCA9PSBudWxsKSByZXR1cm47XG4gICAgICB2YXIgc2Nyb2xsQm91bmRzID0gc2Nyb2xsaW5nQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgaWYgKGJvdW5kcy50b3AgPCBzY3JvbGxCb3VuZHMudG9wKSB7XG4gICAgICAgIHNjcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxUb3AgLT0gc2Nyb2xsQm91bmRzLnRvcCAtIGJvdW5kcy50b3A7XG4gICAgICB9IGVsc2UgaWYgKGJvdW5kcy5ib3R0b20gPiBzY3JvbGxCb3VuZHMuYm90dG9tKSB7XG4gICAgICAgIHNjcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxUb3AgKz0gYm91bmRzLmJvdHRvbSAtIHNjcm9sbEJvdW5kcy5ib3R0b207XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0TmF0aXZlUmFuZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXROYXRpdmVSYW5nZShzdGFydE5vZGUsIHN0YXJ0T2Zmc2V0KSB7XG4gICAgICB2YXIgZW5kTm9kZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogc3RhcnROb2RlO1xuICAgICAgdmFyIGVuZE9mZnNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogc3RhcnRPZmZzZXQ7XG4gICAgICB2YXIgZm9yY2UgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IGZhbHNlO1xuXG4gICAgICBkZWJ1Zy5pbmZvKCdzZXROYXRpdmVSYW5nZScsIHN0YXJ0Tm9kZSwgc3RhcnRPZmZzZXQsIGVuZE5vZGUsIGVuZE9mZnNldCk7XG4gICAgICBpZiAoc3RhcnROb2RlICE9IG51bGwgJiYgKHRoaXMucm9vdC5wYXJlbnROb2RlID09IG51bGwgfHwgc3RhcnROb2RlLnBhcmVudE5vZGUgPT0gbnVsbCB8fCBlbmROb2RlLnBhcmVudE5vZGUgPT0gbnVsbCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHNlbGVjdGlvbiA9IGRvY3VtZW50LmdldFNlbGVjdGlvbigpO1xuICAgICAgaWYgKHNlbGVjdGlvbiA9PSBudWxsKSByZXR1cm47XG4gICAgICBpZiAoc3RhcnROb2RlICE9IG51bGwpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc0ZvY3VzKCkpIHRoaXMucm9vdC5mb2N1cygpO1xuICAgICAgICB2YXIgbmF0aXZlID0gKHRoaXMuZ2V0TmF0aXZlUmFuZ2UoKSB8fCB7fSkubmF0aXZlO1xuICAgICAgICBpZiAobmF0aXZlID09IG51bGwgfHwgZm9yY2UgfHwgc3RhcnROb2RlICE9PSBuYXRpdmUuc3RhcnRDb250YWluZXIgfHwgc3RhcnRPZmZzZXQgIT09IG5hdGl2ZS5zdGFydE9mZnNldCB8fCBlbmROb2RlICE9PSBuYXRpdmUuZW5kQ29udGFpbmVyIHx8IGVuZE9mZnNldCAhPT0gbmF0aXZlLmVuZE9mZnNldCkge1xuXG4gICAgICAgICAgaWYgKHN0YXJ0Tm9kZS50YWdOYW1lID09IFwiQlJcIikge1xuICAgICAgICAgICAgc3RhcnRPZmZzZXQgPSBbXS5pbmRleE9mLmNhbGwoc3RhcnROb2RlLnBhcmVudE5vZGUuY2hpbGROb2Rlcywgc3RhcnROb2RlKTtcbiAgICAgICAgICAgIHN0YXJ0Tm9kZSA9IHN0YXJ0Tm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZW5kTm9kZS50YWdOYW1lID09IFwiQlJcIikge1xuICAgICAgICAgICAgZW5kT2Zmc2V0ID0gW10uaW5kZXhPZi5jYWxsKGVuZE5vZGUucGFyZW50Tm9kZS5jaGlsZE5vZGVzLCBlbmROb2RlKTtcbiAgICAgICAgICAgIGVuZE5vZGUgPSBlbmROb2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnROb2RlLCBzdGFydE9mZnNldCk7XG4gICAgICAgICAgcmFuZ2Uuc2V0RW5kKGVuZE5vZGUsIGVuZE9mZnNldCk7XG4gICAgICAgICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgdGhpcy5yb290LmJsdXIoKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5mb2N1cygpOyAvLyByb290LmJsdXIoKSBub3QgZW5vdWdoIG9uIElFMTErVHJhdmlzK1NhdWNlTGFicyAoYnV0IG5vdCBsb2NhbCBWTXMpXG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0UmFuZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRSYW5nZShyYW5nZSkge1xuICAgICAgdmFyIGZvcmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IF9lbWl0dGVyNC5kZWZhdWx0LnNvdXJjZXMuQVBJO1xuXG4gICAgICBpZiAodHlwZW9mIGZvcmNlID09PSAnc3RyaW5nJykge1xuICAgICAgICBzb3VyY2UgPSBmb3JjZTtcbiAgICAgICAgZm9yY2UgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGRlYnVnLmluZm8oJ3NldFJhbmdlJywgcmFuZ2UpO1xuICAgICAgaWYgKHJhbmdlICE9IG51bGwpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSB0aGlzLnJhbmdlVG9OYXRpdmUocmFuZ2UpO1xuICAgICAgICB0aGlzLnNldE5hdGl2ZVJhbmdlLmFwcGx5KHRoaXMsIF90b0NvbnN1bWFibGVBcnJheShhcmdzKS5jb25jYXQoW2ZvcmNlXSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXROYXRpdmVSYW5nZShudWxsKTtcbiAgICAgIH1cbiAgICAgIHRoaXMudXBkYXRlKHNvdXJjZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogX2VtaXR0ZXI0LmRlZmF1bHQuc291cmNlcy5VU0VSO1xuXG4gICAgICB2YXIgb2xkUmFuZ2UgPSB0aGlzLmxhc3RSYW5nZTtcblxuICAgICAgdmFyIF9nZXRSYW5nZSA9IHRoaXMuZ2V0UmFuZ2UoKSxcbiAgICAgICAgICBfZ2V0UmFuZ2UyID0gX3NsaWNlZFRvQXJyYXkoX2dldFJhbmdlLCAyKSxcbiAgICAgICAgICBsYXN0UmFuZ2UgPSBfZ2V0UmFuZ2UyWzBdLFxuICAgICAgICAgIG5hdGl2ZVJhbmdlID0gX2dldFJhbmdlMlsxXTtcblxuICAgICAgdGhpcy5sYXN0UmFuZ2UgPSBsYXN0UmFuZ2U7XG4gICAgICBpZiAodGhpcy5sYXN0UmFuZ2UgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnNhdmVkUmFuZ2UgPSB0aGlzLmxhc3RSYW5nZTtcbiAgICAgIH1cbiAgICAgIGlmICghKDAsIF9kZWVwRXF1YWwyLmRlZmF1bHQpKG9sZFJhbmdlLCB0aGlzLmxhc3RSYW5nZSkpIHtcbiAgICAgICAgdmFyIF9lbWl0dGVyO1xuXG4gICAgICAgIGlmICghdGhpcy5jb21wb3NpbmcgJiYgbmF0aXZlUmFuZ2UgIT0gbnVsbCAmJiBuYXRpdmVSYW5nZS5uYXRpdmUuY29sbGFwc2VkICYmIG5hdGl2ZVJhbmdlLnN0YXJ0Lm5vZGUgIT09IHRoaXMuY3Vyc29yLnRleHROb2RlKSB7XG4gICAgICAgICAgdGhpcy5jdXJzb3IucmVzdG9yZSgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhcmdzID0gW19lbWl0dGVyNC5kZWZhdWx0LmV2ZW50cy5TRUxFQ1RJT05fQ0hBTkdFLCAoMCwgX2Nsb25lMi5kZWZhdWx0KSh0aGlzLmxhc3RSYW5nZSksICgwLCBfY2xvbmUyLmRlZmF1bHQpKG9sZFJhbmdlKSwgc291cmNlXTtcbiAgICAgICAgKF9lbWl0dGVyID0gdGhpcy5lbWl0dGVyKS5lbWl0LmFwcGx5KF9lbWl0dGVyLCBbX2VtaXR0ZXI0LmRlZmF1bHQuZXZlbnRzLkVESVRPUl9DSEFOR0VdLmNvbmNhdChhcmdzKSk7XG4gICAgICAgIGlmIChzb3VyY2UgIT09IF9lbWl0dGVyNC5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKSB7XG4gICAgICAgICAgdmFyIF9lbWl0dGVyMjtcblxuICAgICAgICAgIChfZW1pdHRlcjIgPSB0aGlzLmVtaXR0ZXIpLmVtaXQuYXBwbHkoX2VtaXR0ZXIyLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTZWxlY3Rpb247XG59KCk7XG5cbmZ1bmN0aW9uIGNvbnRhaW5zKHBhcmVudCwgZGVzY2VuZGFudCkge1xuICB0cnkge1xuICAgIC8vIEZpcmVmb3ggaW5zZXJ0cyBpbmFjY2Vzc2libGUgbm9kZXMgYXJvdW5kIHZpZGVvIGVsZW1lbnRzXG4gICAgZGVzY2VuZGFudC5wYXJlbnROb2RlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIElFMTEgaGFzIGJ1ZyB3aXRoIFRleHQgbm9kZXNcbiAgLy8gaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy83ODA4NzQvbm9kZS1jb250YWlucy1pcy1pbmNvcnJlY3RcbiAgaWYgKGRlc2NlbmRhbnQgaW5zdGFuY2VvZiBUZXh0KSB7XG4gICAgZGVzY2VuZGFudCA9IGRlc2NlbmRhbnQucGFyZW50Tm9kZTtcbiAgfVxuICByZXR1cm4gcGFyZW50LmNvbnRhaW5zKGRlc2NlbmRhbnQpO1xufVxuXG5leHBvcnRzLlJhbmdlID0gUmFuZ2U7XG5leHBvcnRzLmRlZmF1bHQgPSBTZWxlY3Rpb247XG5cbi8qKiovIH0pLFxuLyogMTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEJyZWFrID0gZnVuY3Rpb24gKF9QYXJjaG1lbnQkRW1iZWQpIHtcbiAgX2luaGVyaXRzKEJyZWFrLCBfUGFyY2htZW50JEVtYmVkKTtcblxuICBmdW5jdGlvbiBCcmVhaygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnJlYWspO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChCcmVhay5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJyZWFrKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQnJlYWssIFt7XG4gICAga2V5OiAnaW5zZXJ0SW50bycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc2VydEludG8ocGFyZW50LCByZWYpIHtcbiAgICAgIGlmIChwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIF9nZXQoQnJlYWsucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQnJlYWsucHJvdG90eXBlKSwgJ2luc2VydEludG8nLCB0aGlzKS5jYWxsKHRoaXMsIHBhcmVudCwgcmVmKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbGVuZ3RoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGVuZ3RoKCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogJ3ZhbHVlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCcmVhaztcbn0oX3BhcmNobWVudDIuZGVmYXVsdC5FbWJlZCk7XG5cbkJyZWFrLmJsb3ROYW1lID0gJ2JyZWFrJztcbkJyZWFrLnRhZ05hbWUgPSAnQlInO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBCcmVhaztcblxuLyoqKi8gfSksXG4vKiAxNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgbGlua2VkX2xpc3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDQpO1xudmFyIHNoYWRvd18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMCk7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIENvbnRhaW5lckJsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvbnRhaW5lckJsb3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29udGFpbmVyQmxvdChkb21Ob2RlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRvbU5vZGUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmJ1aWxkKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuYXBwZW5kQ2hpbGQgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICAgICAgdGhpcy5pbnNlcnRCZWZvcmUob3RoZXIpO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuYXR0YWNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmF0dGFjaC5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICBjaGlsZC5hdHRhY2goKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IG5ldyBsaW5rZWRfbGlzdF8xLmRlZmF1bHQoKTtcbiAgICAgICAgLy8gTmVlZCB0byBiZSByZXZlcnNlZCBmb3IgaWYgRE9NIG5vZGVzIGFscmVhZHkgaW4gb3JkZXJcbiAgICAgICAgW10uc2xpY2VcbiAgICAgICAgICAgIC5jYWxsKHRoaXMuZG9tTm9kZS5jaGlsZE5vZGVzKVxuICAgICAgICAgICAgLnJldmVyc2UoKVxuICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gbWFrZUJsb3Qobm9kZSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuaW5zZXJ0QmVmb3JlKGNoaWxkLCBfdGhpcy5jaGlsZHJlbi5oZWFkIHx8IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFJlZ2lzdHJ5LlBhcmNobWVudEVycm9yKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuZGVsZXRlQXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICAgICAgICBpZiAoaW5kZXggPT09IDAgJiYgbGVuZ3RoID09PSB0aGlzLmxlbmd0aCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2hBdChpbmRleCwgbGVuZ3RoLCBmdW5jdGlvbiAoY2hpbGQsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBjaGlsZC5kZWxldGVBdChvZmZzZXQsIGxlbmd0aCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuZGVzY2VuZGFudCA9IGZ1bmN0aW9uIChjcml0ZXJpYSwgaW5kZXgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5jaGlsZHJlbi5maW5kKGluZGV4KSwgY2hpbGQgPSBfYVswXSwgb2Zmc2V0ID0gX2FbMV07XG4gICAgICAgIGlmICgoY3JpdGVyaWEuYmxvdE5hbWUgPT0gbnVsbCAmJiBjcml0ZXJpYShjaGlsZCkpIHx8XG4gICAgICAgICAgICAoY3JpdGVyaWEuYmxvdE5hbWUgIT0gbnVsbCAmJiBjaGlsZCBpbnN0YW5jZW9mIGNyaXRlcmlhKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtjaGlsZCwgb2Zmc2V0XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjaGlsZCBpbnN0YW5jZW9mIENvbnRhaW5lckJsb3QpIHtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZC5kZXNjZW5kYW50KGNyaXRlcmlhLCBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFtudWxsLCAtMV07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmRlc2NlbmRhbnRzID0gZnVuY3Rpb24gKGNyaXRlcmlhLCBpbmRleCwgbGVuZ3RoKSB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7IGluZGV4ID0gMDsgfVxuICAgICAgICBpZiAobGVuZ3RoID09PSB2b2lkIDApIHsgbGVuZ3RoID0gTnVtYmVyLk1BWF9WQUxVRTsgfVxuICAgICAgICB2YXIgZGVzY2VuZGFudHMgPSBbXTtcbiAgICAgICAgdmFyIGxlbmd0aExlZnQgPSBsZW5ndGg7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaEF0KGluZGV4LCBsZW5ndGgsIGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgsIGxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKChjcml0ZXJpYS5ibG90TmFtZSA9PSBudWxsICYmIGNyaXRlcmlhKGNoaWxkKSkgfHxcbiAgICAgICAgICAgICAgICAoY3JpdGVyaWEuYmxvdE5hbWUgIT0gbnVsbCAmJiBjaGlsZCBpbnN0YW5jZW9mIGNyaXRlcmlhKSkge1xuICAgICAgICAgICAgICAgIGRlc2NlbmRhbnRzLnB1c2goY2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgQ29udGFpbmVyQmxvdCkge1xuICAgICAgICAgICAgICAgIGRlc2NlbmRhbnRzID0gZGVzY2VuZGFudHMuY29uY2F0KGNoaWxkLmRlc2NlbmRhbnRzKGNyaXRlcmlhLCBpbmRleCwgbGVuZ3RoTGVmdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGVuZ3RoTGVmdCAtPSBsZW5ndGg7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGVzY2VuZGFudHM7XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5kZXRhY2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgIGNoaWxkLmRldGFjaCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kZXRhY2guY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLmZvcm1hdEF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaEF0KGluZGV4LCBsZW5ndGgsIGZ1bmN0aW9uIChjaGlsZCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGNoaWxkLmZvcm1hdEF0KG9mZnNldCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUuaW5zZXJ0QXQgPSBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlLCBkZWYpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5jaGlsZHJlbi5maW5kKGluZGV4KSwgY2hpbGQgPSBfYVswXSwgb2Zmc2V0ID0gX2FbMV07XG4gICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgICAgY2hpbGQuaW5zZXJ0QXQob2Zmc2V0LCB2YWx1ZSwgZGVmKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBibG90ID0gZGVmID09IG51bGwgPyBSZWdpc3RyeS5jcmVhdGUoJ3RleHQnLCB2YWx1ZSkgOiBSZWdpc3RyeS5jcmVhdGUodmFsdWUsIGRlZik7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKGJsb3QpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS5pbnNlcnRCZWZvcmUgPSBmdW5jdGlvbiAoY2hpbGRCbG90LCByZWZCbG90KSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRpY3MuYWxsb3dlZENoaWxkcmVuICE9IG51bGwgJiZcbiAgICAgICAgICAgICF0aGlzLnN0YXRpY3MuYWxsb3dlZENoaWxkcmVuLnNvbWUoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkQmxvdCBpbnN0YW5jZW9mIGNoaWxkO1xuICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZWdpc3RyeS5QYXJjaG1lbnRFcnJvcihcIkNhbm5vdCBpbnNlcnQgXCIgKyBjaGlsZEJsb3Quc3RhdGljcy5ibG90TmFtZSArIFwiIGludG8gXCIgKyB0aGlzLnN0YXRpY3MuYmxvdE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGNoaWxkQmxvdC5pbnNlcnRJbnRvKHRoaXMsIHJlZkJsb3QpO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUubGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGNoaWxkKSB7XG4gICAgICAgICAgICByZXR1cm4gbWVtbyArIGNoaWxkLmxlbmd0aCgpO1xuICAgICAgICB9LCAwKTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLm1vdmVDaGlsZHJlbiA9IGZ1bmN0aW9uICh0YXJnZXRQYXJlbnQsIHJlZk5vZGUpIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgdGFyZ2V0UGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgcmVmTm9kZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUub3B0aW1pemUgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm9wdGltaXplLmNhbGwodGhpcywgY29udGV4dCk7XG4gICAgICAgIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGljcy5kZWZhdWx0Q2hpbGQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IFJlZ2lzdHJ5LmNyZWF0ZSh0aGlzLnN0YXRpY3MuZGVmYXVsdENoaWxkKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgICAgICBjaGlsZC5vcHRpbWl6ZShjb250ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLnBhdGggPSBmdW5jdGlvbiAoaW5kZXgsIGluY2x1c2l2ZSkge1xuICAgICAgICBpZiAoaW5jbHVzaXZlID09PSB2b2lkIDApIHsgaW5jbHVzaXZlID0gZmFsc2U7IH1cbiAgICAgICAgdmFyIF9hID0gdGhpcy5jaGlsZHJlbi5maW5kKGluZGV4LCBpbmNsdXNpdmUpLCBjaGlsZCA9IF9hWzBdLCBvZmZzZXQgPSBfYVsxXTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gW1t0aGlzLCBpbmRleF1dO1xuICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBDb250YWluZXJCbG90KSB7XG4gICAgICAgICAgICByZXR1cm4gcG9zaXRpb24uY29uY2F0KGNoaWxkLnBhdGgob2Zmc2V0LCBpbmNsdXNpdmUpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjaGlsZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBwb3NpdGlvbi5wdXNoKFtjaGlsZCwgb2Zmc2V0XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBvc2l0aW9uO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5yZW1vdmUoY2hpbGQpO1xuICAgIH07XG4gICAgQ29udGFpbmVyQmxvdC5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIENvbnRhaW5lckJsb3QpIHtcbiAgICAgICAgICAgIHRhcmdldC5tb3ZlQ2hpbGRyZW4odGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5yZXBsYWNlLmNhbGwodGhpcywgdGFyZ2V0KTtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gKGluZGV4LCBmb3JjZSkge1xuICAgICAgICBpZiAoZm9yY2UgPT09IHZvaWQgMCkgeyBmb3JjZSA9IGZhbHNlOyB9XG4gICAgICAgIGlmICghZm9yY2UpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gdGhpcy5sZW5ndGgoKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBhZnRlciA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKGFmdGVyLCB0aGlzLm5leHQpO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2hBdChpbmRleCwgdGhpcy5sZW5ndGgoKSwgZnVuY3Rpb24gKGNoaWxkLCBvZmZzZXQsIGxlbmd0aCkge1xuICAgICAgICAgICAgY2hpbGQgPSBjaGlsZC5zcGxpdChvZmZzZXQsIGZvcmNlKTtcbiAgICAgICAgICAgIGFmdGVyLmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhZnRlcjtcbiAgICB9O1xuICAgIENvbnRhaW5lckJsb3QucHJvdG90eXBlLnVud3JhcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5tb3ZlQ2hpbGRyZW4odGhpcy5wYXJlbnQsIHRoaXMubmV4dCk7XG4gICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgfTtcbiAgICBDb250YWluZXJCbG90LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAobXV0YXRpb25zLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBhZGRlZE5vZGVzID0gW107XG4gICAgICAgIHZhciByZW1vdmVkTm9kZXMgPSBbXTtcbiAgICAgICAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICAgICAgICBpZiAobXV0YXRpb24udGFyZ2V0ID09PSBfdGhpcy5kb21Ob2RlICYmIG11dGF0aW9uLnR5cGUgPT09ICdjaGlsZExpc3QnKSB7XG4gICAgICAgICAgICAgICAgYWRkZWROb2Rlcy5wdXNoLmFwcGx5KGFkZGVkTm9kZXMsIG11dGF0aW9uLmFkZGVkTm9kZXMpO1xuICAgICAgICAgICAgICAgIHJlbW92ZWROb2Rlcy5wdXNoLmFwcGx5KHJlbW92ZWROb2RlcywgbXV0YXRpb24ucmVtb3ZlZE5vZGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJlbW92ZWROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAvLyBDaGVjayBub2RlIGhhcyBhY3R1YWxseSBiZWVuIHJlbW92ZWRcbiAgICAgICAgICAgIC8vIE9uZSBleGNlcHRpb24gaXMgQ2hyb21lIGRvZXMgbm90IGltbWVkaWF0ZWx5IHJlbW92ZSBJRlJBTUVzXG4gICAgICAgICAgICAvLyBmcm9tIERPTSBidXQgTXV0YXRpb25SZWNvcmQgaXMgY29ycmVjdCBpbiBpdHMgcmVwb3J0ZWQgcmVtb3ZhbFxuICAgICAgICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIG5vZGUudGFnTmFtZSAhPT0gJ0lGUkFNRScgJiZcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG5vZGUpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9DT05UQUlORURfQlkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYmxvdCA9IFJlZ2lzdHJ5LmZpbmQobm9kZSk7XG4gICAgICAgICAgICBpZiAoYmxvdCA9PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGlmIChibG90LmRvbU5vZGUucGFyZW50Tm9kZSA9PSBudWxsIHx8IGJsb3QuZG9tTm9kZS5wYXJlbnROb2RlID09PSBfdGhpcy5kb21Ob2RlKSB7XG4gICAgICAgICAgICAgICAgYmxvdC5kZXRhY2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGFkZGVkTm9kZXNcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlLnBhcmVudE5vZGUgPT0gX3RoaXMuZG9tTm9kZTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICBpZiAoYSA9PT0gYilcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIGlmIChhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICB2YXIgcmVmQmxvdCA9IG51bGw7XG4gICAgICAgICAgICBpZiAobm9kZS5uZXh0U2libGluZyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVmQmxvdCA9IFJlZ2lzdHJ5LmZpbmQobm9kZS5uZXh0U2libGluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYmxvdCA9IG1ha2VCbG90KG5vZGUpO1xuICAgICAgICAgICAgaWYgKGJsb3QubmV4dCAhPSByZWZCbG90IHx8IGJsb3QubmV4dCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJsb3QucGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgYmxvdC5wYXJlbnQucmVtb3ZlQ2hpbGQoX3RoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5pbnNlcnRCZWZvcmUoYmxvdCwgcmVmQmxvdCB8fCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBDb250YWluZXJCbG90O1xufShzaGFkb3dfMS5kZWZhdWx0KSk7XG5mdW5jdGlvbiBtYWtlQmxvdChub2RlKSB7XG4gICAgdmFyIGJsb3QgPSBSZWdpc3RyeS5maW5kKG5vZGUpO1xuICAgIGlmIChibG90ID09IG51bGwpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGJsb3QgPSBSZWdpc3RyeS5jcmVhdGUobm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGJsb3QgPSBSZWdpc3RyeS5jcmVhdGUoUmVnaXN0cnkuU2NvcGUuSU5MSU5FKTtcbiAgICAgICAgICAgIFtdLnNsaWNlLmNhbGwobm9kZS5jaGlsZE5vZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBibG90LmRvbU5vZGUuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChibG90LmRvbU5vZGUsIG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmxvdC5hdHRhY2goKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYmxvdDtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IENvbnRhaW5lckJsb3Q7XG5cblxuLyoqKi8gfSksXG4vKiAxOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYXR0cmlidXRvcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG52YXIgc3RvcmVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzEpO1xudmFyIGNvbnRhaW5lcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIEZvcm1hdEJsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZvcm1hdEJsb3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRm9ybWF0QmxvdChkb21Ob2RlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRvbU5vZGUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmF0dHJpYnV0ZXMgPSBuZXcgc3RvcmVfMS5kZWZhdWx0KF90aGlzLmRvbU5vZGUpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEZvcm1hdEJsb3QuZm9ybWF0cyA9IGZ1bmN0aW9uIChkb21Ob2RlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy50YWdOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnRhZ05hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9tTm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIEZvcm1hdEJsb3QucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gUmVnaXN0cnkucXVlcnkobmFtZSk7XG4gICAgICAgIGlmIChmb3JtYXQgaW5zdGFuY2VvZiBhdHRyaWJ1dG9yXzEuZGVmYXVsdCkge1xuICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmF0dHJpYnV0ZShmb3JtYXQsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCAhPSBudWxsICYmIChuYW1lICE9PSB0aGlzLnN0YXRpY3MuYmxvdE5hbWUgfHwgdGhpcy5mb3JtYXRzKClbbmFtZV0gIT09IHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZVdpdGgobmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBGb3JtYXRCbG90LnByb3RvdHlwZS5mb3JtYXRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZm9ybWF0cyA9IHRoaXMuYXR0cmlidXRlcy52YWx1ZXMoKTtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHRoaXMuc3RhdGljcy5mb3JtYXRzKHRoaXMuZG9tTm9kZSk7XG4gICAgICAgIGlmIChmb3JtYXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgZm9ybWF0c1t0aGlzLnN0YXRpY3MuYmxvdE5hbWVdID0gZm9ybWF0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXRzO1xuICAgIH07XG4gICAgRm9ybWF0QmxvdC5wcm90b3R5cGUucmVwbGFjZVdpdGggPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gX3N1cGVyLnByb3RvdHlwZS5yZXBsYWNlV2l0aC5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmNvcHkocmVwbGFjZW1lbnQpO1xuICAgICAgICByZXR1cm4gcmVwbGFjZW1lbnQ7XG4gICAgfTtcbiAgICBGb3JtYXRCbG90LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAobXV0YXRpb25zLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUudXBkYXRlLmNhbGwodGhpcywgbXV0YXRpb25zLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKG11dGF0aW9ucy5zb21lKGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIG11dGF0aW9uLnRhcmdldCA9PT0gX3RoaXMuZG9tTm9kZSAmJiBtdXRhdGlvbi50eXBlID09PSAnYXR0cmlidXRlcyc7XG4gICAgICAgIH0pKSB7XG4gICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuYnVpbGQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRm9ybWF0QmxvdC5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IF9zdXBlci5wcm90b3R5cGUud3JhcC5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgaWYgKHdyYXBwZXIgaW5zdGFuY2VvZiBGb3JtYXRCbG90ICYmIHdyYXBwZXIuc3RhdGljcy5zY29wZSA9PT0gdGhpcy5zdGF0aWNzLnNjb3BlKSB7XG4gICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMubW92ZSh3cmFwcGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9O1xuICAgIHJldHVybiBGb3JtYXRCbG90O1xufShjb250YWluZXJfMS5kZWZhdWx0KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBGb3JtYXRCbG90O1xuXG5cbi8qKiovIH0pLFxuLyogMTkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHNoYWRvd18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMCk7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIExlYWZCbG90ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhMZWFmQmxvdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBMZWFmQmxvdCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBMZWFmQmxvdC52YWx1ZSA9IGZ1bmN0aW9uIChkb21Ob2RlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgTGVhZkJsb3QucHJvdG90eXBlLmluZGV4ID0gZnVuY3Rpb24gKG5vZGUsIG9mZnNldCkge1xuICAgICAgICBpZiAodGhpcy5kb21Ob2RlID09PSBub2RlIHx8XG4gICAgICAgICAgICB0aGlzLmRvbU5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24obm9kZSkgJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0NPTlRBSU5FRF9CWSkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWluKG9mZnNldCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG4gICAgTGVhZkJsb3QucHJvdG90eXBlLnBvc2l0aW9uID0gZnVuY3Rpb24gKGluZGV4LCBpbmNsdXNpdmUpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IFtdLmluZGV4T2YuY2FsbCh0aGlzLnBhcmVudC5kb21Ob2RlLmNoaWxkTm9kZXMsIHRoaXMuZG9tTm9kZSk7XG4gICAgICAgIGlmIChpbmRleCA+IDApXG4gICAgICAgICAgICBvZmZzZXQgKz0gMTtcbiAgICAgICAgcmV0dXJuIFt0aGlzLnBhcmVudC5kb21Ob2RlLCBvZmZzZXRdO1xuICAgIH07XG4gICAgTGVhZkJsb3QucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiBfYSA9IHt9LCBfYVt0aGlzLnN0YXRpY3MuYmxvdE5hbWVdID0gdGhpcy5zdGF0aWNzLnZhbHVlKHRoaXMuZG9tTm9kZSkgfHwgdHJ1ZSwgX2E7XG4gICAgfTtcbiAgICBMZWFmQmxvdC5zY29wZSA9IFJlZ2lzdHJ5LlNjb3BlLklOTElORV9CTE9UO1xuICAgIHJldHVybiBMZWFmQmxvdDtcbn0oc2hhZG93XzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gTGVhZkJsb3Q7XG5cblxuLyoqKi8gfSksXG4vKiAyMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZXF1YWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcbnZhciBleHRlbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG5cbnZhciBsaWIgPSB7XG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBjb21wb3NlOiBmdW5jdGlvbiAoYSwgYiwga2VlcE51bGwpIHtcbiAgICAgIGlmICh0eXBlb2YgYSAhPT0gJ29iamVjdCcpIGEgPSB7fTtcbiAgICAgIGlmICh0eXBlb2YgYiAhPT0gJ29iamVjdCcpIGIgPSB7fTtcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gZXh0ZW5kKHRydWUsIHt9LCBiKTtcbiAgICAgIGlmICgha2VlcE51bGwpIHtcbiAgICAgICAgYXR0cmlidXRlcyA9IE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLnJlZHVjZShmdW5jdGlvbiAoY29weSwga2V5KSB7XG4gICAgICAgICAgaWYgKGF0dHJpYnV0ZXNba2V5XSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb3B5W2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjb3B5O1xuICAgICAgICB9LCB7fSk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gYSkge1xuICAgICAgICBpZiAoYVtrZXldICE9PSB1bmRlZmluZWQgJiYgYltrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBhdHRyaWJ1dGVzW2tleV0gPSBhW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5sZW5ndGggPiAwID8gYXR0cmlidXRlcyA6IHVuZGVmaW5lZDtcbiAgICB9LFxuXG4gICAgZGlmZjogZnVuY3Rpb24oYSwgYikge1xuICAgICAgaWYgKHR5cGVvZiBhICE9PSAnb2JqZWN0JykgYSA9IHt9O1xuICAgICAgaWYgKHR5cGVvZiBiICE9PSAnb2JqZWN0JykgYiA9IHt9O1xuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBPYmplY3Qua2V5cyhhKS5jb25jYXQoT2JqZWN0LmtleXMoYikpLnJlZHVjZShmdW5jdGlvbiAoYXR0cmlidXRlcywga2V5KSB7XG4gICAgICAgIGlmICghZXF1YWwoYVtrZXldLCBiW2tleV0pKSB7XG4gICAgICAgICAgYXR0cmlidXRlc1trZXldID0gYltrZXldID09PSB1bmRlZmluZWQgPyBudWxsIDogYltrZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhdHRyaWJ1dGVzO1xuICAgICAgfSwge30pO1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmxlbmd0aCA+IDAgPyBhdHRyaWJ1dGVzIDogdW5kZWZpbmVkO1xuICAgIH0sXG5cbiAgICB0cmFuc2Zvcm06IGZ1bmN0aW9uIChhLCBiLCBwcmlvcml0eSkge1xuICAgICAgaWYgKHR5cGVvZiBhICE9PSAnb2JqZWN0JykgcmV0dXJuIGI7XG4gICAgICBpZiAodHlwZW9mIGIgIT09ICdvYmplY3QnKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgaWYgKCFwcmlvcml0eSkgcmV0dXJuIGI7ICAvLyBiIHNpbXBseSBvdmVyd3JpdGVzIHVzIHdpdGhvdXQgcHJpb3JpdHlcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gT2JqZWN0LmtleXMoYikucmVkdWNlKGZ1bmN0aW9uIChhdHRyaWJ1dGVzLCBrZXkpIHtcbiAgICAgICAgaWYgKGFba2V5XSA9PT0gdW5kZWZpbmVkKSBhdHRyaWJ1dGVzW2tleV0gPSBiW2tleV07ICAvLyBudWxsIGlzIGEgdmFsaWQgdmFsdWVcbiAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZXM7XG4gICAgICB9LCB7fSk7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoID4gMCA/IGF0dHJpYnV0ZXMgOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuXG4gIGl0ZXJhdG9yOiBmdW5jdGlvbiAob3BzKSB7XG4gICAgcmV0dXJuIG5ldyBJdGVyYXRvcihvcHMpO1xuICB9LFxuXG4gIGxlbmd0aDogZnVuY3Rpb24gKG9wKSB7XG4gICAgaWYgKHR5cGVvZiBvcFsnZGVsZXRlJ10gPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gb3BbJ2RlbGV0ZSddO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wLnJldGFpbiA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBvcC5yZXRhaW47XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb3AuaW5zZXJ0ID09PSAnc3RyaW5nJyA/IG9wLmluc2VydC5sZW5ndGggOiAxO1xuICAgIH1cbiAgfVxufTtcblxuXG5mdW5jdGlvbiBJdGVyYXRvcihvcHMpIHtcbiAgdGhpcy5vcHMgPSBvcHM7XG4gIHRoaXMuaW5kZXggPSAwO1xuICB0aGlzLm9mZnNldCA9IDA7XG59O1xuXG5JdGVyYXRvci5wcm90b3R5cGUuaGFzTmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMucGVla0xlbmd0aCgpIDwgSW5maW5pdHk7XG59O1xuXG5JdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcbiAgaWYgKCFsZW5ndGgpIGxlbmd0aCA9IEluZmluaXR5O1xuICB2YXIgbmV4dE9wID0gdGhpcy5vcHNbdGhpcy5pbmRleF07XG4gIGlmIChuZXh0T3ApIHtcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgdmFyIG9wTGVuZ3RoID0gbGliLmxlbmd0aChuZXh0T3ApXG4gICAgaWYgKGxlbmd0aCA+PSBvcExlbmd0aCAtIG9mZnNldCkge1xuICAgICAgbGVuZ3RoID0gb3BMZW5ndGggLSBvZmZzZXQ7XG4gICAgICB0aGlzLmluZGV4ICs9IDE7XG4gICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub2Zmc2V0ICs9IGxlbmd0aDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBuZXh0T3BbJ2RlbGV0ZSddID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIHsgJ2RlbGV0ZSc6IGxlbmd0aCB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcmV0T3AgPSB7fTtcbiAgICAgIGlmIChuZXh0T3AuYXR0cmlidXRlcykge1xuICAgICAgICByZXRPcC5hdHRyaWJ1dGVzID0gbmV4dE9wLmF0dHJpYnV0ZXM7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG5leHRPcC5yZXRhaW4gPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldE9wLnJldGFpbiA9IGxlbmd0aDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5leHRPcC5pbnNlcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldE9wLmluc2VydCA9IG5leHRPcC5pbnNlcnQuc3Vic3RyKG9mZnNldCwgbGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG9mZnNldCBzaG91bGQgPT09IDAsIGxlbmd0aCBzaG91bGQgPT09IDFcbiAgICAgICAgcmV0T3AuaW5zZXJ0ID0gbmV4dE9wLmluc2VydDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXRPcDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHsgcmV0YWluOiBJbmZpbml0eSB9O1xuICB9XG59O1xuXG5JdGVyYXRvci5wcm90b3R5cGUucGVlayA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMub3BzW3RoaXMuaW5kZXhdO1xufTtcblxuSXRlcmF0b3IucHJvdG90eXBlLnBlZWtMZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLm9wc1t0aGlzLmluZGV4XSkge1xuICAgIC8vIFNob3VsZCBuZXZlciByZXR1cm4gMCBpZiBvdXIgaW5kZXggaXMgYmVpbmcgbWFuYWdlZCBjb3JyZWN0bHlcbiAgICByZXR1cm4gbGliLmxlbmd0aCh0aGlzLm9wc1t0aGlzLmluZGV4XSkgLSB0aGlzLm9mZnNldDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gSW5maW5pdHk7XG4gIH1cbn07XG5cbkl0ZXJhdG9yLnByb3RvdHlwZS5wZWVrVHlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMub3BzW3RoaXMuaW5kZXhdKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLm9wc1t0aGlzLmluZGV4XVsnZGVsZXRlJ10gPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gJ2RlbGV0ZSc7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5vcHNbdGhpcy5pbmRleF0ucmV0YWluID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuICdyZXRhaW4nO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ2luc2VydCc7XG4gICAgfVxuICB9XG4gIHJldHVybiAncmV0YWluJztcbn07XG5cbkl0ZXJhdG9yLnByb3RvdHlwZS5yZXN0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuaGFzTmV4dCgpKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IGVsc2UgaWYgKHRoaXMub2Zmc2V0ID09PSAwKSB7XG4gICAgcmV0dXJuIHRoaXMub3BzLnNsaWNlKHRoaXMuaW5kZXgpO1xuICB9IGVsc2Uge1xuICAgIHZhciBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4O1xuICAgIHZhciBuZXh0ID0gdGhpcy5uZXh0KCk7XG4gICAgdmFyIHJlc3QgPSB0aGlzLm9wcy5zbGljZSh0aGlzLmluZGV4KTtcbiAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgcmV0dXJuIFtuZXh0XS5jb25jYXQocmVzdCk7XG4gIH1cbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBsaWI7XG5cblxuLyoqKi8gfSksXG4vKiAyMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgY2xvbmUgPSAoZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9pbnN0YW5jZW9mKG9iaiwgdHlwZSkge1xuICByZXR1cm4gdHlwZSAhPSBudWxsICYmIG9iaiBpbnN0YW5jZW9mIHR5cGU7XG59XG5cbnZhciBuYXRpdmVNYXA7XG50cnkge1xuICBuYXRpdmVNYXAgPSBNYXA7XG59IGNhdGNoKF8pIHtcbiAgLy8gbWF5YmUgYSByZWZlcmVuY2UgZXJyb3IgYmVjYXVzZSBubyBgTWFwYC4gR2l2ZSBpdCBhIGR1bW15IHZhbHVlIHRoYXQgbm9cbiAgLy8gdmFsdWUgd2lsbCBldmVyIGJlIGFuIGluc3RhbmNlb2YuXG4gIG5hdGl2ZU1hcCA9IGZ1bmN0aW9uKCkge307XG59XG5cbnZhciBuYXRpdmVTZXQ7XG50cnkge1xuICBuYXRpdmVTZXQgPSBTZXQ7XG59IGNhdGNoKF8pIHtcbiAgbmF0aXZlU2V0ID0gZnVuY3Rpb24oKSB7fTtcbn1cblxudmFyIG5hdGl2ZVByb21pc2U7XG50cnkge1xuICBuYXRpdmVQcm9taXNlID0gUHJvbWlzZTtcbn0gY2F0Y2goXykge1xuICBuYXRpdmVQcm9taXNlID0gZnVuY3Rpb24oKSB7fTtcbn1cblxuLyoqXG4gKiBDbG9uZXMgKGNvcGllcykgYW4gT2JqZWN0IHVzaW5nIGRlZXAgY29weWluZy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHN1cHBvcnRzIGNpcmN1bGFyIHJlZmVyZW5jZXMgYnkgZGVmYXVsdCwgYnV0IGlmIHlvdSBhcmUgY2VydGFpblxuICogdGhlcmUgYXJlIG5vIGNpcmN1bGFyIHJlZmVyZW5jZXMgaW4geW91ciBvYmplY3QsIHlvdSBjYW4gc2F2ZSBzb21lIENQVSB0aW1lXG4gKiBieSBjYWxsaW5nIGNsb25lKG9iaiwgZmFsc2UpLlxuICpcbiAqIENhdXRpb246IGlmIGBjaXJjdWxhcmAgaXMgZmFsc2UgYW5kIGBwYXJlbnRgIGNvbnRhaW5zIGNpcmN1bGFyIHJlZmVyZW5jZXMsXG4gKiB5b3VyIHByb2dyYW0gbWF5IGVudGVyIGFuIGluZmluaXRlIGxvb3AgYW5kIGNyYXNoLlxuICpcbiAqIEBwYXJhbSBgcGFyZW50YCAtIHRoZSBvYmplY3QgdG8gYmUgY2xvbmVkXG4gKiBAcGFyYW0gYGNpcmN1bGFyYCAtIHNldCB0byB0cnVlIGlmIHRoZSBvYmplY3QgdG8gYmUgY2xvbmVkIG1heSBjb250YWluXG4gKiAgICBjaXJjdWxhciByZWZlcmVuY2VzLiAob3B0aW9uYWwgLSB0cnVlIGJ5IGRlZmF1bHQpXG4gKiBAcGFyYW0gYGRlcHRoYCAtIHNldCB0byBhIG51bWJlciBpZiB0aGUgb2JqZWN0IGlzIG9ubHkgdG8gYmUgY2xvbmVkIHRvXG4gKiAgICBhIHBhcnRpY3VsYXIgZGVwdGguIChvcHRpb25hbCAtIGRlZmF1bHRzIHRvIEluZmluaXR5KVxuICogQHBhcmFtIGBwcm90b3R5cGVgIC0gc2V0cyB0aGUgcHJvdG90eXBlIHRvIGJlIHVzZWQgd2hlbiBjbG9uaW5nIGFuIG9iamVjdC5cbiAqICAgIChvcHRpb25hbCAtIGRlZmF1bHRzIHRvIHBhcmVudCBwcm90b3R5cGUpLlxuICogQHBhcmFtIGBpbmNsdWRlTm9uRW51bWVyYWJsZWAgLSBzZXQgdG8gdHJ1ZSBpZiB0aGUgbm9uLWVudW1lcmFibGUgcHJvcGVydGllc1xuICogICAgc2hvdWxkIGJlIGNsb25lZCBhcyB3ZWxsLiBOb24tZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9uIHRoZSBwcm90b3R5cGVcbiAqICAgIGNoYWluIHdpbGwgYmUgaWdub3JlZC4gKG9wdGlvbmFsIC0gZmFsc2UgYnkgZGVmYXVsdClcbiovXG5mdW5jdGlvbiBjbG9uZShwYXJlbnQsIGNpcmN1bGFyLCBkZXB0aCwgcHJvdG90eXBlLCBpbmNsdWRlTm9uRW51bWVyYWJsZSkge1xuICBpZiAodHlwZW9mIGNpcmN1bGFyID09PSAnb2JqZWN0Jykge1xuICAgIGRlcHRoID0gY2lyY3VsYXIuZGVwdGg7XG4gICAgcHJvdG90eXBlID0gY2lyY3VsYXIucHJvdG90eXBlO1xuICAgIGluY2x1ZGVOb25FbnVtZXJhYmxlID0gY2lyY3VsYXIuaW5jbHVkZU5vbkVudW1lcmFibGU7XG4gICAgY2lyY3VsYXIgPSBjaXJjdWxhci5jaXJjdWxhcjtcbiAgfVxuICAvLyBtYWludGFpbiB0d28gYXJyYXlzIGZvciBjaXJjdWxhciByZWZlcmVuY2VzLCB3aGVyZSBjb3JyZXNwb25kaW5nIHBhcmVudHNcbiAgLy8gYW5kIGNoaWxkcmVuIGhhdmUgdGhlIHNhbWUgaW5kZXhcbiAgdmFyIGFsbFBhcmVudHMgPSBbXTtcbiAgdmFyIGFsbENoaWxkcmVuID0gW107XG5cbiAgdmFyIHVzZUJ1ZmZlciA9IHR5cGVvZiBCdWZmZXIgIT0gJ3VuZGVmaW5lZCc7XG5cbiAgaWYgKHR5cGVvZiBjaXJjdWxhciA9PSAndW5kZWZpbmVkJylcbiAgICBjaXJjdWxhciA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBkZXB0aCA9PSAndW5kZWZpbmVkJylcbiAgICBkZXB0aCA9IEluZmluaXR5O1xuXG4gIC8vIHJlY3Vyc2UgdGhpcyBmdW5jdGlvbiBzbyB3ZSBkb24ndCByZXNldCBhbGxQYXJlbnRzIGFuZCBhbGxDaGlsZHJlblxuICBmdW5jdGlvbiBfY2xvbmUocGFyZW50LCBkZXB0aCkge1xuICAgIC8vIGNsb25pbmcgbnVsbCBhbHdheXMgcmV0dXJucyBudWxsXG4gICAgaWYgKHBhcmVudCA9PT0gbnVsbClcbiAgICAgIHJldHVybiBudWxsO1xuXG4gICAgaWYgKGRlcHRoID09PSAwKVxuICAgICAgcmV0dXJuIHBhcmVudDtcblxuICAgIHZhciBjaGlsZDtcbiAgICB2YXIgcHJvdG87XG4gICAgaWYgKHR5cGVvZiBwYXJlbnQgIT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfVxuXG4gICAgaWYgKF9pbnN0YW5jZW9mKHBhcmVudCwgbmF0aXZlTWFwKSkge1xuICAgICAgY2hpbGQgPSBuZXcgbmF0aXZlTWFwKCk7XG4gICAgfSBlbHNlIGlmIChfaW5zdGFuY2VvZihwYXJlbnQsIG5hdGl2ZVNldCkpIHtcbiAgICAgIGNoaWxkID0gbmV3IG5hdGl2ZVNldCgpO1xuICAgIH0gZWxzZSBpZiAoX2luc3RhbmNlb2YocGFyZW50LCBuYXRpdmVQcm9taXNlKSkge1xuICAgICAgY2hpbGQgPSBuZXcgbmF0aXZlUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHBhcmVudC50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmVzb2x2ZShfY2xvbmUodmFsdWUsIGRlcHRoIC0gMSkpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICByZWplY3QoX2Nsb25lKGVyciwgZGVwdGggLSAxKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChjbG9uZS5fX2lzQXJyYXkocGFyZW50KSkge1xuICAgICAgY2hpbGQgPSBbXTtcbiAgICB9IGVsc2UgaWYgKGNsb25lLl9faXNSZWdFeHAocGFyZW50KSkge1xuICAgICAgY2hpbGQgPSBuZXcgUmVnRXhwKHBhcmVudC5zb3VyY2UsIF9fZ2V0UmVnRXhwRmxhZ3MocGFyZW50KSk7XG4gICAgICBpZiAocGFyZW50Lmxhc3RJbmRleCkgY2hpbGQubGFzdEluZGV4ID0gcGFyZW50Lmxhc3RJbmRleDtcbiAgICB9IGVsc2UgaWYgKGNsb25lLl9faXNEYXRlKHBhcmVudCkpIHtcbiAgICAgIGNoaWxkID0gbmV3IERhdGUocGFyZW50LmdldFRpbWUoKSk7XG4gICAgfSBlbHNlIGlmICh1c2VCdWZmZXIgJiYgQnVmZmVyLmlzQnVmZmVyKHBhcmVudCkpIHtcbiAgICAgIGlmIChCdWZmZXIuYWxsb2NVbnNhZmUpIHtcbiAgICAgICAgLy8gTm9kZS5qcyA+PSA0LjUuMFxuICAgICAgICBjaGlsZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShwYXJlbnQubGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE9sZGVyIE5vZGUuanMgdmVyc2lvbnNcbiAgICAgICAgY2hpbGQgPSBuZXcgQnVmZmVyKHBhcmVudC5sZW5ndGgpO1xuICAgICAgfVxuICAgICAgcGFyZW50LmNvcHkoY2hpbGQpO1xuICAgICAgcmV0dXJuIGNoaWxkO1xuICAgIH0gZWxzZSBpZiAoX2luc3RhbmNlb2YocGFyZW50LCBFcnJvcikpIHtcbiAgICAgIGNoaWxkID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIHByb3RvdHlwZSA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwYXJlbnQpO1xuICAgICAgICBjaGlsZCA9IE9iamVjdC5jcmVhdGUocHJvdG8pO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGNoaWxkID0gT2JqZWN0LmNyZWF0ZShwcm90b3R5cGUpO1xuICAgICAgICBwcm90byA9IHByb3RvdHlwZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2lyY3VsYXIpIHtcbiAgICAgIHZhciBpbmRleCA9IGFsbFBhcmVudHMuaW5kZXhPZihwYXJlbnQpO1xuXG4gICAgICBpZiAoaW5kZXggIT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIGFsbENoaWxkcmVuW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIGFsbFBhcmVudHMucHVzaChwYXJlbnQpO1xuICAgICAgYWxsQ2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgfVxuXG4gICAgaWYgKF9pbnN0YW5jZW9mKHBhcmVudCwgbmF0aXZlTWFwKSkge1xuICAgICAgcGFyZW50LmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICB2YXIga2V5Q2hpbGQgPSBfY2xvbmUoa2V5LCBkZXB0aCAtIDEpO1xuICAgICAgICB2YXIgdmFsdWVDaGlsZCA9IF9jbG9uZSh2YWx1ZSwgZGVwdGggLSAxKTtcbiAgICAgICAgY2hpbGQuc2V0KGtleUNoaWxkLCB2YWx1ZUNoaWxkKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoX2luc3RhbmNlb2YocGFyZW50LCBuYXRpdmVTZXQpKSB7XG4gICAgICBwYXJlbnQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgZW50cnlDaGlsZCA9IF9jbG9uZSh2YWx1ZSwgZGVwdGggLSAxKTtcbiAgICAgICAgY2hpbGQuYWRkKGVudHJ5Q2hpbGQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSBpbiBwYXJlbnQpIHtcbiAgICAgIHZhciBhdHRycztcbiAgICAgIGlmIChwcm90bykge1xuICAgICAgICBhdHRycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJvdG8sIGkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXR0cnMgJiYgYXR0cnMuc2V0ID09IG51bGwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjaGlsZFtpXSA9IF9jbG9uZShwYXJlbnRbaV0sIGRlcHRoIC0gMSk7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhwYXJlbnQpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIERvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgY2xvbmluZyBhIHN5bWJvbCBiZWNhdXNlIGl0IGlzIGEgcHJpbWl0aXZlLFxuICAgICAgICAvLyBsaWtlIGEgbnVtYmVyIG9yIHN0cmluZy5cbiAgICAgICAgdmFyIHN5bWJvbCA9IHN5bWJvbHNbaV07XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXJlbnQsIHN5bWJvbCk7XG4gICAgICAgIGlmIChkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLmVudW1lcmFibGUgJiYgIWluY2x1ZGVOb25FbnVtZXJhYmxlKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGRbc3ltYm9sXSA9IF9jbG9uZShwYXJlbnRbc3ltYm9sXSwgZGVwdGggLSAxKTtcbiAgICAgICAgaWYgKCFkZXNjcmlwdG9yLmVudW1lcmFibGUpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2hpbGQsIHN5bWJvbCwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpbmNsdWRlTm9uRW51bWVyYWJsZSkge1xuICAgICAgdmFyIGFsbFByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwYXJlbnQpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGxQcm9wZXJ0eU5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwcm9wZXJ0eU5hbWUgPSBhbGxQcm9wZXJ0eU5hbWVzW2ldO1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocGFyZW50LCBwcm9wZXJ0eU5hbWUpO1xuICAgICAgICBpZiAoZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGUpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjaGlsZFtwcm9wZXJ0eU5hbWVdID0gX2Nsb25lKHBhcmVudFtwcm9wZXJ0eU5hbWVdLCBkZXB0aCAtIDEpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2hpbGQsIHByb3BlcnR5TmFtZSwge1xuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjaGlsZDtcbiAgfVxuXG4gIHJldHVybiBfY2xvbmUocGFyZW50LCBkZXB0aCk7XG59XG5cbi8qKlxuICogU2ltcGxlIGZsYXQgY2xvbmUgdXNpbmcgcHJvdG90eXBlLCBhY2NlcHRzIG9ubHkgb2JqZWN0cywgdXNlZnVsbCBmb3IgcHJvcGVydHlcbiAqIG92ZXJyaWRlIG9uIEZMQVQgY29uZmlndXJhdGlvbiBvYmplY3QgKG5vIG5lc3RlZCBwcm9wcykuXG4gKlxuICogVVNFIFdJVEggQ0FVVElPTiEgVGhpcyBtYXkgbm90IGJlaGF2ZSBhcyB5b3Ugd2lzaCBpZiB5b3UgZG8gbm90IGtub3cgaG93IHRoaXNcbiAqIHdvcmtzLlxuICovXG5jbG9uZS5jbG9uZVByb3RvdHlwZSA9IGZ1bmN0aW9uIGNsb25lUHJvdG90eXBlKHBhcmVudCkge1xuICBpZiAocGFyZW50ID09PSBudWxsKVxuICAgIHJldHVybiBudWxsO1xuXG4gIHZhciBjID0gZnVuY3Rpb24gKCkge307XG4gIGMucHJvdG90eXBlID0gcGFyZW50O1xuICByZXR1cm4gbmV3IGMoKTtcbn07XG5cbi8vIHByaXZhdGUgdXRpbGl0eSBmdW5jdGlvbnNcblxuZnVuY3Rpb24gX19vYmpUb1N0cihvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG5jbG9uZS5fX29ialRvU3RyID0gX19vYmpUb1N0cjtcblxuZnVuY3Rpb24gX19pc0RhdGUobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09ICdvYmplY3QnICYmIF9fb2JqVG9TdHIobykgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmNsb25lLl9faXNEYXRlID0gX19pc0RhdGU7XG5cbmZ1bmN0aW9uIF9faXNBcnJheShvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgX19vYmpUb1N0cihvKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cbmNsb25lLl9faXNBcnJheSA9IF9faXNBcnJheTtcblxuZnVuY3Rpb24gX19pc1JlZ0V4cChvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgX19vYmpUb1N0cihvKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5jbG9uZS5fX2lzUmVnRXhwID0gX19pc1JlZ0V4cDtcblxuZnVuY3Rpb24gX19nZXRSZWdFeHBGbGFncyhyZSkge1xuICB2YXIgZmxhZ3MgPSAnJztcbiAgaWYgKHJlLmdsb2JhbCkgZmxhZ3MgKz0gJ2cnO1xuICBpZiAocmUuaWdub3JlQ2FzZSkgZmxhZ3MgKz0gJ2knO1xuICBpZiAocmUubXVsdGlsaW5lKSBmbGFncyArPSAnbSc7XG4gIHJldHVybiBmbGFncztcbn1cbmNsb25lLl9fZ2V0UmVnRXhwRmxhZ3MgPSBfX2dldFJlZ0V4cEZsYWdzO1xuXG5yZXR1cm4gY2xvbmU7XG59KSgpO1xuXG5pZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBjbG9uZTtcbn1cblxuXG4vKioqLyB9KSxcbi8qIDIyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbnZhciBfZW1pdHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbnZhciBfZW1pdHRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lbWl0dGVyKTtcblxudmFyIF9ibG9jayA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfYmxvY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYmxvY2spO1xuXG52YXIgX2JyZWFrID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cbnZhciBfYnJlYWsyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYnJlYWspO1xuXG52YXIgX2NvZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcblxudmFyIF9jb2RlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvZGUpO1xuXG52YXIgX2NvbnRhaW5lciA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpO1xuXG52YXIgX2NvbnRhaW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb250YWluZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmZ1bmN0aW9uIGlzTGluZShibG90KSB7XG4gIHJldHVybiBibG90IGluc3RhbmNlb2YgX2Jsb2NrMi5kZWZhdWx0IHx8IGJsb3QgaW5zdGFuY2VvZiBfYmxvY2suQmxvY2tFbWJlZDtcbn1cblxudmFyIFNjcm9sbCA9IGZ1bmN0aW9uIChfUGFyY2htZW50JFNjcm9sbCkge1xuICBfaW5oZXJpdHMoU2Nyb2xsLCBfUGFyY2htZW50JFNjcm9sbCk7XG5cbiAgZnVuY3Rpb24gU2Nyb2xsKGRvbU5vZGUsIGNvbmZpZykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTY3JvbGwpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFNjcm9sbC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNjcm9sbCkpLmNhbGwodGhpcywgZG9tTm9kZSkpO1xuXG4gICAgX3RoaXMuZW1pdHRlciA9IGNvbmZpZy5lbWl0dGVyO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNvbmZpZy53aGl0ZWxpc3QpKSB7XG4gICAgICBfdGhpcy53aGl0ZWxpc3QgPSBjb25maWcud2hpdGVsaXN0LnJlZHVjZShmdW5jdGlvbiAod2hpdGVsaXN0LCBmb3JtYXQpIHtcbiAgICAgICAgd2hpdGVsaXN0W2Zvcm1hdF0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gd2hpdGVsaXN0O1xuICAgICAgfSwge30pO1xuICAgIH1cbiAgICAvLyBTb21lIHJlYXNvbiBmaXhlcyBjb21wb3NpdGlvbiBpc3N1ZXMgd2l0aCBjaGFyYWN0ZXIgbGFuZ3VhZ2VzIGluIFdpbmRvd3MvQ2hyb21lLCBTYWZhcmlcbiAgICBfdGhpcy5kb21Ob2RlLmFkZEV2ZW50TGlzdGVuZXIoJ0RPTU5vZGVJbnNlcnRlZCcsIGZ1bmN0aW9uICgpIHt9KTtcbiAgICBfdGhpcy5vcHRpbWl6ZSgpO1xuICAgIF90aGlzLmVuYWJsZSgpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTY3JvbGwsIFt7XG4gICAga2V5OiAnYmF0Y2hTdGFydCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGJhdGNoU3RhcnQoKSB7XG4gICAgICB0aGlzLmJhdGNoID0gdHJ1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdiYXRjaEVuZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGJhdGNoRW5kKCkge1xuICAgICAgdGhpcy5iYXRjaCA9IGZhbHNlO1xuICAgICAgdGhpcy5vcHRpbWl6ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RlbGV0ZUF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlQXQoaW5kZXgsIGxlbmd0aCkge1xuICAgICAgdmFyIF9saW5lID0gdGhpcy5saW5lKGluZGV4KSxcbiAgICAgICAgICBfbGluZTIgPSBfc2xpY2VkVG9BcnJheShfbGluZSwgMiksXG4gICAgICAgICAgZmlyc3QgPSBfbGluZTJbMF0sXG4gICAgICAgICAgb2Zmc2V0ID0gX2xpbmUyWzFdO1xuXG4gICAgICB2YXIgX2xpbmUzID0gdGhpcy5saW5lKGluZGV4ICsgbGVuZ3RoKSxcbiAgICAgICAgICBfbGluZTQgPSBfc2xpY2VkVG9BcnJheShfbGluZTMsIDEpLFxuICAgICAgICAgIGxhc3QgPSBfbGluZTRbMF07XG5cbiAgICAgIF9nZXQoU2Nyb2xsLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNjcm9sbC5wcm90b3R5cGUpLCAnZGVsZXRlQXQnLCB0aGlzKS5jYWxsKHRoaXMsIGluZGV4LCBsZW5ndGgpO1xuICAgICAgaWYgKGxhc3QgIT0gbnVsbCAmJiBmaXJzdCAhPT0gbGFzdCAmJiBvZmZzZXQgPiAwKSB7XG4gICAgICAgIGlmIChmaXJzdCBpbnN0YW5jZW9mIF9ibG9jay5CbG9ja0VtYmVkIHx8IGxhc3QgaW5zdGFuY2VvZiBfYmxvY2suQmxvY2tFbWJlZCkge1xuICAgICAgICAgIHRoaXMub3B0aW1pemUoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpcnN0IGluc3RhbmNlb2YgX2NvZGUyLmRlZmF1bHQpIHtcbiAgICAgICAgICB2YXIgbmV3bGluZUluZGV4ID0gZmlyc3QubmV3bGluZUluZGV4KGZpcnN0Lmxlbmd0aCgpLCB0cnVlKTtcbiAgICAgICAgICBpZiAobmV3bGluZUluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIGZpcnN0ID0gZmlyc3Quc3BsaXQobmV3bGluZUluZGV4ICsgMSk7XG4gICAgICAgICAgICBpZiAoZmlyc3QgPT09IGxhc3QpIHtcbiAgICAgICAgICAgICAgdGhpcy5vcHRpbWl6ZSgpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGxhc3QgaW5zdGFuY2VvZiBfY29kZTIuZGVmYXVsdCkge1xuICAgICAgICAgIHZhciBfbmV3bGluZUluZGV4ID0gbGFzdC5uZXdsaW5lSW5kZXgoMCk7XG4gICAgICAgICAgaWYgKF9uZXdsaW5lSW5kZXggPiAtMSkge1xuICAgICAgICAgICAgbGFzdC5zcGxpdChfbmV3bGluZUluZGV4ICsgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciByZWYgPSBsYXN0LmNoaWxkcmVuLmhlYWQgaW5zdGFuY2VvZiBfYnJlYWsyLmRlZmF1bHQgPyBudWxsIDogbGFzdC5jaGlsZHJlbi5oZWFkO1xuICAgICAgICBmaXJzdC5tb3ZlQ2hpbGRyZW4obGFzdCwgcmVmKTtcbiAgICAgICAgZmlyc3QucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgICB0aGlzLm9wdGltaXplKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZW5hYmxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgICAgdmFyIGVuYWJsZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRydWU7XG5cbiAgICAgIHRoaXMuZG9tTm9kZS5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsIGVuYWJsZWQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Zvcm1hdEF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0QXQoaW5kZXgsIGxlbmd0aCwgZm9ybWF0LCB2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMud2hpdGVsaXN0ICE9IG51bGwgJiYgIXRoaXMud2hpdGVsaXN0W2Zvcm1hdF0pIHJldHVybjtcbiAgICAgIF9nZXQoU2Nyb2xsLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNjcm9sbC5wcm90b3R5cGUpLCAnZm9ybWF0QXQnLCB0aGlzKS5jYWxsKHRoaXMsIGluZGV4LCBsZW5ndGgsIGZvcm1hdCwgdmFsdWUpO1xuICAgICAgdGhpcy5vcHRpbWl6ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2luc2VydEF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5zZXJ0QXQoaW5kZXgsIHZhbHVlLCBkZWYpIHtcbiAgICAgIGlmIChkZWYgIT0gbnVsbCAmJiB0aGlzLndoaXRlbGlzdCAhPSBudWxsICYmICF0aGlzLndoaXRlbGlzdFt2YWx1ZV0pIHJldHVybjtcbiAgICAgIGlmIChpbmRleCA+PSB0aGlzLmxlbmd0aCgpKSB7XG4gICAgICAgIGlmIChkZWYgPT0gbnVsbCB8fCBfcGFyY2htZW50Mi5kZWZhdWx0LnF1ZXJ5KHZhbHVlLCBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLkJMT0NLKSA9PSBudWxsKSB7XG4gICAgICAgICAgdmFyIGJsb3QgPSBfcGFyY2htZW50Mi5kZWZhdWx0LmNyZWF0ZSh0aGlzLnN0YXRpY3MuZGVmYXVsdENoaWxkKTtcbiAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKGJsb3QpO1xuICAgICAgICAgIGlmIChkZWYgPT0gbnVsbCAmJiB2YWx1ZS5lbmRzV2l0aCgnXFxuJykpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgLTEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBibG90Lmluc2VydEF0KDAsIHZhbHVlLCBkZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBlbWJlZCA9IF9wYXJjaG1lbnQyLmRlZmF1bHQuY3JlYXRlKHZhbHVlLCBkZWYpO1xuICAgICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoZW1iZWQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfZ2V0KFNjcm9sbC5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTY3JvbGwucHJvdG90eXBlKSwgJ2luc2VydEF0JywgdGhpcykuY2FsbCh0aGlzLCBpbmRleCwgdmFsdWUsIGRlZik7XG4gICAgICB9XG4gICAgICB0aGlzLm9wdGltaXplKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaW5zZXJ0QmVmb3JlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5zZXJ0QmVmb3JlKGJsb3QsIHJlZikge1xuICAgICAgaWYgKGJsb3Quc3RhdGljcy5zY29wZSA9PT0gX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5JTkxJTkVfQkxPVCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IF9wYXJjaG1lbnQyLmRlZmF1bHQuY3JlYXRlKHRoaXMuc3RhdGljcy5kZWZhdWx0Q2hpbGQpO1xuICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGJsb3QpO1xuICAgICAgICBibG90ID0gd3JhcHBlcjtcbiAgICAgIH1cbiAgICAgIF9nZXQoU2Nyb2xsLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNjcm9sbC5wcm90b3R5cGUpLCAnaW5zZXJ0QmVmb3JlJywgdGhpcykuY2FsbCh0aGlzLCBibG90LCByZWYpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2xlYWYnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsZWFmKGluZGV4KSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXRoKGluZGV4KS5wb3AoKSB8fCBbbnVsbCwgLTFdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2xpbmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaW5lKGluZGV4KSB7XG4gICAgICBpZiAoaW5kZXggPT09IHRoaXMubGVuZ3RoKCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGluZShpbmRleCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuZGVzY2VuZGFudChpc0xpbmUsIGluZGV4KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdsaW5lcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpbmVzKCkge1xuICAgICAgdmFyIGluZGV4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogTnVtYmVyLk1BWF9WQUxVRTtcblxuICAgICAgdmFyIGdldExpbmVzID0gZnVuY3Rpb24gZ2V0TGluZXMoYmxvdCwgaW5kZXgsIGxlbmd0aCkge1xuICAgICAgICB2YXIgbGluZXMgPSBbXSxcbiAgICAgICAgICAgIGxlbmd0aExlZnQgPSBsZW5ndGg7XG4gICAgICAgIGJsb3QuY2hpbGRyZW4uZm9yRWFjaEF0KGluZGV4LCBsZW5ndGgsIGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgsIGxlbmd0aCkge1xuICAgICAgICAgIGlmIChpc0xpbmUoY2hpbGQpKSB7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKGNoaWxkKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNoaWxkIGluc3RhbmNlb2YgX3BhcmNobWVudDIuZGVmYXVsdC5Db250YWluZXIpIHtcbiAgICAgICAgICAgIGxpbmVzID0gbGluZXMuY29uY2F0KGdldExpbmVzKGNoaWxkLCBpbmRleCwgbGVuZ3RoTGVmdCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGhMZWZ0IC09IGxlbmd0aDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBsaW5lcztcbiAgICAgIH07XG4gICAgICByZXR1cm4gZ2V0TGluZXModGhpcywgaW5kZXgsIGxlbmd0aCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnb3B0aW1pemUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvcHRpbWl6ZSgpIHtcbiAgICAgIHZhciBtdXRhdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuICAgICAgdmFyIGNvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgICBpZiAodGhpcy5iYXRjaCA9PT0gdHJ1ZSkgcmV0dXJuO1xuICAgICAgX2dldChTY3JvbGwucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2Nyb2xsLnByb3RvdHlwZSksICdvcHRpbWl6ZScsIHRoaXMpLmNhbGwodGhpcywgbXV0YXRpb25zLCBjb250ZXh0KTtcbiAgICAgIGlmIChtdXRhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdChfZW1pdHRlcjIuZGVmYXVsdC5ldmVudHMuU0NST0xMX09QVElNSVpFLCBtdXRhdGlvbnMsIGNvbnRleHQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BhdGgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXRoKGluZGV4KSB7XG4gICAgICByZXR1cm4gX2dldChTY3JvbGwucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2Nyb2xsLnByb3RvdHlwZSksICdwYXRoJywgdGhpcykuY2FsbCh0aGlzLCBpbmRleCkuc2xpY2UoMSk7IC8vIEV4Y2x1ZGUgc2VsZlxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShtdXRhdGlvbnMpIHtcbiAgICAgIGlmICh0aGlzLmJhdGNoID09PSB0cnVlKSByZXR1cm47XG4gICAgICB2YXIgc291cmNlID0gX2VtaXR0ZXIyLmRlZmF1bHQuc291cmNlcy5VU0VSO1xuICAgICAgaWYgKHR5cGVvZiBtdXRhdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHNvdXJjZSA9IG11dGF0aW9ucztcbiAgICAgIH1cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShtdXRhdGlvbnMpKSB7XG4gICAgICAgIG11dGF0aW9ucyA9IHRoaXMub2JzZXJ2ZXIudGFrZVJlY29yZHMoKTtcbiAgICAgIH1cbiAgICAgIGlmIChtdXRhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdChfZW1pdHRlcjIuZGVmYXVsdC5ldmVudHMuU0NST0xMX0JFRk9SRV9VUERBVEUsIHNvdXJjZSwgbXV0YXRpb25zKTtcbiAgICAgIH1cbiAgICAgIF9nZXQoU2Nyb2xsLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNjcm9sbC5wcm90b3R5cGUpLCAndXBkYXRlJywgdGhpcykuY2FsbCh0aGlzLCBtdXRhdGlvbnMuY29uY2F0KFtdKSk7IC8vIHBhc3MgY29weVxuICAgICAgaWYgKG11dGF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KF9lbWl0dGVyMi5kZWZhdWx0LmV2ZW50cy5TQ1JPTExfVVBEQVRFLCBzb3VyY2UsIG11dGF0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNjcm9sbDtcbn0oX3BhcmNobWVudDIuZGVmYXVsdC5TY3JvbGwpO1xuXG5TY3JvbGwuYmxvdE5hbWUgPSAnc2Nyb2xsJztcblNjcm9sbC5jbGFzc05hbWUgPSAncWwtZWRpdG9yJztcblNjcm9sbC50YWdOYW1lID0gJ0RJVic7XG5TY3JvbGwuZGVmYXVsdENoaWxkID0gJ2Jsb2NrJztcblNjcm9sbC5hbGxvd2VkQ2hpbGRyZW4gPSBbX2Jsb2NrMi5kZWZhdWx0LCBfYmxvY2suQmxvY2tFbWJlZCwgX2NvbnRhaW5lcjIuZGVmYXVsdF07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFNjcm9sbDtcblxuLyoqKi8gfSksXG4vKiAyMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5TSE9SVEtFWSA9IGV4cG9ydHMuZGVmYXVsdCA9IHVuZGVmaW5lZDtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfY2xvbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcblxudmFyIF9jbG9uZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbG9uZSk7XG5cbnZhciBfZGVlcEVxdWFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cbnZhciBfZGVlcEVxdWFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZXBFcXVhbCk7XG5cbnZhciBfZXh0ZW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIF9leHRlbmQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kKTtcblxudmFyIF9xdWlsbERlbHRhID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxudmFyIF9xdWlsbERlbHRhMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1aWxsRGVsdGEpO1xuXG52YXIgX29wID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5cbnZhciBfb3AyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb3ApO1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbnZhciBfcXVpbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG52YXIgX3F1aWxsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1aWxsKTtcblxudmFyIF9sb2dnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblxudmFyIF9sb2dnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9nZ2VyKTtcblxudmFyIF9tb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXG52YXIgX21vZHVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tb2R1bGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBkZWJ1ZyA9ICgwLCBfbG9nZ2VyMi5kZWZhdWx0KSgncXVpbGw6a2V5Ym9hcmQnKTtcblxudmFyIFNIT1JUS0VZID0gL01hYy9pLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKSA/ICdtZXRhS2V5JyA6ICdjdHJsS2V5JztcblxudmFyIEtleWJvYXJkID0gZnVuY3Rpb24gKF9Nb2R1bGUpIHtcbiAgX2luaGVyaXRzKEtleWJvYXJkLCBfTW9kdWxlKTtcblxuICBfY3JlYXRlQ2xhc3MoS2V5Ym9hcmQsIG51bGwsIFt7XG4gICAga2V5OiAnbWF0Y2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtYXRjaChldnQsIGJpbmRpbmcpIHtcbiAgICAgIGJpbmRpbmcgPSBub3JtYWxpemUoYmluZGluZyk7XG4gICAgICBpZiAoWydhbHRLZXknLCAnY3RybEtleScsICdtZXRhS2V5JywgJ3NoaWZ0S2V5J10uc29tZShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWJpbmRpbmdba2V5XSAhPT0gZXZ0W2tleV0gJiYgYmluZGluZ1trZXldICE9PSBudWxsO1xuICAgICAgfSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJpbmRpbmcua2V5ID09PSAoZXZ0LndoaWNoIHx8IGV2dC5rZXlDb2RlKTtcbiAgICB9XG4gIH1dKTtcblxuICBmdW5jdGlvbiBLZXlib2FyZChxdWlsbCwgb3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBLZXlib2FyZCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoS2V5Ym9hcmQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihLZXlib2FyZCkpLmNhbGwodGhpcywgcXVpbGwsIG9wdGlvbnMpKTtcblxuICAgIF90aGlzLmJpbmRpbmdzID0ge307XG4gICAgT2JqZWN0LmtleXMoX3RoaXMub3B0aW9ucy5iaW5kaW5ncykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgaWYgKG5hbWUgPT09ICdsaXN0IGF1dG9maWxsJyAmJiBxdWlsbC5zY3JvbGwud2hpdGVsaXN0ICE9IG51bGwgJiYgIXF1aWxsLnNjcm9sbC53aGl0ZWxpc3RbJ2xpc3QnXSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoX3RoaXMub3B0aW9ucy5iaW5kaW5nc1tuYW1lXSkge1xuICAgICAgICBfdGhpcy5hZGRCaW5kaW5nKF90aGlzLm9wdGlvbnMuYmluZGluZ3NbbmFtZV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF90aGlzLmFkZEJpbmRpbmcoeyBrZXk6IEtleWJvYXJkLmtleXMuRU5URVIsIHNoaWZ0S2V5OiBudWxsIH0sIGhhbmRsZUVudGVyKTtcbiAgICBfdGhpcy5hZGRCaW5kaW5nKHsga2V5OiBLZXlib2FyZC5rZXlzLkVOVEVSLCBtZXRhS2V5OiBudWxsLCBjdHJsS2V5OiBudWxsLCBhbHRLZXk6IG51bGwgfSwgZnVuY3Rpb24gKCkge30pO1xuICAgIGlmICgvRmlyZWZveC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcbiAgICAgIC8vIE5lZWQgdG8gaGFuZGxlIGRlbGV0ZSBhbmQgYmFja3NwYWNlIGZvciBGaXJlZm94IGluIHRoZSBnZW5lcmFsIGNhc2UgIzExNzFcbiAgICAgIF90aGlzLmFkZEJpbmRpbmcoeyBrZXk6IEtleWJvYXJkLmtleXMuQkFDS1NQQUNFIH0sIHsgY29sbGFwc2VkOiB0cnVlIH0sIGhhbmRsZUJhY2tzcGFjZSk7XG4gICAgICBfdGhpcy5hZGRCaW5kaW5nKHsga2V5OiBLZXlib2FyZC5rZXlzLkRFTEVURSB9LCB7IGNvbGxhcHNlZDogdHJ1ZSB9LCBoYW5kbGVEZWxldGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpcy5hZGRCaW5kaW5nKHsga2V5OiBLZXlib2FyZC5rZXlzLkJBQ0tTUEFDRSB9LCB7IGNvbGxhcHNlZDogdHJ1ZSwgcHJlZml4OiAvXi4/JC8gfSwgaGFuZGxlQmFja3NwYWNlKTtcbiAgICAgIF90aGlzLmFkZEJpbmRpbmcoeyBrZXk6IEtleWJvYXJkLmtleXMuREVMRVRFIH0sIHsgY29sbGFwc2VkOiB0cnVlLCBzdWZmaXg6IC9eLj8kLyB9LCBoYW5kbGVEZWxldGUpO1xuICAgIH1cbiAgICBfdGhpcy5hZGRCaW5kaW5nKHsga2V5OiBLZXlib2FyZC5rZXlzLkJBQ0tTUEFDRSB9LCB7IGNvbGxhcHNlZDogZmFsc2UgfSwgaGFuZGxlRGVsZXRlUmFuZ2UpO1xuICAgIF90aGlzLmFkZEJpbmRpbmcoeyBrZXk6IEtleWJvYXJkLmtleXMuREVMRVRFIH0sIHsgY29sbGFwc2VkOiBmYWxzZSB9LCBoYW5kbGVEZWxldGVSYW5nZSk7XG4gICAgX3RoaXMuYWRkQmluZGluZyh7IGtleTogS2V5Ym9hcmQua2V5cy5CQUNLU1BBQ0UsIGFsdEtleTogbnVsbCwgY3RybEtleTogbnVsbCwgbWV0YUtleTogbnVsbCwgc2hpZnRLZXk6IG51bGwgfSwgeyBjb2xsYXBzZWQ6IHRydWUsIG9mZnNldDogMCB9LCBoYW5kbGVCYWNrc3BhY2UpO1xuICAgIF90aGlzLmxpc3RlbigpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhLZXlib2FyZCwgW3tcbiAgICBrZXk6ICdhZGRCaW5kaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQmluZGluZyhrZXkpIHtcbiAgICAgIHZhciBjb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHZhciBoYW5kbGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblxuICAgICAgdmFyIGJpbmRpbmcgPSBub3JtYWxpemUoa2V5KTtcbiAgICAgIGlmIChiaW5kaW5nID09IG51bGwgfHwgYmluZGluZy5rZXkgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZGVidWcud2FybignQXR0ZW1wdGVkIHRvIGFkZCBpbnZhbGlkIGtleWJvYXJkIGJpbmRpbmcnLCBiaW5kaW5nKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgY29udGV4dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjb250ZXh0ID0geyBoYW5kbGVyOiBjb250ZXh0IH07XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaGFuZGxlciA9IHsgaGFuZGxlcjogaGFuZGxlciB9O1xuICAgICAgfVxuICAgICAgYmluZGluZyA9ICgwLCBfZXh0ZW5kMi5kZWZhdWx0KShiaW5kaW5nLCBjb250ZXh0LCBoYW5kbGVyKTtcbiAgICAgIHRoaXMuYmluZGluZ3NbYmluZGluZy5rZXldID0gdGhpcy5iaW5kaW5nc1tiaW5kaW5nLmtleV0gfHwgW107XG4gICAgICB0aGlzLmJpbmRpbmdzW2JpbmRpbmcua2V5XS5wdXNoKGJpbmRpbmcpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2xpc3RlbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RlbigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB0aGlzLnF1aWxsLnJvb3QuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgaWYgKGV2dC5kZWZhdWx0UHJldmVudGVkKSByZXR1cm47XG4gICAgICAgIHZhciB3aGljaCA9IGV2dC53aGljaCB8fCBldnQua2V5Q29kZTtcbiAgICAgICAgdmFyIGJpbmRpbmdzID0gKF90aGlzMi5iaW5kaW5nc1t3aGljaF0gfHwgW10pLmZpbHRlcihmdW5jdGlvbiAoYmluZGluZykge1xuICAgICAgICAgIHJldHVybiBLZXlib2FyZC5tYXRjaChldnQsIGJpbmRpbmcpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGJpbmRpbmdzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICAgICB2YXIgcmFuZ2UgPSBfdGhpczIucXVpbGwuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgIGlmIChyYW5nZSA9PSBudWxsIHx8ICFfdGhpczIucXVpbGwuaGFzRm9jdXMoKSkgcmV0dXJuO1xuXG4gICAgICAgIHZhciBfcXVpbGwkZ2V0TGluZSA9IF90aGlzMi5xdWlsbC5nZXRMaW5lKHJhbmdlLmluZGV4KSxcbiAgICAgICAgICAgIF9xdWlsbCRnZXRMaW5lMiA9IF9zbGljZWRUb0FycmF5KF9xdWlsbCRnZXRMaW5lLCAyKSxcbiAgICAgICAgICAgIGxpbmUgPSBfcXVpbGwkZ2V0TGluZTJbMF0sXG4gICAgICAgICAgICBvZmZzZXQgPSBfcXVpbGwkZ2V0TGluZTJbMV07XG5cbiAgICAgICAgdmFyIF9xdWlsbCRnZXRMZWFmID0gX3RoaXMyLnF1aWxsLmdldExlYWYocmFuZ2UuaW5kZXgpLFxuICAgICAgICAgICAgX3F1aWxsJGdldExlYWYyID0gX3NsaWNlZFRvQXJyYXkoX3F1aWxsJGdldExlYWYsIDIpLFxuICAgICAgICAgICAgbGVhZlN0YXJ0ID0gX3F1aWxsJGdldExlYWYyWzBdLFxuICAgICAgICAgICAgb2Zmc2V0U3RhcnQgPSBfcXVpbGwkZ2V0TGVhZjJbMV07XG5cbiAgICAgICAgdmFyIF9yZWYgPSByYW5nZS5sZW5ndGggPT09IDAgPyBbbGVhZlN0YXJ0LCBvZmZzZXRTdGFydF0gOiBfdGhpczIucXVpbGwuZ2V0TGVhZihyYW5nZS5pbmRleCArIHJhbmdlLmxlbmd0aCksXG4gICAgICAgICAgICBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAgICAgICAgbGVhZkVuZCA9IF9yZWYyWzBdLFxuICAgICAgICAgICAgb2Zmc2V0RW5kID0gX3JlZjJbMV07XG5cbiAgICAgICAgdmFyIHByZWZpeFRleHQgPSBsZWFmU3RhcnQgaW5zdGFuY2VvZiBfcGFyY2htZW50Mi5kZWZhdWx0LlRleHQgPyBsZWFmU3RhcnQudmFsdWUoKS5zbGljZSgwLCBvZmZzZXRTdGFydCkgOiAnJztcbiAgICAgICAgdmFyIHN1ZmZpeFRleHQgPSBsZWFmRW5kIGluc3RhbmNlb2YgX3BhcmNobWVudDIuZGVmYXVsdC5UZXh0ID8gbGVhZkVuZC52YWx1ZSgpLnNsaWNlKG9mZnNldEVuZCkgOiAnJztcbiAgICAgICAgdmFyIGN1ckNvbnRleHQgPSB7XG4gICAgICAgICAgY29sbGFwc2VkOiByYW5nZS5sZW5ndGggPT09IDAsXG4gICAgICAgICAgZW1wdHk6IHJhbmdlLmxlbmd0aCA9PT0gMCAmJiBsaW5lLmxlbmd0aCgpIDw9IDEsXG4gICAgICAgICAgZm9ybWF0OiBfdGhpczIucXVpbGwuZ2V0Rm9ybWF0KHJhbmdlKSxcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgICBwcmVmaXg6IHByZWZpeFRleHQsXG4gICAgICAgICAgc3VmZml4OiBzdWZmaXhUZXh0XG4gICAgICAgIH07XG4gICAgICAgIHZhciBwcmV2ZW50ZWQgPSBiaW5kaW5ncy5zb21lKGZ1bmN0aW9uIChiaW5kaW5nKSB7XG4gICAgICAgICAgaWYgKGJpbmRpbmcuY29sbGFwc2VkICE9IG51bGwgJiYgYmluZGluZy5jb2xsYXBzZWQgIT09IGN1ckNvbnRleHQuY29sbGFwc2VkKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgaWYgKGJpbmRpbmcuZW1wdHkgIT0gbnVsbCAmJiBiaW5kaW5nLmVtcHR5ICE9PSBjdXJDb250ZXh0LmVtcHR5KSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgaWYgKGJpbmRpbmcub2Zmc2V0ICE9IG51bGwgJiYgYmluZGluZy5vZmZzZXQgIT09IGN1ckNvbnRleHQub2Zmc2V0KSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYmluZGluZy5mb3JtYXQpKSB7XG4gICAgICAgICAgICAvLyBhbnkgZm9ybWF0IGlzIHByZXNlbnRcbiAgICAgICAgICAgIGlmIChiaW5kaW5nLmZvcm1hdC5ldmVyeShmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgICByZXR1cm4gY3VyQ29udGV4dC5mb3JtYXRbbmFtZV0gPT0gbnVsbDtcbiAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKF90eXBlb2YoYmluZGluZy5mb3JtYXQpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgLy8gYWxsIGZvcm1hdHMgbXVzdCBtYXRjaFxuICAgICAgICAgICAgaWYgKCFPYmplY3Qua2V5cyhiaW5kaW5nLmZvcm1hdCkuZXZlcnkoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgaWYgKGJpbmRpbmcuZm9ybWF0W25hbWVdID09PSB0cnVlKSByZXR1cm4gY3VyQ29udGV4dC5mb3JtYXRbbmFtZV0gIT0gbnVsbDtcbiAgICAgICAgICAgICAgaWYgKGJpbmRpbmcuZm9ybWF0W25hbWVdID09PSBmYWxzZSkgcmV0dXJuIGN1ckNvbnRleHQuZm9ybWF0W25hbWVdID09IG51bGw7XG4gICAgICAgICAgICAgIHJldHVybiAoMCwgX2RlZXBFcXVhbDIuZGVmYXVsdCkoYmluZGluZy5mb3JtYXRbbmFtZV0sIGN1ckNvbnRleHQuZm9ybWF0W25hbWVdKTtcbiAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGJpbmRpbmcucHJlZml4ICE9IG51bGwgJiYgIWJpbmRpbmcucHJlZml4LnRlc3QoY3VyQ29udGV4dC5wcmVmaXgpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgaWYgKGJpbmRpbmcuc3VmZml4ICE9IG51bGwgJiYgIWJpbmRpbmcuc3VmZml4LnRlc3QoY3VyQ29udGV4dC5zdWZmaXgpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIGJpbmRpbmcuaGFuZGxlci5jYWxsKF90aGlzMiwgcmFuZ2UsIGN1ckNvbnRleHQpICE9PSB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHByZXZlbnRlZCkge1xuICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gS2V5Ym9hcmQ7XG59KF9tb2R1bGUyLmRlZmF1bHQpO1xuXG5LZXlib2FyZC5rZXlzID0ge1xuICBCQUNLU1BBQ0U6IDgsXG4gIFRBQjogOSxcbiAgRU5URVI6IDEzLFxuICBFU0NBUEU6IDI3LFxuICBMRUZUOiAzNyxcbiAgVVA6IDM4LFxuICBSSUdIVDogMzksXG4gIERPV046IDQwLFxuICBERUxFVEU6IDQ2XG59O1xuXG5LZXlib2FyZC5ERUZBVUxUUyA9IHtcbiAgYmluZGluZ3M6IHtcbiAgICAnYm9sZCc6IG1ha2VGb3JtYXRIYW5kbGVyKCdib2xkJyksXG4gICAgJ2l0YWxpYyc6IG1ha2VGb3JtYXRIYW5kbGVyKCdpdGFsaWMnKSxcbiAgICAndW5kZXJsaW5lJzogbWFrZUZvcm1hdEhhbmRsZXIoJ3VuZGVybGluZScpLFxuICAgICdpbmRlbnQnOiB7XG4gICAgICAvLyBoaWdobGlnaHQgdGFiIG9yIHRhYiBhdCBiZWdpbm5pbmcgb2YgbGlzdCwgaW5kZW50IG9yIGJsb2NrcXVvdGVcbiAgICAgIGtleTogS2V5Ym9hcmQua2V5cy5UQUIsXG4gICAgICBmb3JtYXQ6IFsnYmxvY2txdW90ZScsICdpbmRlbnQnLCAnbGlzdCddLFxuICAgICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihyYW5nZSwgY29udGV4dCkge1xuICAgICAgICBpZiAoY29udGV4dC5jb2xsYXBzZWQgJiYgY29udGV4dC5vZmZzZXQgIT09IDApIHJldHVybiB0cnVlO1xuICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnaW5kZW50JywgJysxJywgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICB9XG4gICAgfSxcbiAgICAnb3V0ZGVudCc6IHtcbiAgICAgIGtleTogS2V5Ym9hcmQua2V5cy5UQUIsXG4gICAgICBzaGlmdEtleTogdHJ1ZSxcbiAgICAgIGZvcm1hdDogWydibG9ja3F1b3RlJywgJ2luZGVudCcsICdsaXN0J10sXG4gICAgICAvLyBoaWdobGlnaHQgdGFiIG9yIHRhYiBhdCBiZWdpbm5pbmcgb2YgbGlzdCwgaW5kZW50IG9yIGJsb2NrcXVvdGVcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIocmFuZ2UsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGNvbnRleHQuY29sbGFwc2VkICYmIGNvbnRleHQub2Zmc2V0ICE9PSAwKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2luZGVudCcsICctMScsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ291dGRlbnQgYmFja3NwYWNlJzoge1xuICAgICAga2V5OiBLZXlib2FyZC5rZXlzLkJBQ0tTUEFDRSxcbiAgICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICAgIHNoaWZ0S2V5OiBudWxsLFxuICAgICAgbWV0YUtleTogbnVsbCxcbiAgICAgIGN0cmxLZXk6IG51bGwsXG4gICAgICBhbHRLZXk6IG51bGwsXG4gICAgICBmb3JtYXQ6IFsnaW5kZW50JywgJ2xpc3QnXSxcbiAgICAgIG9mZnNldDogMCxcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIocmFuZ2UsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGNvbnRleHQuZm9ybWF0LmluZGVudCAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2luZGVudCcsICctMScsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQuZm9ybWF0Lmxpc3QgIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdsaXN0JywgZmFsc2UsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICAnaW5kZW50IGNvZGUtYmxvY2snOiBtYWtlQ29kZUJsb2NrSGFuZGxlcih0cnVlKSxcbiAgICAnb3V0ZGVudCBjb2RlLWJsb2NrJzogbWFrZUNvZGVCbG9ja0hhbmRsZXIoZmFsc2UpLFxuICAgICdyZW1vdmUgdGFiJzoge1xuICAgICAga2V5OiBLZXlib2FyZC5rZXlzLlRBQixcbiAgICAgIHNoaWZ0S2V5OiB0cnVlLFxuICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgcHJlZml4OiAvXFx0JC8sXG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKHJhbmdlKSB7XG4gICAgICAgIHRoaXMucXVpbGwuZGVsZXRlVGV4dChyYW5nZS5pbmRleCAtIDEsIDEsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ3RhYic6IHtcbiAgICAgIGtleTogS2V5Ym9hcmQua2V5cy5UQUIsXG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKHJhbmdlKSB7XG4gICAgICAgIHRoaXMucXVpbGwuaGlzdG9yeS5jdXRvZmYoKTtcbiAgICAgICAgdmFyIGRlbHRhID0gbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkucmV0YWluKHJhbmdlLmluZGV4KS5kZWxldGUocmFuZ2UubGVuZ3RoKS5pbnNlcnQoJ1xcdCcpO1xuICAgICAgICB0aGlzLnF1aWxsLnVwZGF0ZUNvbnRlbnRzKGRlbHRhLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgICAgdGhpcy5xdWlsbC5oaXN0b3J5LmN1dG9mZigpO1xuICAgICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZS5pbmRleCArIDEsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgICB9XG4gICAgfSxcbiAgICAnbGlzdCBlbXB0eSBlbnRlcic6IHtcbiAgICAgIGtleTogS2V5Ym9hcmQua2V5cy5FTlRFUixcbiAgICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICAgIGZvcm1hdDogWydsaXN0J10sXG4gICAgICBlbXB0eTogdHJ1ZSxcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIocmFuZ2UsIGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2xpc3QnLCBmYWxzZSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICAgIGlmIChjb250ZXh0LmZvcm1hdC5pbmRlbnQpIHtcbiAgICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnaW5kZW50JywgZmFsc2UsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICAnY2hlY2tsaXN0IGVudGVyJzoge1xuICAgICAga2V5OiBLZXlib2FyZC5rZXlzLkVOVEVSLFxuICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgZm9ybWF0OiB7IGxpc3Q6ICdjaGVja2VkJyB9LFxuICAgICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihyYW5nZSkge1xuICAgICAgICB2YXIgX3F1aWxsJGdldExpbmUzID0gdGhpcy5xdWlsbC5nZXRMaW5lKHJhbmdlLmluZGV4KSxcbiAgICAgICAgICAgIF9xdWlsbCRnZXRMaW5lNCA9IF9zbGljZWRUb0FycmF5KF9xdWlsbCRnZXRMaW5lMywgMiksXG4gICAgICAgICAgICBsaW5lID0gX3F1aWxsJGdldExpbmU0WzBdLFxuICAgICAgICAgICAgb2Zmc2V0ID0gX3F1aWxsJGdldExpbmU0WzFdO1xuXG4gICAgICAgIHZhciBmb3JtYXRzID0gKDAsIF9leHRlbmQyLmRlZmF1bHQpKHt9LCBsaW5lLmZvcm1hdHMoKSwgeyBsaXN0OiAnY2hlY2tlZCcgfSk7XG4gICAgICAgIHZhciBkZWx0YSA9IG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLnJldGFpbihyYW5nZS5pbmRleCkuaW5zZXJ0KCdcXG4nLCBmb3JtYXRzKS5yZXRhaW4obGluZS5sZW5ndGgoKSAtIG9mZnNldCAtIDEpLnJldGFpbigxLCB7IGxpc3Q6ICd1bmNoZWNrZWQnIH0pO1xuICAgICAgICB0aGlzLnF1aWxsLnVwZGF0ZUNvbnRlbnRzKGRlbHRhLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgICAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24ocmFuZ2UuaW5kZXggKyAxLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5TSUxFTlQpO1xuICAgICAgICB0aGlzLnF1aWxsLnNjcm9sbEludG9WaWV3KCk7XG4gICAgICB9XG4gICAgfSxcbiAgICAnaGVhZGVyIGVudGVyJzoge1xuICAgICAga2V5OiBLZXlib2FyZC5rZXlzLkVOVEVSLFxuICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgZm9ybWF0OiBbJ2hlYWRlciddLFxuICAgICAgc3VmZml4OiAvXiQvLFxuICAgICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihyYW5nZSwgY29udGV4dCkge1xuICAgICAgICB2YXIgX3F1aWxsJGdldExpbmU1ID0gdGhpcy5xdWlsbC5nZXRMaW5lKHJhbmdlLmluZGV4KSxcbiAgICAgICAgICAgIF9xdWlsbCRnZXRMaW5lNiA9IF9zbGljZWRUb0FycmF5KF9xdWlsbCRnZXRMaW5lNSwgMiksXG4gICAgICAgICAgICBsaW5lID0gX3F1aWxsJGdldExpbmU2WzBdLFxuICAgICAgICAgICAgb2Zmc2V0ID0gX3F1aWxsJGdldExpbmU2WzFdO1xuXG4gICAgICAgIHZhciBkZWx0YSA9IG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLnJldGFpbihyYW5nZS5pbmRleCkuaW5zZXJ0KCdcXG4nLCBjb250ZXh0LmZvcm1hdCkucmV0YWluKGxpbmUubGVuZ3RoKCkgLSBvZmZzZXQgLSAxKS5yZXRhaW4oMSwgeyBoZWFkZXI6IG51bGwgfSk7XG4gICAgICAgIHRoaXMucXVpbGwudXBkYXRlQ29udGVudHMoZGVsdGEsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZS5pbmRleCArIDEsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgICAgIHRoaXMucXVpbGwuc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICdsaXN0IGF1dG9maWxsJzoge1xuICAgICAga2V5OiAnICcsXG4gICAgICBjb2xsYXBzZWQ6IHRydWUsXG4gICAgICBmb3JtYXQ6IHsgbGlzdDogZmFsc2UgfSxcbiAgICAgIHByZWZpeDogL15cXHMqPyhcXGQrXFwufC18XFwqfFxcWyA/XFxdfFxcW3hcXF0pJC8sXG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKHJhbmdlLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBjb250ZXh0LnByZWZpeC5sZW5ndGg7XG5cbiAgICAgICAgdmFyIF9xdWlsbCRnZXRMaW5lNyA9IHRoaXMucXVpbGwuZ2V0TGluZShyYW5nZS5pbmRleCksXG4gICAgICAgICAgICBfcXVpbGwkZ2V0TGluZTggPSBfc2xpY2VkVG9BcnJheShfcXVpbGwkZ2V0TGluZTcsIDIpLFxuICAgICAgICAgICAgbGluZSA9IF9xdWlsbCRnZXRMaW5lOFswXSxcbiAgICAgICAgICAgIG9mZnNldCA9IF9xdWlsbCRnZXRMaW5lOFsxXTtcblxuICAgICAgICBpZiAob2Zmc2V0ID4gbGVuZ3RoKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgdmFyIHZhbHVlID0gdm9pZCAwO1xuICAgICAgICBzd2l0Y2ggKGNvbnRleHQucHJlZml4LnRyaW0oKSkge1xuICAgICAgICAgIGNhc2UgJ1tdJzpjYXNlICdbIF0nOlxuICAgICAgICAgICAgdmFsdWUgPSAndW5jaGVja2VkJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ1t4XSc6XG4gICAgICAgICAgICB2YWx1ZSA9ICdjaGVja2VkJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJy0nOmNhc2UgJyonOlxuICAgICAgICAgICAgdmFsdWUgPSAnYnVsbGV0JztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB2YWx1ZSA9ICdvcmRlcmVkJztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnF1aWxsLmluc2VydFRleHQocmFuZ2UuaW5kZXgsICcgJywgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICAgIHRoaXMucXVpbGwuaGlzdG9yeS5jdXRvZmYoKTtcbiAgICAgICAgdmFyIGRlbHRhID0gbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkucmV0YWluKHJhbmdlLmluZGV4IC0gb2Zmc2V0KS5kZWxldGUobGVuZ3RoICsgMSkucmV0YWluKGxpbmUubGVuZ3RoKCkgLSAyIC0gb2Zmc2V0KS5yZXRhaW4oMSwgeyBsaXN0OiB2YWx1ZSB9KTtcbiAgICAgICAgdGhpcy5xdWlsbC51cGRhdGVDb250ZW50cyhkZWx0YSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICAgIHRoaXMucXVpbGwuaGlzdG9yeS5jdXRvZmYoKTtcbiAgICAgICAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24ocmFuZ2UuaW5kZXggLSBsZW5ndGgsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgICB9XG4gICAgfSxcbiAgICAnY29kZSBleGl0Jzoge1xuICAgICAga2V5OiBLZXlib2FyZC5rZXlzLkVOVEVSLFxuICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgZm9ybWF0OiBbJ2NvZGUtYmxvY2snXSxcbiAgICAgIHByZWZpeDogL1xcblxcbiQvLFxuICAgICAgc3VmZml4OiAvXlxccyskLyxcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIocmFuZ2UpIHtcbiAgICAgICAgdmFyIF9xdWlsbCRnZXRMaW5lOSA9IHRoaXMucXVpbGwuZ2V0TGluZShyYW5nZS5pbmRleCksXG4gICAgICAgICAgICBfcXVpbGwkZ2V0TGluZTEwID0gX3NsaWNlZFRvQXJyYXkoX3F1aWxsJGdldExpbmU5LCAyKSxcbiAgICAgICAgICAgIGxpbmUgPSBfcXVpbGwkZ2V0TGluZTEwWzBdLFxuICAgICAgICAgICAgb2Zmc2V0ID0gX3F1aWxsJGdldExpbmUxMFsxXTtcblxuICAgICAgICB2YXIgZGVsdGEgPSBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKS5yZXRhaW4ocmFuZ2UuaW5kZXggKyBsaW5lLmxlbmd0aCgpIC0gb2Zmc2V0IC0gMikucmV0YWluKDEsIHsgJ2NvZGUtYmxvY2snOiBudWxsIH0pLmRlbGV0ZSgxKTtcbiAgICAgICAgdGhpcy5xdWlsbC51cGRhdGVDb250ZW50cyhkZWx0YSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICB9XG4gICAgfSxcbiAgICAnZW1iZWQgbGVmdCc6IG1ha2VFbWJlZEFycm93SGFuZGxlcihLZXlib2FyZC5rZXlzLkxFRlQsIGZhbHNlKSxcbiAgICAnZW1iZWQgbGVmdCBzaGlmdCc6IG1ha2VFbWJlZEFycm93SGFuZGxlcihLZXlib2FyZC5rZXlzLkxFRlQsIHRydWUpLFxuICAgICdlbWJlZCByaWdodCc6IG1ha2VFbWJlZEFycm93SGFuZGxlcihLZXlib2FyZC5rZXlzLlJJR0hULCBmYWxzZSksXG4gICAgJ2VtYmVkIHJpZ2h0IHNoaWZ0JzogbWFrZUVtYmVkQXJyb3dIYW5kbGVyKEtleWJvYXJkLmtleXMuUklHSFQsIHRydWUpXG4gIH1cbn07XG5cbmZ1bmN0aW9uIG1ha2VFbWJlZEFycm93SGFuZGxlcihrZXksIHNoaWZ0S2V5KSB7XG4gIHZhciBfcmVmMztcblxuICB2YXIgd2hlcmUgPSBrZXkgPT09IEtleWJvYXJkLmtleXMuTEVGVCA/ICdwcmVmaXgnIDogJ3N1ZmZpeCc7XG4gIHJldHVybiBfcmVmMyA9IHtcbiAgICBrZXk6IGtleSxcbiAgICBzaGlmdEtleTogc2hpZnRLZXksXG4gICAgYWx0S2V5OiBudWxsXG4gIH0sIF9kZWZpbmVQcm9wZXJ0eShfcmVmMywgd2hlcmUsIC9eJC8pLCBfZGVmaW5lUHJvcGVydHkoX3JlZjMsICdoYW5kbGVyJywgZnVuY3Rpb24gaGFuZGxlcihyYW5nZSkge1xuICAgIHZhciBpbmRleCA9IHJhbmdlLmluZGV4O1xuICAgIGlmIChrZXkgPT09IEtleWJvYXJkLmtleXMuUklHSFQpIHtcbiAgICAgIGluZGV4ICs9IHJhbmdlLmxlbmd0aCArIDE7XG4gICAgfVxuXG4gICAgdmFyIF9xdWlsbCRnZXRMZWFmMyA9IHRoaXMucXVpbGwuZ2V0TGVhZihpbmRleCksXG4gICAgICAgIF9xdWlsbCRnZXRMZWFmNCA9IF9zbGljZWRUb0FycmF5KF9xdWlsbCRnZXRMZWFmMywgMSksXG4gICAgICAgIGxlYWYgPSBfcXVpbGwkZ2V0TGVhZjRbMF07XG5cbiAgICBpZiAoIShsZWFmIGluc3RhbmNlb2YgX3BhcmNobWVudDIuZGVmYXVsdC5FbWJlZCkpIHJldHVybiB0cnVlO1xuICAgIGlmIChrZXkgPT09IEtleWJvYXJkLmtleXMuTEVGVCkge1xuICAgICAgaWYgKHNoaWZ0S2V5KSB7XG4gICAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKHJhbmdlLmluZGV4IC0gMSwgcmFuZ2UubGVuZ3RoICsgMSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZS5pbmRleCAtIDEsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc2hpZnRLZXkpIHtcbiAgICAgICAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24ocmFuZ2UuaW5kZXgsIHJhbmdlLmxlbmd0aCArIDEsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24ocmFuZ2UuaW5kZXggKyByYW5nZS5sZW5ndGggKyAxLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KSwgX3JlZjM7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUJhY2tzcGFjZShyYW5nZSwgY29udGV4dCkge1xuICBpZiAocmFuZ2UuaW5kZXggPT09IDAgfHwgdGhpcy5xdWlsbC5nZXRMZW5ndGgoKSA8PSAxKSByZXR1cm47XG5cbiAgdmFyIF9xdWlsbCRnZXRMaW5lMTEgPSB0aGlzLnF1aWxsLmdldExpbmUocmFuZ2UuaW5kZXgpLFxuICAgICAgX3F1aWxsJGdldExpbmUxMiA9IF9zbGljZWRUb0FycmF5KF9xdWlsbCRnZXRMaW5lMTEsIDEpLFxuICAgICAgbGluZSA9IF9xdWlsbCRnZXRMaW5lMTJbMF07XG5cbiAgdmFyIGZvcm1hdHMgPSB7fTtcbiAgaWYgKGNvbnRleHQub2Zmc2V0ID09PSAwKSB7XG4gICAgdmFyIF9xdWlsbCRnZXRMaW5lMTMgPSB0aGlzLnF1aWxsLmdldExpbmUocmFuZ2UuaW5kZXggLSAxKSxcbiAgICAgICAgX3F1aWxsJGdldExpbmUxNCA9IF9zbGljZWRUb0FycmF5KF9xdWlsbCRnZXRMaW5lMTMsIDEpLFxuICAgICAgICBwcmV2ID0gX3F1aWxsJGdldExpbmUxNFswXTtcblxuICAgIGlmIChwcmV2ICE9IG51bGwgJiYgcHJldi5sZW5ndGgoKSA+IDEpIHtcbiAgICAgIHZhciBjdXJGb3JtYXRzID0gbGluZS5mb3JtYXRzKCk7XG4gICAgICB2YXIgcHJldkZvcm1hdHMgPSB0aGlzLnF1aWxsLmdldEZvcm1hdChyYW5nZS5pbmRleCAtIDEsIDEpO1xuICAgICAgZm9ybWF0cyA9IF9vcDIuZGVmYXVsdC5hdHRyaWJ1dGVzLmRpZmYoY3VyRm9ybWF0cywgcHJldkZvcm1hdHMpIHx8IHt9O1xuICAgIH1cbiAgfVxuICAvLyBDaGVjayBmb3IgYXN0cmFsIHN5bWJvbHNcbiAgdmFyIGxlbmd0aCA9IC9bXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdJC8udGVzdChjb250ZXh0LnByZWZpeCkgPyAyIDogMTtcbiAgdGhpcy5xdWlsbC5kZWxldGVUZXh0KHJhbmdlLmluZGV4IC0gbGVuZ3RoLCBsZW5ndGgsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICBpZiAoT2JqZWN0LmtleXMoZm9ybWF0cykubGVuZ3RoID4gMCkge1xuICAgIHRoaXMucXVpbGwuZm9ybWF0TGluZShyYW5nZS5pbmRleCAtIGxlbmd0aCwgbGVuZ3RoLCBmb3JtYXRzLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgfVxuICB0aGlzLnF1aWxsLmZvY3VzKCk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZURlbGV0ZShyYW5nZSwgY29udGV4dCkge1xuICAvLyBDaGVjayBmb3IgYXN0cmFsIHN5bWJvbHNcbiAgdmFyIGxlbmd0aCA9IC9eW1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXS8udGVzdChjb250ZXh0LnN1ZmZpeCkgPyAyIDogMTtcbiAgaWYgKHJhbmdlLmluZGV4ID49IHRoaXMucXVpbGwuZ2V0TGVuZ3RoKCkgLSBsZW5ndGgpIHJldHVybjtcbiAgdmFyIGZvcm1hdHMgPSB7fSxcbiAgICAgIG5leHRMZW5ndGggPSAwO1xuXG4gIHZhciBfcXVpbGwkZ2V0TGluZTE1ID0gdGhpcy5xdWlsbC5nZXRMaW5lKHJhbmdlLmluZGV4KSxcbiAgICAgIF9xdWlsbCRnZXRMaW5lMTYgPSBfc2xpY2VkVG9BcnJheShfcXVpbGwkZ2V0TGluZTE1LCAxKSxcbiAgICAgIGxpbmUgPSBfcXVpbGwkZ2V0TGluZTE2WzBdO1xuXG4gIGlmIChjb250ZXh0Lm9mZnNldCA+PSBsaW5lLmxlbmd0aCgpIC0gMSkge1xuICAgIHZhciBfcXVpbGwkZ2V0TGluZTE3ID0gdGhpcy5xdWlsbC5nZXRMaW5lKHJhbmdlLmluZGV4ICsgMSksXG4gICAgICAgIF9xdWlsbCRnZXRMaW5lMTggPSBfc2xpY2VkVG9BcnJheShfcXVpbGwkZ2V0TGluZTE3LCAxKSxcbiAgICAgICAgbmV4dCA9IF9xdWlsbCRnZXRMaW5lMThbMF07XG5cbiAgICBpZiAobmV4dCkge1xuICAgICAgdmFyIGN1ckZvcm1hdHMgPSBsaW5lLmZvcm1hdHMoKTtcbiAgICAgIHZhciBuZXh0Rm9ybWF0cyA9IHRoaXMucXVpbGwuZ2V0Rm9ybWF0KHJhbmdlLmluZGV4LCAxKTtcbiAgICAgIGZvcm1hdHMgPSBfb3AyLmRlZmF1bHQuYXR0cmlidXRlcy5kaWZmKGN1ckZvcm1hdHMsIG5leHRGb3JtYXRzKSB8fCB7fTtcbiAgICAgIG5leHRMZW5ndGggPSBuZXh0Lmxlbmd0aCgpO1xuICAgIH1cbiAgfVxuICB0aGlzLnF1aWxsLmRlbGV0ZVRleHQocmFuZ2UuaW5kZXgsIGxlbmd0aCwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gIGlmIChPYmplY3Qua2V5cyhmb3JtYXRzKS5sZW5ndGggPiAwKSB7XG4gICAgdGhpcy5xdWlsbC5mb3JtYXRMaW5lKHJhbmdlLmluZGV4ICsgbmV4dExlbmd0aCAtIDEsIGxlbmd0aCwgZm9ybWF0cywgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlRGVsZXRlUmFuZ2UocmFuZ2UpIHtcbiAgdmFyIGxpbmVzID0gdGhpcy5xdWlsbC5nZXRMaW5lcyhyYW5nZSk7XG4gIHZhciBmb3JtYXRzID0ge307XG4gIGlmIChsaW5lcy5sZW5ndGggPiAxKSB7XG4gICAgdmFyIGZpcnN0Rm9ybWF0cyA9IGxpbmVzWzBdLmZvcm1hdHMoKTtcbiAgICB2YXIgbGFzdEZvcm1hdHMgPSBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXS5mb3JtYXRzKCk7XG4gICAgZm9ybWF0cyA9IF9vcDIuZGVmYXVsdC5hdHRyaWJ1dGVzLmRpZmYobGFzdEZvcm1hdHMsIGZpcnN0Rm9ybWF0cykgfHwge307XG4gIH1cbiAgdGhpcy5xdWlsbC5kZWxldGVUZXh0KHJhbmdlLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgaWYgKE9iamVjdC5rZXlzKGZvcm1hdHMpLmxlbmd0aCA+IDApIHtcbiAgICB0aGlzLnF1aWxsLmZvcm1hdExpbmUocmFuZ2UuaW5kZXgsIDEsIGZvcm1hdHMsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICB9XG4gIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKHJhbmdlLmluZGV4LCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5TSUxFTlQpO1xuICB0aGlzLnF1aWxsLmZvY3VzKCk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUVudGVyKHJhbmdlLCBjb250ZXh0KSB7XG4gIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gIGlmIChyYW5nZS5sZW5ndGggPiAwKSB7XG4gICAgdGhpcy5xdWlsbC5zY3JvbGwuZGVsZXRlQXQocmFuZ2UuaW5kZXgsIHJhbmdlLmxlbmd0aCk7IC8vIFNvIHdlIGRvIG5vdCB0cmlnZ2VyIHRleHQtY2hhbmdlXG4gIH1cbiAgdmFyIGxpbmVGb3JtYXRzID0gT2JqZWN0LmtleXMoY29udGV4dC5mb3JtYXQpLnJlZHVjZShmdW5jdGlvbiAobGluZUZvcm1hdHMsIGZvcm1hdCkge1xuICAgIGlmIChfcGFyY2htZW50Mi5kZWZhdWx0LnF1ZXJ5KGZvcm1hdCwgX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5CTE9DSykgJiYgIUFycmF5LmlzQXJyYXkoY29udGV4dC5mb3JtYXRbZm9ybWF0XSkpIHtcbiAgICAgIGxpbmVGb3JtYXRzW2Zvcm1hdF0gPSBjb250ZXh0LmZvcm1hdFtmb3JtYXRdO1xuICAgIH1cbiAgICByZXR1cm4gbGluZUZvcm1hdHM7XG4gIH0sIHt9KTtcbiAgdGhpcy5xdWlsbC5pbnNlcnRUZXh0KHJhbmdlLmluZGV4LCAnXFxuJywgbGluZUZvcm1hdHMsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAvLyBFYXJsaWVyIHNjcm9sbC5kZWxldGVBdCBtaWdodCBoYXZlIG1lc3NlZCB1cCBvdXIgc2VsZWN0aW9uLFxuICAvLyBzbyBpbnNlcnRUZXh0J3MgYnVpbHQgaW4gc2VsZWN0aW9uIHByZXNlcnZhdGlvbiBpcyBub3QgcmVsaWFibGVcbiAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24ocmFuZ2UuaW5kZXggKyAxLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5TSUxFTlQpO1xuICB0aGlzLnF1aWxsLmZvY3VzKCk7XG4gIE9iamVjdC5rZXlzKGNvbnRleHQuZm9ybWF0KS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKGxpbmVGb3JtYXRzW25hbWVdICE9IG51bGwpIHJldHVybjtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb250ZXh0LmZvcm1hdFtuYW1lXSkpIHJldHVybjtcbiAgICBpZiAobmFtZSA9PT0gJ2xpbmsnKSByZXR1cm47XG4gICAgX3RoaXMzLnF1aWxsLmZvcm1hdChuYW1lLCBjb250ZXh0LmZvcm1hdFtuYW1lXSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBtYWtlQ29kZUJsb2NrSGFuZGxlcihpbmRlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBrZXk6IEtleWJvYXJkLmtleXMuVEFCLFxuICAgIHNoaWZ0S2V5OiAhaW5kZW50LFxuICAgIGZvcm1hdDogeyAnY29kZS1ibG9jayc6IHRydWUgfSxcbiAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKHJhbmdlKSB7XG4gICAgICB2YXIgQ29kZUJsb2NrID0gX3BhcmNobWVudDIuZGVmYXVsdC5xdWVyeSgnY29kZS1ibG9jaycpO1xuICAgICAgdmFyIGluZGV4ID0gcmFuZ2UuaW5kZXgsXG4gICAgICAgICAgbGVuZ3RoID0gcmFuZ2UubGVuZ3RoO1xuXG4gICAgICB2YXIgX3F1aWxsJHNjcm9sbCRkZXNjZW5kID0gdGhpcy5xdWlsbC5zY3JvbGwuZGVzY2VuZGFudChDb2RlQmxvY2ssIGluZGV4KSxcbiAgICAgICAgICBfcXVpbGwkc2Nyb2xsJGRlc2NlbmQyID0gX3NsaWNlZFRvQXJyYXkoX3F1aWxsJHNjcm9sbCRkZXNjZW5kLCAyKSxcbiAgICAgICAgICBibG9jayA9IF9xdWlsbCRzY3JvbGwkZGVzY2VuZDJbMF0sXG4gICAgICAgICAgb2Zmc2V0ID0gX3F1aWxsJHNjcm9sbCRkZXNjZW5kMlsxXTtcblxuICAgICAgaWYgKGJsb2NrID09IG51bGwpIHJldHVybjtcbiAgICAgIHZhciBzY3JvbGxJbmRleCA9IHRoaXMucXVpbGwuZ2V0SW5kZXgoYmxvY2spO1xuICAgICAgdmFyIHN0YXJ0ID0gYmxvY2submV3bGluZUluZGV4KG9mZnNldCwgdHJ1ZSkgKyAxO1xuICAgICAgdmFyIGVuZCA9IGJsb2NrLm5ld2xpbmVJbmRleChzY3JvbGxJbmRleCArIG9mZnNldCArIGxlbmd0aCk7XG4gICAgICB2YXIgbGluZXMgPSBibG9jay5kb21Ob2RlLnRleHRDb250ZW50LnNsaWNlKHN0YXJ0LCBlbmQpLnNwbGl0KCdcXG4nKTtcbiAgICAgIG9mZnNldCA9IDA7XG4gICAgICBsaW5lcy5mb3JFYWNoKGZ1bmN0aW9uIChsaW5lLCBpKSB7XG4gICAgICAgIGlmIChpbmRlbnQpIHtcbiAgICAgICAgICBibG9jay5pbnNlcnRBdChzdGFydCArIG9mZnNldCwgQ29kZUJsb2NrLlRBQik7XG4gICAgICAgICAgb2Zmc2V0ICs9IENvZGVCbG9jay5UQUIubGVuZ3RoO1xuICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICBpbmRleCArPSBDb2RlQmxvY2suVEFCLmxlbmd0aDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGVuZ3RoICs9IENvZGVCbG9jay5UQUIubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChsaW5lLnN0YXJ0c1dpdGgoQ29kZUJsb2NrLlRBQikpIHtcbiAgICAgICAgICBibG9jay5kZWxldGVBdChzdGFydCArIG9mZnNldCwgQ29kZUJsb2NrLlRBQi5sZW5ndGgpO1xuICAgICAgICAgIG9mZnNldCAtPSBDb2RlQmxvY2suVEFCLmxlbmd0aDtcbiAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgaW5kZXggLT0gQ29kZUJsb2NrLlRBQi5sZW5ndGg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxlbmd0aCAtPSBDb2RlQmxvY2suVEFCLmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb2Zmc2V0ICs9IGxpbmUubGVuZ3RoICsgMTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5xdWlsbC51cGRhdGUoX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihpbmRleCwgbGVuZ3RoLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5TSUxFTlQpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFrZUZvcm1hdEhhbmRsZXIoZm9ybWF0KSB7XG4gIHJldHVybiB7XG4gICAga2V5OiBmb3JtYXRbMF0udG9VcHBlckNhc2UoKSxcbiAgICBzaG9ydEtleTogdHJ1ZSxcbiAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKHJhbmdlLCBjb250ZXh0KSB7XG4gICAgICB0aGlzLnF1aWxsLmZvcm1hdChmb3JtYXQsICFjb250ZXh0LmZvcm1hdFtmb3JtYXRdLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZShiaW5kaW5nKSB7XG4gIGlmICh0eXBlb2YgYmluZGluZyA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGJpbmRpbmcgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZSh7IGtleTogYmluZGluZyB9KTtcbiAgfVxuICBpZiAoKHR5cGVvZiBiaW5kaW5nID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihiaW5kaW5nKSkgPT09ICdvYmplY3QnKSB7XG4gICAgYmluZGluZyA9ICgwLCBfY2xvbmUyLmRlZmF1bHQpKGJpbmRpbmcsIGZhbHNlKTtcbiAgfVxuICBpZiAodHlwZW9mIGJpbmRpbmcua2V5ID09PSAnc3RyaW5nJykge1xuICAgIGlmIChLZXlib2FyZC5rZXlzW2JpbmRpbmcua2V5LnRvVXBwZXJDYXNlKCldICE9IG51bGwpIHtcbiAgICAgIGJpbmRpbmcua2V5ID0gS2V5Ym9hcmQua2V5c1tiaW5kaW5nLmtleS50b1VwcGVyQ2FzZSgpXTtcbiAgICB9IGVsc2UgaWYgKGJpbmRpbmcua2V5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgYmluZGluZy5rZXkgPSBiaW5kaW5nLmtleS50b1VwcGVyQ2FzZSgpLmNoYXJDb2RlQXQoMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICBpZiAoYmluZGluZy5zaG9ydEtleSkge1xuICAgIGJpbmRpbmdbU0hPUlRLRVldID0gYmluZGluZy5zaG9ydEtleTtcbiAgICBkZWxldGUgYmluZGluZy5zaG9ydEtleTtcbiAgfVxuICByZXR1cm4gYmluZGluZztcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gS2V5Ym9hcmQ7XG5leHBvcnRzLlNIT1JUS0VZID0gU0hPUlRLRVk7XG5cbi8qKiovIH0pLFxuLyogMjQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxudmFyIF90ZXh0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxudmFyIF90ZXh0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RleHQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBDdXJzb3IgPSBmdW5jdGlvbiAoX1BhcmNobWVudCRFbWJlZCkge1xuICBfaW5oZXJpdHMoQ3Vyc29yLCBfUGFyY2htZW50JEVtYmVkKTtcblxuICBfY3JlYXRlQ2xhc3MoQ3Vyc29yLCBudWxsLCBbe1xuICAgIGtleTogJ3ZhbHVlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfV0pO1xuXG4gIGZ1bmN0aW9uIEN1cnNvcihkb21Ob2RlLCBzZWxlY3Rpb24pIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ3Vyc29yKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDdXJzb3IuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDdXJzb3IpKS5jYWxsKHRoaXMsIGRvbU5vZGUpKTtcblxuICAgIF90aGlzLnNlbGVjdGlvbiA9IHNlbGVjdGlvbjtcbiAgICBfdGhpcy50ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKEN1cnNvci5DT05URU5UUyk7XG4gICAgX3RoaXMuZG9tTm9kZS5hcHBlbmRDaGlsZChfdGhpcy50ZXh0Tm9kZSk7XG4gICAgX3RoaXMuX2xlbmd0aCA9IDA7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEN1cnNvciwgW3tcbiAgICBrZXk6ICdkZXRhY2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXRhY2goKSB7XG4gICAgICAvLyBzdXBlci5kZXRhY2goKSB3aWxsIGFsc28gY2xlYXIgZG9tTm9kZS5fX2Jsb3RcbiAgICAgIGlmICh0aGlzLnBhcmVudCAhPSBudWxsKSB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXQobmFtZSwgdmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLl9sZW5ndGggIT09IDApIHtcbiAgICAgICAgcmV0dXJuIF9nZXQoQ3Vyc29yLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEN1cnNvci5wcm90b3R5cGUpLCAnZm9ybWF0JywgdGhpcykuY2FsbCh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICB2YXIgdGFyZ2V0ID0gdGhpcyxcbiAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICB3aGlsZSAodGFyZ2V0ICE9IG51bGwgJiYgdGFyZ2V0LnN0YXRpY3Muc2NvcGUgIT09IF9wYXJjaG1lbnQyLmRlZmF1bHQuU2NvcGUuQkxPQ0tfQkxPVCkge1xuICAgICAgICBpbmRleCArPSB0YXJnZXQub2Zmc2V0KHRhcmdldC5wYXJlbnQpO1xuICAgICAgICB0YXJnZXQgPSB0YXJnZXQucGFyZW50O1xuICAgICAgfVxuICAgICAgaWYgKHRhcmdldCAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuX2xlbmd0aCA9IEN1cnNvci5DT05URU5UUy5sZW5ndGg7XG4gICAgICAgIHRhcmdldC5vcHRpbWl6ZSgpO1xuICAgICAgICB0YXJnZXQuZm9ybWF0QXQoaW5kZXgsIEN1cnNvci5DT05URU5UUy5sZW5ndGgsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgdGhpcy5fbGVuZ3RoID0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpbmRleCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluZGV4KG5vZGUsIG9mZnNldCkge1xuICAgICAgaWYgKG5vZGUgPT09IHRoaXMudGV4dE5vZGUpIHJldHVybiAwO1xuICAgICAgcmV0dXJuIF9nZXQoQ3Vyc29yLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEN1cnNvci5wcm90b3R5cGUpLCAnaW5kZXgnLCB0aGlzKS5jYWxsKHRoaXMsIG5vZGUsIG9mZnNldCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbGVuZ3RoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGVuZ3RoKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2xlbmd0aDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBvc2l0aW9uKCkge1xuICAgICAgcmV0dXJuIFt0aGlzLnRleHROb2RlLCB0aGlzLnRleHROb2RlLmRhdGEubGVuZ3RoXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICBfZ2V0KEN1cnNvci5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDdXJzb3IucHJvdG90eXBlKSwgJ3JlbW92ZScsIHRoaXMpLmNhbGwodGhpcyk7XG4gICAgICB0aGlzLnBhcmVudCA9IG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVzdG9yZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc3RvcmUoKSB7XG4gICAgICBpZiAodGhpcy5zZWxlY3Rpb24uY29tcG9zaW5nIHx8IHRoaXMucGFyZW50ID09IG51bGwpIHJldHVybjtcbiAgICAgIHZhciB0ZXh0Tm9kZSA9IHRoaXMudGV4dE5vZGU7XG4gICAgICB2YXIgcmFuZ2UgPSB0aGlzLnNlbGVjdGlvbi5nZXROYXRpdmVSYW5nZSgpO1xuICAgICAgdmFyIHJlc3RvcmVUZXh0ID0gdm9pZCAwLFxuICAgICAgICAgIHN0YXJ0ID0gdm9pZCAwLFxuICAgICAgICAgIGVuZCA9IHZvaWQgMDtcbiAgICAgIGlmIChyYW5nZSAhPSBudWxsICYmIHJhbmdlLnN0YXJ0Lm5vZGUgPT09IHRleHROb2RlICYmIHJhbmdlLmVuZC5ub2RlID09PSB0ZXh0Tm9kZSkge1xuICAgICAgICB2YXIgX3JlZiA9IFt0ZXh0Tm9kZSwgcmFuZ2Uuc3RhcnQub2Zmc2V0LCByYW5nZS5lbmQub2Zmc2V0XTtcbiAgICAgICAgcmVzdG9yZVRleHQgPSBfcmVmWzBdO1xuICAgICAgICBzdGFydCA9IF9yZWZbMV07XG4gICAgICAgIGVuZCA9IF9yZWZbMl07XG4gICAgICB9XG4gICAgICAvLyBMaW5rIGZvcm1hdCB3aWxsIGluc2VydCB0ZXh0IG91dHNpZGUgb2YgYW5jaG9yIHRhZ1xuICAgICAgd2hpbGUgKHRoaXMuZG9tTm9kZS5sYXN0Q2hpbGQgIT0gbnVsbCAmJiB0aGlzLmRvbU5vZGUubGFzdENoaWxkICE9PSB0aGlzLnRleHROb2RlKSB7XG4gICAgICAgIHRoaXMuZG9tTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLmRvbU5vZGUubGFzdENoaWxkLCB0aGlzLmRvbU5vZGUpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMudGV4dE5vZGUuZGF0YSAhPT0gQ3Vyc29yLkNPTlRFTlRTKSB7XG4gICAgICAgIHZhciB0ZXh0ID0gdGhpcy50ZXh0Tm9kZS5kYXRhLnNwbGl0KEN1cnNvci5DT05URU5UUykuam9pbignJyk7XG4gICAgICAgIGlmICh0aGlzLm5leHQgaW5zdGFuY2VvZiBfdGV4dDIuZGVmYXVsdCkge1xuICAgICAgICAgIHJlc3RvcmVUZXh0ID0gdGhpcy5uZXh0LmRvbU5vZGU7XG4gICAgICAgICAgdGhpcy5uZXh0Lmluc2VydEF0KDAsIHRleHQpO1xuICAgICAgICAgIHRoaXMudGV4dE5vZGUuZGF0YSA9IEN1cnNvci5DT05URU5UUztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnRleHROb2RlLmRhdGEgPSB0ZXh0O1xuICAgICAgICAgIHRoaXMucGFyZW50Lmluc2VydEJlZm9yZShfcGFyY2htZW50Mi5kZWZhdWx0LmNyZWF0ZSh0aGlzLnRleHROb2RlKSwgdGhpcyk7XG4gICAgICAgICAgdGhpcy50ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKEN1cnNvci5DT05URU5UUyk7XG4gICAgICAgICAgdGhpcy5kb21Ob2RlLmFwcGVuZENoaWxkKHRoaXMudGV4dE5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLnJlbW92ZSgpO1xuICAgICAgaWYgKHN0YXJ0ICE9IG51bGwpIHtcbiAgICAgICAgdmFyIF9tYXAgPSBbc3RhcnQsIGVuZF0ubWFwKGZ1bmN0aW9uIChvZmZzZXQpIHtcbiAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4ocmVzdG9yZVRleHQuZGF0YS5sZW5ndGgsIG9mZnNldCAtIDEpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIF9tYXAyID0gX3NsaWNlZFRvQXJyYXkoX21hcCwgMik7XG5cbiAgICAgICAgc3RhcnQgPSBfbWFwMlswXTtcbiAgICAgICAgZW5kID0gX21hcDJbMV07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdGFydE5vZGU6IHJlc3RvcmVUZXh0LFxuICAgICAgICAgIHN0YXJ0T2Zmc2V0OiBzdGFydCxcbiAgICAgICAgICBlbmROb2RlOiByZXN0b3JlVGV4dCxcbiAgICAgICAgICBlbmRPZmZzZXQ6IGVuZFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShtdXRhdGlvbnMsIGNvbnRleHQpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAobXV0YXRpb25zLnNvbWUoZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICAgIHJldHVybiBtdXRhdGlvbi50eXBlID09PSAnY2hhcmFjdGVyRGF0YScgJiYgbXV0YXRpb24udGFyZ2V0ID09PSBfdGhpczIudGV4dE5vZGU7XG4gICAgICB9KSkge1xuICAgICAgICB2YXIgcmFuZ2UgPSB0aGlzLnJlc3RvcmUoKTtcbiAgICAgICAgaWYgKHJhbmdlKSBjb250ZXh0LnJhbmdlID0gcmFuZ2U7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ3Vyc29yO1xufShfcGFyY2htZW50Mi5kZWZhdWx0LkVtYmVkKTtcblxuQ3Vyc29yLmJsb3ROYW1lID0gJ2N1cnNvcic7XG5DdXJzb3IuY2xhc3NOYW1lID0gJ3FsLWN1cnNvcic7XG5DdXJzb3IudGFnTmFtZSA9ICdzcGFuJztcbkN1cnNvci5DT05URU5UUyA9ICdcXHVGRUZGJzsgLy8gWmVybyB3aWR0aCBubyBicmVhayBzcGFjZVxuXG5cbmV4cG9ydHMuZGVmYXVsdCA9IEN1cnNvcjtcblxuLyoqKi8gfSksXG4vKiAyNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbnZhciBfYmxvY2sgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG52YXIgX2Jsb2NrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Jsb2NrKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgQ29udGFpbmVyID0gZnVuY3Rpb24gKF9QYXJjaG1lbnQkQ29udGFpbmVyKSB7XG4gIF9pbmhlcml0cyhDb250YWluZXIsIF9QYXJjaG1lbnQkQ29udGFpbmVyKTtcblxuICBmdW5jdGlvbiBDb250YWluZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbnRhaW5lcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENvbnRhaW5lci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvbnRhaW5lcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgcmV0dXJuIENvbnRhaW5lcjtcbn0oX3BhcmNobWVudDIuZGVmYXVsdC5Db250YWluZXIpO1xuXG5Db250YWluZXIuYWxsb3dlZENoaWxkcmVuID0gW19ibG9jazIuZGVmYXVsdCwgX2Jsb2NrLkJsb2NrRW1iZWQsIENvbnRhaW5lcl07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IENvbnRhaW5lcjtcblxuLyoqKi8gfSksXG4vKiAyNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Db2xvclN0eWxlID0gZXhwb3J0cy5Db2xvckNsYXNzID0gZXhwb3J0cy5Db2xvckF0dHJpYnV0b3IgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBDb2xvckF0dHJpYnV0b3IgPSBmdW5jdGlvbiAoX1BhcmNobWVudCRBdHRyaWJ1dG9yKSB7XG4gIF9pbmhlcml0cyhDb2xvckF0dHJpYnV0b3IsIF9QYXJjaG1lbnQkQXR0cmlidXRvcik7XG5cbiAgZnVuY3Rpb24gQ29sb3JBdHRyaWJ1dG9yKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2xvckF0dHJpYnV0b3IpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDb2xvckF0dHJpYnV0b3IuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDb2xvckF0dHJpYnV0b3IpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDb2xvckF0dHJpYnV0b3IsIFt7XG4gICAga2V5OiAndmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShkb21Ob2RlKSB7XG4gICAgICB2YXIgdmFsdWUgPSBfZ2V0KENvbG9yQXR0cmlidXRvci5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDb2xvckF0dHJpYnV0b3IucHJvdG90eXBlKSwgJ3ZhbHVlJywgdGhpcykuY2FsbCh0aGlzLCBkb21Ob2RlKTtcbiAgICAgIGlmICghdmFsdWUuc3RhcnRzV2l0aCgncmdiKCcpKSByZXR1cm4gdmFsdWU7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL15bXlxcZF0rLywgJycpLnJlcGxhY2UoL1teXFxkXSskLywgJycpO1xuICAgICAgcmV0dXJuICcjJyArIHZhbHVlLnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uIChjb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuICgnMDAnICsgcGFyc2VJbnQoY29tcG9uZW50KS50b1N0cmluZygxNikpLnNsaWNlKC0yKTtcbiAgICAgIH0pLmpvaW4oJycpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDb2xvckF0dHJpYnV0b3I7XG59KF9wYXJjaG1lbnQyLmRlZmF1bHQuQXR0cmlidXRvci5TdHlsZSk7XG5cbnZhciBDb2xvckNsYXNzID0gbmV3IF9wYXJjaG1lbnQyLmRlZmF1bHQuQXR0cmlidXRvci5DbGFzcygnY29sb3InLCAncWwtY29sb3InLCB7XG4gIHNjb3BlOiBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLklOTElORVxufSk7XG52YXIgQ29sb3JTdHlsZSA9IG5ldyBDb2xvckF0dHJpYnV0b3IoJ2NvbG9yJywgJ2NvbG9yJywge1xuICBzY29wZTogX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5JTkxJTkVcbn0pO1xuXG5leHBvcnRzLkNvbG9yQXR0cmlidXRvciA9IENvbG9yQXR0cmlidXRvcjtcbmV4cG9ydHMuQ29sb3JDbGFzcyA9IENvbG9yQ2xhc3M7XG5leHBvcnRzLkNvbG9yU3R5bGUgPSBDb2xvclN0eWxlO1xuXG4vKioqLyB9KSxcbi8qIDI3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnNhbml0aXplID0gZXhwb3J0cy5kZWZhdWx0ID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfaW5saW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxudmFyIF9pbmxpbmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5saW5lKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgTGluayA9IGZ1bmN0aW9uIChfSW5saW5lKSB7XG4gIF9pbmhlcml0cyhMaW5rLCBfSW5saW5lKTtcblxuICBmdW5jdGlvbiBMaW5rKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaW5rKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTGluay5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExpbmspKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhMaW5rLCBbe1xuICAgIGtleTogJ2Zvcm1hdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdChuYW1lLCB2YWx1ZSkge1xuICAgICAgaWYgKG5hbWUgIT09IHRoaXMuc3RhdGljcy5ibG90TmFtZSB8fCAhdmFsdWUpIHJldHVybiBfZ2V0KExpbmsucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTGluay5wcm90b3R5cGUpLCAnZm9ybWF0JywgdGhpcykuY2FsbCh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB2YWx1ZSA9IHRoaXMuY29uc3RydWN0b3Iuc2FuaXRpemUodmFsdWUpO1xuICAgICAgdGhpcy5kb21Ob2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIHZhbHVlKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogJ2NyZWF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgdmFyIG5vZGUgPSBfZ2V0KExpbmsuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMaW5rKSwgJ2NyZWF0ZScsIHRoaXMpLmNhbGwodGhpcywgdmFsdWUpO1xuICAgICAgdmFsdWUgPSB0aGlzLnNhbml0aXplKHZhbHVlKTtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgdmFsdWUpO1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3JlbCcsICdub29wZW5lciBub3JlZmVycmVyJyk7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSgndGFyZ2V0JywgJ19ibGFuaycpO1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZm9ybWF0cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdHMoZG9tTm9kZSkge1xuICAgICAgcmV0dXJuIGRvbU5vZGUuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2FuaXRpemUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzYW5pdGl6ZSh1cmwpIHtcbiAgICAgIHJldHVybiBfc2FuaXRpemUodXJsLCB0aGlzLlBST1RPQ09MX1dISVRFTElTVCkgPyB1cmwgOiB0aGlzLlNBTklUSVpFRF9VUkw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIExpbms7XG59KF9pbmxpbmUyLmRlZmF1bHQpO1xuXG5MaW5rLmJsb3ROYW1lID0gJ2xpbmsnO1xuTGluay50YWdOYW1lID0gJ0EnO1xuTGluay5TQU5JVElaRURfVVJMID0gJ2Fib3V0OmJsYW5rJztcbkxpbmsuUFJPVE9DT0xfV0hJVEVMSVNUID0gWydodHRwJywgJ2h0dHBzJywgJ21haWx0bycsICd0ZWwnXTtcblxuZnVuY3Rpb24gX3Nhbml0aXplKHVybCwgcHJvdG9jb2xzKSB7XG4gIHZhciBhbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gIGFuY2hvci5ocmVmID0gdXJsO1xuICB2YXIgcHJvdG9jb2wgPSBhbmNob3IuaHJlZi5zbGljZSgwLCBhbmNob3IuaHJlZi5pbmRleE9mKCc6JykpO1xuICByZXR1cm4gcHJvdG9jb2xzLmluZGV4T2YocHJvdG9jb2wpID4gLTE7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IExpbms7XG5leHBvcnRzLnNhbml0aXplID0gX3Nhbml0aXplO1xuXG4vKioqLyB9KSxcbi8qIDI4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9rZXlib2FyZCA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xuXG52YXIgX2tleWJvYXJkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleWJvYXJkKTtcblxudmFyIF9kcm9wZG93biA9IF9fd2VicGFja19yZXF1aXJlX18oMTA3KTtcblxudmFyIF9kcm9wZG93bjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kcm9wZG93bik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBvcHRpb25zQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIHRvZ2dsZUFyaWFBdHRyaWJ1dGUoZWxlbWVudCwgYXR0cmlidXRlKSB7XG4gIGVsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgIShlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpID09PSAndHJ1ZScpKTtcbn1cblxudmFyIFBpY2tlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGlja2VyKHNlbGVjdCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGlja2VyKTtcblxuICAgIHRoaXMuc2VsZWN0ID0gc2VsZWN0O1xuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIHRoaXMuYnVpbGRQaWNrZXIoKTtcbiAgICB0aGlzLnNlbGVjdC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIHRoaXMuc2VsZWN0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuY29udGFpbmVyLCB0aGlzLnNlbGVjdCk7XG5cbiAgICB0aGlzLmxhYmVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnRvZ2dsZVBpY2tlcigpO1xuICAgIH0pO1xuICAgIHRoaXMubGFiZWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIC8vIEFsbG93cyB0aGUgXCJFbnRlclwiIGtleSB0byBvcGVuIHRoZSBwaWNrZXJcbiAgICAgICAgY2FzZSBfa2V5Ym9hcmQyLmRlZmF1bHQua2V5cy5FTlRFUjpcbiAgICAgICAgICBfdGhpcy50b2dnbGVQaWNrZXIoKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICAvLyBBbGxvd3MgdGhlIFwiRXNjYXBlXCIga2V5IHRvIGNsb3NlIHRoZSBwaWNrZXJcbiAgICAgICAgY2FzZSBfa2V5Ym9hcmQyLmRlZmF1bHQua2V5cy5FU0NBUEU6XG4gICAgICAgICAgX3RoaXMuZXNjYXBlKCk7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQaWNrZXIsIFt7XG4gICAga2V5OiAndG9nZ2xlUGlja2VyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlUGlja2VyKCkge1xuICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LnRvZ2dsZSgncWwtZXhwYW5kZWQnKTtcbiAgICAgIC8vIFRvZ2dsZSBhcmlhLWV4cGFuZGVkIGFuZCBhcmlhLWhpZGRlbiB0byBtYWtlIHRoZSBwaWNrZXIgYWNjZXNzaWJsZVxuICAgICAgdG9nZ2xlQXJpYUF0dHJpYnV0ZSh0aGlzLmxhYmVsLCAnYXJpYS1leHBhbmRlZCcpO1xuICAgICAgdG9nZ2xlQXJpYUF0dHJpYnV0ZSh0aGlzLm9wdGlvbnMsICdhcmlhLWhpZGRlbicpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2J1aWxkSXRlbScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGJ1aWxkSXRlbShvcHRpb24pIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgIGl0ZW0udGFiSW5kZXggPSAnMCc7XG4gICAgICBpdGVtLnNldEF0dHJpYnV0ZSgncm9sZScsICdidXR0b24nKTtcblxuICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKCdxbC1waWNrZXItaXRlbScpO1xuICAgICAgaWYgKG9wdGlvbi5oYXNBdHRyaWJ1dGUoJ3ZhbHVlJykpIHtcbiAgICAgICAgaXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnLCBvcHRpb24uZ2V0QXR0cmlidXRlKCd2YWx1ZScpKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb24udGV4dENvbnRlbnQpIHtcbiAgICAgICAgaXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtbGFiZWwnLCBvcHRpb24udGV4dENvbnRlbnQpO1xuICAgICAgfVxuICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNlbGVjdEl0ZW0oaXRlbSwgdHJ1ZSk7XG4gICAgICB9KTtcbiAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgICAvLyBBbGxvd3MgdGhlIFwiRW50ZXJcIiBrZXkgdG8gc2VsZWN0IGFuIGl0ZW1cbiAgICAgICAgICBjYXNlIF9rZXlib2FyZDIuZGVmYXVsdC5rZXlzLkVOVEVSOlxuICAgICAgICAgICAgX3RoaXMyLnNlbGVjdEl0ZW0oaXRlbSwgdHJ1ZSk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAvLyBBbGxvd3MgdGhlIFwiRXNjYXBlXCIga2V5IHRvIGNsb3NlIHRoZSBwaWNrZXJcbiAgICAgICAgICBjYXNlIF9rZXlib2FyZDIuZGVmYXVsdC5rZXlzLkVTQ0FQRTpcbiAgICAgICAgICAgIF90aGlzMi5lc2NhcGUoKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYnVpbGRMYWJlbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGJ1aWxkTGFiZWwoKSB7XG4gICAgICB2YXIgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICBsYWJlbC5jbGFzc0xpc3QuYWRkKCdxbC1waWNrZXItbGFiZWwnKTtcbiAgICAgIGxhYmVsLmlubmVySFRNTCA9IF9kcm9wZG93bjIuZGVmYXVsdDtcbiAgICAgIGxhYmVsLnRhYkluZGV4ID0gJzAnO1xuICAgICAgbGFiZWwuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2J1dHRvbicpO1xuICAgICAgbGFiZWwuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgICByZXR1cm4gbGFiZWw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYnVpbGRPcHRpb25zJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYnVpbGRPcHRpb25zKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBvcHRpb25zID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgb3B0aW9ucy5jbGFzc0xpc3QuYWRkKCdxbC1waWNrZXItb3B0aW9ucycpO1xuXG4gICAgICAvLyBEb24ndCB3YW50IHNjcmVlbiByZWFkZXJzIHRvIHJlYWQgdGhpcyB1bnRpbCBvcHRpb25zIGFyZSB2aXNpYmxlXG4gICAgICBvcHRpb25zLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgb3B0aW9ucy50YWJJbmRleCA9ICctMSc7XG5cbiAgICAgIC8vIE5lZWQgYSB1bmlxdWUgaWQgZm9yIGFyaWEtY29udHJvbHNcbiAgICAgIG9wdGlvbnMuaWQgPSAncWwtcGlja2VyLW9wdGlvbnMtJyArIG9wdGlvbnNDb3VudGVyO1xuICAgICAgb3B0aW9uc0NvdW50ZXIgKz0gMTtcbiAgICAgIHRoaXMubGFiZWwuc2V0QXR0cmlidXRlKCdhcmlhLWNvbnRyb2xzJywgb3B0aW9ucy5pZCk7XG5cbiAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICAgIFtdLnNsaWNlLmNhbGwodGhpcy5zZWxlY3Qub3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgIHZhciBpdGVtID0gX3RoaXMzLmJ1aWxkSXRlbShvcHRpb24pO1xuICAgICAgICBvcHRpb25zLmFwcGVuZENoaWxkKGl0ZW0pO1xuICAgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgX3RoaXMzLnNlbGVjdEl0ZW0oaXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQob3B0aW9ucyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYnVpbGRQaWNrZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBidWlsZFBpY2tlcigpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICBbXS5zbGljZS5jYWxsKHRoaXMuc2VsZWN0LmF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgX3RoaXM0LmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoaXRlbS5uYW1lLCBpdGVtLnZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgncWwtcGlja2VyJyk7XG4gICAgICB0aGlzLmxhYmVsID0gdGhpcy5idWlsZExhYmVsKCk7XG4gICAgICB0aGlzLmJ1aWxkT3B0aW9ucygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2VzY2FwZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVzY2FwZSgpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICAvLyBDbG9zZSBtZW51IGFuZCByZXR1cm4gZm9jdXMgdG8gdHJpZ2dlciBsYWJlbFxuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgLy8gTmVlZCBzZXRUaW1lb3V0IGZvciBhY2Nlc3NpYmlsaXR5IHRvIGVuc3VyZSB0aGF0IHRoZSBicm93c2VyIGV4ZWN1dGVzXG4gICAgICAvLyBmb2N1cyBvbiB0aGUgbmV4dCBwcm9jZXNzIHRocmVhZCBhbmQgYWZ0ZXIgYW55IERPTSBjb250ZW50IGNoYW5nZXNcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXM1LmxhYmVsLmZvY3VzKCk7XG4gICAgICB9LCAxKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjbG9zZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgncWwtZXhwYW5kZWQnKTtcbiAgICAgIHRoaXMubGFiZWwuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgICB0aGlzLm9wdGlvbnMuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2VsZWN0SXRlbScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlbGVjdEl0ZW0oaXRlbSkge1xuICAgICAgdmFyIHRyaWdnZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gICAgICB2YXIgc2VsZWN0ZWQgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcucWwtc2VsZWN0ZWQnKTtcbiAgICAgIGlmIChpdGVtID09PSBzZWxlY3RlZCkgcmV0dXJuO1xuICAgICAgaWYgKHNlbGVjdGVkICE9IG51bGwpIHtcbiAgICAgICAgc2VsZWN0ZWQuY2xhc3NMaXN0LnJlbW92ZSgncWwtc2VsZWN0ZWQnKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtID09IG51bGwpIHJldHVybjtcbiAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZCgncWwtc2VsZWN0ZWQnKTtcbiAgICAgIHRoaXMuc2VsZWN0LnNlbGVjdGVkSW5kZXggPSBbXS5pbmRleE9mLmNhbGwoaXRlbS5wYXJlbnROb2RlLmNoaWxkcmVuLCBpdGVtKTtcbiAgICAgIGlmIChpdGVtLmhhc0F0dHJpYnV0ZSgnZGF0YS12YWx1ZScpKSB7XG4gICAgICAgIHRoaXMubGFiZWwuc2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJywgaXRlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxhYmVsLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW0uaGFzQXR0cmlidXRlKCdkYXRhLWxhYmVsJykpIHtcbiAgICAgICAgdGhpcy5sYWJlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbGFiZWwnLCBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1sYWJlbCcpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGFiZWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWxhYmVsJyk7XG4gICAgICB9XG4gICAgICBpZiAodHJpZ2dlcikge1xuICAgICAgICBpZiAodHlwZW9mIEV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhpcy5zZWxlY3QuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NoYW5nZScpKTtcbiAgICAgICAgfSBlbHNlIGlmICgodHlwZW9mIEV2ZW50ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihFdmVudCkpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIC8vIElFMTFcbiAgICAgICAgICB2YXIgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICAgICAgICBldmVudC5pbml0RXZlbnQoJ2NoYW5nZScsIHRydWUsIHRydWUpO1xuICAgICAgICAgIHRoaXMuc2VsZWN0LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd1cGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICB2YXIgb3B0aW9uID0gdm9pZCAwO1xuICAgICAgaWYgKHRoaXMuc2VsZWN0LnNlbGVjdGVkSW5kZXggPiAtMSkge1xuICAgICAgICB2YXIgaXRlbSA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5xbC1waWNrZXItb3B0aW9ucycpLmNoaWxkcmVuW3RoaXMuc2VsZWN0LnNlbGVjdGVkSW5kZXhdO1xuICAgICAgICBvcHRpb24gPSB0aGlzLnNlbGVjdC5vcHRpb25zW3RoaXMuc2VsZWN0LnNlbGVjdGVkSW5kZXhdO1xuICAgICAgICB0aGlzLnNlbGVjdEl0ZW0oaXRlbSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNlbGVjdEl0ZW0obnVsbCk7XG4gICAgICB9XG4gICAgICB2YXIgaXNBY3RpdmUgPSBvcHRpb24gIT0gbnVsbCAmJiBvcHRpb24gIT09IHRoaXMuc2VsZWN0LnF1ZXJ5U2VsZWN0b3IoJ29wdGlvbltzZWxlY3RlZF0nKTtcbiAgICAgIHRoaXMubGFiZWwuY2xhc3NMaXN0LnRvZ2dsZSgncWwtYWN0aXZlJywgaXNBY3RpdmUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQaWNrZXI7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFBpY2tlcjtcblxuLyoqKi8gfSksXG4vKiAyOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbnZhciBfcXVpbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG52YXIgX3F1aWxsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1aWxsKTtcblxudmFyIF9ibG9jayA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfYmxvY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYmxvY2spO1xuXG52YXIgX2JyZWFrID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cbnZhciBfYnJlYWsyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYnJlYWspO1xuXG52YXIgX2NvbnRhaW5lciA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpO1xuXG52YXIgX2NvbnRhaW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb250YWluZXIpO1xuXG52YXIgX2N1cnNvciA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpO1xuXG52YXIgX2N1cnNvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jdXJzb3IpO1xuXG52YXIgX2VtYmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNSk7XG5cbnZhciBfZW1iZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZW1iZWQpO1xuXG52YXIgX2lubGluZSA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cbnZhciBfaW5saW5lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lubGluZSk7XG5cbnZhciBfc2Nyb2xsID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG5cbnZhciBfc2Nyb2xsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Njcm9sbCk7XG5cbnZhciBfdGV4dCA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cbnZhciBfdGV4dDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90ZXh0KTtcblxudmFyIF9jbGlwYm9hcmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU1KTtcblxudmFyIF9jbGlwYm9hcmQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xpcGJvYXJkKTtcblxudmFyIF9oaXN0b3J5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Mik7XG5cbnZhciBfaGlzdG9yeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oaXN0b3J5KTtcblxudmFyIF9rZXlib2FyZCA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xuXG52YXIgX2tleWJvYXJkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleWJvYXJkKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuX3F1aWxsMi5kZWZhdWx0LnJlZ2lzdGVyKHtcbiAgJ2Jsb3RzL2Jsb2NrJzogX2Jsb2NrMi5kZWZhdWx0LFxuICAnYmxvdHMvYmxvY2svZW1iZWQnOiBfYmxvY2suQmxvY2tFbWJlZCxcbiAgJ2Jsb3RzL2JyZWFrJzogX2JyZWFrMi5kZWZhdWx0LFxuICAnYmxvdHMvY29udGFpbmVyJzogX2NvbnRhaW5lcjIuZGVmYXVsdCxcbiAgJ2Jsb3RzL2N1cnNvcic6IF9jdXJzb3IyLmRlZmF1bHQsXG4gICdibG90cy9lbWJlZCc6IF9lbWJlZDIuZGVmYXVsdCxcbiAgJ2Jsb3RzL2lubGluZSc6IF9pbmxpbmUyLmRlZmF1bHQsXG4gICdibG90cy9zY3JvbGwnOiBfc2Nyb2xsMi5kZWZhdWx0LFxuICAnYmxvdHMvdGV4dCc6IF90ZXh0Mi5kZWZhdWx0LFxuXG4gICdtb2R1bGVzL2NsaXBib2FyZCc6IF9jbGlwYm9hcmQyLmRlZmF1bHQsXG4gICdtb2R1bGVzL2hpc3RvcnknOiBfaGlzdG9yeTIuZGVmYXVsdCxcbiAgJ21vZHVsZXMva2V5Ym9hcmQnOiBfa2V5Ym9hcmQyLmRlZmF1bHRcbn0pO1xuXG5fcGFyY2htZW50Mi5kZWZhdWx0LnJlZ2lzdGVyKF9ibG9jazIuZGVmYXVsdCwgX2JyZWFrMi5kZWZhdWx0LCBfY3Vyc29yMi5kZWZhdWx0LCBfaW5saW5lMi5kZWZhdWx0LCBfc2Nyb2xsMi5kZWZhdWx0LCBfdGV4dDIuZGVmYXVsdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9xdWlsbDIuZGVmYXVsdDtcblxuLyoqKi8gfSksXG4vKiAzMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBTaGFkb3dCbG90ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNoYWRvd0Jsb3QoZG9tTm9kZSkge1xuICAgICAgICB0aGlzLmRvbU5vZGUgPSBkb21Ob2RlO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0gPSB7IGJsb3Q6IHRoaXMgfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNoYWRvd0Jsb3QucHJvdG90eXBlLCBcInN0YXRpY3NcIiwge1xuICAgICAgICAvLyBIYWNrIGZvciBhY2Nlc3NpbmcgaW5oZXJpdGVkIHN0YXRpYyBtZXRob2RzXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3I7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFNoYWRvd0Jsb3QuY3JlYXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnRhZ05hbWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlZ2lzdHJ5LlBhcmNobWVudEVycm9yKCdCbG90IGRlZmluaXRpb24gbWlzc2luZyB0YWdOYW1lJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5vZGU7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMudGFnTmFtZSkpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZUludCh2YWx1ZSkudG9TdHJpbmcoKSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUludCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLnRhZ05hbWVbdmFsdWUgLSAxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnRhZ05hbWUuaW5kZXhPZih2YWx1ZSkgPiAtMSkge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMudGFnTmFtZVswXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLnRhZ05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNsYXNzTmFtZSkge1xuICAgICAgICAgICAgbm9kZS5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLmF0dGFjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsID0gdGhpcy5wYXJlbnQuc2Nyb2xsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRvbU5vZGUgPSB0aGlzLmRvbU5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIFJlZ2lzdHJ5LmNyZWF0ZShkb21Ob2RlKTtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLmRldGFjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50ICE9IG51bGwpXG4gICAgICAgICAgICB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBkZWxldGUgdGhpcy5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXTtcbiAgICB9O1xuICAgIFNoYWRvd0Jsb3QucHJvdG90eXBlLmRlbGV0ZUF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGJsb3QgPSB0aGlzLmlzb2xhdGUoaW5kZXgsIGxlbmd0aCk7XG4gICAgICAgIGJsb3QucmVtb3ZlKCk7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5mb3JtYXRBdCA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgYmxvdCA9IHRoaXMuaXNvbGF0ZShpbmRleCwgbGVuZ3RoKTtcbiAgICAgICAgaWYgKFJlZ2lzdHJ5LnF1ZXJ5KG5hbWUsIFJlZ2lzdHJ5LlNjb3BlLkJMT1QpICE9IG51bGwgJiYgdmFsdWUpIHtcbiAgICAgICAgICAgIGJsb3Qud3JhcChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoUmVnaXN0cnkucXVlcnkobmFtZSwgUmVnaXN0cnkuU2NvcGUuQVRUUklCVVRFKSAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gUmVnaXN0cnkuY3JlYXRlKHRoaXMuc3RhdGljcy5zY29wZSk7XG4gICAgICAgICAgICBibG90LndyYXAocGFyZW50KTtcbiAgICAgICAgICAgIHBhcmVudC5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5pbnNlcnRBdCA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUsIGRlZikge1xuICAgICAgICB2YXIgYmxvdCA9IGRlZiA9PSBudWxsID8gUmVnaXN0cnkuY3JlYXRlKCd0ZXh0JywgdmFsdWUpIDogUmVnaXN0cnkuY3JlYXRlKHZhbHVlLCBkZWYpO1xuICAgICAgICB2YXIgcmVmID0gdGhpcy5zcGxpdChpbmRleCk7XG4gICAgICAgIHRoaXMucGFyZW50Lmluc2VydEJlZm9yZShibG90LCByZWYpO1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUuaW5zZXJ0SW50byA9IGZ1bmN0aW9uIChwYXJlbnRCbG90LCByZWZCbG90KSB7XG4gICAgICAgIGlmIChyZWZCbG90ID09PSB2b2lkIDApIHsgcmVmQmxvdCA9IG51bGw7IH1cbiAgICAgICAgaWYgKHRoaXMucGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50LmNoaWxkcmVuLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVmRG9tTm9kZSA9IG51bGw7XG4gICAgICAgIHBhcmVudEJsb3QuY2hpbGRyZW4uaW5zZXJ0QmVmb3JlKHRoaXMsIHJlZkJsb3QpO1xuICAgICAgICBpZiAocmVmQmxvdCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZWZEb21Ob2RlID0gcmVmQmxvdC5kb21Ob2RlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRvbU5vZGUucGFyZW50Tm9kZSAhPSBwYXJlbnRCbG90LmRvbU5vZGUgfHxcbiAgICAgICAgICAgIHRoaXMuZG9tTm9kZS5uZXh0U2libGluZyAhPSByZWZEb21Ob2RlKSB7XG4gICAgICAgICAgICBwYXJlbnRCbG90LmRvbU5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuZG9tTm9kZSwgcmVmRG9tTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnRCbG90O1xuICAgICAgICB0aGlzLmF0dGFjaCgpO1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUuaXNvbGF0ZSA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLnNwbGl0KGluZGV4KTtcbiAgICAgICAgdGFyZ2V0LnNwbGl0KGxlbmd0aCk7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUub2Zmc2V0ID0gZnVuY3Rpb24gKHJvb3QpIHtcbiAgICAgICAgaWYgKHJvb3QgPT09IHZvaWQgMCkgeyByb290ID0gdGhpcy5wYXJlbnQ7IH1cbiAgICAgICAgaWYgKHRoaXMucGFyZW50ID09IG51bGwgfHwgdGhpcyA9PSByb290KVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5jaGlsZHJlbi5vZmZzZXQodGhpcykgKyB0aGlzLnBhcmVudC5vZmZzZXQocm9vdCk7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5vcHRpbWl6ZSA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIC8vIFRPRE8gY2xlYW4gdXAgb25jZSB3ZSB1c2UgV2Vha01hcFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmICh0aGlzLmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldLm11dGF0aW9ucztcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5kb21Ob2RlLnBhcmVudE5vZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5kb21Ob2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5kb21Ob2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRldGFjaCgpO1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgaWYgKHRhcmdldC5wYXJlbnQgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGFyZ2V0LnBhcmVudC5pbnNlcnRCZWZvcmUodGhpcywgdGFyZ2V0Lm5leHQpO1xuICAgICAgICB0YXJnZXQucmVtb3ZlKCk7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS5yZXBsYWNlV2l0aCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgPyBSZWdpc3RyeS5jcmVhdGUobmFtZSwgdmFsdWUpIDogbmFtZTtcbiAgICAgICAgcmVwbGFjZW1lbnQucmVwbGFjZSh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHJlcGxhY2VtZW50O1xuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiAoaW5kZXgsIGZvcmNlKSB7XG4gICAgICAgIHJldHVybiBpbmRleCA9PT0gMCA/IHRoaXMgOiB0aGlzLm5leHQ7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAobXV0YXRpb25zLCBjb250ZXh0KSB7XG4gICAgICAgIC8vIE5vdGhpbmcgdG8gZG8gYnkgZGVmYXVsdFxuICAgIH07XG4gICAgU2hhZG93QmxvdC5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyA/IFJlZ2lzdHJ5LmNyZWF0ZShuYW1lLCB2YWx1ZSkgOiBuYW1lO1xuICAgICAgICBpZiAodGhpcy5wYXJlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKHdyYXBwZXIsIHRoaXMubmV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfTtcbiAgICBTaGFkb3dCbG90LmJsb3ROYW1lID0gJ2Fic3RyYWN0JztcbiAgICByZXR1cm4gU2hhZG93QmxvdDtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBTaGFkb3dCbG90O1xuXG5cbi8qKiovIH0pLFxuLyogMzEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBhdHRyaWJ1dG9yXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcbnZhciBjbGFzc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMik7XG52YXIgc3R5bGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzMpO1xudmFyIFJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBBdHRyaWJ1dG9yU3RvcmUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXR0cmlidXRvclN0b3JlKGRvbU5vZGUpIHtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0ge307XG4gICAgICAgIHRoaXMuZG9tTm9kZSA9IGRvbU5vZGU7XG4gICAgICAgIHRoaXMuYnVpbGQoKTtcbiAgICB9XG4gICAgQXR0cmlidXRvclN0b3JlLnByb3RvdHlwZS5hdHRyaWJ1dGUgPSBmdW5jdGlvbiAoYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgICAgICAvLyB2ZXJiXG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZS5hZGQodGhpcy5kb21Ob2RlLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlLnZhbHVlKHRoaXMuZG9tTm9kZSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXNbYXR0cmlidXRlLmF0dHJOYW1lXSA9IGF0dHJpYnV0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmF0dHJpYnV0ZXNbYXR0cmlidXRlLmF0dHJOYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGUucmVtb3ZlKHRoaXMuZG9tTm9kZSk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5hdHRyTmFtZV07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEF0dHJpYnV0b3JTdG9yZS5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuICAgICAgICB2YXIgYXR0cmlidXRlcyA9IGF0dHJpYnV0b3JfMS5kZWZhdWx0LmtleXModGhpcy5kb21Ob2RlKTtcbiAgICAgICAgdmFyIGNsYXNzZXMgPSBjbGFzc18xLmRlZmF1bHQua2V5cyh0aGlzLmRvbU5vZGUpO1xuICAgICAgICB2YXIgc3R5bGVzID0gc3R5bGVfMS5kZWZhdWx0LmtleXModGhpcy5kb21Ob2RlKTtcbiAgICAgICAgYXR0cmlidXRlc1xuICAgICAgICAgICAgLmNvbmNhdChjbGFzc2VzKVxuICAgICAgICAgICAgLmNvbmNhdChzdHlsZXMpXG4gICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgdmFyIGF0dHIgPSBSZWdpc3RyeS5xdWVyeShuYW1lLCBSZWdpc3RyeS5TY29wZS5BVFRSSUJVVEUpO1xuICAgICAgICAgICAgaWYgKGF0dHIgaW5zdGFuY2VvZiBhdHRyaWJ1dG9yXzEuZGVmYXVsdCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmF0dHJpYnV0ZXNbYXR0ci5hdHRyTmFtZV0gPSBhdHRyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEF0dHJpYnV0b3JTdG9yZS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5hdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IF90aGlzLmF0dHJpYnV0ZXNba2V5XS52YWx1ZShfdGhpcy5kb21Ob2RlKTtcbiAgICAgICAgICAgIHRhcmdldC5mb3JtYXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQXR0cmlidXRvclN0b3JlLnByb3RvdHlwZS5tb3ZlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmNvcHkodGFyZ2V0KTtcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5hdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIF90aGlzLmF0dHJpYnV0ZXNba2V5XS5yZW1vdmUoX3RoaXMuZG9tTm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSB7fTtcbiAgICB9O1xuICAgIEF0dHJpYnV0b3JTdG9yZS5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5hdHRyaWJ1dGVzKS5yZWR1Y2UoZnVuY3Rpb24gKGF0dHJpYnV0ZXMsIG5hbWUpIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXNbbmFtZV0gPSBfdGhpcy5hdHRyaWJ1dGVzW25hbWVdLnZhbHVlKF90aGlzLmRvbU5vZGUpO1xuICAgICAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZXM7XG4gICAgICAgIH0sIHt9KTtcbiAgICB9O1xuICAgIHJldHVybiBBdHRyaWJ1dG9yU3RvcmU7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gQXR0cmlidXRvclN0b3JlO1xuXG5cbi8qKiovIH0pLFxuLyogMzIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGF0dHJpYnV0b3JfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuZnVuY3Rpb24gbWF0Y2gobm9kZSwgcHJlZml4KSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnO1xuICAgIHJldHVybiBjbGFzc05hbWUuc3BsaXQoL1xccysvKS5maWx0ZXIoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5hbWUuaW5kZXhPZihwcmVmaXggKyBcIi1cIikgPT09IDA7XG4gICAgfSk7XG59XG52YXIgQ2xhc3NBdHRyaWJ1dG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDbGFzc0F0dHJpYnV0b3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ2xhc3NBdHRyaWJ1dG9yKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIENsYXNzQXR0cmlidXRvci5rZXlzID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIChub2RlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykuc3BsaXQoL1xccysvKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBuYW1lXG4gICAgICAgICAgICAgICAgLnNwbGl0KCctJylcbiAgICAgICAgICAgICAgICAuc2xpY2UoMCwgLTEpXG4gICAgICAgICAgICAgICAgLmpvaW4oJy0nKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDbGFzc0F0dHJpYnV0b3IucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChub2RlLCB2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuY2FuQWRkKG5vZGUsIHZhbHVlKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgdGhpcy5yZW1vdmUobm9kZSk7XG4gICAgICAgIG5vZGUuY2xhc3NMaXN0LmFkZCh0aGlzLmtleU5hbWUgKyBcIi1cIiArIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBDbGFzc0F0dHJpYnV0b3IucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHZhciBtYXRjaGVzID0gbWF0Y2gobm9kZSwgdGhpcy5rZXlOYW1lKTtcbiAgICAgICAgbWF0Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICBub2RlLmNsYXNzTGlzdC5yZW1vdmUobmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobm9kZS5jbGFzc0xpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ2xhc3NBdHRyaWJ1dG9yLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBtYXRjaChub2RlLCB0aGlzLmtleU5hbWUpWzBdIHx8ICcnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQuc2xpY2UodGhpcy5rZXlOYW1lLmxlbmd0aCArIDEpOyAvLyArMSBmb3IgaHlwaGVuXG4gICAgICAgIHJldHVybiB0aGlzLmNhbkFkZChub2RlLCB2YWx1ZSkgPyB2YWx1ZSA6ICcnO1xuICAgIH07XG4gICAgcmV0dXJuIENsYXNzQXR0cmlidXRvcjtcbn0oYXR0cmlidXRvcl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IENsYXNzQXR0cmlidXRvcjtcblxuXG4vKioqLyB9KSxcbi8qIDMzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBhdHRyaWJ1dG9yXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcbmZ1bmN0aW9uIGNhbWVsaXplKG5hbWUpIHtcbiAgICB2YXIgcGFydHMgPSBuYW1lLnNwbGl0KCctJyk7XG4gICAgdmFyIHJlc3QgPSBwYXJ0c1xuICAgICAgICAuc2xpY2UoMSlcbiAgICAgICAgLm1hcChmdW5jdGlvbiAocGFydCkge1xuICAgICAgICByZXR1cm4gcGFydFswXS50b1VwcGVyQ2FzZSgpICsgcGFydC5zbGljZSgxKTtcbiAgICB9KVxuICAgICAgICAuam9pbignJyk7XG4gICAgcmV0dXJuIHBhcnRzWzBdICsgcmVzdDtcbn1cbnZhciBTdHlsZUF0dHJpYnV0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN0eWxlQXR0cmlidXRvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdHlsZUF0dHJpYnV0b3IoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgU3R5bGVBdHRyaWJ1dG9yLmtleXMgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICByZXR1cm4gKG5vZGUuZ2V0QXR0cmlidXRlKCdzdHlsZScpIHx8ICcnKS5zcGxpdCgnOycpLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBhcnIgPSB2YWx1ZS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgcmV0dXJuIGFyclswXS50cmltKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgU3R5bGVBdHRyaWJ1dG9yLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAobm9kZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNhbkFkZChub2RlLCB2YWx1ZSkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgbm9kZS5zdHlsZVtjYW1lbGl6ZSh0aGlzLmtleU5hbWUpXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIFN0eWxlQXR0cmlidXRvci5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBub2RlLnN0eWxlW2NhbWVsaXplKHRoaXMua2V5TmFtZSldID0gJyc7XG4gICAgICAgIGlmICghbm9kZS5nZXRBdHRyaWJ1dGUoJ3N0eWxlJykpIHtcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdHlsZUF0dHJpYnV0b3IucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB2YXIgdmFsdWUgPSBub2RlLnN0eWxlW2NhbWVsaXplKHRoaXMua2V5TmFtZSldO1xuICAgICAgICByZXR1cm4gdGhpcy5jYW5BZGQobm9kZSwgdmFsdWUpID8gdmFsdWUgOiAnJztcbiAgICB9O1xuICAgIHJldHVybiBTdHlsZUF0dHJpYnV0b3I7XG59KGF0dHJpYnV0b3JfMS5kZWZhdWx0KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBTdHlsZUF0dHJpYnV0b3I7XG5cblxuLyoqKi8gfSksXG4vKiAzNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgVGhlbWUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFRoZW1lKHF1aWxsLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRoZW1lKTtcblxuICAgIHRoaXMucXVpbGwgPSBxdWlsbDtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMubW9kdWxlcyA9IHt9O1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRoZW1lLCBbe1xuICAgIGtleTogJ2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgT2JqZWN0LmtleXModGhpcy5vcHRpb25zLm1vZHVsZXMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgaWYgKF90aGlzLm1vZHVsZXNbbmFtZV0gPT0gbnVsbCkge1xuICAgICAgICAgIF90aGlzLmFkZE1vZHVsZShuYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYWRkTW9kdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkTW9kdWxlKG5hbWUpIHtcbiAgICAgIHZhciBtb2R1bGVDbGFzcyA9IHRoaXMucXVpbGwuY29uc3RydWN0b3IuaW1wb3J0KCdtb2R1bGVzLycgKyBuYW1lKTtcbiAgICAgIHRoaXMubW9kdWxlc1tuYW1lXSA9IG5ldyBtb2R1bGVDbGFzcyh0aGlzLnF1aWxsLCB0aGlzLm9wdGlvbnMubW9kdWxlc1tuYW1lXSB8fCB7fSk7XG4gICAgICByZXR1cm4gdGhpcy5tb2R1bGVzW25hbWVdO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUaGVtZTtcbn0oKTtcblxuVGhlbWUuREVGQVVMVFMgPSB7XG4gIG1vZHVsZXM6IHt9XG59O1xuVGhlbWUudGhlbWVzID0ge1xuICAnZGVmYXVsdCc6IFRoZW1lXG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBUaGVtZTtcblxuLyoqKi8gfSksXG4vKiAzNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxudmFyIF90ZXh0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxudmFyIF90ZXh0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RleHQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBHVUFSRF9URVhUID0gJ1xcdUZFRkYnO1xuXG52YXIgRW1iZWQgPSBmdW5jdGlvbiAoX1BhcmNobWVudCRFbWJlZCkge1xuICBfaW5oZXJpdHMoRW1iZWQsIF9QYXJjaG1lbnQkRW1iZWQpO1xuXG4gIGZ1bmN0aW9uIEVtYmVkKG5vZGUpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRW1iZWQpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEVtYmVkLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRW1iZWQpKS5jYWxsKHRoaXMsIG5vZGUpKTtcblxuICAgIF90aGlzLmNvbnRlbnROb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIF90aGlzLmNvbnRlbnROb2RlLnNldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJywgZmFsc2UpO1xuICAgIFtdLnNsaWNlLmNhbGwoX3RoaXMuZG9tTm9kZS5jaGlsZE5vZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZE5vZGUpIHtcbiAgICAgIF90aGlzLmNvbnRlbnROb2RlLmFwcGVuZENoaWxkKGNoaWxkTm9kZSk7XG4gICAgfSk7XG4gICAgX3RoaXMubGVmdEd1YXJkID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoR1VBUkRfVEVYVCk7XG4gICAgX3RoaXMucmlnaHRHdWFyZCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKEdVQVJEX1RFWFQpO1xuICAgIF90aGlzLmRvbU5vZGUuYXBwZW5kQ2hpbGQoX3RoaXMubGVmdEd1YXJkKTtcbiAgICBfdGhpcy5kb21Ob2RlLmFwcGVuZENoaWxkKF90aGlzLmNvbnRlbnROb2RlKTtcbiAgICBfdGhpcy5kb21Ob2RlLmFwcGVuZENoaWxkKF90aGlzLnJpZ2h0R3VhcmQpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhFbWJlZCwgW3tcbiAgICBrZXk6ICdpbmRleCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluZGV4KG5vZGUsIG9mZnNldCkge1xuICAgICAgaWYgKG5vZGUgPT09IHRoaXMubGVmdEd1YXJkKSByZXR1cm4gMDtcbiAgICAgIGlmIChub2RlID09PSB0aGlzLnJpZ2h0R3VhcmQpIHJldHVybiAxO1xuICAgICAgcmV0dXJuIF9nZXQoRW1iZWQucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRW1iZWQucHJvdG90eXBlKSwgJ2luZGV4JywgdGhpcykuY2FsbCh0aGlzLCBub2RlLCBvZmZzZXQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Jlc3RvcmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXN0b3JlKG5vZGUpIHtcbiAgICAgIHZhciByYW5nZSA9IHZvaWQgMCxcbiAgICAgICAgICB0ZXh0Tm9kZSA9IHZvaWQgMDtcbiAgICAgIHZhciB0ZXh0ID0gbm9kZS5kYXRhLnNwbGl0KEdVQVJEX1RFWFQpLmpvaW4oJycpO1xuICAgICAgaWYgKG5vZGUgPT09IHRoaXMubGVmdEd1YXJkKSB7XG4gICAgICAgIGlmICh0aGlzLnByZXYgaW5zdGFuY2VvZiBfdGV4dDIuZGVmYXVsdCkge1xuICAgICAgICAgIHZhciBwcmV2TGVuZ3RoID0gdGhpcy5wcmV2Lmxlbmd0aCgpO1xuICAgICAgICAgIHRoaXMucHJldi5pbnNlcnRBdChwcmV2TGVuZ3RoLCB0ZXh0KTtcbiAgICAgICAgICByYW5nZSA9IHtcbiAgICAgICAgICAgIHN0YXJ0Tm9kZTogdGhpcy5wcmV2LmRvbU5vZGUsXG4gICAgICAgICAgICBzdGFydE9mZnNldDogcHJldkxlbmd0aCArIHRleHQubGVuZ3RoXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpO1xuICAgICAgICAgIHRoaXMucGFyZW50Lmluc2VydEJlZm9yZShfcGFyY2htZW50Mi5kZWZhdWx0LmNyZWF0ZSh0ZXh0Tm9kZSksIHRoaXMpO1xuICAgICAgICAgIHJhbmdlID0ge1xuICAgICAgICAgICAgc3RhcnROb2RlOiB0ZXh0Tm9kZSxcbiAgICAgICAgICAgIHN0YXJ0T2Zmc2V0OiB0ZXh0Lmxlbmd0aFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobm9kZSA9PT0gdGhpcy5yaWdodEd1YXJkKSB7XG4gICAgICAgIGlmICh0aGlzLm5leHQgaW5zdGFuY2VvZiBfdGV4dDIuZGVmYXVsdCkge1xuICAgICAgICAgIHRoaXMubmV4dC5pbnNlcnRBdCgwLCB0ZXh0KTtcbiAgICAgICAgICByYW5nZSA9IHtcbiAgICAgICAgICAgIHN0YXJ0Tm9kZTogdGhpcy5uZXh0LmRvbU5vZGUsXG4gICAgICAgICAgICBzdGFydE9mZnNldDogdGV4dC5sZW5ndGhcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dCk7XG4gICAgICAgICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKF9wYXJjaG1lbnQyLmRlZmF1bHQuY3JlYXRlKHRleHROb2RlKSwgdGhpcy5uZXh0KTtcbiAgICAgICAgICByYW5nZSA9IHtcbiAgICAgICAgICAgIHN0YXJ0Tm9kZTogdGV4dE5vZGUsXG4gICAgICAgICAgICBzdGFydE9mZnNldDogdGV4dC5sZW5ndGhcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBub2RlLmRhdGEgPSBHVUFSRF9URVhUO1xuICAgICAgcmV0dXJuIHJhbmdlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShtdXRhdGlvbnMsIGNvbnRleHQpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBtdXRhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAobXV0YXRpb24pIHtcbiAgICAgICAgaWYgKG11dGF0aW9uLnR5cGUgPT09ICdjaGFyYWN0ZXJEYXRhJyAmJiAobXV0YXRpb24udGFyZ2V0ID09PSBfdGhpczIubGVmdEd1YXJkIHx8IG11dGF0aW9uLnRhcmdldCA9PT0gX3RoaXMyLnJpZ2h0R3VhcmQpKSB7XG4gICAgICAgICAgdmFyIHJhbmdlID0gX3RoaXMyLnJlc3RvcmUobXV0YXRpb24udGFyZ2V0KTtcbiAgICAgICAgICBpZiAocmFuZ2UpIGNvbnRleHQucmFuZ2UgPSByYW5nZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEVtYmVkO1xufShfcGFyY2htZW50Mi5kZWZhdWx0LkVtYmVkKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRW1iZWQ7XG5cbi8qKiovIH0pLFxuLyogMzYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQWxpZ25TdHlsZSA9IGV4cG9ydHMuQWxpZ25DbGFzcyA9IGV4cG9ydHMuQWxpZ25BdHRyaWJ1dGUgPSB1bmRlZmluZWQ7XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNvbmZpZyA9IHtcbiAgc2NvcGU6IF9wYXJjaG1lbnQyLmRlZmF1bHQuU2NvcGUuQkxPQ0ssXG4gIHdoaXRlbGlzdDogWydyaWdodCcsICdjZW50ZXInLCAnanVzdGlmeSddXG59O1xuXG52YXIgQWxpZ25BdHRyaWJ1dGUgPSBuZXcgX3BhcmNobWVudDIuZGVmYXVsdC5BdHRyaWJ1dG9yLkF0dHJpYnV0ZSgnYWxpZ24nLCAnYWxpZ24nLCBjb25maWcpO1xudmFyIEFsaWduQ2xhc3MgPSBuZXcgX3BhcmNobWVudDIuZGVmYXVsdC5BdHRyaWJ1dG9yLkNsYXNzKCdhbGlnbicsICdxbC1hbGlnbicsIGNvbmZpZyk7XG52YXIgQWxpZ25TdHlsZSA9IG5ldyBfcGFyY2htZW50Mi5kZWZhdWx0LkF0dHJpYnV0b3IuU3R5bGUoJ2FsaWduJywgJ3RleHQtYWxpZ24nLCBjb25maWcpO1xuXG5leHBvcnRzLkFsaWduQXR0cmlidXRlID0gQWxpZ25BdHRyaWJ1dGU7XG5leHBvcnRzLkFsaWduQ2xhc3MgPSBBbGlnbkNsYXNzO1xuZXhwb3J0cy5BbGlnblN0eWxlID0gQWxpZ25TdHlsZTtcblxuLyoqKi8gfSksXG4vKiAzNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5CYWNrZ3JvdW5kU3R5bGUgPSBleHBvcnRzLkJhY2tncm91bmRDbGFzcyA9IHVuZGVmaW5lZDtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG52YXIgX2NvbG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBCYWNrZ3JvdW5kQ2xhc3MgPSBuZXcgX3BhcmNobWVudDIuZGVmYXVsdC5BdHRyaWJ1dG9yLkNsYXNzKCdiYWNrZ3JvdW5kJywgJ3FsLWJnJywge1xuICBzY29wZTogX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5JTkxJTkVcbn0pO1xudmFyIEJhY2tncm91bmRTdHlsZSA9IG5ldyBfY29sb3IuQ29sb3JBdHRyaWJ1dG9yKCdiYWNrZ3JvdW5kJywgJ2JhY2tncm91bmQtY29sb3InLCB7XG4gIHNjb3BlOiBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLklOTElORVxufSk7XG5cbmV4cG9ydHMuQmFja2dyb3VuZENsYXNzID0gQmFja2dyb3VuZENsYXNzO1xuZXhwb3J0cy5CYWNrZ3JvdW5kU3R5bGUgPSBCYWNrZ3JvdW5kU3R5bGU7XG5cbi8qKiovIH0pLFxuLyogMzggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRGlyZWN0aW9uU3R5bGUgPSBleHBvcnRzLkRpcmVjdGlvbkNsYXNzID0gZXhwb3J0cy5EaXJlY3Rpb25BdHRyaWJ1dGUgPSB1bmRlZmluZWQ7XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNvbmZpZyA9IHtcbiAgc2NvcGU6IF9wYXJjaG1lbnQyLmRlZmF1bHQuU2NvcGUuQkxPQ0ssXG4gIHdoaXRlbGlzdDogWydydGwnXVxufTtcblxudmFyIERpcmVjdGlvbkF0dHJpYnV0ZSA9IG5ldyBfcGFyY2htZW50Mi5kZWZhdWx0LkF0dHJpYnV0b3IuQXR0cmlidXRlKCdkaXJlY3Rpb24nLCAnZGlyJywgY29uZmlnKTtcbnZhciBEaXJlY3Rpb25DbGFzcyA9IG5ldyBfcGFyY2htZW50Mi5kZWZhdWx0LkF0dHJpYnV0b3IuQ2xhc3MoJ2RpcmVjdGlvbicsICdxbC1kaXJlY3Rpb24nLCBjb25maWcpO1xudmFyIERpcmVjdGlvblN0eWxlID0gbmV3IF9wYXJjaG1lbnQyLmRlZmF1bHQuQXR0cmlidXRvci5TdHlsZSgnZGlyZWN0aW9uJywgJ2RpcmVjdGlvbicsIGNvbmZpZyk7XG5cbmV4cG9ydHMuRGlyZWN0aW9uQXR0cmlidXRlID0gRGlyZWN0aW9uQXR0cmlidXRlO1xuZXhwb3J0cy5EaXJlY3Rpb25DbGFzcyA9IERpcmVjdGlvbkNsYXNzO1xuZXhwb3J0cy5EaXJlY3Rpb25TdHlsZSA9IERpcmVjdGlvblN0eWxlO1xuXG4vKioqLyB9KSxcbi8qIDM5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkZvbnRDbGFzcyA9IGV4cG9ydHMuRm9udFN0eWxlID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgY29uZmlnID0ge1xuICBzY29wZTogX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5JTkxJTkUsXG4gIHdoaXRlbGlzdDogWydzZXJpZicsICdtb25vc3BhY2UnXVxufTtcblxudmFyIEZvbnRDbGFzcyA9IG5ldyBfcGFyY2htZW50Mi5kZWZhdWx0LkF0dHJpYnV0b3IuQ2xhc3MoJ2ZvbnQnLCAncWwtZm9udCcsIGNvbmZpZyk7XG5cbnZhciBGb250U3R5bGVBdHRyaWJ1dG9yID0gZnVuY3Rpb24gKF9QYXJjaG1lbnQkQXR0cmlidXRvcikge1xuICBfaW5oZXJpdHMoRm9udFN0eWxlQXR0cmlidXRvciwgX1BhcmNobWVudCRBdHRyaWJ1dG9yKTtcblxuICBmdW5jdGlvbiBGb250U3R5bGVBdHRyaWJ1dG9yKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGb250U3R5bGVBdHRyaWJ1dG9yKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRm9udFN0eWxlQXR0cmlidXRvci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEZvbnRTdHlsZUF0dHJpYnV0b3IpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhGb250U3R5bGVBdHRyaWJ1dG9yLCBbe1xuICAgIGtleTogJ3ZhbHVlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUobm9kZSkge1xuICAgICAgcmV0dXJuIF9nZXQoRm9udFN0eWxlQXR0cmlidXRvci5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihGb250U3R5bGVBdHRyaWJ1dG9yLnByb3RvdHlwZSksICd2YWx1ZScsIHRoaXMpLmNhbGwodGhpcywgbm9kZSkucmVwbGFjZSgvW1wiJ10vZywgJycpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBGb250U3R5bGVBdHRyaWJ1dG9yO1xufShfcGFyY2htZW50Mi5kZWZhdWx0LkF0dHJpYnV0b3IuU3R5bGUpO1xuXG52YXIgRm9udFN0eWxlID0gbmV3IEZvbnRTdHlsZUF0dHJpYnV0b3IoJ2ZvbnQnLCAnZm9udC1mYW1pbHknLCBjb25maWcpO1xuXG5leHBvcnRzLkZvbnRTdHlsZSA9IEZvbnRTdHlsZTtcbmV4cG9ydHMuRm9udENsYXNzID0gRm9udENsYXNzO1xuXG4vKioqLyB9KSxcbi8qIDQwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlNpemVTdHlsZSA9IGV4cG9ydHMuU2l6ZUNsYXNzID0gdW5kZWZpbmVkO1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBTaXplQ2xhc3MgPSBuZXcgX3BhcmNobWVudDIuZGVmYXVsdC5BdHRyaWJ1dG9yLkNsYXNzKCdzaXplJywgJ3FsLXNpemUnLCB7XG4gIHNjb3BlOiBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLklOTElORSxcbiAgd2hpdGVsaXN0OiBbJ3NtYWxsJywgJ2xhcmdlJywgJ2h1Z2UnXVxufSk7XG52YXIgU2l6ZVN0eWxlID0gbmV3IF9wYXJjaG1lbnQyLmRlZmF1bHQuQXR0cmlidXRvci5TdHlsZSgnc2l6ZScsICdmb250LXNpemUnLCB7XG4gIHNjb3BlOiBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLklOTElORSxcbiAgd2hpdGVsaXN0OiBbJzEwcHgnLCAnMThweCcsICczMnB4J11cbn0pO1xuXG5leHBvcnRzLlNpemVDbGFzcyA9IFNpemVDbGFzcztcbmV4cG9ydHMuU2l6ZVN0eWxlID0gU2l6ZVN0eWxlO1xuXG4vKioqLyB9KSxcbi8qIDQxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAnYWxpZ24nOiB7XG4gICAgJyc6IF9fd2VicGFja19yZXF1aXJlX18oNzYpLFxuICAgICdjZW50ZXInOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDc3KSxcbiAgICAncmlnaHQnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDc4KSxcbiAgICAnanVzdGlmeSc6IF9fd2VicGFja19yZXF1aXJlX18oNzkpXG4gIH0sXG4gICdiYWNrZ3JvdW5kJzogX193ZWJwYWNrX3JlcXVpcmVfXyg4MCksXG4gICdibG9ja3F1b3RlJzogX193ZWJwYWNrX3JlcXVpcmVfXyg4MSksXG4gICdib2xkJzogX193ZWJwYWNrX3JlcXVpcmVfXyg4MiksXG4gICdjbGVhbic6IF9fd2VicGFja19yZXF1aXJlX18oODMpLFxuICAnY29kZSc6IF9fd2VicGFja19yZXF1aXJlX18oNTgpLFxuICAnY29kZS1ibG9jayc6IF9fd2VicGFja19yZXF1aXJlX18oNTgpLFxuICAnY29sb3InOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0KSxcbiAgJ2RpcmVjdGlvbic6IHtcbiAgICAnJzogX193ZWJwYWNrX3JlcXVpcmVfXyg4NSksXG4gICAgJ3J0bCc6IF9fd2VicGFja19yZXF1aXJlX18oODYpXG4gIH0sXG4gICdmbG9hdCc6IHtcbiAgICAnY2VudGVyJzogX193ZWJwYWNrX3JlcXVpcmVfXyg4NyksXG4gICAgJ2Z1bGwnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDg4KSxcbiAgICAnbGVmdCc6IF9fd2VicGFja19yZXF1aXJlX18oODkpLFxuICAgICdyaWdodCc6IF9fd2VicGFja19yZXF1aXJlX18oOTApXG4gIH0sXG4gICdmb3JtdWxhJzogX193ZWJwYWNrX3JlcXVpcmVfXyg5MSksXG4gICdoZWFkZXInOiB7XG4gICAgJzEnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDkyKSxcbiAgICAnMic6IF9fd2VicGFja19yZXF1aXJlX18oOTMpXG4gIH0sXG4gICdpdGFsaWMnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDk0KSxcbiAgJ2ltYWdlJzogX193ZWJwYWNrX3JlcXVpcmVfXyg5NSksXG4gICdpbmRlbnQnOiB7XG4gICAgJysxJzogX193ZWJwYWNrX3JlcXVpcmVfXyg5NiksXG4gICAgJy0xJzogX193ZWJwYWNrX3JlcXVpcmVfXyg5NylcbiAgfSxcbiAgJ2xpbmsnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDk4KSxcbiAgJ2xpc3QnOiB7XG4gICAgJ29yZGVyZWQnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDk5KSxcbiAgICAnYnVsbGV0JzogX193ZWJwYWNrX3JlcXVpcmVfXygxMDApLFxuICAgICdjaGVjayc6IF9fd2VicGFja19yZXF1aXJlX18oMTAxKVxuICB9LFxuICAnc2NyaXB0Jzoge1xuICAgICdzdWInOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMiksXG4gICAgJ3N1cGVyJzogX193ZWJwYWNrX3JlcXVpcmVfXygxMDMpXG4gIH0sXG4gICdzdHJpa2UnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwNCksXG4gICd1bmRlcmxpbmUnOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwNSksXG4gICd2aWRlbyc6IF9fd2VicGFja19yZXF1aXJlX18oMTA2KVxufTtcblxuLyoqKi8gfSksXG4vKiA0MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRMYXN0Q2hhbmdlSW5kZXggPSBleHBvcnRzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxudmFyIF9xdWlsbCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfcXVpbGwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVpbGwpO1xuXG52YXIgX21vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cbnZhciBfbW9kdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vZHVsZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEhpc3RvcnkgPSBmdW5jdGlvbiAoX01vZHVsZSkge1xuICBfaW5oZXJpdHMoSGlzdG9yeSwgX01vZHVsZSk7XG5cbiAgZnVuY3Rpb24gSGlzdG9yeShxdWlsbCwgb3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIaXN0b3J5KTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChIaXN0b3J5Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSGlzdG9yeSkpLmNhbGwodGhpcywgcXVpbGwsIG9wdGlvbnMpKTtcblxuICAgIF90aGlzLmxhc3RSZWNvcmRlZCA9IDA7XG4gICAgX3RoaXMuaWdub3JlQ2hhbmdlID0gZmFsc2U7XG4gICAgX3RoaXMuY2xlYXIoKTtcbiAgICBfdGhpcy5xdWlsbC5vbihfcXVpbGwyLmRlZmF1bHQuZXZlbnRzLkVESVRPUl9DSEFOR0UsIGZ1bmN0aW9uIChldmVudE5hbWUsIGRlbHRhLCBvbGREZWx0YSwgc291cmNlKSB7XG4gICAgICBpZiAoZXZlbnROYW1lICE9PSBfcXVpbGwyLmRlZmF1bHQuZXZlbnRzLlRFWFRfQ0hBTkdFIHx8IF90aGlzLmlnbm9yZUNoYW5nZSkgcmV0dXJuO1xuICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLnVzZXJPbmx5IHx8IHNvdXJjZSA9PT0gX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUikge1xuICAgICAgICBfdGhpcy5yZWNvcmQoZGVsdGEsIG9sZERlbHRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnRyYW5zZm9ybShkZWx0YSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX3RoaXMucXVpbGwua2V5Ym9hcmQuYWRkQmluZGluZyh7IGtleTogJ1onLCBzaG9ydEtleTogdHJ1ZSB9LCBfdGhpcy51bmRvLmJpbmQoX3RoaXMpKTtcbiAgICBfdGhpcy5xdWlsbC5rZXlib2FyZC5hZGRCaW5kaW5nKHsga2V5OiAnWicsIHNob3J0S2V5OiB0cnVlLCBzaGlmdEtleTogdHJ1ZSB9LCBfdGhpcy5yZWRvLmJpbmQoX3RoaXMpKTtcbiAgICBpZiAoL1dpbi9pLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKSkge1xuICAgICAgX3RoaXMucXVpbGwua2V5Ym9hcmQuYWRkQmluZGluZyh7IGtleTogJ1knLCBzaG9ydEtleTogdHJ1ZSB9LCBfdGhpcy5yZWRvLmJpbmQoX3RoaXMpKTtcbiAgICB9XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEhpc3RvcnksIFt7XG4gICAga2V5OiAnY2hhbmdlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlKHNvdXJjZSwgZGVzdCkge1xuICAgICAgaWYgKHRoaXMuc3RhY2tbc291cmNlXS5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgIHZhciBkZWx0YSA9IHRoaXMuc3RhY2tbc291cmNlXS5wb3AoKTtcbiAgICAgIHRoaXMuc3RhY2tbZGVzdF0ucHVzaChkZWx0YSk7XG4gICAgICB0aGlzLmxhc3RSZWNvcmRlZCA9IDA7XG4gICAgICB0aGlzLmlnbm9yZUNoYW5nZSA9IHRydWU7XG4gICAgICB0aGlzLnF1aWxsLnVwZGF0ZUNvbnRlbnRzKGRlbHRhW3NvdXJjZV0sIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgdGhpcy5pZ25vcmVDaGFuZ2UgPSBmYWxzZTtcbiAgICAgIHZhciBpbmRleCA9IGdldExhc3RDaGFuZ2VJbmRleChkZWx0YVtzb3VyY2VdKTtcbiAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKGluZGV4KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjbGVhcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgdGhpcy5zdGFjayA9IHsgdW5kbzogW10sIHJlZG86IFtdIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3V0b2ZmJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3V0b2ZmKCkge1xuICAgICAgdGhpcy5sYXN0UmVjb3JkZWQgPSAwO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlY29yZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlY29yZChjaGFuZ2VEZWx0YSwgb2xkRGVsdGEpIHtcbiAgICAgIGlmIChjaGFuZ2VEZWx0YS5vcHMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICB0aGlzLnN0YWNrLnJlZG8gPSBbXTtcbiAgICAgIHZhciB1bmRvRGVsdGEgPSB0aGlzLnF1aWxsLmdldENvbnRlbnRzKCkuZGlmZihvbGREZWx0YSk7XG4gICAgICB2YXIgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICAgIGlmICh0aGlzLmxhc3RSZWNvcmRlZCArIHRoaXMub3B0aW9ucy5kZWxheSA+IHRpbWVzdGFtcCAmJiB0aGlzLnN0YWNrLnVuZG8ubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgZGVsdGEgPSB0aGlzLnN0YWNrLnVuZG8ucG9wKCk7XG4gICAgICAgIHVuZG9EZWx0YSA9IHVuZG9EZWx0YS5jb21wb3NlKGRlbHRhLnVuZG8pO1xuICAgICAgICBjaGFuZ2VEZWx0YSA9IGRlbHRhLnJlZG8uY29tcG9zZShjaGFuZ2VEZWx0YSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxhc3RSZWNvcmRlZCA9IHRpbWVzdGFtcDtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhY2sudW5kby5wdXNoKHtcbiAgICAgICAgcmVkbzogY2hhbmdlRGVsdGEsXG4gICAgICAgIHVuZG86IHVuZG9EZWx0YVxuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5zdGFjay51bmRvLmxlbmd0aCA+IHRoaXMub3B0aW9ucy5tYXhTdGFjaykge1xuICAgICAgICB0aGlzLnN0YWNrLnVuZG8uc2hpZnQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZWRvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVkbygpIHtcbiAgICAgIHRoaXMuY2hhbmdlKCdyZWRvJywgJ3VuZG8nKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd0cmFuc2Zvcm0nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0cmFuc2Zvcm0oZGVsdGEpIHtcbiAgICAgIHRoaXMuc3RhY2sudW5kby5mb3JFYWNoKGZ1bmN0aW9uIChjaGFuZ2UpIHtcbiAgICAgICAgY2hhbmdlLnVuZG8gPSBkZWx0YS50cmFuc2Zvcm0oY2hhbmdlLnVuZG8sIHRydWUpO1xuICAgICAgICBjaGFuZ2UucmVkbyA9IGRlbHRhLnRyYW5zZm9ybShjaGFuZ2UucmVkbywgdHJ1ZSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuc3RhY2sucmVkby5mb3JFYWNoKGZ1bmN0aW9uIChjaGFuZ2UpIHtcbiAgICAgICAgY2hhbmdlLnVuZG8gPSBkZWx0YS50cmFuc2Zvcm0oY2hhbmdlLnVuZG8sIHRydWUpO1xuICAgICAgICBjaGFuZ2UucmVkbyA9IGRlbHRhLnRyYW5zZm9ybShjaGFuZ2UucmVkbywgdHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd1bmRvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5kbygpIHtcbiAgICAgIHRoaXMuY2hhbmdlKCd1bmRvJywgJ3JlZG8nKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSGlzdG9yeTtcbn0oX21vZHVsZTIuZGVmYXVsdCk7XG5cbkhpc3RvcnkuREVGQVVMVFMgPSB7XG4gIGRlbGF5OiAxMDAwLFxuICBtYXhTdGFjazogMTAwLFxuICB1c2VyT25seTogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIGVuZHNXaXRoTmV3bGluZUNoYW5nZShkZWx0YSkge1xuICB2YXIgbGFzdE9wID0gZGVsdGEub3BzW2RlbHRhLm9wcy5sZW5ndGggLSAxXTtcbiAgaWYgKGxhc3RPcCA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIGlmIChsYXN0T3AuaW5zZXJ0ICE9IG51bGwpIHtcbiAgICByZXR1cm4gdHlwZW9mIGxhc3RPcC5pbnNlcnQgPT09ICdzdHJpbmcnICYmIGxhc3RPcC5pbnNlcnQuZW5kc1dpdGgoJ1xcbicpO1xuICB9XG4gIGlmIChsYXN0T3AuYXR0cmlidXRlcyAhPSBudWxsKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGxhc3RPcC5hdHRyaWJ1dGVzKS5zb21lKGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgICByZXR1cm4gX3BhcmNobWVudDIuZGVmYXVsdC5xdWVyeShhdHRyLCBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLkJMT0NLKSAhPSBudWxsO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0TGFzdENoYW5nZUluZGV4KGRlbHRhKSB7XG4gIHZhciBkZWxldGVMZW5ndGggPSBkZWx0YS5yZWR1Y2UoZnVuY3Rpb24gKGxlbmd0aCwgb3ApIHtcbiAgICBsZW5ndGggKz0gb3AuZGVsZXRlIHx8IDA7XG4gICAgcmV0dXJuIGxlbmd0aDtcbiAgfSwgMCk7XG4gIHZhciBjaGFuZ2VJbmRleCA9IGRlbHRhLmxlbmd0aCgpIC0gZGVsZXRlTGVuZ3RoO1xuICBpZiAoZW5kc1dpdGhOZXdsaW5lQ2hhbmdlKGRlbHRhKSkge1xuICAgIGNoYW5nZUluZGV4IC09IDE7XG4gIH1cbiAgcmV0dXJuIGNoYW5nZUluZGV4O1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBIaXN0b3J5O1xuZXhwb3J0cy5nZXRMYXN0Q2hhbmdlSW5kZXggPSBnZXRMYXN0Q2hhbmdlSW5kZXg7XG5cbi8qKiovIH0pLFxuLyogNDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuQmFzZVRvb2x0aXAgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9leHRlbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX2V4dGVuZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmQpO1xuXG52YXIgX3F1aWxsRGVsdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX3F1aWxsRGVsdGEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVpbGxEZWx0YSk7XG5cbnZhciBfZW1pdHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbnZhciBfZW1pdHRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lbWl0dGVyKTtcblxudmFyIF9rZXlib2FyZCA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xuXG52YXIgX2tleWJvYXJkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleWJvYXJkKTtcblxudmFyIF90aGVtZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpO1xuXG52YXIgX3RoZW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RoZW1lKTtcblxudmFyIF9jb2xvclBpY2tlciA9IF9fd2VicGFja19yZXF1aXJlX18oNTkpO1xuXG52YXIgX2NvbG9yUGlja2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbG9yUGlja2VyKTtcblxudmFyIF9pY29uUGlja2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MCk7XG5cbnZhciBfaWNvblBpY2tlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pY29uUGlja2VyKTtcblxudmFyIF9waWNrZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KTtcblxudmFyIF9waWNrZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGlja2VyKTtcblxudmFyIF90b29sdGlwID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MSk7XG5cbnZhciBfdG9vbHRpcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b29sdGlwKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgQUxJR05TID0gW2ZhbHNlLCAnY2VudGVyJywgJ3JpZ2h0JywgJ2p1c3RpZnknXTtcblxudmFyIENPTE9SUyA9IFtcIiMwMDAwMDBcIiwgXCIjZTYwMDAwXCIsIFwiI2ZmOTkwMFwiLCBcIiNmZmZmMDBcIiwgXCIjMDA4YTAwXCIsIFwiIzAwNjZjY1wiLCBcIiM5OTMzZmZcIiwgXCIjZmZmZmZmXCIsIFwiI2ZhY2NjY1wiLCBcIiNmZmViY2NcIiwgXCIjZmZmZmNjXCIsIFwiI2NjZThjY1wiLCBcIiNjY2UwZjVcIiwgXCIjZWJkNmZmXCIsIFwiI2JiYmJiYlwiLCBcIiNmMDY2NjZcIiwgXCIjZmZjMjY2XCIsIFwiI2ZmZmY2NlwiLCBcIiM2NmI5NjZcIiwgXCIjNjZhM2UwXCIsIFwiI2MyODVmZlwiLCBcIiM4ODg4ODhcIiwgXCIjYTEwMDAwXCIsIFwiI2IyNmIwMFwiLCBcIiNiMmIyMDBcIiwgXCIjMDA2MTAwXCIsIFwiIzAwNDdiMlwiLCBcIiM2YjI0YjJcIiwgXCIjNDQ0NDQ0XCIsIFwiIzVjMDAwMFwiLCBcIiM2NjNkMDBcIiwgXCIjNjY2NjAwXCIsIFwiIzAwMzcwMFwiLCBcIiMwMDI5NjZcIiwgXCIjM2QxNDY2XCJdO1xuXG52YXIgRk9OVFMgPSBbZmFsc2UsICdzZXJpZicsICdtb25vc3BhY2UnXTtcblxudmFyIEhFQURFUlMgPSBbJzEnLCAnMicsICczJywgZmFsc2VdO1xuXG52YXIgU0laRVMgPSBbJ3NtYWxsJywgZmFsc2UsICdsYXJnZScsICdodWdlJ107XG5cbnZhciBCYXNlVGhlbWUgPSBmdW5jdGlvbiAoX1RoZW1lKSB7XG4gIF9pbmhlcml0cyhCYXNlVGhlbWUsIF9UaGVtZSk7XG5cbiAgZnVuY3Rpb24gQmFzZVRoZW1lKHF1aWxsLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJhc2VUaGVtZSk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQmFzZVRoZW1lLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmFzZVRoZW1lKSkuY2FsbCh0aGlzLCBxdWlsbCwgb3B0aW9ucykpO1xuXG4gICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gbGlzdGVuZXIoZSkge1xuICAgICAgaWYgKCFkb2N1bWVudC5ib2R5LmNvbnRhaW5zKHF1aWxsLnJvb3QpKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgbGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgaWYgKF90aGlzLnRvb2x0aXAgIT0gbnVsbCAmJiAhX3RoaXMudG9vbHRpcC5yb290LmNvbnRhaW5zKGUudGFyZ2V0KSAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBfdGhpcy50b29sdGlwLnRleHRib3ggJiYgIV90aGlzLnF1aWxsLmhhc0ZvY3VzKCkpIHtcbiAgICAgICAgX3RoaXMudG9vbHRpcC5oaWRlKCk7XG4gICAgICB9XG4gICAgICBpZiAoX3RoaXMucGlja2VycyAhPSBudWxsKSB7XG4gICAgICAgIF90aGlzLnBpY2tlcnMuZm9yRWFjaChmdW5jdGlvbiAocGlja2VyKSB7XG4gICAgICAgICAgaWYgKCFwaWNrZXIuY29udGFpbmVyLmNvbnRhaW5zKGUudGFyZ2V0KSkge1xuICAgICAgICAgICAgcGlja2VyLmNsb3NlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHF1aWxsLmVtaXR0ZXIubGlzdGVuRE9NKCdjbGljaycsIGRvY3VtZW50LmJvZHksIGxpc3RlbmVyKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQmFzZVRoZW1lLCBbe1xuICAgIGtleTogJ2FkZE1vZHVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZE1vZHVsZShuYW1lKSB7XG4gICAgICB2YXIgbW9kdWxlID0gX2dldChCYXNlVGhlbWUucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmFzZVRoZW1lLnByb3RvdHlwZSksICdhZGRNb2R1bGUnLCB0aGlzKS5jYWxsKHRoaXMsIG5hbWUpO1xuICAgICAgaWYgKG5hbWUgPT09ICd0b29sYmFyJykge1xuICAgICAgICB0aGlzLmV4dGVuZFRvb2xiYXIobW9kdWxlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtb2R1bGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYnVpbGRCdXR0b25zJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYnVpbGRCdXR0b25zKGJ1dHRvbnMsIGljb25zKSB7XG4gICAgICBidXR0b25zLmZvckVhY2goZnVuY3Rpb24gKGJ1dHRvbikge1xuICAgICAgICB2YXIgY2xhc3NOYW1lID0gYnV0dG9uLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJztcbiAgICAgICAgY2xhc3NOYW1lLnNwbGl0KC9cXHMrLykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgIGlmICghbmFtZS5zdGFydHNXaXRoKCdxbC0nKSkgcmV0dXJuO1xuICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKCdxbC0nLmxlbmd0aCk7XG4gICAgICAgICAgaWYgKGljb25zW25hbWVdID09IG51bGwpIHJldHVybjtcbiAgICAgICAgICBpZiAobmFtZSA9PT0gJ2RpcmVjdGlvbicpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBpY29uc1tuYW1lXVsnJ10gKyBpY29uc1tuYW1lXVsncnRsJ107XG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaWNvbnNbbmFtZV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gaWNvbnNbbmFtZV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGJ1dHRvbi52YWx1ZSB8fCAnJztcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIGljb25zW25hbWVdW3ZhbHVlXSkge1xuICAgICAgICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gaWNvbnNbbmFtZV1bdmFsdWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdidWlsZFBpY2tlcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBidWlsZFBpY2tlcnMoc2VsZWN0cywgaWNvbnMpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB0aGlzLnBpY2tlcnMgPSBzZWxlY3RzLm1hcChmdW5jdGlvbiAoc2VsZWN0KSB7XG4gICAgICAgIGlmIChzZWxlY3QuY2xhc3NMaXN0LmNvbnRhaW5zKCdxbC1hbGlnbicpKSB7XG4gICAgICAgICAgaWYgKHNlbGVjdC5xdWVyeVNlbGVjdG9yKCdvcHRpb24nKSA9PSBudWxsKSB7XG4gICAgICAgICAgICBmaWxsU2VsZWN0KHNlbGVjdCwgQUxJR05TKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5ldyBfaWNvblBpY2tlcjIuZGVmYXVsdChzZWxlY3QsIGljb25zLmFsaWduKTtcbiAgICAgICAgfSBlbHNlIGlmIChzZWxlY3QuY2xhc3NMaXN0LmNvbnRhaW5zKCdxbC1iYWNrZ3JvdW5kJykgfHwgc2VsZWN0LmNsYXNzTGlzdC5jb250YWlucygncWwtY29sb3InKSkge1xuICAgICAgICAgIHZhciBmb3JtYXQgPSBzZWxlY3QuY2xhc3NMaXN0LmNvbnRhaW5zKCdxbC1iYWNrZ3JvdW5kJykgPyAnYmFja2dyb3VuZCcgOiAnY29sb3InO1xuICAgICAgICAgIGlmIChzZWxlY3QucXVlcnlTZWxlY3Rvcignb3B0aW9uJykgPT0gbnVsbCkge1xuICAgICAgICAgICAgZmlsbFNlbGVjdChzZWxlY3QsIENPTE9SUywgZm9ybWF0ID09PSAnYmFja2dyb3VuZCcgPyAnI2ZmZmZmZicgOiAnIzAwMDAwMCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbmV3IF9jb2xvclBpY2tlcjIuZGVmYXVsdChzZWxlY3QsIGljb25zW2Zvcm1hdF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzZWxlY3QucXVlcnlTZWxlY3Rvcignb3B0aW9uJykgPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHNlbGVjdC5jbGFzc0xpc3QuY29udGFpbnMoJ3FsLWZvbnQnKSkge1xuICAgICAgICAgICAgICBmaWxsU2VsZWN0KHNlbGVjdCwgRk9OVFMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzZWxlY3QuY2xhc3NMaXN0LmNvbnRhaW5zKCdxbC1oZWFkZXInKSkge1xuICAgICAgICAgICAgICBmaWxsU2VsZWN0KHNlbGVjdCwgSEVBREVSUyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdC5jbGFzc0xpc3QuY29udGFpbnMoJ3FsLXNpemUnKSkge1xuICAgICAgICAgICAgICBmaWxsU2VsZWN0KHNlbGVjdCwgU0laRVMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbmV3IF9waWNrZXIyLmRlZmF1bHQoc2VsZWN0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB2YXIgdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgICBfdGhpczIucGlja2Vycy5mb3JFYWNoKGZ1bmN0aW9uIChwaWNrZXIpIHtcbiAgICAgICAgICBwaWNrZXIudXBkYXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICAgIHRoaXMucXVpbGwub24oX2VtaXR0ZXIyLmRlZmF1bHQuZXZlbnRzLkVESVRPUl9DSEFOR0UsIHVwZGF0ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEJhc2VUaGVtZTtcbn0oX3RoZW1lMi5kZWZhdWx0KTtcblxuQmFzZVRoZW1lLkRFRkFVTFRTID0gKDAsIF9leHRlbmQyLmRlZmF1bHQpKHRydWUsIHt9LCBfdGhlbWUyLmRlZmF1bHQuREVGQVVMVFMsIHtcbiAgbW9kdWxlczoge1xuICAgIHRvb2xiYXI6IHtcbiAgICAgIGhhbmRsZXJzOiB7XG4gICAgICAgIGZvcm11bGE6IGZ1bmN0aW9uIGZvcm11bGEoKSB7XG4gICAgICAgICAgdGhpcy5xdWlsbC50aGVtZS50b29sdGlwLmVkaXQoJ2Zvcm11bGEnKTtcbiAgICAgICAgfSxcbiAgICAgICAgaW1hZ2U6IGZ1bmN0aW9uIGltYWdlKCkge1xuICAgICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgICAgdmFyIGZpbGVJbnB1dCA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0LnFsLWltYWdlW3R5cGU9ZmlsZV0nKTtcbiAgICAgICAgICBpZiAoZmlsZUlucHV0ID09IG51bGwpIHtcbiAgICAgICAgICAgIGZpbGVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgICAgICBmaWxlSW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2ZpbGUnKTtcbiAgICAgICAgICAgIGZpbGVJbnB1dC5zZXRBdHRyaWJ1dGUoJ2FjY2VwdCcsICdpbWFnZS9wbmcsIGltYWdlL2dpZiwgaW1hZ2UvanBlZywgaW1hZ2UvYm1wLCBpbWFnZS94LWljb24nKTtcbiAgICAgICAgICAgIGZpbGVJbnB1dC5jbGFzc0xpc3QuYWRkKCdxbC1pbWFnZScpO1xuICAgICAgICAgICAgZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKGZpbGVJbnB1dC5maWxlcyAhPSBudWxsICYmIGZpbGVJbnB1dC5maWxlc1swXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSBfdGhpczMucXVpbGwuZ2V0U2VsZWN0aW9uKHRydWUpO1xuICAgICAgICAgICAgICAgICAgX3RoaXMzLnF1aWxsLnVwZGF0ZUNvbnRlbnRzKG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLnJldGFpbihyYW5nZS5pbmRleCkuZGVsZXRlKHJhbmdlLmxlbmd0aCkuaW5zZXJ0KHsgaW1hZ2U6IGUudGFyZ2V0LnJlc3VsdCB9KSwgX2VtaXR0ZXIyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgICAgICAgICAgICAgIF90aGlzMy5xdWlsbC5zZXRTZWxlY3Rpb24ocmFuZ2UuaW5kZXggKyAxLCBfZW1pdHRlcjIuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgICAgICAgICAgICAgICBmaWxlSW5wdXQudmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZUlucHV0LmZpbGVzWzBdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChmaWxlSW5wdXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmaWxlSW5wdXQuY2xpY2soKTtcbiAgICAgICAgfSxcbiAgICAgICAgdmlkZW86IGZ1bmN0aW9uIHZpZGVvKCkge1xuICAgICAgICAgIHRoaXMucXVpbGwudGhlbWUudG9vbHRpcC5lZGl0KCd2aWRlbycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcblxudmFyIEJhc2VUb29sdGlwID0gZnVuY3Rpb24gKF9Ub29sdGlwKSB7XG4gIF9pbmhlcml0cyhCYXNlVG9vbHRpcCwgX1Rvb2x0aXApO1xuXG4gIGZ1bmN0aW9uIEJhc2VUb29sdGlwKHF1aWxsLCBib3VuZHNDb250YWluZXIpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFzZVRvb2x0aXApO1xuXG4gICAgdmFyIF90aGlzNCA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChCYXNlVG9vbHRpcC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJhc2VUb29sdGlwKSkuY2FsbCh0aGlzLCBxdWlsbCwgYm91bmRzQ29udGFpbmVyKSk7XG5cbiAgICBfdGhpczQudGV4dGJveCA9IF90aGlzNC5yb290LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3R5cGU9XCJ0ZXh0XCJdJyk7XG4gICAgX3RoaXM0Lmxpc3RlbigpO1xuICAgIHJldHVybiBfdGhpczQ7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQmFzZVRvb2x0aXAsIFt7XG4gICAga2V5OiAnbGlzdGVuJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdGVuKCkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgIHRoaXMudGV4dGJveC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChfa2V5Ym9hcmQyLmRlZmF1bHQubWF0Y2goZXZlbnQsICdlbnRlcicpKSB7XG4gICAgICAgICAgX3RoaXM1LnNhdmUoKTtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9IGVsc2UgaWYgKF9rZXlib2FyZDIuZGVmYXVsdC5tYXRjaChldmVudCwgJ2VzY2FwZScpKSB7XG4gICAgICAgICAgX3RoaXM1LmNhbmNlbCgpO1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NhbmNlbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2VkaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlZGl0KCkge1xuICAgICAgdmFyIG1vZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICdsaW5rJztcbiAgICAgIHZhciBwcmV2aWV3ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuXG4gICAgICB0aGlzLnJvb3QuY2xhc3NMaXN0LnJlbW92ZSgncWwtaGlkZGVuJyk7XG4gICAgICB0aGlzLnJvb3QuY2xhc3NMaXN0LmFkZCgncWwtZWRpdGluZycpO1xuICAgICAgaWYgKHByZXZpZXcgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnRleHRib3gudmFsdWUgPSBwcmV2aWV3O1xuICAgICAgfSBlbHNlIGlmIChtb2RlICE9PSB0aGlzLnJvb3QuZ2V0QXR0cmlidXRlKCdkYXRhLW1vZGUnKSkge1xuICAgICAgICB0aGlzLnRleHRib3gudmFsdWUgPSAnJztcbiAgICAgIH1cbiAgICAgIHRoaXMucG9zaXRpb24odGhpcy5xdWlsbC5nZXRCb3VuZHModGhpcy5xdWlsbC5zZWxlY3Rpb24uc2F2ZWRSYW5nZSkpO1xuICAgICAgdGhpcy50ZXh0Ym94LnNlbGVjdCgpO1xuICAgICAgdGhpcy50ZXh0Ym94LnNldEF0dHJpYnV0ZSgncGxhY2Vob2xkZXInLCB0aGlzLnRleHRib3guZ2V0QXR0cmlidXRlKCdkYXRhLScgKyBtb2RlKSB8fCAnJyk7XG4gICAgICB0aGlzLnJvb3Quc2V0QXR0cmlidXRlKCdkYXRhLW1vZGUnLCBtb2RlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZXN0b3JlRm9jdXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXN0b3JlRm9jdXMoKSB7XG4gICAgICB2YXIgc2Nyb2xsVG9wID0gdGhpcy5xdWlsbC5zY3JvbGxpbmdDb250YWluZXIuc2Nyb2xsVG9wO1xuICAgICAgdGhpcy5xdWlsbC5mb2N1cygpO1xuICAgICAgdGhpcy5xdWlsbC5zY3JvbGxpbmdDb250YWluZXIuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NhdmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlKCkge1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy50ZXh0Ym94LnZhbHVlO1xuICAgICAgc3dpdGNoICh0aGlzLnJvb3QuZ2V0QXR0cmlidXRlKCdkYXRhLW1vZGUnKSkge1xuICAgICAgICBjYXNlICdsaW5rJzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgc2Nyb2xsVG9wID0gdGhpcy5xdWlsbC5yb290LnNjcm9sbFRvcDtcbiAgICAgICAgICAgIGlmICh0aGlzLmxpbmtSYW5nZSkge1xuICAgICAgICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdFRleHQodGhpcy5saW5rUmFuZ2UsICdsaW5rJywgdmFsdWUsIF9lbWl0dGVyMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmxpbmtSYW5nZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMucmVzdG9yZUZvY3VzKCk7XG4gICAgICAgICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdsaW5rJywgdmFsdWUsIF9lbWl0dGVyMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnF1aWxsLnJvb3Quc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlICd2aWRlbyc6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFsdWUgPSBleHRyYWN0VmlkZW9VcmwodmFsdWUpO1xuICAgICAgICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWZhbGx0aHJvdWdoXG4gICAgICAgIGNhc2UgJ2Zvcm11bGEnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmICghdmFsdWUpIGJyZWFrO1xuICAgICAgICAgICAgdmFyIHJhbmdlID0gdGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24odHJ1ZSk7XG4gICAgICAgICAgICBpZiAocmFuZ2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgICB2YXIgaW5kZXggPSByYW5nZS5pbmRleCArIHJhbmdlLmxlbmd0aDtcbiAgICAgICAgICAgICAgdGhpcy5xdWlsbC5pbnNlcnRFbWJlZChpbmRleCwgdGhpcy5yb290LmdldEF0dHJpYnV0ZSgnZGF0YS1tb2RlJyksIHZhbHVlLCBfZW1pdHRlcjIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICAgICAgICBpZiAodGhpcy5yb290LmdldEF0dHJpYnV0ZSgnZGF0YS1tb2RlJykgPT09ICdmb3JtdWxhJykge1xuICAgICAgICAgICAgICAgIHRoaXMucXVpbGwuaW5zZXJ0VGV4dChpbmRleCArIDEsICcgJywgX2VtaXR0ZXIyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihpbmRleCArIDIsIF9lbWl0dGVyMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICB9XG4gICAgICB0aGlzLnRleHRib3gudmFsdWUgPSAnJztcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCYXNlVG9vbHRpcDtcbn0oX3Rvb2x0aXAyLmRlZmF1bHQpO1xuXG5mdW5jdGlvbiBleHRyYWN0VmlkZW9VcmwodXJsKSB7XG4gIHZhciBtYXRjaCA9IHVybC5tYXRjaCgvXig/OihodHRwcz8pOlxcL1xcLyk/KD86KD86d3d3fG0pXFwuKT95b3V0dWJlXFwuY29tXFwvd2F0Y2guKnY9KFthLXpBLVowLTlfLV0rKS8pIHx8IHVybC5tYXRjaCgvXig/OihodHRwcz8pOlxcL1xcLyk/KD86KD86d3d3fG0pXFwuKT95b3V0dVxcLmJlXFwvKFthLXpBLVowLTlfLV0rKS8pO1xuICBpZiAobWF0Y2gpIHtcbiAgICByZXR1cm4gKG1hdGNoWzFdIHx8ICdodHRwcycpICsgJzovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC8nICsgbWF0Y2hbMl0gKyAnP3Nob3dpbmZvPTAnO1xuICB9XG4gIGlmIChtYXRjaCA9IHVybC5tYXRjaCgvXig/OihodHRwcz8pOlxcL1xcLyk/KD86d3d3XFwuKT92aW1lb1xcLmNvbVxcLyhcXGQrKS8pKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25kLWFzc2lnblxuICAgIHJldHVybiAobWF0Y2hbMV0gfHwgJ2h0dHBzJykgKyAnOi8vcGxheWVyLnZpbWVvLmNvbS92aWRlby8nICsgbWF0Y2hbMl0gKyAnLyc7XG4gIH1cbiAgcmV0dXJuIHVybDtcbn1cblxuZnVuY3Rpb24gZmlsbFNlbGVjdChzZWxlY3QsIHZhbHVlcykge1xuICB2YXIgZGVmYXVsdFZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YXIgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgaWYgKHZhbHVlID09PSBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgdmFsdWUpO1xuICAgIH1cbiAgICBzZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgfSk7XG59XG5cbmV4cG9ydHMuQmFzZVRvb2x0aXAgPSBCYXNlVG9vbHRpcDtcbmV4cG9ydHMuZGVmYXVsdCA9IEJhc2VUaGVtZTtcblxuLyoqKi8gfSksXG4vKiA0NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIExpbmtlZExpc3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGlua2VkTGlzdCgpIHtcbiAgICAgICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtcbiAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIH1cbiAgICBMaW5rZWRMaXN0LnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBub2RlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgbm9kZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluc2VydEJlZm9yZShub2Rlc1swXSwgbnVsbCk7XG4gICAgICAgIGlmIChub2Rlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZC5hcHBseSh0aGlzLCBub2Rlcy5zbGljZSgxKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIGN1ciwgbmV4dCA9IHRoaXMuaXRlcmF0b3IoKTtcbiAgICAgICAgd2hpbGUgKChjdXIgPSBuZXh0KCkpKSB7XG4gICAgICAgICAgICBpZiAoY3VyID09PSBub2RlKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLmluc2VydEJlZm9yZSA9IGZ1bmN0aW9uIChub2RlLCByZWZOb2RlKSB7XG4gICAgICAgIGlmICghbm9kZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbm9kZS5uZXh0ID0gcmVmTm9kZTtcbiAgICAgICAgaWYgKHJlZk5vZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgbm9kZS5wcmV2ID0gcmVmTm9kZS5wcmV2O1xuICAgICAgICAgICAgaWYgKHJlZk5vZGUucHJldiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVmTm9kZS5wcmV2Lm5leHQgPSBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVmTm9kZS5wcmV2ID0gbm9kZTtcbiAgICAgICAgICAgIGlmIChyZWZOb2RlID09PSB0aGlzLmhlYWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhlYWQgPSBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMudGFpbCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnRhaWwubmV4dCA9IG5vZGU7XG4gICAgICAgICAgICBub2RlLnByZXYgPSB0aGlzLnRhaWw7XG4gICAgICAgICAgICB0aGlzLnRhaWwgPSBub2RlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbm9kZS5wcmV2ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sZW5ndGggKz0gMTtcbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLm9mZnNldCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMCwgY3VyID0gdGhpcy5oZWFkO1xuICAgICAgICB3aGlsZSAoY3VyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChjdXIgPT09IHRhcmdldClcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgICAgICBpbmRleCArPSBjdXIubGVuZ3RoKCk7XG4gICAgICAgICAgICBjdXIgPSBjdXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfTtcbiAgICBMaW5rZWRMaXN0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBpZiAoIXRoaXMuY29udGFpbnMobm9kZSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChub2RlLnByZXYgIT0gbnVsbClcbiAgICAgICAgICAgIG5vZGUucHJldi5uZXh0ID0gbm9kZS5uZXh0O1xuICAgICAgICBpZiAobm9kZS5uZXh0ICE9IG51bGwpXG4gICAgICAgICAgICBub2RlLm5leHQucHJldiA9IG5vZGUucHJldjtcbiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMuaGVhZClcbiAgICAgICAgICAgIHRoaXMuaGVhZCA9IG5vZGUubmV4dDtcbiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMudGFpbClcbiAgICAgICAgICAgIHRoaXMudGFpbCA9IG5vZGUucHJldjtcbiAgICAgICAgdGhpcy5sZW5ndGggLT0gMTtcbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLml0ZXJhdG9yID0gZnVuY3Rpb24gKGN1ck5vZGUpIHtcbiAgICAgICAgaWYgKGN1ck5vZGUgPT09IHZvaWQgMCkgeyBjdXJOb2RlID0gdGhpcy5oZWFkOyB9XG4gICAgICAgIC8vIFRPRE8gdXNlIHlpZWxkIHdoZW4gd2UgY2FuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmV0ID0gY3VyTm9kZTtcbiAgICAgICAgICAgIGlmIChjdXJOb2RlICE9IG51bGwpXG4gICAgICAgICAgICAgICAgY3VyTm9kZSA9IGN1ck5vZGUubmV4dDtcbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBMaW5rZWRMaXN0LnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24gKGluZGV4LCBpbmNsdXNpdmUpIHtcbiAgICAgICAgaWYgKGluY2x1c2l2ZSA9PT0gdm9pZCAwKSB7IGluY2x1c2l2ZSA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBjdXIsIG5leHQgPSB0aGlzLml0ZXJhdG9yKCk7XG4gICAgICAgIHdoaWxlICgoY3VyID0gbmV4dCgpKSkge1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IGN1ci5sZW5ndGgoKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA8IGxlbmd0aCB8fFxuICAgICAgICAgICAgICAgIChpbmNsdXNpdmUgJiYgaW5kZXggPT09IGxlbmd0aCAmJiAoY3VyLm5leHQgPT0gbnVsbCB8fCBjdXIubmV4dC5sZW5ndGgoKSAhPT0gMCkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtjdXIsIGluZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluZGV4IC09IGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW251bGwsIDBdO1xuICAgIH07XG4gICAgTGlua2VkTGlzdC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgY3VyLCBuZXh0ID0gdGhpcy5pdGVyYXRvcigpO1xuICAgICAgICB3aGlsZSAoKGN1ciA9IG5leHQoKSkpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGN1cik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExpbmtlZExpc3QucHJvdG90eXBlLmZvckVhY2hBdCA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAobGVuZ3RoIDw9IDApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBfYSA9IHRoaXMuZmluZChpbmRleCksIHN0YXJ0Tm9kZSA9IF9hWzBdLCBvZmZzZXQgPSBfYVsxXTtcbiAgICAgICAgdmFyIGN1ciwgY3VySW5kZXggPSBpbmRleCAtIG9mZnNldCwgbmV4dCA9IHRoaXMuaXRlcmF0b3Ioc3RhcnROb2RlKTtcbiAgICAgICAgd2hpbGUgKChjdXIgPSBuZXh0KCkpICYmIGN1ckluZGV4IDwgaW5kZXggKyBsZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjdXJMZW5ndGggPSBjdXIubGVuZ3RoKCk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPiBjdXJJbmRleCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGN1ciwgaW5kZXggLSBjdXJJbmRleCwgTWF0aC5taW4obGVuZ3RoLCBjdXJJbmRleCArIGN1ckxlbmd0aCAtIGluZGV4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhjdXIsIDAsIE1hdGgubWluKGN1ckxlbmd0aCwgaW5kZXggKyBsZW5ndGggLSBjdXJJbmRleCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VySW5kZXggKz0gY3VyTGVuZ3RoO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBMaW5rZWRMaXN0LnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBjdXIpIHtcbiAgICAgICAgICAgIG1lbW8ucHVzaChjYWxsYmFjayhjdXIpKTtcbiAgICAgICAgICAgIHJldHVybiBtZW1vO1xuICAgICAgICB9LCBbXSk7XG4gICAgfTtcbiAgICBMaW5rZWRMaXN0LnByb3RvdHlwZS5yZWR1Y2UgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIG1lbW8pIHtcbiAgICAgICAgdmFyIGN1ciwgbmV4dCA9IHRoaXMuaXRlcmF0b3IoKTtcbiAgICAgICAgd2hpbGUgKChjdXIgPSBuZXh0KCkpKSB7XG4gICAgICAgICAgICBtZW1vID0gY2FsbGJhY2sobWVtbywgY3VyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVtbztcbiAgICB9O1xuICAgIHJldHVybiBMaW5rZWRMaXN0O1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IExpbmtlZExpc3Q7XG5cblxuLyoqKi8gfSksXG4vKiA0NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgY29udGFpbmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTtcbnZhciBSZWdpc3RyeSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgT0JTRVJWRVJfQ09ORklHID0ge1xuICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgY2hhcmFjdGVyRGF0YTogdHJ1ZSxcbiAgICBjaGFyYWN0ZXJEYXRhT2xkVmFsdWU6IHRydWUsXG4gICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgIHN1YnRyZWU6IHRydWUsXG59O1xudmFyIE1BWF9PUFRJTUlaRV9JVEVSQVRJT05TID0gMTAwO1xudmFyIFNjcm9sbEJsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNjcm9sbEJsb3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2Nyb2xsQmxvdChub2RlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG5vZGUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjcm9sbCA9IF90aGlzO1xuICAgICAgICBfdGhpcy5vYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uIChtdXRhdGlvbnMpIHtcbiAgICAgICAgICAgIF90aGlzLnVwZGF0ZShtdXRhdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMub2JzZXJ2ZXIub2JzZXJ2ZShfdGhpcy5kb21Ob2RlLCBPQlNFUlZFUl9DT05GSUcpO1xuICAgICAgICBfdGhpcy5hdHRhY2goKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTY3JvbGxCbG90LnByb3RvdHlwZS5kZXRhY2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGV0YWNoLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH07XG4gICAgU2Nyb2xsQmxvdC5wcm90b3R5cGUuZGVsZXRlQXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICBpZiAoaW5kZXggPT09IDAgJiYgbGVuZ3RoID09PSB0aGlzLmxlbmd0aCgpKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgY2hpbGQucmVtb3ZlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGVsZXRlQXQuY2FsbCh0aGlzLCBpbmRleCwgbGVuZ3RoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2Nyb2xsQmxvdC5wcm90b3R5cGUuZm9ybWF0QXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JtYXRBdC5jYWxsKHRoaXMsIGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuICAgIFNjcm9sbEJsb3QucHJvdG90eXBlLmluc2VydEF0ID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSwgZGVmKSB7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuaW5zZXJ0QXQuY2FsbCh0aGlzLCBpbmRleCwgdmFsdWUsIGRlZik7XG4gICAgfTtcbiAgICBTY3JvbGxCbG90LnByb3RvdHlwZS5vcHRpbWl6ZSA9IGZ1bmN0aW9uIChtdXRhdGlvbnMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKG11dGF0aW9ucyA9PT0gdm9pZCAwKSB7IG11dGF0aW9ucyA9IFtdOyB9XG4gICAgICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHsgY29udGV4dCA9IHt9OyB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUub3B0aW1pemUuY2FsbCh0aGlzLCBjb250ZXh0KTtcbiAgICAgICAgLy8gV2UgbXVzdCBtb2RpZnkgbXV0YXRpb25zIGRpcmVjdGx5LCBjYW5ub3QgbWFrZSBjb3B5IGFuZCB0aGVuIG1vZGlmeVxuICAgICAgICB2YXIgcmVjb3JkcyA9IFtdLnNsaWNlLmNhbGwodGhpcy5vYnNlcnZlci50YWtlUmVjb3JkcygpKTtcbiAgICAgICAgLy8gQXJyYXkucHVzaCBjdXJyZW50bHkgc2VlbXMgdG8gYmUgaW1wbGVtZW50ZWQgYnkgYSBub24tdGFpbCByZWN1cnNpdmUgZnVuY3Rpb25cbiAgICAgICAgLy8gc28gd2UgY2Fubm90IGp1c3QgbXV0YXRpb25zLnB1c2guYXBwbHkobXV0YXRpb25zLCB0aGlzLm9ic2VydmVyLnRha2VSZWNvcmRzKCkpO1xuICAgICAgICB3aGlsZSAocmVjb3Jkcy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgbXV0YXRpb25zLnB1c2gocmVjb3Jkcy5wb3AoKSk7XG4gICAgICAgIC8vIFRPRE8gdXNlIFdlYWtNYXBcbiAgICAgICAgdmFyIG1hcmsgPSBmdW5jdGlvbiAoYmxvdCwgbWFya1BhcmVudCkge1xuICAgICAgICAgICAgaWYgKG1hcmtQYXJlbnQgPT09IHZvaWQgMCkgeyBtYXJrUGFyZW50ID0gdHJ1ZTsgfVxuICAgICAgICAgICAgaWYgKGJsb3QgPT0gbnVsbCB8fCBibG90ID09PSBfdGhpcylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBpZiAoYmxvdC5kb21Ob2RlLnBhcmVudE5vZGUgPT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBpZiAoYmxvdC5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXS5tdXRhdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBibG90LmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldLm11dGF0aW9ucyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hcmtQYXJlbnQpXG4gICAgICAgICAgICAgICAgbWFyayhibG90LnBhcmVudCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBvcHRpbWl6ZSA9IGZ1bmN0aW9uIChibG90KSB7XG4gICAgICAgICAgICAvLyBQb3N0LW9yZGVyIHRyYXZlcnNhbFxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgYmxvdC5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXSA9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIGJsb3QuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0ubXV0YXRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmxvdCBpbnN0YW5jZW9mIGNvbnRhaW5lcl8xLmRlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICBibG90LmNoaWxkcmVuLmZvckVhY2gob3B0aW1pemUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmxvdC5vcHRpbWl6ZShjb250ZXh0KTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlbWFpbmluZyA9IG11dGF0aW9ucztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IHJlbWFpbmluZy5sZW5ndGggPiAwOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChpID49IE1BWF9PUFRJTUlaRV9JVEVSQVRJT05TKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbUGFyY2htZW50XSBNYXhpbXVtIG9wdGltaXplIGl0ZXJhdGlvbnMgcmVhY2hlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVtYWluaW5nLmZvckVhY2goZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJsb3QgPSBSZWdpc3RyeS5maW5kKG11dGF0aW9uLnRhcmdldCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGJsb3QgPT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGlmIChibG90LmRvbU5vZGUgPT09IG11dGF0aW9uLnRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2NoaWxkTGlzdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmsoUmVnaXN0cnkuZmluZChtdXRhdGlvbi5wcmV2aW91c1NpYmxpbmcsIGZhbHNlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwobXV0YXRpb24uYWRkZWROb2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBSZWdpc3RyeS5maW5kKG5vZGUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrKGNoaWxkLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgY29udGFpbmVyXzEuZGVmYXVsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChncmFuZENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrKGdyYW5kQ2hpbGQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2F0dHJpYnV0ZXMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrKGJsb3QucHJldik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWFyayhibG90KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKG9wdGltaXplKTtcbiAgICAgICAgICAgIHJlbWFpbmluZyA9IFtdLnNsaWNlLmNhbGwodGhpcy5vYnNlcnZlci50YWtlUmVjb3JkcygpKTtcbiAgICAgICAgICAgIHJlY29yZHMgPSByZW1haW5pbmcuc2xpY2UoKTtcbiAgICAgICAgICAgIHdoaWxlIChyZWNvcmRzLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgbXV0YXRpb25zLnB1c2gocmVjb3Jkcy5wb3AoKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNjcm9sbEJsb3QucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChtdXRhdGlvbnMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkgeyBjb250ZXh0ID0ge307IH1cbiAgICAgICAgbXV0YXRpb25zID0gbXV0YXRpb25zIHx8IHRoaXMub2JzZXJ2ZXIudGFrZVJlY29yZHMoKTtcbiAgICAgICAgLy8gVE9ETyB1c2UgV2Vha01hcFxuICAgICAgICBtdXRhdGlvbnNcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICAgICAgICB2YXIgYmxvdCA9IFJlZ2lzdHJ5LmZpbmQobXV0YXRpb24udGFyZ2V0LCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChibG90ID09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBpZiAoYmxvdC5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXS5tdXRhdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBibG90LmRvbU5vZGVbUmVnaXN0cnkuREFUQV9LRVldLm11dGF0aW9ucyA9IFttdXRhdGlvbl07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJsb3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgYmxvdC5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXS5tdXRhdGlvbnMucHVzaChtdXRhdGlvbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoYmxvdCkge1xuICAgICAgICAgICAgaWYgKGJsb3QgPT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgIGJsb3QgPT09IF90aGlzIHx8XG4gICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgYmxvdC5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXSA9PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGJsb3QudXBkYXRlKGJsb3QuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0ubXV0YXRpb25zIHx8IFtdLCBjb250ZXh0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKHRoaXMuZG9tTm9kZVtSZWdpc3RyeS5EQVRBX0tFWV0ubXV0YXRpb25zICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUudXBkYXRlLmNhbGwodGhpcywgdGhpcy5kb21Ob2RlW1JlZ2lzdHJ5LkRBVEFfS0VZXS5tdXRhdGlvbnMsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW1pemUobXV0YXRpb25zLCBjb250ZXh0KTtcbiAgICB9O1xuICAgIFNjcm9sbEJsb3QuYmxvdE5hbWUgPSAnc2Nyb2xsJztcbiAgICBTY3JvbGxCbG90LmRlZmF1bHRDaGlsZCA9ICdibG9jayc7XG4gICAgU2Nyb2xsQmxvdC5zY29wZSA9IFJlZ2lzdHJ5LlNjb3BlLkJMT0NLX0JMT1Q7XG4gICAgU2Nyb2xsQmxvdC50YWdOYW1lID0gJ0RJVic7XG4gICAgcmV0dXJuIFNjcm9sbEJsb3Q7XG59KGNvbnRhaW5lcl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFNjcm9sbEJsb3Q7XG5cblxuLyoqKi8gfSksXG4vKiA0NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZm9ybWF0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcbnZhciBSZWdpc3RyeSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vLyBTaGFsbG93IG9iamVjdCBjb21wYXJpc29uXG5mdW5jdGlvbiBpc0VxdWFsKG9iajEsIG9iajIpIHtcbiAgICBpZiAoT2JqZWN0LmtleXMob2JqMSkubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhvYmoyKS5sZW5ndGgpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZm9yICh2YXIgcHJvcCBpbiBvYmoxKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKG9iajFbcHJvcF0gIT09IG9iajJbcHJvcF0pXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxudmFyIElubGluZUJsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKElubGluZUJsb3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSW5saW5lQmxvdCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBJbmxpbmVCbG90LmZvcm1hdHMgPSBmdW5jdGlvbiAoZG9tTm9kZSkge1xuICAgICAgICBpZiAoZG9tTm9kZS50YWdOYW1lID09PSBJbmxpbmVCbG90LnRhZ05hbWUpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gX3N1cGVyLmZvcm1hdHMuY2FsbCh0aGlzLCBkb21Ob2RlKTtcbiAgICB9O1xuICAgIElubGluZUJsb3QucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAobmFtZSA9PT0gdGhpcy5zdGF0aWNzLmJsb3ROYW1lICYmICF2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgIGlmICghKGNoaWxkIGluc3RhbmNlb2YgZm9ybWF0XzEuZGVmYXVsdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBjaGlsZC53cmFwKElubGluZUJsb3QuYmxvdE5hbWUsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5hdHRyaWJ1dGVzLmNvcHkoY2hpbGQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnVud3JhcCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JtYXQuY2FsbCh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElubGluZUJsb3QucHJvdG90eXBlLmZvcm1hdEF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmZvcm1hdHMoKVtuYW1lXSAhPSBudWxsIHx8IFJlZ2lzdHJ5LnF1ZXJ5KG5hbWUsIFJlZ2lzdHJ5LlNjb3BlLkFUVFJJQlVURSkpIHtcbiAgICAgICAgICAgIHZhciBibG90ID0gdGhpcy5pc29sYXRlKGluZGV4LCBsZW5ndGgpO1xuICAgICAgICAgICAgYmxvdC5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JtYXRBdC5jYWxsKHRoaXMsIGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5saW5lQmxvdC5wcm90b3R5cGUub3B0aW1pemUgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm9wdGltaXplLmNhbGwodGhpcywgY29udGV4dCk7XG4gICAgICAgIHZhciBmb3JtYXRzID0gdGhpcy5mb3JtYXRzKCk7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhmb3JtYXRzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVud3JhcCgpOyAvLyB1bmZvcm1hdHRlZCBzcGFuXG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5leHQgPSB0aGlzLm5leHQ7XG4gICAgICAgIGlmIChuZXh0IGluc3RhbmNlb2YgSW5saW5lQmxvdCAmJiBuZXh0LnByZXYgPT09IHRoaXMgJiYgaXNFcXVhbChmb3JtYXRzLCBuZXh0LmZvcm1hdHMoKSkpIHtcbiAgICAgICAgICAgIG5leHQubW92ZUNoaWxkcmVuKHRoaXMpO1xuICAgICAgICAgICAgbmV4dC5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5saW5lQmxvdC5ibG90TmFtZSA9ICdpbmxpbmUnO1xuICAgIElubGluZUJsb3Quc2NvcGUgPSBSZWdpc3RyeS5TY29wZS5JTkxJTkVfQkxPVDtcbiAgICBJbmxpbmVCbG90LnRhZ05hbWUgPSAnU1BBTic7XG4gICAgcmV0dXJuIElubGluZUJsb3Q7XG59KGZvcm1hdF8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IElubGluZUJsb3Q7XG5cblxuLyoqKi8gfSksXG4vKiA0NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZm9ybWF0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcbnZhciBSZWdpc3RyeSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgQmxvY2tCbG90ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhCbG9ja0Jsb3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQmxvY2tCbG90KCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEJsb2NrQmxvdC5mb3JtYXRzID0gZnVuY3Rpb24gKGRvbU5vZGUpIHtcbiAgICAgICAgdmFyIHRhZ05hbWUgPSBSZWdpc3RyeS5xdWVyeShCbG9ja0Jsb3QuYmxvdE5hbWUpLnRhZ05hbWU7XG4gICAgICAgIGlmIChkb21Ob2RlLnRhZ05hbWUgPT09IHRhZ05hbWUpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gX3N1cGVyLmZvcm1hdHMuY2FsbCh0aGlzLCBkb21Ob2RlKTtcbiAgICB9O1xuICAgIEJsb2NrQmxvdC5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGlmIChSZWdpc3RyeS5xdWVyeShuYW1lLCBSZWdpc3RyeS5TY29wZS5CTE9DSykgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5hbWUgPT09IHRoaXMuc3RhdGljcy5ibG90TmFtZSAmJiAhdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZVdpdGgoQmxvY2tCbG90LmJsb3ROYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuZm9ybWF0LmNhbGwodGhpcywgbmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCbG9ja0Jsb3QucHJvdG90eXBlLmZvcm1hdEF0ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGlmIChSZWdpc3RyeS5xdWVyeShuYW1lLCBSZWdpc3RyeS5TY29wZS5CTE9DSykgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JtYXRBdC5jYWxsKHRoaXMsIGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQmxvY2tCbG90LnByb3RvdHlwZS5pbnNlcnRBdCA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUsIGRlZikge1xuICAgICAgICBpZiAoZGVmID09IG51bGwgfHwgUmVnaXN0cnkucXVlcnkodmFsdWUsIFJlZ2lzdHJ5LlNjb3BlLklOTElORSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gSW5zZXJ0IHRleHQgb3IgaW5saW5lXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluc2VydEF0LmNhbGwodGhpcywgaW5kZXgsIHZhbHVlLCBkZWYpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGFmdGVyID0gdGhpcy5zcGxpdChpbmRleCk7XG4gICAgICAgICAgICB2YXIgYmxvdCA9IFJlZ2lzdHJ5LmNyZWF0ZSh2YWx1ZSwgZGVmKTtcbiAgICAgICAgICAgIGFmdGVyLnBhcmVudC5pbnNlcnRCZWZvcmUoYmxvdCwgYWZ0ZXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCbG9ja0Jsb3QucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChtdXRhdGlvbnMsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL1RyaWRlbnQvKSkge1xuICAgICAgICAgICAgdGhpcy5idWlsZCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51cGRhdGUuY2FsbCh0aGlzLCBtdXRhdGlvbnMsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCbG9ja0Jsb3QuYmxvdE5hbWUgPSAnYmxvY2snO1xuICAgIEJsb2NrQmxvdC5zY29wZSA9IFJlZ2lzdHJ5LlNjb3BlLkJMT0NLX0JMT1Q7XG4gICAgQmxvY2tCbG90LnRhZ05hbWUgPSAnUCc7XG4gICAgcmV0dXJuIEJsb2NrQmxvdDtcbn0oZm9ybWF0XzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gQmxvY2tCbG90O1xuXG5cbi8qKiovIH0pLFxuLyogNDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGxlYWZfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpO1xudmFyIEVtYmVkQmxvdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRW1iZWRCbG90LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEVtYmVkQmxvdCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBFbWJlZEJsb3QuZm9ybWF0cyA9IGZ1bmN0aW9uIChkb21Ob2RlKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBFbWJlZEJsb3QucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICAvLyBzdXBlci5mb3JtYXRBdCB3cmFwcywgd2hpY2ggaXMgd2hhdCB3ZSB3YW50IGluIGdlbmVyYWwsXG4gICAgICAgIC8vIGJ1dCB0aGlzIGFsbG93cyBzdWJjbGFzc2VzIHRvIG92ZXJ3cml0ZSBmb3IgZm9ybWF0c1xuICAgICAgICAvLyB0aGF0IGp1c3QgYXBwbHkgdG8gcGFydGljdWxhciBlbWJlZHNcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JtYXRBdC5jYWxsKHRoaXMsIDAsIHRoaXMubGVuZ3RoKCksIG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuICAgIEVtYmVkQmxvdC5wcm90b3R5cGUuZm9ybWF0QXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGluZGV4ID09PSAwICYmIGxlbmd0aCA9PT0gdGhpcy5sZW5ndGgoKSkge1xuICAgICAgICAgICAgdGhpcy5mb3JtYXQobmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5mb3JtYXRBdC5jYWxsKHRoaXMsIGluZGV4LCBsZW5ndGgsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRW1iZWRCbG90LnByb3RvdHlwZS5mb3JtYXRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0aWNzLmZvcm1hdHModGhpcy5kb21Ob2RlKTtcbiAgICB9O1xuICAgIHJldHVybiBFbWJlZEJsb3Q7XG59KGxlYWZfMS5kZWZhdWx0KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBFbWJlZEJsb3Q7XG5cblxuLyoqKi8gfSksXG4vKiA0OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgbGVhZl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG52YXIgUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIFRleHRCbG90ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUZXh0QmxvdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUZXh0QmxvdChub2RlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG5vZGUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnRleHQgPSBfdGhpcy5zdGF0aWNzLnZhbHVlKF90aGlzLmRvbU5vZGUpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRleHRCbG90LmNyZWF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodmFsdWUpO1xuICAgIH07XG4gICAgVGV4dEJsb3QudmFsdWUgPSBmdW5jdGlvbiAoZG9tTm9kZSkge1xuICAgICAgICB2YXIgdGV4dCA9IGRvbU5vZGUuZGF0YTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAodGV4dFsnbm9ybWFsaXplJ10pXG4gICAgICAgICAgICB0ZXh0ID0gdGV4dFsnbm9ybWFsaXplJ10oKTtcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfTtcbiAgICBUZXh0QmxvdC5wcm90b3R5cGUuZGVsZXRlQXQgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICAgICAgICB0aGlzLmRvbU5vZGUuZGF0YSA9IHRoaXMudGV4dCA9IHRoaXMudGV4dC5zbGljZSgwLCBpbmRleCkgKyB0aGlzLnRleHQuc2xpY2UoaW5kZXggKyBsZW5ndGgpO1xuICAgIH07XG4gICAgVGV4dEJsb3QucHJvdG90eXBlLmluZGV4ID0gZnVuY3Rpb24gKG5vZGUsIG9mZnNldCkge1xuICAgICAgICBpZiAodGhpcy5kb21Ob2RlID09PSBub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gb2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICAgIFRleHRCbG90LnByb3RvdHlwZS5pbnNlcnRBdCA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUsIGRlZikge1xuICAgICAgICBpZiAoZGVmID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dCA9IHRoaXMudGV4dC5zbGljZSgwLCBpbmRleCkgKyB2YWx1ZSArIHRoaXMudGV4dC5zbGljZShpbmRleCk7XG4gICAgICAgICAgICB0aGlzLmRvbU5vZGUuZGF0YSA9IHRoaXMudGV4dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuaW5zZXJ0QXQuY2FsbCh0aGlzLCBpbmRleCwgdmFsdWUsIGRlZik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRleHRCbG90LnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQubGVuZ3RoO1xuICAgIH07XG4gICAgVGV4dEJsb3QucHJvdG90eXBlLm9wdGltaXplID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5vcHRpbWl6ZS5jYWxsKHRoaXMsIGNvbnRleHQpO1xuICAgICAgICB0aGlzLnRleHQgPSB0aGlzLnN0YXRpY3MudmFsdWUodGhpcy5kb21Ob2RlKTtcbiAgICAgICAgaWYgKHRoaXMudGV4dC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5uZXh0IGluc3RhbmNlb2YgVGV4dEJsb3QgJiYgdGhpcy5uZXh0LnByZXYgPT09IHRoaXMpIHtcbiAgICAgICAgICAgIHRoaXMuaW5zZXJ0QXQodGhpcy5sZW5ndGgoKSwgdGhpcy5uZXh0LnZhbHVlKCkpO1xuICAgICAgICAgICAgdGhpcy5uZXh0LnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXh0QmxvdC5wcm90b3R5cGUucG9zaXRpb24gPSBmdW5jdGlvbiAoaW5kZXgsIGluY2x1c2l2ZSkge1xuICAgICAgICBpZiAoaW5jbHVzaXZlID09PSB2b2lkIDApIHsgaW5jbHVzaXZlID0gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuIFt0aGlzLmRvbU5vZGUsIGluZGV4XTtcbiAgICB9O1xuICAgIFRleHRCbG90LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIChpbmRleCwgZm9yY2UpIHtcbiAgICAgICAgaWYgKGZvcmNlID09PSB2b2lkIDApIHsgZm9yY2UgPSBmYWxzZTsgfVxuICAgICAgICBpZiAoIWZvcmNlKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IHRoaXMubGVuZ3RoKCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmV4dDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYWZ0ZXIgPSBSZWdpc3RyeS5jcmVhdGUodGhpcy5kb21Ob2RlLnNwbGl0VGV4dChpbmRleCkpO1xuICAgICAgICB0aGlzLnBhcmVudC5pbnNlcnRCZWZvcmUoYWZ0ZXIsIHRoaXMubmV4dCk7XG4gICAgICAgIHRoaXMudGV4dCA9IHRoaXMuc3RhdGljcy52YWx1ZSh0aGlzLmRvbU5vZGUpO1xuICAgICAgICByZXR1cm4gYWZ0ZXI7XG4gICAgfTtcbiAgICBUZXh0QmxvdC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG11dGF0aW9ucywgY29udGV4dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAobXV0YXRpb25zLnNvbWUoZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gbXV0YXRpb24udHlwZSA9PT0gJ2NoYXJhY3RlckRhdGEnICYmIG11dGF0aW9uLnRhcmdldCA9PT0gX3RoaXMuZG9tTm9kZTtcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dCA9IHRoaXMuc3RhdGljcy52YWx1ZSh0aGlzLmRvbU5vZGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXh0QmxvdC5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQ7XG4gICAgfTtcbiAgICBUZXh0QmxvdC5ibG90TmFtZSA9ICd0ZXh0JztcbiAgICBUZXh0QmxvdC5zY29wZSA9IFJlZ2lzdHJ5LlNjb3BlLklOTElORV9CTE9UO1xuICAgIHJldHVybiBUZXh0QmxvdDtcbn0obGVhZl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFRleHRCbG90O1xuXG5cbi8qKiovIH0pLFxuLyogNTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbmVsZW0uY2xhc3NMaXN0LnRvZ2dsZSgndGVzdC1jbGFzcycsIGZhbHNlKTtcbmlmIChlbGVtLmNsYXNzTGlzdC5jb250YWlucygndGVzdC1jbGFzcycpKSB7XG4gIHZhciBfdG9nZ2xlID0gRE9NVG9rZW5MaXN0LnByb3RvdHlwZS50b2dnbGU7XG4gIERPTVRva2VuTGlzdC5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKHRva2VuLCBmb3JjZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSAmJiAhdGhpcy5jb250YWlucyh0b2tlbikgPT09ICFmb3JjZSkge1xuICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gX3RvZ2dsZS5jYWxsKHRoaXMsIHRva2VuKTtcbiAgICB9XG4gIH07XG59XG5cbmlmICghU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKSB7XG4gIFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aCA9IGZ1bmN0aW9uIChzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKSB7XG4gICAgcG9zaXRpb24gPSBwb3NpdGlvbiB8fCAwO1xuICAgIHJldHVybiB0aGlzLnN1YnN0cihwb3NpdGlvbiwgc2VhcmNoU3RyaW5nLmxlbmd0aCkgPT09IHNlYXJjaFN0cmluZztcbiAgfTtcbn1cblxuaWYgKCFTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKSB7XG4gIFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGggPSBmdW5jdGlvbiAoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbikge1xuICAgIHZhciBzdWJqZWN0U3RyaW5nID0gdGhpcy50b1N0cmluZygpO1xuICAgIGlmICh0eXBlb2YgcG9zaXRpb24gIT09ICdudW1iZXInIHx8ICFpc0Zpbml0ZShwb3NpdGlvbikgfHwgTWF0aC5mbG9vcihwb3NpdGlvbikgIT09IHBvc2l0aW9uIHx8IHBvc2l0aW9uID4gc3ViamVjdFN0cmluZy5sZW5ndGgpIHtcbiAgICAgIHBvc2l0aW9uID0gc3ViamVjdFN0cmluZy5sZW5ndGg7XG4gICAgfVxuICAgIHBvc2l0aW9uIC09IHNlYXJjaFN0cmluZy5sZW5ndGg7XG4gICAgdmFyIGxhc3RJbmRleCA9IHN1YmplY3RTdHJpbmcuaW5kZXhPZihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKTtcbiAgICByZXR1cm4gbGFzdEluZGV4ICE9PSAtMSAmJiBsYXN0SW5kZXggPT09IHBvc2l0aW9uO1xuICB9O1xufVxuXG5pZiAoIUFycmF5LnByb3RvdHlwZS5maW5kKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwiZmluZFwiLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKHByZWRpY2F0ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLmZpbmQgY2FsbGVkIG9uIG51bGwgb3IgdW5kZWZpbmVkJyk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwcmVkaWNhdGUgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICB9XG4gICAgICB2YXIgbGlzdCA9IE9iamVjdCh0aGlzKTtcbiAgICAgIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aCA+Pj4gMDtcbiAgICAgIHZhciB0aGlzQXJnID0gYXJndW1lbnRzWzFdO1xuICAgICAgdmFyIHZhbHVlO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlID0gbGlzdFtpXTtcbiAgICAgICAgaWYgKHByZWRpY2F0ZS5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpLCBsaXN0KSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH0pO1xufVxuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBmdW5jdGlvbiAoKSB7XG4gIC8vIERpc2FibGUgcmVzaXppbmcgaW4gRmlyZWZveFxuICBkb2N1bWVudC5leGVjQ29tbWFuZChcImVuYWJsZU9iamVjdFJlc2l6aW5nXCIsIGZhbHNlLCBmYWxzZSk7XG4gIC8vIERpc2FibGUgYXV0b21hdGljIGxpbmtpZnlpbmcgaW4gSUUxMVxuICBkb2N1bWVudC5leGVjQ29tbWFuZChcImF1dG9VcmxEZXRlY3RcIiwgZmFsc2UsIGZhbHNlKTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDUxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8qKlxuICogVGhpcyBsaWJyYXJ5IG1vZGlmaWVzIHRoZSBkaWZmLXBhdGNoLW1hdGNoIGxpYnJhcnkgYnkgTmVpbCBGcmFzZXJcbiAqIGJ5IHJlbW92aW5nIHRoZSBwYXRjaCBhbmQgbWF0Y2ggZnVuY3Rpb25hbGl0eSBhbmQgY2VydGFpbiBhZHZhbmNlZFxuICogb3B0aW9ucyBpbiB0aGUgZGlmZiBmdW5jdGlvbi4gVGhlIG9yaWdpbmFsIGxpY2Vuc2UgaXMgYXMgZm9sbG93czpcbiAqXG4gKiA9PT1cbiAqXG4gKiBEaWZmIE1hdGNoIGFuZCBQYXRjaFxuICpcbiAqIENvcHlyaWdodCAyMDA2IEdvb2dsZSBJbmMuXG4gKiBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvZ29vZ2xlLWRpZmYtbWF0Y2gtcGF0Y2gvXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cbi8qKlxuICogVGhlIGRhdGEgc3RydWN0dXJlIHJlcHJlc2VudGluZyBhIGRpZmYgaXMgYW4gYXJyYXkgb2YgdHVwbGVzOlxuICogW1tESUZGX0RFTEVURSwgJ0hlbGxvJ10sIFtESUZGX0lOU0VSVCwgJ0dvb2RieWUnXSwgW0RJRkZfRVFVQUwsICcgd29ybGQuJ11dXG4gKiB3aGljaCBtZWFuczogZGVsZXRlICdIZWxsbycsIGFkZCAnR29vZGJ5ZScgYW5kIGtlZXAgJyB3b3JsZC4nXG4gKi9cbnZhciBESUZGX0RFTEVURSA9IC0xO1xudmFyIERJRkZfSU5TRVJUID0gMTtcbnZhciBESUZGX0VRVUFMID0gMDtcblxuXG4vKipcbiAqIEZpbmQgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gdHdvIHRleHRzLiAgU2ltcGxpZmllcyB0aGUgcHJvYmxlbSBieSBzdHJpcHBpbmdcbiAqIGFueSBjb21tb24gcHJlZml4IG9yIHN1ZmZpeCBvZmYgdGhlIHRleHRzIGJlZm9yZSBkaWZmaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQxIE9sZCBzdHJpbmcgdG8gYmUgZGlmZmVkLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQyIE5ldyBzdHJpbmcgdG8gYmUgZGlmZmVkLlxuICogQHBhcmFtIHtJbnR9IGN1cnNvcl9wb3MgRXhwZWN0ZWQgZWRpdCBwb3NpdGlvbiBpbiB0ZXh0MSAob3B0aW9uYWwpXG4gKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgb2YgZGlmZiB0dXBsZXMuXG4gKi9cbmZ1bmN0aW9uIGRpZmZfbWFpbih0ZXh0MSwgdGV4dDIsIGN1cnNvcl9wb3MpIHtcbiAgLy8gQ2hlY2sgZm9yIGVxdWFsaXR5IChzcGVlZHVwKS5cbiAgaWYgKHRleHQxID09IHRleHQyKSB7XG4gICAgaWYgKHRleHQxKSB7XG4gICAgICByZXR1cm4gW1tESUZGX0VRVUFMLCB0ZXh0MV1dO1xuICAgIH1cbiAgICByZXR1cm4gW107XG4gIH1cblxuICAvLyBDaGVjayBjdXJzb3JfcG9zIHdpdGhpbiBib3VuZHNcbiAgaWYgKGN1cnNvcl9wb3MgPCAwIHx8IHRleHQxLmxlbmd0aCA8IGN1cnNvcl9wb3MpIHtcbiAgICBjdXJzb3JfcG9zID0gbnVsbDtcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGNvbW1vbiBwcmVmaXggKHNwZWVkdXApLlxuICB2YXIgY29tbW9ubGVuZ3RoID0gZGlmZl9jb21tb25QcmVmaXgodGV4dDEsIHRleHQyKTtcbiAgdmFyIGNvbW1vbnByZWZpeCA9IHRleHQxLnN1YnN0cmluZygwLCBjb21tb25sZW5ndGgpO1xuICB0ZXh0MSA9IHRleHQxLnN1YnN0cmluZyhjb21tb25sZW5ndGgpO1xuICB0ZXh0MiA9IHRleHQyLnN1YnN0cmluZyhjb21tb25sZW5ndGgpO1xuXG4gIC8vIFRyaW0gb2ZmIGNvbW1vbiBzdWZmaXggKHNwZWVkdXApLlxuICBjb21tb25sZW5ndGggPSBkaWZmX2NvbW1vblN1ZmZpeCh0ZXh0MSwgdGV4dDIpO1xuICB2YXIgY29tbW9uc3VmZml4ID0gdGV4dDEuc3Vic3RyaW5nKHRleHQxLmxlbmd0aCAtIGNvbW1vbmxlbmd0aCk7XG4gIHRleHQxID0gdGV4dDEuc3Vic3RyaW5nKDAsIHRleHQxLmxlbmd0aCAtIGNvbW1vbmxlbmd0aCk7XG4gIHRleHQyID0gdGV4dDIuc3Vic3RyaW5nKDAsIHRleHQyLmxlbmd0aCAtIGNvbW1vbmxlbmd0aCk7XG5cbiAgLy8gQ29tcHV0ZSB0aGUgZGlmZiBvbiB0aGUgbWlkZGxlIGJsb2NrLlxuICB2YXIgZGlmZnMgPSBkaWZmX2NvbXB1dGVfKHRleHQxLCB0ZXh0Mik7XG5cbiAgLy8gUmVzdG9yZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gIGlmIChjb21tb25wcmVmaXgpIHtcbiAgICBkaWZmcy51bnNoaWZ0KFtESUZGX0VRVUFMLCBjb21tb25wcmVmaXhdKTtcbiAgfVxuICBpZiAoY29tbW9uc3VmZml4KSB7XG4gICAgZGlmZnMucHVzaChbRElGRl9FUVVBTCwgY29tbW9uc3VmZml4XSk7XG4gIH1cbiAgZGlmZl9jbGVhbnVwTWVyZ2UoZGlmZnMpO1xuICBpZiAoY3Vyc29yX3BvcyAhPSBudWxsKSB7XG4gICAgZGlmZnMgPSBmaXhfY3Vyc29yKGRpZmZzLCBjdXJzb3JfcG9zKTtcbiAgfVxuICBkaWZmcyA9IGZpeF9lbW9qaShkaWZmcyk7XG4gIHJldHVybiBkaWZmcztcbn07XG5cblxuLyoqXG4gKiBGaW5kIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIHR3byB0ZXh0cy4gIEFzc3VtZXMgdGhhdCB0aGUgdGV4dHMgZG8gbm90XG4gKiBoYXZlIGFueSBjb21tb24gcHJlZml4IG9yIHN1ZmZpeC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MSBPbGQgc3RyaW5nIHRvIGJlIGRpZmZlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MiBOZXcgc3RyaW5nIHRvIGJlIGRpZmZlZC5cbiAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBkaWZmIHR1cGxlcy5cbiAqL1xuZnVuY3Rpb24gZGlmZl9jb21wdXRlXyh0ZXh0MSwgdGV4dDIpIHtcbiAgdmFyIGRpZmZzO1xuXG4gIGlmICghdGV4dDEpIHtcbiAgICAvLyBKdXN0IGFkZCBzb21lIHRleHQgKHNwZWVkdXApLlxuICAgIHJldHVybiBbW0RJRkZfSU5TRVJULCB0ZXh0Ml1dO1xuICB9XG5cbiAgaWYgKCF0ZXh0Mikge1xuICAgIC8vIEp1c3QgZGVsZXRlIHNvbWUgdGV4dCAoc3BlZWR1cCkuXG4gICAgcmV0dXJuIFtbRElGRl9ERUxFVEUsIHRleHQxXV07XG4gIH1cblxuICB2YXIgbG9uZ3RleHQgPSB0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGggPyB0ZXh0MSA6IHRleHQyO1xuICB2YXIgc2hvcnR0ZXh0ID0gdGV4dDEubGVuZ3RoID4gdGV4dDIubGVuZ3RoID8gdGV4dDIgOiB0ZXh0MTtcbiAgdmFyIGkgPSBsb25ndGV4dC5pbmRleE9mKHNob3J0dGV4dCk7XG4gIGlmIChpICE9IC0xKSB7XG4gICAgLy8gU2hvcnRlciB0ZXh0IGlzIGluc2lkZSB0aGUgbG9uZ2VyIHRleHQgKHNwZWVkdXApLlxuICAgIGRpZmZzID0gW1tESUZGX0lOU0VSVCwgbG9uZ3RleHQuc3Vic3RyaW5nKDAsIGkpXSxcbiAgICAgICAgICAgICBbRElGRl9FUVVBTCwgc2hvcnR0ZXh0XSxcbiAgICAgICAgICAgICBbRElGRl9JTlNFUlQsIGxvbmd0ZXh0LnN1YnN0cmluZyhpICsgc2hvcnR0ZXh0Lmxlbmd0aCldXTtcbiAgICAvLyBTd2FwIGluc2VydGlvbnMgZm9yIGRlbGV0aW9ucyBpZiBkaWZmIGlzIHJldmVyc2VkLlxuICAgIGlmICh0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGgpIHtcbiAgICAgIGRpZmZzWzBdWzBdID0gZGlmZnNbMl1bMF0gPSBESUZGX0RFTEVURTtcbiAgICB9XG4gICAgcmV0dXJuIGRpZmZzO1xuICB9XG5cbiAgaWYgKHNob3J0dGV4dC5sZW5ndGggPT0gMSkge1xuICAgIC8vIFNpbmdsZSBjaGFyYWN0ZXIgc3RyaW5nLlxuICAgIC8vIEFmdGVyIHRoZSBwcmV2aW91cyBzcGVlZHVwLCB0aGUgY2hhcmFjdGVyIGNhbid0IGJlIGFuIGVxdWFsaXR5LlxuICAgIHJldHVybiBbW0RJRkZfREVMRVRFLCB0ZXh0MV0sIFtESUZGX0lOU0VSVCwgdGV4dDJdXTtcbiAgfVxuXG4gIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgcHJvYmxlbSBjYW4gYmUgc3BsaXQgaW4gdHdvLlxuICB2YXIgaG0gPSBkaWZmX2hhbGZNYXRjaF8odGV4dDEsIHRleHQyKTtcbiAgaWYgKGhtKSB7XG4gICAgLy8gQSBoYWxmLW1hdGNoIHdhcyBmb3VuZCwgc29ydCBvdXQgdGhlIHJldHVybiBkYXRhLlxuICAgIHZhciB0ZXh0MV9hID0gaG1bMF07XG4gICAgdmFyIHRleHQxX2IgPSBobVsxXTtcbiAgICB2YXIgdGV4dDJfYSA9IGhtWzJdO1xuICAgIHZhciB0ZXh0Ml9iID0gaG1bM107XG4gICAgdmFyIG1pZF9jb21tb24gPSBobVs0XTtcbiAgICAvLyBTZW5kIGJvdGggcGFpcnMgb2ZmIGZvciBzZXBhcmF0ZSBwcm9jZXNzaW5nLlxuICAgIHZhciBkaWZmc19hID0gZGlmZl9tYWluKHRleHQxX2EsIHRleHQyX2EpO1xuICAgIHZhciBkaWZmc19iID0gZGlmZl9tYWluKHRleHQxX2IsIHRleHQyX2IpO1xuICAgIC8vIE1lcmdlIHRoZSByZXN1bHRzLlxuICAgIHJldHVybiBkaWZmc19hLmNvbmNhdChbW0RJRkZfRVFVQUwsIG1pZF9jb21tb25dXSwgZGlmZnNfYik7XG4gIH1cblxuICByZXR1cm4gZGlmZl9iaXNlY3RfKHRleHQxLCB0ZXh0Mik7XG59O1xuXG5cbi8qKlxuICogRmluZCB0aGUgJ21pZGRsZSBzbmFrZScgb2YgYSBkaWZmLCBzcGxpdCB0aGUgcHJvYmxlbSBpbiB0d29cbiAqIGFuZCByZXR1cm4gdGhlIHJlY3Vyc2l2ZWx5IGNvbnN0cnVjdGVkIGRpZmYuXG4gKiBTZWUgTXllcnMgMTk4NiBwYXBlcjogQW4gTyhORCkgRGlmZmVyZW5jZSBBbGdvcml0aG0gYW5kIEl0cyBWYXJpYXRpb25zLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQxIE9sZCBzdHJpbmcgdG8gYmUgZGlmZmVkLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQyIE5ldyBzdHJpbmcgdG8gYmUgZGlmZmVkLlxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIGRpZmYgdHVwbGVzLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZGlmZl9iaXNlY3RfKHRleHQxLCB0ZXh0Mikge1xuICAvLyBDYWNoZSB0aGUgdGV4dCBsZW5ndGhzIHRvIHByZXZlbnQgbXVsdGlwbGUgY2FsbHMuXG4gIHZhciB0ZXh0MV9sZW5ndGggPSB0ZXh0MS5sZW5ndGg7XG4gIHZhciB0ZXh0Ml9sZW5ndGggPSB0ZXh0Mi5sZW5ndGg7XG4gIHZhciBtYXhfZCA9IE1hdGguY2VpbCgodGV4dDFfbGVuZ3RoICsgdGV4dDJfbGVuZ3RoKSAvIDIpO1xuICB2YXIgdl9vZmZzZXQgPSBtYXhfZDtcbiAgdmFyIHZfbGVuZ3RoID0gMiAqIG1heF9kO1xuICB2YXIgdjEgPSBuZXcgQXJyYXkodl9sZW5ndGgpO1xuICB2YXIgdjIgPSBuZXcgQXJyYXkodl9sZW5ndGgpO1xuICAvLyBTZXR0aW5nIGFsbCBlbGVtZW50cyB0byAtMSBpcyBmYXN0ZXIgaW4gQ2hyb21lICYgRmlyZWZveCB0aGFuIG1peGluZ1xuICAvLyBpbnRlZ2VycyBhbmQgdW5kZWZpbmVkLlxuICBmb3IgKHZhciB4ID0gMDsgeCA8IHZfbGVuZ3RoOyB4KyspIHtcbiAgICB2MVt4XSA9IC0xO1xuICAgIHYyW3hdID0gLTE7XG4gIH1cbiAgdjFbdl9vZmZzZXQgKyAxXSA9IDA7XG4gIHYyW3Zfb2Zmc2V0ICsgMV0gPSAwO1xuICB2YXIgZGVsdGEgPSB0ZXh0MV9sZW5ndGggLSB0ZXh0Ml9sZW5ndGg7XG4gIC8vIElmIHRoZSB0b3RhbCBudW1iZXIgb2YgY2hhcmFjdGVycyBpcyBvZGQsIHRoZW4gdGhlIGZyb250IHBhdGggd2lsbCBjb2xsaWRlXG4gIC8vIHdpdGggdGhlIHJldmVyc2UgcGF0aC5cbiAgdmFyIGZyb250ID0gKGRlbHRhICUgMiAhPSAwKTtcbiAgLy8gT2Zmc2V0cyBmb3Igc3RhcnQgYW5kIGVuZCBvZiBrIGxvb3AuXG4gIC8vIFByZXZlbnRzIG1hcHBpbmcgb2Ygc3BhY2UgYmV5b25kIHRoZSBncmlkLlxuICB2YXIgazFzdGFydCA9IDA7XG4gIHZhciBrMWVuZCA9IDA7XG4gIHZhciBrMnN0YXJ0ID0gMDtcbiAgdmFyIGsyZW5kID0gMDtcbiAgZm9yICh2YXIgZCA9IDA7IGQgPCBtYXhfZDsgZCsrKSB7XG4gICAgLy8gV2FsayB0aGUgZnJvbnQgcGF0aCBvbmUgc3RlcC5cbiAgICBmb3IgKHZhciBrMSA9IC1kICsgazFzdGFydDsgazEgPD0gZCAtIGsxZW5kOyBrMSArPSAyKSB7XG4gICAgICB2YXIgazFfb2Zmc2V0ID0gdl9vZmZzZXQgKyBrMTtcbiAgICAgIHZhciB4MTtcbiAgICAgIGlmIChrMSA9PSAtZCB8fCAoazEgIT0gZCAmJiB2MVtrMV9vZmZzZXQgLSAxXSA8IHYxW2sxX29mZnNldCArIDFdKSkge1xuICAgICAgICB4MSA9IHYxW2sxX29mZnNldCArIDFdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeDEgPSB2MVtrMV9vZmZzZXQgLSAxXSArIDE7XG4gICAgICB9XG4gICAgICB2YXIgeTEgPSB4MSAtIGsxO1xuICAgICAgd2hpbGUgKHgxIDwgdGV4dDFfbGVuZ3RoICYmIHkxIDwgdGV4dDJfbGVuZ3RoICYmXG4gICAgICAgICAgICAgdGV4dDEuY2hhckF0KHgxKSA9PSB0ZXh0Mi5jaGFyQXQoeTEpKSB7XG4gICAgICAgIHgxKys7XG4gICAgICAgIHkxKys7XG4gICAgICB9XG4gICAgICB2MVtrMV9vZmZzZXRdID0geDE7XG4gICAgICBpZiAoeDEgPiB0ZXh0MV9sZW5ndGgpIHtcbiAgICAgICAgLy8gUmFuIG9mZiB0aGUgcmlnaHQgb2YgdGhlIGdyYXBoLlxuICAgICAgICBrMWVuZCArPSAyO1xuICAgICAgfSBlbHNlIGlmICh5MSA+IHRleHQyX2xlbmd0aCkge1xuICAgICAgICAvLyBSYW4gb2ZmIHRoZSBib3R0b20gb2YgdGhlIGdyYXBoLlxuICAgICAgICBrMXN0YXJ0ICs9IDI7XG4gICAgICB9IGVsc2UgaWYgKGZyb250KSB7XG4gICAgICAgIHZhciBrMl9vZmZzZXQgPSB2X29mZnNldCArIGRlbHRhIC0gazE7XG4gICAgICAgIGlmIChrMl9vZmZzZXQgPj0gMCAmJiBrMl9vZmZzZXQgPCB2X2xlbmd0aCAmJiB2MltrMl9vZmZzZXRdICE9IC0xKSB7XG4gICAgICAgICAgLy8gTWlycm9yIHgyIG9udG8gdG9wLWxlZnQgY29vcmRpbmF0ZSBzeXN0ZW0uXG4gICAgICAgICAgdmFyIHgyID0gdGV4dDFfbGVuZ3RoIC0gdjJbazJfb2Zmc2V0XTtcbiAgICAgICAgICBpZiAoeDEgPj0geDIpIHtcbiAgICAgICAgICAgIC8vIE92ZXJsYXAgZGV0ZWN0ZWQuXG4gICAgICAgICAgICByZXR1cm4gZGlmZl9iaXNlY3RTcGxpdF8odGV4dDEsIHRleHQyLCB4MSwgeTEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFdhbGsgdGhlIHJldmVyc2UgcGF0aCBvbmUgc3RlcC5cbiAgICBmb3IgKHZhciBrMiA9IC1kICsgazJzdGFydDsgazIgPD0gZCAtIGsyZW5kOyBrMiArPSAyKSB7XG4gICAgICB2YXIgazJfb2Zmc2V0ID0gdl9vZmZzZXQgKyBrMjtcbiAgICAgIHZhciB4MjtcbiAgICAgIGlmIChrMiA9PSAtZCB8fCAoazIgIT0gZCAmJiB2MltrMl9vZmZzZXQgLSAxXSA8IHYyW2syX29mZnNldCArIDFdKSkge1xuICAgICAgICB4MiA9IHYyW2syX29mZnNldCArIDFdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeDIgPSB2MltrMl9vZmZzZXQgLSAxXSArIDE7XG4gICAgICB9XG4gICAgICB2YXIgeTIgPSB4MiAtIGsyO1xuICAgICAgd2hpbGUgKHgyIDwgdGV4dDFfbGVuZ3RoICYmIHkyIDwgdGV4dDJfbGVuZ3RoICYmXG4gICAgICAgICAgICAgdGV4dDEuY2hhckF0KHRleHQxX2xlbmd0aCAtIHgyIC0gMSkgPT1cbiAgICAgICAgICAgICB0ZXh0Mi5jaGFyQXQodGV4dDJfbGVuZ3RoIC0geTIgLSAxKSkge1xuICAgICAgICB4MisrO1xuICAgICAgICB5MisrO1xuICAgICAgfVxuICAgICAgdjJbazJfb2Zmc2V0XSA9IHgyO1xuICAgICAgaWYgKHgyID4gdGV4dDFfbGVuZ3RoKSB7XG4gICAgICAgIC8vIFJhbiBvZmYgdGhlIGxlZnQgb2YgdGhlIGdyYXBoLlxuICAgICAgICBrMmVuZCArPSAyO1xuICAgICAgfSBlbHNlIGlmICh5MiA+IHRleHQyX2xlbmd0aCkge1xuICAgICAgICAvLyBSYW4gb2ZmIHRoZSB0b3Agb2YgdGhlIGdyYXBoLlxuICAgICAgICBrMnN0YXJ0ICs9IDI7XG4gICAgICB9IGVsc2UgaWYgKCFmcm9udCkge1xuICAgICAgICB2YXIgazFfb2Zmc2V0ID0gdl9vZmZzZXQgKyBkZWx0YSAtIGsyO1xuICAgICAgICBpZiAoazFfb2Zmc2V0ID49IDAgJiYgazFfb2Zmc2V0IDwgdl9sZW5ndGggJiYgdjFbazFfb2Zmc2V0XSAhPSAtMSkge1xuICAgICAgICAgIHZhciB4MSA9IHYxW2sxX29mZnNldF07XG4gICAgICAgICAgdmFyIHkxID0gdl9vZmZzZXQgKyB4MSAtIGsxX29mZnNldDtcbiAgICAgICAgICAvLyBNaXJyb3IgeDIgb250byB0b3AtbGVmdCBjb29yZGluYXRlIHN5c3RlbS5cbiAgICAgICAgICB4MiA9IHRleHQxX2xlbmd0aCAtIHgyO1xuICAgICAgICAgIGlmICh4MSA+PSB4Mikge1xuICAgICAgICAgICAgLy8gT3ZlcmxhcCBkZXRlY3RlZC5cbiAgICAgICAgICAgIHJldHVybiBkaWZmX2Jpc2VjdFNwbGl0Xyh0ZXh0MSwgdGV4dDIsIHgxLCB5MSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIERpZmYgdG9vayB0b28gbG9uZyBhbmQgaGl0IHRoZSBkZWFkbGluZSBvclxuICAvLyBudW1iZXIgb2YgZGlmZnMgZXF1YWxzIG51bWJlciBvZiBjaGFyYWN0ZXJzLCBubyBjb21tb25hbGl0eSBhdCBhbGwuXG4gIHJldHVybiBbW0RJRkZfREVMRVRFLCB0ZXh0MV0sIFtESUZGX0lOU0VSVCwgdGV4dDJdXTtcbn07XG5cblxuLyoqXG4gKiBHaXZlbiB0aGUgbG9jYXRpb24gb2YgdGhlICdtaWRkbGUgc25ha2UnLCBzcGxpdCB0aGUgZGlmZiBpbiB0d28gcGFydHNcbiAqIGFuZCByZWN1cnNlLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQxIE9sZCBzdHJpbmcgdG8gYmUgZGlmZmVkLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQyIE5ldyBzdHJpbmcgdG8gYmUgZGlmZmVkLlxuICogQHBhcmFtIHtudW1iZXJ9IHggSW5kZXggb2Ygc3BsaXQgcG9pbnQgaW4gdGV4dDEuXG4gKiBAcGFyYW0ge251bWJlcn0geSBJbmRleCBvZiBzcGxpdCBwb2ludCBpbiB0ZXh0Mi5cbiAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBkaWZmIHR1cGxlcy5cbiAqL1xuZnVuY3Rpb24gZGlmZl9iaXNlY3RTcGxpdF8odGV4dDEsIHRleHQyLCB4LCB5KSB7XG4gIHZhciB0ZXh0MWEgPSB0ZXh0MS5zdWJzdHJpbmcoMCwgeCk7XG4gIHZhciB0ZXh0MmEgPSB0ZXh0Mi5zdWJzdHJpbmcoMCwgeSk7XG4gIHZhciB0ZXh0MWIgPSB0ZXh0MS5zdWJzdHJpbmcoeCk7XG4gIHZhciB0ZXh0MmIgPSB0ZXh0Mi5zdWJzdHJpbmcoeSk7XG5cbiAgLy8gQ29tcHV0ZSBib3RoIGRpZmZzIHNlcmlhbGx5LlxuICB2YXIgZGlmZnMgPSBkaWZmX21haW4odGV4dDFhLCB0ZXh0MmEpO1xuICB2YXIgZGlmZnNiID0gZGlmZl9tYWluKHRleHQxYiwgdGV4dDJiKTtcblxuICByZXR1cm4gZGlmZnMuY29uY2F0KGRpZmZzYik7XG59O1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIHRoZSBjb21tb24gcHJlZml4IG9mIHR3byBzdHJpbmdzLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQxIEZpcnN0IHN0cmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MiBTZWNvbmQgc3RyaW5nLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgY29tbW9uIHRvIHRoZSBzdGFydCBvZiBlYWNoXG4gKiAgICAgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBkaWZmX2NvbW1vblByZWZpeCh0ZXh0MSwgdGV4dDIpIHtcbiAgLy8gUXVpY2sgY2hlY2sgZm9yIGNvbW1vbiBudWxsIGNhc2VzLlxuICBpZiAoIXRleHQxIHx8ICF0ZXh0MiB8fCB0ZXh0MS5jaGFyQXQoMCkgIT0gdGV4dDIuY2hhckF0KDApKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgLy8gQmluYXJ5IHNlYXJjaC5cbiAgLy8gUGVyZm9ybWFuY2UgYW5hbHlzaXM6IGh0dHA6Ly9uZWlsLmZyYXNlci5uYW1lL25ld3MvMjAwNy8xMC8wOS9cbiAgdmFyIHBvaW50ZXJtaW4gPSAwO1xuICB2YXIgcG9pbnRlcm1heCA9IE1hdGgubWluKHRleHQxLmxlbmd0aCwgdGV4dDIubGVuZ3RoKTtcbiAgdmFyIHBvaW50ZXJtaWQgPSBwb2ludGVybWF4O1xuICB2YXIgcG9pbnRlcnN0YXJ0ID0gMDtcbiAgd2hpbGUgKHBvaW50ZXJtaW4gPCBwb2ludGVybWlkKSB7XG4gICAgaWYgKHRleHQxLnN1YnN0cmluZyhwb2ludGVyc3RhcnQsIHBvaW50ZXJtaWQpID09XG4gICAgICAgIHRleHQyLnN1YnN0cmluZyhwb2ludGVyc3RhcnQsIHBvaW50ZXJtaWQpKSB7XG4gICAgICBwb2ludGVybWluID0gcG9pbnRlcm1pZDtcbiAgICAgIHBvaW50ZXJzdGFydCA9IHBvaW50ZXJtaW47XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvaW50ZXJtYXggPSBwb2ludGVybWlkO1xuICAgIH1cbiAgICBwb2ludGVybWlkID0gTWF0aC5mbG9vcigocG9pbnRlcm1heCAtIHBvaW50ZXJtaW4pIC8gMiArIHBvaW50ZXJtaW4pO1xuICB9XG4gIHJldHVybiBwb2ludGVybWlkO1xufTtcblxuXG4vKipcbiAqIERldGVybWluZSB0aGUgY29tbW9uIHN1ZmZpeCBvZiB0d28gc3RyaW5ncy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MSBGaXJzdCBzdHJpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDIgU2Vjb25kIHN0cmluZy5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGNvbW1vbiB0byB0aGUgZW5kIG9mIGVhY2ggc3RyaW5nLlxuICovXG5mdW5jdGlvbiBkaWZmX2NvbW1vblN1ZmZpeCh0ZXh0MSwgdGV4dDIpIHtcbiAgLy8gUXVpY2sgY2hlY2sgZm9yIGNvbW1vbiBudWxsIGNhc2VzLlxuICBpZiAoIXRleHQxIHx8ICF0ZXh0MiB8fFxuICAgICAgdGV4dDEuY2hhckF0KHRleHQxLmxlbmd0aCAtIDEpICE9IHRleHQyLmNoYXJBdCh0ZXh0Mi5sZW5ndGggLSAxKSkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIC8vIEJpbmFyeSBzZWFyY2guXG4gIC8vIFBlcmZvcm1hbmNlIGFuYWx5c2lzOiBodHRwOi8vbmVpbC5mcmFzZXIubmFtZS9uZXdzLzIwMDcvMTAvMDkvXG4gIHZhciBwb2ludGVybWluID0gMDtcbiAgdmFyIHBvaW50ZXJtYXggPSBNYXRoLm1pbih0ZXh0MS5sZW5ndGgsIHRleHQyLmxlbmd0aCk7XG4gIHZhciBwb2ludGVybWlkID0gcG9pbnRlcm1heDtcbiAgdmFyIHBvaW50ZXJlbmQgPSAwO1xuICB3aGlsZSAocG9pbnRlcm1pbiA8IHBvaW50ZXJtaWQpIHtcbiAgICBpZiAodGV4dDEuc3Vic3RyaW5nKHRleHQxLmxlbmd0aCAtIHBvaW50ZXJtaWQsIHRleHQxLmxlbmd0aCAtIHBvaW50ZXJlbmQpID09XG4gICAgICAgIHRleHQyLnN1YnN0cmluZyh0ZXh0Mi5sZW5ndGggLSBwb2ludGVybWlkLCB0ZXh0Mi5sZW5ndGggLSBwb2ludGVyZW5kKSkge1xuICAgICAgcG9pbnRlcm1pbiA9IHBvaW50ZXJtaWQ7XG4gICAgICBwb2ludGVyZW5kID0gcG9pbnRlcm1pbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9pbnRlcm1heCA9IHBvaW50ZXJtaWQ7XG4gICAgfVxuICAgIHBvaW50ZXJtaWQgPSBNYXRoLmZsb29yKChwb2ludGVybWF4IC0gcG9pbnRlcm1pbikgLyAyICsgcG9pbnRlcm1pbik7XG4gIH1cbiAgcmV0dXJuIHBvaW50ZXJtaWQ7XG59O1xuXG5cbi8qKlxuICogRG8gdGhlIHR3byB0ZXh0cyBzaGFyZSBhIHN1YnN0cmluZyB3aGljaCBpcyBhdCBsZWFzdCBoYWxmIHRoZSBsZW5ndGggb2YgdGhlXG4gKiBsb25nZXIgdGV4dD9cbiAqIFRoaXMgc3BlZWR1cCBjYW4gcHJvZHVjZSBub24tbWluaW1hbCBkaWZmcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MSBGaXJzdCBzdHJpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDIgU2Vjb25kIHN0cmluZy5cbiAqIEByZXR1cm4ge0FycmF5LjxzdHJpbmc+fSBGaXZlIGVsZW1lbnQgQXJyYXksIGNvbnRhaW5pbmcgdGhlIHByZWZpeCBvZlxuICogICAgIHRleHQxLCB0aGUgc3VmZml4IG9mIHRleHQxLCB0aGUgcHJlZml4IG9mIHRleHQyLCB0aGUgc3VmZml4IG9mXG4gKiAgICAgdGV4dDIgYW5kIHRoZSBjb21tb24gbWlkZGxlLiAgT3IgbnVsbCBpZiB0aGVyZSB3YXMgbm8gbWF0Y2guXG4gKi9cbmZ1bmN0aW9uIGRpZmZfaGFsZk1hdGNoXyh0ZXh0MSwgdGV4dDIpIHtcbiAgdmFyIGxvbmd0ZXh0ID0gdGV4dDEubGVuZ3RoID4gdGV4dDIubGVuZ3RoID8gdGV4dDEgOiB0ZXh0MjtcbiAgdmFyIHNob3J0dGV4dCA9IHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCA/IHRleHQyIDogdGV4dDE7XG4gIGlmIChsb25ndGV4dC5sZW5ndGggPCA0IHx8IHNob3J0dGV4dC5sZW5ndGggKiAyIDwgbG9uZ3RleHQubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG51bGw7ICAvLyBQb2ludGxlc3MuXG4gIH1cblxuICAvKipcbiAgICogRG9lcyBhIHN1YnN0cmluZyBvZiBzaG9ydHRleHQgZXhpc3Qgd2l0aGluIGxvbmd0ZXh0IHN1Y2ggdGhhdCB0aGUgc3Vic3RyaW5nXG4gICAqIGlzIGF0IGxlYXN0IGhhbGYgdGhlIGxlbmd0aCBvZiBsb25ndGV4dD9cbiAgICogQ2xvc3VyZSwgYnV0IGRvZXMgbm90IHJlZmVyZW5jZSBhbnkgZXh0ZXJuYWwgdmFyaWFibGVzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbG9uZ3RleHQgTG9uZ2VyIHN0cmluZy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHNob3J0dGV4dCBTaG9ydGVyIHN0cmluZy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGkgU3RhcnQgaW5kZXggb2YgcXVhcnRlciBsZW5ndGggc3Vic3RyaW5nIHdpdGhpbiBsb25ndGV4dC5cbiAgICogQHJldHVybiB7QXJyYXkuPHN0cmluZz59IEZpdmUgZWxlbWVudCBBcnJheSwgY29udGFpbmluZyB0aGUgcHJlZml4IG9mXG4gICAqICAgICBsb25ndGV4dCwgdGhlIHN1ZmZpeCBvZiBsb25ndGV4dCwgdGhlIHByZWZpeCBvZiBzaG9ydHRleHQsIHRoZSBzdWZmaXhcbiAgICogICAgIG9mIHNob3J0dGV4dCBhbmQgdGhlIGNvbW1vbiBtaWRkbGUuICBPciBudWxsIGlmIHRoZXJlIHdhcyBubyBtYXRjaC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGRpZmZfaGFsZk1hdGNoSV8obG9uZ3RleHQsIHNob3J0dGV4dCwgaSkge1xuICAgIC8vIFN0YXJ0IHdpdGggYSAxLzQgbGVuZ3RoIHN1YnN0cmluZyBhdCBwb3NpdGlvbiBpIGFzIGEgc2VlZC5cbiAgICB2YXIgc2VlZCA9IGxvbmd0ZXh0LnN1YnN0cmluZyhpLCBpICsgTWF0aC5mbG9vcihsb25ndGV4dC5sZW5ndGggLyA0KSk7XG4gICAgdmFyIGogPSAtMTtcbiAgICB2YXIgYmVzdF9jb21tb24gPSAnJztcbiAgICB2YXIgYmVzdF9sb25ndGV4dF9hLCBiZXN0X2xvbmd0ZXh0X2IsIGJlc3Rfc2hvcnR0ZXh0X2EsIGJlc3Rfc2hvcnR0ZXh0X2I7XG4gICAgd2hpbGUgKChqID0gc2hvcnR0ZXh0LmluZGV4T2Yoc2VlZCwgaiArIDEpKSAhPSAtMSkge1xuICAgICAgdmFyIHByZWZpeExlbmd0aCA9IGRpZmZfY29tbW9uUHJlZml4KGxvbmd0ZXh0LnN1YnN0cmluZyhpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG9ydHRleHQuc3Vic3RyaW5nKGopKTtcbiAgICAgIHZhciBzdWZmaXhMZW5ndGggPSBkaWZmX2NvbW1vblN1ZmZpeChsb25ndGV4dC5zdWJzdHJpbmcoMCwgaSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvcnR0ZXh0LnN1YnN0cmluZygwLCBqKSk7XG4gICAgICBpZiAoYmVzdF9jb21tb24ubGVuZ3RoIDwgc3VmZml4TGVuZ3RoICsgcHJlZml4TGVuZ3RoKSB7XG4gICAgICAgIGJlc3RfY29tbW9uID0gc2hvcnR0ZXh0LnN1YnN0cmluZyhqIC0gc3VmZml4TGVuZ3RoLCBqKSArXG4gICAgICAgICAgICBzaG9ydHRleHQuc3Vic3RyaW5nKGosIGogKyBwcmVmaXhMZW5ndGgpO1xuICAgICAgICBiZXN0X2xvbmd0ZXh0X2EgPSBsb25ndGV4dC5zdWJzdHJpbmcoMCwgaSAtIHN1ZmZpeExlbmd0aCk7XG4gICAgICAgIGJlc3RfbG9uZ3RleHRfYiA9IGxvbmd0ZXh0LnN1YnN0cmluZyhpICsgcHJlZml4TGVuZ3RoKTtcbiAgICAgICAgYmVzdF9zaG9ydHRleHRfYSA9IHNob3J0dGV4dC5zdWJzdHJpbmcoMCwgaiAtIHN1ZmZpeExlbmd0aCk7XG4gICAgICAgIGJlc3Rfc2hvcnR0ZXh0X2IgPSBzaG9ydHRleHQuc3Vic3RyaW5nKGogKyBwcmVmaXhMZW5ndGgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYmVzdF9jb21tb24ubGVuZ3RoICogMiA+PSBsb25ndGV4dC5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBbYmVzdF9sb25ndGV4dF9hLCBiZXN0X2xvbmd0ZXh0X2IsXG4gICAgICAgICAgICAgIGJlc3Rfc2hvcnR0ZXh0X2EsIGJlc3Rfc2hvcnR0ZXh0X2IsIGJlc3RfY29tbW9uXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgLy8gRmlyc3QgY2hlY2sgaWYgdGhlIHNlY29uZCBxdWFydGVyIGlzIHRoZSBzZWVkIGZvciBhIGhhbGYtbWF0Y2guXG4gIHZhciBobTEgPSBkaWZmX2hhbGZNYXRjaElfKGxvbmd0ZXh0LCBzaG9ydHRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguY2VpbChsb25ndGV4dC5sZW5ndGggLyA0KSk7XG4gIC8vIENoZWNrIGFnYWluIGJhc2VkIG9uIHRoZSB0aGlyZCBxdWFydGVyLlxuICB2YXIgaG0yID0gZGlmZl9oYWxmTWF0Y2hJXyhsb25ndGV4dCwgc2hvcnR0ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmNlaWwobG9uZ3RleHQubGVuZ3RoIC8gMikpO1xuICB2YXIgaG07XG4gIGlmICghaG0xICYmICFobTIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIGlmICghaG0yKSB7XG4gICAgaG0gPSBobTE7XG4gIH0gZWxzZSBpZiAoIWhtMSkge1xuICAgIGhtID0gaG0yO1xuICB9IGVsc2Uge1xuICAgIC8vIEJvdGggbWF0Y2hlZC4gIFNlbGVjdCB0aGUgbG9uZ2VzdC5cbiAgICBobSA9IGhtMVs0XS5sZW5ndGggPiBobTJbNF0ubGVuZ3RoID8gaG0xIDogaG0yO1xuICB9XG5cbiAgLy8gQSBoYWxmLW1hdGNoIHdhcyBmb3VuZCwgc29ydCBvdXQgdGhlIHJldHVybiBkYXRhLlxuICB2YXIgdGV4dDFfYSwgdGV4dDFfYiwgdGV4dDJfYSwgdGV4dDJfYjtcbiAgaWYgKHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCkge1xuICAgIHRleHQxX2EgPSBobVswXTtcbiAgICB0ZXh0MV9iID0gaG1bMV07XG4gICAgdGV4dDJfYSA9IGhtWzJdO1xuICAgIHRleHQyX2IgPSBobVszXTtcbiAgfSBlbHNlIHtcbiAgICB0ZXh0Ml9hID0gaG1bMF07XG4gICAgdGV4dDJfYiA9IGhtWzFdO1xuICAgIHRleHQxX2EgPSBobVsyXTtcbiAgICB0ZXh0MV9iID0gaG1bM107XG4gIH1cbiAgdmFyIG1pZF9jb21tb24gPSBobVs0XTtcbiAgcmV0dXJuIFt0ZXh0MV9hLCB0ZXh0MV9iLCB0ZXh0Ml9hLCB0ZXh0Ml9iLCBtaWRfY29tbW9uXTtcbn07XG5cblxuLyoqXG4gKiBSZW9yZGVyIGFuZCBtZXJnZSBsaWtlIGVkaXQgc2VjdGlvbnMuICBNZXJnZSBlcXVhbGl0aWVzLlxuICogQW55IGVkaXQgc2VjdGlvbiBjYW4gbW92ZSBhcyBsb25nIGFzIGl0IGRvZXNuJ3QgY3Jvc3MgYW4gZXF1YWxpdHkuXG4gKiBAcGFyYW0ge0FycmF5fSBkaWZmcyBBcnJheSBvZiBkaWZmIHR1cGxlcy5cbiAqL1xuZnVuY3Rpb24gZGlmZl9jbGVhbnVwTWVyZ2UoZGlmZnMpIHtcbiAgZGlmZnMucHVzaChbRElGRl9FUVVBTCwgJyddKTsgIC8vIEFkZCBhIGR1bW15IGVudHJ5IGF0IHRoZSBlbmQuXG4gIHZhciBwb2ludGVyID0gMDtcbiAgdmFyIGNvdW50X2RlbGV0ZSA9IDA7XG4gIHZhciBjb3VudF9pbnNlcnQgPSAwO1xuICB2YXIgdGV4dF9kZWxldGUgPSAnJztcbiAgdmFyIHRleHRfaW5zZXJ0ID0gJyc7XG4gIHZhciBjb21tb25sZW5ndGg7XG4gIHdoaWxlIChwb2ludGVyIDwgZGlmZnMubGVuZ3RoKSB7XG4gICAgc3dpdGNoIChkaWZmc1twb2ludGVyXVswXSkge1xuICAgICAgY2FzZSBESUZGX0lOU0VSVDpcbiAgICAgICAgY291bnRfaW5zZXJ0Kys7XG4gICAgICAgIHRleHRfaW5zZXJ0ICs9IGRpZmZzW3BvaW50ZXJdWzFdO1xuICAgICAgICBwb2ludGVyKys7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBESUZGX0RFTEVURTpcbiAgICAgICAgY291bnRfZGVsZXRlKys7XG4gICAgICAgIHRleHRfZGVsZXRlICs9IGRpZmZzW3BvaW50ZXJdWzFdO1xuICAgICAgICBwb2ludGVyKys7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBESUZGX0VRVUFMOlxuICAgICAgICAvLyBVcG9uIHJlYWNoaW5nIGFuIGVxdWFsaXR5LCBjaGVjayBmb3IgcHJpb3IgcmVkdW5kYW5jaWVzLlxuICAgICAgICBpZiAoY291bnRfZGVsZXRlICsgY291bnRfaW5zZXJ0ID4gMSkge1xuICAgICAgICAgIGlmIChjb3VudF9kZWxldGUgIT09IDAgJiYgY291bnRfaW5zZXJ0ICE9PSAwKSB7XG4gICAgICAgICAgICAvLyBGYWN0b3Igb3V0IGFueSBjb21tb24gcHJlZml4aWVzLlxuICAgICAgICAgICAgY29tbW9ubGVuZ3RoID0gZGlmZl9jb21tb25QcmVmaXgodGV4dF9pbnNlcnQsIHRleHRfZGVsZXRlKTtcbiAgICAgICAgICAgIGlmIChjb21tb25sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgaWYgKChwb2ludGVyIC0gY291bnRfZGVsZXRlIC0gY291bnRfaW5zZXJ0KSA+IDAgJiZcbiAgICAgICAgICAgICAgICAgIGRpZmZzW3BvaW50ZXIgLSBjb3VudF9kZWxldGUgLSBjb3VudF9pbnNlcnQgLSAxXVswXSA9PVxuICAgICAgICAgICAgICAgICAgRElGRl9FUVVBTCkge1xuICAgICAgICAgICAgICAgIGRpZmZzW3BvaW50ZXIgLSBjb3VudF9kZWxldGUgLSBjb3VudF9pbnNlcnQgLSAxXVsxXSArPVxuICAgICAgICAgICAgICAgICAgICB0ZXh0X2luc2VydC5zdWJzdHJpbmcoMCwgY29tbW9ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkaWZmcy5zcGxpY2UoMCwgMCwgW0RJRkZfRVFVQUwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0X2luc2VydC5zdWJzdHJpbmcoMCwgY29tbW9ubGVuZ3RoKV0pO1xuICAgICAgICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0ZXh0X2luc2VydCA9IHRleHRfaW5zZXJ0LnN1YnN0cmluZyhjb21tb25sZW5ndGgpO1xuICAgICAgICAgICAgICB0ZXh0X2RlbGV0ZSA9IHRleHRfZGVsZXRlLnN1YnN0cmluZyhjb21tb25sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRmFjdG9yIG91dCBhbnkgY29tbW9uIHN1ZmZpeGllcy5cbiAgICAgICAgICAgIGNvbW1vbmxlbmd0aCA9IGRpZmZfY29tbW9uU3VmZml4KHRleHRfaW5zZXJ0LCB0ZXh0X2RlbGV0ZSk7XG4gICAgICAgICAgICBpZiAoY29tbW9ubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgIGRpZmZzW3BvaW50ZXJdWzFdID0gdGV4dF9pbnNlcnQuc3Vic3RyaW5nKHRleHRfaW5zZXJ0Lmxlbmd0aCAtXG4gICAgICAgICAgICAgICAgICBjb21tb25sZW5ndGgpICsgZGlmZnNbcG9pbnRlcl1bMV07XG4gICAgICAgICAgICAgIHRleHRfaW5zZXJ0ID0gdGV4dF9pbnNlcnQuc3Vic3RyaW5nKDAsIHRleHRfaW5zZXJ0Lmxlbmd0aCAtXG4gICAgICAgICAgICAgICAgICBjb21tb25sZW5ndGgpO1xuICAgICAgICAgICAgICB0ZXh0X2RlbGV0ZSA9IHRleHRfZGVsZXRlLnN1YnN0cmluZygwLCB0ZXh0X2RlbGV0ZS5sZW5ndGggLVxuICAgICAgICAgICAgICAgICAgY29tbW9ubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gRGVsZXRlIHRoZSBvZmZlbmRpbmcgcmVjb3JkcyBhbmQgYWRkIHRoZSBtZXJnZWQgb25lcy5cbiAgICAgICAgICBpZiAoY291bnRfZGVsZXRlID09PSAwKSB7XG4gICAgICAgICAgICBkaWZmcy5zcGxpY2UocG9pbnRlciAtIGNvdW50X2luc2VydCxcbiAgICAgICAgICAgICAgICBjb3VudF9kZWxldGUgKyBjb3VudF9pbnNlcnQsIFtESUZGX0lOU0VSVCwgdGV4dF9pbnNlcnRdKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNvdW50X2luc2VydCA9PT0gMCkge1xuICAgICAgICAgICAgZGlmZnMuc3BsaWNlKHBvaW50ZXIgLSBjb3VudF9kZWxldGUsXG4gICAgICAgICAgICAgICAgY291bnRfZGVsZXRlICsgY291bnRfaW5zZXJ0LCBbRElGRl9ERUxFVEUsIHRleHRfZGVsZXRlXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRpZmZzLnNwbGljZShwb2ludGVyIC0gY291bnRfZGVsZXRlIC0gY291bnRfaW5zZXJ0LFxuICAgICAgICAgICAgICAgIGNvdW50X2RlbGV0ZSArIGNvdW50X2luc2VydCwgW0RJRkZfREVMRVRFLCB0ZXh0X2RlbGV0ZV0sXG4gICAgICAgICAgICAgICAgW0RJRkZfSU5TRVJULCB0ZXh0X2luc2VydF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwb2ludGVyID0gcG9pbnRlciAtIGNvdW50X2RlbGV0ZSAtIGNvdW50X2luc2VydCArXG4gICAgICAgICAgICAgICAgICAgIChjb3VudF9kZWxldGUgPyAxIDogMCkgKyAoY291bnRfaW5zZXJ0ID8gMSA6IDApICsgMTtcbiAgICAgICAgfSBlbHNlIGlmIChwb2ludGVyICE9PSAwICYmIGRpZmZzW3BvaW50ZXIgLSAxXVswXSA9PSBESUZGX0VRVUFMKSB7XG4gICAgICAgICAgLy8gTWVyZ2UgdGhpcyBlcXVhbGl0eSB3aXRoIHRoZSBwcmV2aW91cyBvbmUuXG4gICAgICAgICAgZGlmZnNbcG9pbnRlciAtIDFdWzFdICs9IGRpZmZzW3BvaW50ZXJdWzFdO1xuICAgICAgICAgIGRpZmZzLnNwbGljZShwb2ludGVyLCAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwb2ludGVyKys7XG4gICAgICAgIH1cbiAgICAgICAgY291bnRfaW5zZXJ0ID0gMDtcbiAgICAgICAgY291bnRfZGVsZXRlID0gMDtcbiAgICAgICAgdGV4dF9kZWxldGUgPSAnJztcbiAgICAgICAgdGV4dF9pbnNlcnQgPSAnJztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChkaWZmc1tkaWZmcy5sZW5ndGggLSAxXVsxXSA9PT0gJycpIHtcbiAgICBkaWZmcy5wb3AoKTsgIC8vIFJlbW92ZSB0aGUgZHVtbXkgZW50cnkgYXQgdGhlIGVuZC5cbiAgfVxuXG4gIC8vIFNlY29uZCBwYXNzOiBsb29rIGZvciBzaW5nbGUgZWRpdHMgc3Vycm91bmRlZCBvbiBib3RoIHNpZGVzIGJ5IGVxdWFsaXRpZXNcbiAgLy8gd2hpY2ggY2FuIGJlIHNoaWZ0ZWQgc2lkZXdheXMgdG8gZWxpbWluYXRlIGFuIGVxdWFsaXR5LlxuICAvLyBlLmc6IEE8aW5zPkJBPC9pbnM+QyAtPiA8aW5zPkFCPC9pbnM+QUNcbiAgdmFyIGNoYW5nZXMgPSBmYWxzZTtcbiAgcG9pbnRlciA9IDE7XG4gIC8vIEludGVudGlvbmFsbHkgaWdub3JlIHRoZSBmaXJzdCBhbmQgbGFzdCBlbGVtZW50IChkb24ndCBuZWVkIGNoZWNraW5nKS5cbiAgd2hpbGUgKHBvaW50ZXIgPCBkaWZmcy5sZW5ndGggLSAxKSB7XG4gICAgaWYgKGRpZmZzW3BvaW50ZXIgLSAxXVswXSA9PSBESUZGX0VRVUFMICYmXG4gICAgICAgIGRpZmZzW3BvaW50ZXIgKyAxXVswXSA9PSBESUZGX0VRVUFMKSB7XG4gICAgICAvLyBUaGlzIGlzIGEgc2luZ2xlIGVkaXQgc3Vycm91bmRlZCBieSBlcXVhbGl0aWVzLlxuICAgICAgaWYgKGRpZmZzW3BvaW50ZXJdWzFdLnN1YnN0cmluZyhkaWZmc1twb2ludGVyXVsxXS5sZW5ndGggLVxuICAgICAgICAgIGRpZmZzW3BvaW50ZXIgLSAxXVsxXS5sZW5ndGgpID09IGRpZmZzW3BvaW50ZXIgLSAxXVsxXSkge1xuICAgICAgICAvLyBTaGlmdCB0aGUgZWRpdCBvdmVyIHRoZSBwcmV2aW91cyBlcXVhbGl0eS5cbiAgICAgICAgZGlmZnNbcG9pbnRlcl1bMV0gPSBkaWZmc1twb2ludGVyIC0gMV1bMV0gK1xuICAgICAgICAgICAgZGlmZnNbcG9pbnRlcl1bMV0uc3Vic3RyaW5nKDAsIGRpZmZzW3BvaW50ZXJdWzFdLmxlbmd0aCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZnNbcG9pbnRlciAtIDFdWzFdLmxlbmd0aCk7XG4gICAgICAgIGRpZmZzW3BvaW50ZXIgKyAxXVsxXSA9IGRpZmZzW3BvaW50ZXIgLSAxXVsxXSArIGRpZmZzW3BvaW50ZXIgKyAxXVsxXTtcbiAgICAgICAgZGlmZnMuc3BsaWNlKHBvaW50ZXIgLSAxLCAxKTtcbiAgICAgICAgY2hhbmdlcyA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGRpZmZzW3BvaW50ZXJdWzFdLnN1YnN0cmluZygwLCBkaWZmc1twb2ludGVyICsgMV1bMV0ubGVuZ3RoKSA9PVxuICAgICAgICAgIGRpZmZzW3BvaW50ZXIgKyAxXVsxXSkge1xuICAgICAgICAvLyBTaGlmdCB0aGUgZWRpdCBvdmVyIHRoZSBuZXh0IGVxdWFsaXR5LlxuICAgICAgICBkaWZmc1twb2ludGVyIC0gMV1bMV0gKz0gZGlmZnNbcG9pbnRlciArIDFdWzFdO1xuICAgICAgICBkaWZmc1twb2ludGVyXVsxXSA9XG4gICAgICAgICAgICBkaWZmc1twb2ludGVyXVsxXS5zdWJzdHJpbmcoZGlmZnNbcG9pbnRlciArIDFdWzFdLmxlbmd0aCkgK1xuICAgICAgICAgICAgZGlmZnNbcG9pbnRlciArIDFdWzFdO1xuICAgICAgICBkaWZmcy5zcGxpY2UocG9pbnRlciArIDEsIDEpO1xuICAgICAgICBjaGFuZ2VzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcG9pbnRlcisrO1xuICB9XG4gIC8vIElmIHNoaWZ0cyB3ZXJlIG1hZGUsIHRoZSBkaWZmIG5lZWRzIHJlb3JkZXJpbmcgYW5kIGFub3RoZXIgc2hpZnQgc3dlZXAuXG4gIGlmIChjaGFuZ2VzKSB7XG4gICAgZGlmZl9jbGVhbnVwTWVyZ2UoZGlmZnMpO1xuICB9XG59O1xuXG5cbnZhciBkaWZmID0gZGlmZl9tYWluO1xuZGlmZi5JTlNFUlQgPSBESUZGX0lOU0VSVDtcbmRpZmYuREVMRVRFID0gRElGRl9ERUxFVEU7XG5kaWZmLkVRVUFMID0gRElGRl9FUVVBTDtcblxubW9kdWxlLmV4cG9ydHMgPSBkaWZmO1xuXG4vKlxuICogTW9kaWZ5IGEgZGlmZiBzdWNoIHRoYXQgdGhlIGN1cnNvciBwb3NpdGlvbiBwb2ludHMgdG8gdGhlIHN0YXJ0IG9mIGEgY2hhbmdlOlxuICogRS5nLlxuICogICBjdXJzb3Jfbm9ybWFsaXplX2RpZmYoW1tESUZGX0VRVUFMLCAnYWJjJ11dLCAxKVxuICogICAgID0+IFsxLCBbW0RJRkZfRVFVQUwsICdhJ10sIFtESUZGX0VRVUFMLCAnYmMnXV1dXG4gKiAgIGN1cnNvcl9ub3JtYWxpemVfZGlmZihbW0RJRkZfSU5TRVJULCAnbmV3J10sIFtESUZGX0RFTEVURSwgJ3h5eiddXSwgMilcbiAqICAgICA9PiBbMiwgW1tESUZGX0lOU0VSVCwgJ25ldyddLCBbRElGRl9ERUxFVEUsICd4eSddLCBbRElGRl9ERUxFVEUsICd6J11dXVxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGRpZmZzIEFycmF5IG9mIGRpZmYgdHVwbGVzXG4gKiBAcGFyYW0ge0ludH0gY3Vyc29yX3BvcyBTdWdnZXN0ZWQgZWRpdCBwb3NpdGlvbi4gTXVzdCBub3QgYmUgb3V0IG9mIGJvdW5kcyFcbiAqIEByZXR1cm4ge0FycmF5fSBBIHR1cGxlIFtjdXJzb3IgbG9jYXRpb24gaW4gdGhlIG1vZGlmaWVkIGRpZmYsIG1vZGlmaWVkIGRpZmZdXG4gKi9cbmZ1bmN0aW9uIGN1cnNvcl9ub3JtYWxpemVfZGlmZiAoZGlmZnMsIGN1cnNvcl9wb3MpIHtcbiAgaWYgKGN1cnNvcl9wb3MgPT09IDApIHtcbiAgICByZXR1cm4gW0RJRkZfRVFVQUwsIGRpZmZzXTtcbiAgfVxuICBmb3IgKHZhciBjdXJyZW50X3BvcyA9IDAsIGkgPSAwOyBpIDwgZGlmZnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZCA9IGRpZmZzW2ldO1xuICAgIGlmIChkWzBdID09PSBESUZGX0RFTEVURSB8fCBkWzBdID09PSBESUZGX0VRVUFMKSB7XG4gICAgICB2YXIgbmV4dF9wb3MgPSBjdXJyZW50X3BvcyArIGRbMV0ubGVuZ3RoO1xuICAgICAgaWYgKGN1cnNvcl9wb3MgPT09IG5leHRfcG9zKSB7XG4gICAgICAgIHJldHVybiBbaSArIDEsIGRpZmZzXTtcbiAgICAgIH0gZWxzZSBpZiAoY3Vyc29yX3BvcyA8IG5leHRfcG9zKSB7XG4gICAgICAgIC8vIGNvcHkgdG8gcHJldmVudCBzaWRlIGVmZmVjdHNcbiAgICAgICAgZGlmZnMgPSBkaWZmcy5zbGljZSgpO1xuICAgICAgICAvLyBzcGxpdCBkIGludG8gdHdvIGRpZmYgY2hhbmdlc1xuICAgICAgICB2YXIgc3BsaXRfcG9zID0gY3Vyc29yX3BvcyAtIGN1cnJlbnRfcG9zO1xuICAgICAgICB2YXIgZF9sZWZ0ID0gW2RbMF0sIGRbMV0uc2xpY2UoMCwgc3BsaXRfcG9zKV07XG4gICAgICAgIHZhciBkX3JpZ2h0ID0gW2RbMF0sIGRbMV0uc2xpY2Uoc3BsaXRfcG9zKV07XG4gICAgICAgIGRpZmZzLnNwbGljZShpLCAxLCBkX2xlZnQsIGRfcmlnaHQpO1xuICAgICAgICByZXR1cm4gW2kgKyAxLCBkaWZmc107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50X3BvcyA9IG5leHRfcG9zO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ2N1cnNvcl9wb3MgaXMgb3V0IG9mIGJvdW5kcyEnKVxufVxuXG4vKlxuICogTW9kaWZ5IGEgZGlmZiBzdWNoIHRoYXQgdGhlIGVkaXQgcG9zaXRpb24gaXMgXCJzaGlmdGVkXCIgdG8gdGhlIHByb3Bvc2VkIGVkaXQgbG9jYXRpb24gKGN1cnNvcl9wb3NpdGlvbikuXG4gKlxuICogQ2FzZSAxKVxuICogICBDaGVjayBpZiBhIG5haXZlIHNoaWZ0IGlzIHBvc3NpYmxlOlxuICogICAgIFswLCBYXSwgWyAxLCBZXSAtPiBbIDEsIFldLCBbMCwgWF0gICAgKGlmIFggKyBZID09PSBZICsgWClcbiAqICAgICBbMCwgWF0sIFstMSwgWV0gLT4gWy0xLCBZXSwgWzAsIFhdICAgIChpZiBYICsgWSA9PT0gWSArIFgpIC0gaG9sZHMgc2FtZSByZXN1bHRcbiAqIENhc2UgMilcbiAqICAgQ2hlY2sgaWYgdGhlIGZvbGxvd2luZyBzaGlmdHMgYXJlIHBvc3NpYmxlOlxuICogICAgIFswLCAncHJlJ10sIFsgMSwgJ3ByZWZpeCddIC0+IFsgMSwgJ3ByZSddLCBbMCwgJ3ByZSddLCBbIDEsICdmaXgnXVxuICogICAgIFswLCAncHJlJ10sIFstMSwgJ3ByZWZpeCddIC0+IFstMSwgJ3ByZSddLCBbMCwgJ3ByZSddLCBbLTEsICdmaXgnXVxuICogICAgICAgICBeICAgICAgICAgICAgXlxuICogICAgICAgICBkICAgICAgICAgIGRfbmV4dFxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGRpZmZzIEFycmF5IG9mIGRpZmYgdHVwbGVzXG4gKiBAcGFyYW0ge0ludH0gY3Vyc29yX3BvcyBTdWdnZXN0ZWQgZWRpdCBwb3NpdGlvbi4gTXVzdCBub3QgYmUgb3V0IG9mIGJvdW5kcyFcbiAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBkaWZmIHR1cGxlc1xuICovXG5mdW5jdGlvbiBmaXhfY3Vyc29yIChkaWZmcywgY3Vyc29yX3Bvcykge1xuICB2YXIgbm9ybSA9IGN1cnNvcl9ub3JtYWxpemVfZGlmZihkaWZmcywgY3Vyc29yX3Bvcyk7XG4gIHZhciBuZGlmZnMgPSBub3JtWzFdO1xuICB2YXIgY3Vyc29yX3BvaW50ZXIgPSBub3JtWzBdO1xuICB2YXIgZCA9IG5kaWZmc1tjdXJzb3JfcG9pbnRlcl07XG4gIHZhciBkX25leHQgPSBuZGlmZnNbY3Vyc29yX3BvaW50ZXIgKyAxXTtcblxuICBpZiAoZCA9PSBudWxsKSB7XG4gICAgLy8gVGV4dCB3YXMgZGVsZXRlZCBmcm9tIGVuZCBvZiBvcmlnaW5hbCBzdHJpbmcsXG4gICAgLy8gY3Vyc29yIGlzIG5vdyBvdXQgb2YgYm91bmRzIGluIG5ldyBzdHJpbmdcbiAgICByZXR1cm4gZGlmZnM7XG4gIH0gZWxzZSBpZiAoZFswXSAhPT0gRElGRl9FUVVBTCkge1xuICAgIC8vIEEgbW9kaWZpY2F0aW9uIGhhcHBlbmVkIGF0IHRoZSBjdXJzb3IgbG9jYXRpb24uXG4gICAgLy8gVGhpcyBpcyB0aGUgZXhwZWN0ZWQgb3V0Y29tZSwgc28gd2UgY2FuIHJldHVybiB0aGUgb3JpZ2luYWwgZGlmZi5cbiAgICByZXR1cm4gZGlmZnM7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGRfbmV4dCAhPSBudWxsICYmIGRbMV0gKyBkX25leHRbMV0gPT09IGRfbmV4dFsxXSArIGRbMV0pIHtcbiAgICAgIC8vIENhc2UgMSlcbiAgICAgIC8vIEl0IGlzIHBvc3NpYmxlIHRvIHBlcmZvcm0gYSBuYWl2ZSBzaGlmdFxuICAgICAgbmRpZmZzLnNwbGljZShjdXJzb3JfcG9pbnRlciwgMiwgZF9uZXh0LCBkKVxuICAgICAgcmV0dXJuIG1lcmdlX3R1cGxlcyhuZGlmZnMsIGN1cnNvcl9wb2ludGVyLCAyKVxuICAgIH0gZWxzZSBpZiAoZF9uZXh0ICE9IG51bGwgJiYgZF9uZXh0WzFdLmluZGV4T2YoZFsxXSkgPT09IDApIHtcbiAgICAgIC8vIENhc2UgMilcbiAgICAgIC8vIGRbMV0gaXMgYSBwcmVmaXggb2YgZF9uZXh0WzFdXG4gICAgICAvLyBXZSBjYW4gYXNzdW1lIHRoYXQgZF9uZXh0WzBdICE9PSAwLCBzaW5jZSBkWzBdID09PSAwXG4gICAgICAvLyBTaGlmdCBlZGl0IGxvY2F0aW9ucy4uXG4gICAgICBuZGlmZnMuc3BsaWNlKGN1cnNvcl9wb2ludGVyLCAyLCBbZF9uZXh0WzBdLCBkWzFdXSwgWzAsIGRbMV1dKTtcbiAgICAgIHZhciBzdWZmaXggPSBkX25leHRbMV0uc2xpY2UoZFsxXS5sZW5ndGgpO1xuICAgICAgaWYgKHN1ZmZpeC5sZW5ndGggPiAwKSB7XG4gICAgICAgIG5kaWZmcy5zcGxpY2UoY3Vyc29yX3BvaW50ZXIgKyAyLCAwLCBbZF9uZXh0WzBdLCBzdWZmaXhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtZXJnZV90dXBsZXMobmRpZmZzLCBjdXJzb3JfcG9pbnRlciwgMylcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTm90IHBvc3NpYmxlIHRvIHBlcmZvcm0gYW55IG1vZGlmaWNhdGlvblxuICAgICAgcmV0dXJuIGRpZmZzO1xuICAgIH1cbiAgfVxufVxuXG4vKlxuICogQ2hlY2sgZGlmZiBkaWQgbm90IHNwbGl0IHN1cnJvZ2F0ZSBwYWlycy5cbiAqIEV4LiBbMCwgJ1xcdUQ4M0QnXSwgWy0xLCAnXFx1REMzNiddLCBbMSwgJ1xcdURDMkYnXSAtPiBbLTEsICdcXHVEODNEXFx1REMzNiddLCBbMSwgJ1xcdUQ4M0RcXHVEQzJGJ11cbiAqICAgICAnXFx1RDgzRFxcdURDMzYnID09PSAn8J+QticsICdcXHVEODNEXFx1REMyRicgPT09ICfwn5CvJ1xuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGRpZmZzIEFycmF5IG9mIGRpZmYgdHVwbGVzXG4gKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgb2YgZGlmZiB0dXBsZXNcbiAqL1xuZnVuY3Rpb24gZml4X2Vtb2ppIChkaWZmcykge1xuICB2YXIgY29tcGFjdCA9IGZhbHNlO1xuICB2YXIgc3RhcnRzX3dpdGhfcGFpcl9lbmQgPSBmdW5jdGlvbihzdHIpIHtcbiAgICByZXR1cm4gc3RyLmNoYXJDb2RlQXQoMCkgPj0gMHhEQzAwICYmIHN0ci5jaGFyQ29kZUF0KDApIDw9IDB4REZGRjtcbiAgfVxuICB2YXIgZW5kc193aXRoX3BhaXJfc3RhcnQgPSBmdW5jdGlvbihzdHIpIHtcbiAgICByZXR1cm4gc3RyLmNoYXJDb2RlQXQoc3RyLmxlbmd0aC0xKSA+PSAweEQ4MDAgJiYgc3RyLmNoYXJDb2RlQXQoc3RyLmxlbmd0aC0xKSA8PSAweERCRkY7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDI7IGkgPCBkaWZmcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChkaWZmc1tpLTJdWzBdID09PSBESUZGX0VRVUFMICYmIGVuZHNfd2l0aF9wYWlyX3N0YXJ0KGRpZmZzW2ktMl1bMV0pICYmXG4gICAgICAgIGRpZmZzW2ktMV1bMF0gPT09IERJRkZfREVMRVRFICYmIHN0YXJ0c193aXRoX3BhaXJfZW5kKGRpZmZzW2ktMV1bMV0pICYmXG4gICAgICAgIGRpZmZzW2ldWzBdID09PSBESUZGX0lOU0VSVCAmJiBzdGFydHNfd2l0aF9wYWlyX2VuZChkaWZmc1tpXVsxXSkpIHtcbiAgICAgIGNvbXBhY3QgPSB0cnVlO1xuXG4gICAgICBkaWZmc1tpLTFdWzFdID0gZGlmZnNbaS0yXVsxXS5zbGljZSgtMSkgKyBkaWZmc1tpLTFdWzFdO1xuICAgICAgZGlmZnNbaV1bMV0gPSBkaWZmc1tpLTJdWzFdLnNsaWNlKC0xKSArIGRpZmZzW2ldWzFdO1xuXG4gICAgICBkaWZmc1tpLTJdWzFdID0gZGlmZnNbaS0yXVsxXS5zbGljZSgwLCAtMSk7XG4gICAgfVxuICB9XG4gIGlmICghY29tcGFjdCkge1xuICAgIHJldHVybiBkaWZmcztcbiAgfVxuICB2YXIgZml4ZWRfZGlmZnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaWZmcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChkaWZmc1tpXVsxXS5sZW5ndGggPiAwKSB7XG4gICAgICBmaXhlZF9kaWZmcy5wdXNoKGRpZmZzW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZpeGVkX2RpZmZzO1xufVxuXG4vKlxuICogVHJ5IHRvIG1lcmdlIHR1cGxlcyB3aXRoIHRoZWlyIG5laWdib3JzIGluIGEgZ2l2ZW4gcmFuZ2UuXG4gKiBFLmcuIFswLCAnYSddLCBbMCwgJ2InXSAtPiBbMCwgJ2FiJ11cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBkaWZmcyBBcnJheSBvZiBkaWZmIHR1cGxlcy5cbiAqIEBwYXJhbSB7SW50fSBzdGFydCBQb3NpdGlvbiBvZiB0aGUgZmlyc3QgZWxlbWVudCB0byBtZXJnZSAoZGlmZnNbc3RhcnRdIGlzIGFsc28gbWVyZ2VkIHdpdGggZGlmZnNbc3RhcnQgLSAxXSkuXG4gKiBAcGFyYW0ge0ludH0gbGVuZ3RoIE51bWJlciBvZiBjb25zZWN1dGl2ZSBlbGVtZW50cyB0byBjaGVjay5cbiAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBtZXJnZWQgZGlmZiB0dXBsZXMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlX3R1cGxlcyAoZGlmZnMsIHN0YXJ0LCBsZW5ndGgpIHtcbiAgLy8gQ2hlY2sgZnJvbSAoc3RhcnQtMSkgdG8gKHN0YXJ0K2xlbmd0aCkuXG4gIGZvciAodmFyIGkgPSBzdGFydCArIGxlbmd0aCAtIDE7IGkgPj0gMCAmJiBpID49IHN0YXJ0IC0gMTsgaS0tKSB7XG4gICAgaWYgKGkgKyAxIDwgZGlmZnMubGVuZ3RoKSB7XG4gICAgICB2YXIgbGVmdF9kID0gZGlmZnNbaV07XG4gICAgICB2YXIgcmlnaHRfZCA9IGRpZmZzW2krMV07XG4gICAgICBpZiAobGVmdF9kWzBdID09PSByaWdodF9kWzFdKSB7XG4gICAgICAgIGRpZmZzLnNwbGljZShpLCAyLCBbbGVmdF9kWzBdLCBsZWZ0X2RbMV0gKyByaWdodF9kWzFdXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkaWZmcztcbn1cblxuXG4vKioqLyB9KSxcbi8qIDUyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBPYmplY3Qua2V5cyA9PT0gJ2Z1bmN0aW9uJ1xuICA/IE9iamVjdC5rZXlzIDogc2hpbTtcblxuZXhwb3J0cy5zaGltID0gc2hpbTtcbmZ1bmN0aW9uIHNoaW0gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSBrZXlzLnB1c2goa2V5KTtcbiAgcmV0dXJuIGtleXM7XG59XG5cblxuLyoqKi8gfSksXG4vKiA1MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgc3VwcG9ydHNBcmd1bWVudHNDbGFzcyA9IChmdW5jdGlvbigpe1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50cylcbn0pKCkgPT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHN1cHBvcnRzQXJndW1lbnRzQ2xhc3MgPyBzdXBwb3J0ZWQgOiB1bnN1cHBvcnRlZDtcblxuZXhwb3J0cy5zdXBwb3J0ZWQgPSBzdXBwb3J0ZWQ7XG5mdW5jdGlvbiBzdXBwb3J0ZWQob2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PSAnW29iamVjdCBBcmd1bWVudHNdJztcbn07XG5cbmV4cG9ydHMudW5zdXBwb3J0ZWQgPSB1bnN1cHBvcnRlZDtcbmZ1bmN0aW9uIHVuc3VwcG9ydGVkKG9iamVjdCl7XG4gIHJldHVybiBvYmplY3QgJiZcbiAgICB0eXBlb2Ygb2JqZWN0ID09ICdvYmplY3QnICYmXG4gICAgdHlwZW9mIG9iamVjdC5sZW5ndGggPT0gJ251bWJlcicgJiZcbiAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnY2FsbGVlJykgJiZcbiAgICAhT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgJ2NhbGxlZScpIHx8XG4gICAgZmFsc2U7XG59O1xuXG5cbi8qKiovIH0pLFxuLyogNTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eVxuICAsIHByZWZpeCA9ICd+JztcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciB0byBjcmVhdGUgYSBzdG9yYWdlIGZvciBvdXIgYEVFYCBvYmplY3RzLlxuICogQW4gYEV2ZW50c2AgaW5zdGFuY2UgaXMgYSBwbGFpbiBvYmplY3Qgd2hvc2UgcHJvcGVydGllcyBhcmUgZXZlbnQgbmFtZXMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gRXZlbnRzKCkge31cblxuLy9cbi8vIFdlIHRyeSB0byBub3QgaW5oZXJpdCBmcm9tIGBPYmplY3QucHJvdG90eXBlYC4gSW4gc29tZSBlbmdpbmVzIGNyZWF0aW5nIGFuXG4vLyBpbnN0YW5jZSBpbiB0aGlzIHdheSBpcyBmYXN0ZXIgdGhhbiBjYWxsaW5nIGBPYmplY3QuY3JlYXRlKG51bGwpYCBkaXJlY3RseS5cbi8vIElmIGBPYmplY3QuY3JlYXRlKG51bGwpYCBpcyBub3Qgc3VwcG9ydGVkIHdlIHByZWZpeCB0aGUgZXZlbnQgbmFtZXMgd2l0aCBhXG4vLyBjaGFyYWN0ZXIgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGJ1aWx0LWluIG9iamVjdCBwcm9wZXJ0aWVzIGFyZSBub3Rcbi8vIG92ZXJyaWRkZW4gb3IgdXNlZCBhcyBhbiBhdHRhY2sgdmVjdG9yLlxuLy9cbmlmIChPYmplY3QuY3JlYXRlKSB7XG4gIEV2ZW50cy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIC8vXG4gIC8vIFRoaXMgaGFjayBpcyBuZWVkZWQgYmVjYXVzZSB0aGUgYF9fcHJvdG9fX2AgcHJvcGVydHkgaXMgc3RpbGwgaW5oZXJpdGVkIGluXG4gIC8vIHNvbWUgb2xkIGJyb3dzZXJzIGxpa2UgQW5kcm9pZCA0LCBpUGhvbmUgNS4xLCBPcGVyYSAxMSBhbmQgU2FmYXJpIDUuXG4gIC8vXG4gIGlmICghbmV3IEV2ZW50cygpLl9fcHJvdG9fXykgcHJlZml4ID0gZmFsc2U7XG59XG5cbi8qKlxuICogUmVwcmVzZW50YXRpb24gb2YgYSBzaW5nbGUgZXZlbnQgbGlzdGVuZXIuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtNaXhlZH0gY29udGV4dCBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvbmNlPWZhbHNlXSBTcGVjaWZ5IGlmIHRoZSBsaXN0ZW5lciBpcyBhIG9uZS10aW1lIGxpc3RlbmVyLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gRUUoZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgdGhpcy5mbiA9IGZuO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLm9uY2UgPSBvbmNlIHx8IGZhbHNlO1xufVxuXG4vKipcbiAqIE1pbmltYWwgYEV2ZW50RW1pdHRlcmAgaW50ZXJmYWNlIHRoYXQgaXMgbW9sZGVkIGFnYWluc3QgdGhlIE5vZGUuanNcbiAqIGBFdmVudEVtaXR0ZXJgIGludGVyZmFjZS5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG59XG5cbi8qKlxuICogUmV0dXJuIGFuIGFycmF5IGxpc3RpbmcgdGhlIGV2ZW50cyBmb3Igd2hpY2ggdGhlIGVtaXR0ZXIgaGFzIHJlZ2lzdGVyZWRcbiAqIGxpc3RlbmVycy5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICB2YXIgbmFtZXMgPSBbXVxuICAgICwgZXZlbnRzXG4gICAgLCBuYW1lO1xuXG4gIGlmICh0aGlzLl9ldmVudHNDb3VudCA9PT0gMCkgcmV0dXJuIG5hbWVzO1xuXG4gIGZvciAobmFtZSBpbiAoZXZlbnRzID0gdGhpcy5fZXZlbnRzKSkge1xuICAgIGlmIChoYXMuY2FsbChldmVudHMsIG5hbWUpKSBuYW1lcy5wdXNoKHByZWZpeCA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lKTtcbiAgfVxuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgcmV0dXJuIG5hbWVzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGV2ZW50cykpO1xuICB9XG5cbiAgcmV0dXJuIG5hbWVzO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGxpc3RlbmVycyByZWdpc3RlcmVkIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfFN5bWJvbH0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGV4aXN0cyBPbmx5IGNoZWNrIGlmIHRoZXJlIGFyZSBsaXN0ZW5lcnMuXG4gKiBAcmV0dXJucyB7QXJyYXl8Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKGV2ZW50LCBleGlzdHMpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnRcbiAgICAsIGF2YWlsYWJsZSA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmIChleGlzdHMpIHJldHVybiAhIWF2YWlsYWJsZTtcbiAgaWYgKCFhdmFpbGFibGUpIHJldHVybiBbXTtcbiAgaWYgKGF2YWlsYWJsZS5mbikgcmV0dXJuIFthdmFpbGFibGUuZm5dO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXZhaWxhYmxlLmxlbmd0aCwgZWUgPSBuZXcgQXJyYXkobCk7IGkgPCBsOyBpKyspIHtcbiAgICBlZVtpXSA9IGF2YWlsYWJsZVtpXS5mbjtcbiAgfVxuXG4gIHJldHVybiBlZTtcbn07XG5cbi8qKlxuICogQ2FsbHMgZWFjaCBvZiB0aGUgbGlzdGVuZXJzIHJlZ2lzdGVyZWQgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8U3ltYm9sfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGV2ZW50IGhhZCBsaXN0ZW5lcnMsIGVsc2UgYGZhbHNlYC5cbiAqIEBhcGkgcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQoZXZlbnQsIGExLCBhMiwgYTMsIGE0LCBhNSkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdXG4gICAgLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgLCBhcmdzXG4gICAgLCBpO1xuXG4gIGlmIChsaXN0ZW5lcnMuZm4pIHtcbiAgICBpZiAobGlzdGVuZXJzLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVycy5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICBjYXNlIDE6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCksIHRydWU7XG4gICAgICBjYXNlIDI6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEpLCB0cnVlO1xuICAgICAgY2FzZSAzOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiksIHRydWU7XG4gICAgICBjYXNlIDQ6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMyksIHRydWU7XG4gICAgICBjYXNlIDU6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQpLCB0cnVlO1xuICAgICAgY2FzZSA2OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMsIGE0LCBhNSksIHRydWU7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mbi5hcHBseShsaXN0ZW5lcnMuY29udGV4dCwgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGhcbiAgICAgICwgajtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGxpc3RlbmVyc1tpXS5vbmNlKSB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnNbaV0uZm4sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICAgIGNhc2UgMTogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQpOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEpOyBicmVhaztcbiAgICAgICAgY2FzZSAzOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEsIGEyKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgNDogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExLCBhMiwgYTMpOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAoIWFyZ3MpIGZvciAoaiA9IDEsIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0xKTsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICBhcmdzW2ogLSAxXSA9IGFyZ3VtZW50c1tqXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsaXN0ZW5lcnNbaV0uZm4uYXBwbHkobGlzdGVuZXJzW2ldLmNvbnRleHQsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBBZGQgYSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xTeW1ib2x9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtNaXhlZH0gW2NvbnRleHQ9dGhpc10gVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIG9uKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICB2YXIgbGlzdGVuZXIgPSBuZXcgRUUoZm4sIGNvbnRleHQgfHwgdGhpcylcbiAgICAsIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgdGhpcy5fZXZlbnRzW2V2dF0gPSBsaXN0ZW5lciwgdGhpcy5fZXZlbnRzQ291bnQrKztcbiAgZWxzZSBpZiAoIXRoaXMuX2V2ZW50c1tldnRdLmZuKSB0aGlzLl9ldmVudHNbZXZ0XS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZSB0aGlzLl9ldmVudHNbZXZ0XSA9IFt0aGlzLl9ldmVudHNbZXZ0XSwgbGlzdGVuZXJdO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBBZGQgYSBvbmUtdGltZSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xTeW1ib2x9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtNaXhlZH0gW2NvbnRleHQ9dGhpc10gVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZShldmVudCwgZm4sIGNvbnRleHQpIHtcbiAgdmFyIGxpc3RlbmVyID0gbmV3IEVFKGZuLCBjb250ZXh0IHx8IHRoaXMsIHRydWUpXG4gICAgLCBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHRoaXMuX2V2ZW50c1tldnRdID0gbGlzdGVuZXIsIHRoaXMuX2V2ZW50c0NvdW50Kys7XG4gIGVsc2UgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XS5mbikgdGhpcy5fZXZlbnRzW2V2dF0ucHVzaChsaXN0ZW5lcik7XG4gIGVsc2UgdGhpcy5fZXZlbnRzW2V2dF0gPSBbdGhpcy5fZXZlbnRzW2V2dF0sIGxpc3RlbmVyXTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBsaXN0ZW5lcnMgb2YgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xTeW1ib2x9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gT25seSByZW1vdmUgdGhlIGxpc3RlbmVycyB0aGF0IG1hdGNoIHRoaXMgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge01peGVkfSBjb250ZXh0IE9ubHkgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgdGhhdCBoYXZlIHRoaXMgY29udGV4dC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBPbmx5IHJlbW92ZSBvbmUtdGltZSBsaXN0ZW5lcnMuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiB0aGlzO1xuICBpZiAoIWZuKSB7XG4gICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgICBlbHNlIGRlbGV0ZSB0aGlzLl9ldmVudHNbZXZ0XTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XTtcblxuICBpZiAobGlzdGVuZXJzLmZuKSB7XG4gICAgaWYgKFxuICAgICAgICAgbGlzdGVuZXJzLmZuID09PSBmblxuICAgICAgJiYgKCFvbmNlIHx8IGxpc3RlbmVycy5vbmNlKVxuICAgICAgJiYgKCFjb250ZXh0IHx8IGxpc3RlbmVycy5jb250ZXh0ID09PSBjb250ZXh0KVxuICAgICkge1xuICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgICAgIGVsc2UgZGVsZXRlIHRoaXMuX2V2ZW50c1tldnRdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpID0gMCwgZXZlbnRzID0gW10sIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKFxuICAgICAgICAgICBsaXN0ZW5lcnNbaV0uZm4gIT09IGZuXG4gICAgICAgIHx8IChvbmNlICYmICFsaXN0ZW5lcnNbaV0ub25jZSlcbiAgICAgICAgfHwgKGNvbnRleHQgJiYgbGlzdGVuZXJzW2ldLmNvbnRleHQgIT09IGNvbnRleHQpXG4gICAgICApIHtcbiAgICAgICAgZXZlbnRzLnB1c2gobGlzdGVuZXJzW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL1xuICAgIC8vIFJlc2V0IHRoZSBhcnJheSwgb3IgcmVtb3ZlIGl0IGNvbXBsZXRlbHkgaWYgd2UgaGF2ZSBubyBtb3JlIGxpc3RlbmVycy5cbiAgICAvL1xuICAgIGlmIChldmVudHMubGVuZ3RoKSB0aGlzLl9ldmVudHNbZXZ0XSA9IGV2ZW50cy5sZW5ndGggPT09IDEgPyBldmVudHNbMF0gOiBldmVudHM7XG4gICAgZWxzZSBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMCkgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICAgIGVsc2UgZGVsZXRlIHRoaXMuX2V2ZW50c1tldnRdO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbGwgbGlzdGVuZXJzLCBvciB0aG9zZSBvZiB0aGUgc3BlY2lmaWVkIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfFN5bWJvbH0gW2V2ZW50XSBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBhcGkgcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50KSB7XG4gIHZhciBldnQ7XG5cbiAgaWYgKGV2ZW50KSB7XG4gICAgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcbiAgICBpZiAodGhpcy5fZXZlbnRzW2V2dF0pIHtcbiAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKSB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gICAgICBlbHNlIGRlbGV0ZSB0aGlzLl9ldmVudHNbZXZ0XTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy9cbi8vIEFsaWFzIG1ldGhvZHMgbmFtZXMgYmVjYXVzZSBwZW9wbGUgcm9sbCBsaWtlIHRoYXQuXG4vL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUub247XG5cbi8vXG4vLyBUaGlzIGZ1bmN0aW9uIGRvZXNuJ3QgYXBwbHkgYW55bW9yZS5cbi8vXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldE1heExpc3RlbmVycygpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBwcmVmaXguXG4vL1xuRXZlbnRFbWl0dGVyLnByZWZpeGVkID0gcHJlZml4O1xuXG4vL1xuLy8gQWxsb3cgYEV2ZW50RW1pdHRlcmAgdG8gYmUgaW1wb3J0ZWQgYXMgbW9kdWxlIG5hbWVzcGFjZS5cbi8vXG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBtb2R1bGUuXG4vL1xuaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgbW9kdWxlKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xufVxuXG5cbi8qKiovIH0pLFxuLyogNTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMubWF0Y2hUZXh0ID0gZXhwb3J0cy5tYXRjaFNwYWNpbmcgPSBleHBvcnRzLm1hdGNoTmV3bGluZSA9IGV4cG9ydHMubWF0Y2hCbG90ID0gZXhwb3J0cy5tYXRjaEF0dHJpYnV0b3IgPSBleHBvcnRzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2V4dGVuZDIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX2V4dGVuZDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmQyKTtcblxudmFyIF9xdWlsbERlbHRhID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxudmFyIF9xdWlsbERlbHRhMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1aWxsRGVsdGEpO1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbnZhciBfcXVpbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG52YXIgX3F1aWxsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1aWxsKTtcblxudmFyIF9sb2dnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblxudmFyIF9sb2dnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9nZ2VyKTtcblxudmFyIF9tb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXG52YXIgX21vZHVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tb2R1bGUpO1xuXG52YXIgX2FsaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNik7XG5cbnZhciBfYmFja2dyb3VuZCA9IF9fd2VicGFja19yZXF1aXJlX18oMzcpO1xuXG52YXIgX2NvZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcblxudmFyIF9jb2RlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvZGUpO1xuXG52YXIgX2NvbG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cbnZhciBfZGlyZWN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOCk7XG5cbnZhciBfZm9udCA9IF9fd2VicGFja19yZXF1aXJlX18oMzkpO1xuXG52YXIgX3NpemUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgZGVidWcgPSAoMCwgX2xvZ2dlcjIuZGVmYXVsdCkoJ3F1aWxsOmNsaXBib2FyZCcpO1xuXG52YXIgRE9NX0tFWSA9ICdfX3FsLW1hdGNoZXInO1xuXG52YXIgQ0xJUEJPQVJEX0NPTkZJRyA9IFtbTm9kZS5URVhUX05PREUsIG1hdGNoVGV4dF0sIFtOb2RlLlRFWFRfTk9ERSwgbWF0Y2hOZXdsaW5lXSwgWydicicsIG1hdGNoQnJlYWtdLCBbTm9kZS5FTEVNRU5UX05PREUsIG1hdGNoTmV3bGluZV0sIFtOb2RlLkVMRU1FTlRfTk9ERSwgbWF0Y2hCbG90XSwgW05vZGUuRUxFTUVOVF9OT0RFLCBtYXRjaFNwYWNpbmddLCBbTm9kZS5FTEVNRU5UX05PREUsIG1hdGNoQXR0cmlidXRvcl0sIFtOb2RlLkVMRU1FTlRfTk9ERSwgbWF0Y2hTdHlsZXNdLCBbJ2xpJywgbWF0Y2hJbmRlbnRdLCBbJ2InLCBtYXRjaEFsaWFzLmJpbmQobWF0Y2hBbGlhcywgJ2JvbGQnKV0sIFsnaScsIG1hdGNoQWxpYXMuYmluZChtYXRjaEFsaWFzLCAnaXRhbGljJyldLCBbJ3N0eWxlJywgbWF0Y2hJZ25vcmVdXTtcblxudmFyIEFUVFJJQlVURV9BVFRSSUJVVE9SUyA9IFtfYWxpZ24uQWxpZ25BdHRyaWJ1dGUsIF9kaXJlY3Rpb24uRGlyZWN0aW9uQXR0cmlidXRlXS5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGF0dHIpIHtcbiAgbWVtb1thdHRyLmtleU5hbWVdID0gYXR0cjtcbiAgcmV0dXJuIG1lbW87XG59LCB7fSk7XG5cbnZhciBTVFlMRV9BVFRSSUJVVE9SUyA9IFtfYWxpZ24uQWxpZ25TdHlsZSwgX2JhY2tncm91bmQuQmFja2dyb3VuZFN0eWxlLCBfY29sb3IuQ29sb3JTdHlsZSwgX2RpcmVjdGlvbi5EaXJlY3Rpb25TdHlsZSwgX2ZvbnQuRm9udFN0eWxlLCBfc2l6ZS5TaXplU3R5bGVdLnJlZHVjZShmdW5jdGlvbiAobWVtbywgYXR0cikge1xuICBtZW1vW2F0dHIua2V5TmFtZV0gPSBhdHRyO1xuICByZXR1cm4gbWVtbztcbn0sIHt9KTtcblxudmFyIENsaXBib2FyZCA9IGZ1bmN0aW9uIChfTW9kdWxlKSB7XG4gIF9pbmhlcml0cyhDbGlwYm9hcmQsIF9Nb2R1bGUpO1xuXG4gIGZ1bmN0aW9uIENsaXBib2FyZChxdWlsbCwgb3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDbGlwYm9hcmQpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENsaXBib2FyZC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENsaXBib2FyZCkpLmNhbGwodGhpcywgcXVpbGwsIG9wdGlvbnMpKTtcblxuICAgIF90aGlzLnF1aWxsLnJvb3QuYWRkRXZlbnRMaXN0ZW5lcigncGFzdGUnLCBfdGhpcy5vblBhc3RlLmJpbmQoX3RoaXMpKTtcbiAgICBfdGhpcy5jb250YWluZXIgPSBfdGhpcy5xdWlsbC5hZGRDb250YWluZXIoJ3FsLWNsaXBib2FyZCcpO1xuICAgIF90aGlzLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsIHRydWUpO1xuICAgIF90aGlzLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgLTEpO1xuICAgIF90aGlzLm1hdGNoZXJzID0gW107XG4gICAgQ0xJUEJPQVJEX0NPTkZJRy5jb25jYXQoX3RoaXMub3B0aW9ucy5tYXRjaGVycykuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgICAgICAgc2VsZWN0b3IgPSBfcmVmMlswXSxcbiAgICAgICAgICBtYXRjaGVyID0gX3JlZjJbMV07XG5cbiAgICAgIGlmICghb3B0aW9ucy5tYXRjaFZpc3VhbCAmJiBtYXRjaGVyID09PSBtYXRjaFNwYWNpbmcpIHJldHVybjtcbiAgICAgIF90aGlzLmFkZE1hdGNoZXIoc2VsZWN0b3IsIG1hdGNoZXIpO1xuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDbGlwYm9hcmQsIFt7XG4gICAga2V5OiAnYWRkTWF0Y2hlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZE1hdGNoZXIoc2VsZWN0b3IsIG1hdGNoZXIpIHtcbiAgICAgIHRoaXMubWF0Y2hlcnMucHVzaChbc2VsZWN0b3IsIG1hdGNoZXJdKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb252ZXJ0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29udmVydChodG1sKSB7XG4gICAgICBpZiAodHlwZW9mIGh0bWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9IGh0bWwucmVwbGFjZSgvXFw+XFxyP1xcbiArXFw8L2csICc+PCcpOyAvLyBSZW1vdmUgc3BhY2VzIGJldHdlZW4gdGFnc1xuICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJ0KCk7XG4gICAgICB9XG4gICAgICB2YXIgZm9ybWF0cyA9IHRoaXMucXVpbGwuZ2V0Rm9ybWF0KHRoaXMucXVpbGwuc2VsZWN0aW9uLnNhdmVkUmFuZ2UuaW5kZXgpO1xuICAgICAgaWYgKGZvcm1hdHNbX2NvZGUyLmRlZmF1bHQuYmxvdE5hbWVdKSB7XG4gICAgICAgIHZhciB0ZXh0ID0gdGhpcy5jb250YWluZXIuaW5uZXJUZXh0O1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgcmV0dXJuIG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLmluc2VydCh0ZXh0LCBfZGVmaW5lUHJvcGVydHkoe30sIF9jb2RlMi5kZWZhdWx0LmJsb3ROYW1lLCBmb3JtYXRzW19jb2RlMi5kZWZhdWx0LmJsb3ROYW1lXSkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3ByZXBhcmVNYXRjaGluZyA9IHRoaXMucHJlcGFyZU1hdGNoaW5nKCksXG4gICAgICAgICAgX3ByZXBhcmVNYXRjaGluZzIgPSBfc2xpY2VkVG9BcnJheShfcHJlcGFyZU1hdGNoaW5nLCAyKSxcbiAgICAgICAgICBlbGVtZW50TWF0Y2hlcnMgPSBfcHJlcGFyZU1hdGNoaW5nMlswXSxcbiAgICAgICAgICB0ZXh0TWF0Y2hlcnMgPSBfcHJlcGFyZU1hdGNoaW5nMlsxXTtcblxuICAgICAgdmFyIGRlbHRhID0gdHJhdmVyc2UodGhpcy5jb250YWluZXIsIGVsZW1lbnRNYXRjaGVycywgdGV4dE1hdGNoZXJzKTtcbiAgICAgIC8vIFJlbW92ZSB0cmFpbGluZyBuZXdsaW5lXG4gICAgICBpZiAoZGVsdGFFbmRzV2l0aChkZWx0YSwgJ1xcbicpICYmIGRlbHRhLm9wc1tkZWx0YS5vcHMubGVuZ3RoIC0gMV0uYXR0cmlidXRlcyA9PSBudWxsKSB7XG4gICAgICAgIGRlbHRhID0gZGVsdGEuY29tcG9zZShuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKS5yZXRhaW4oZGVsdGEubGVuZ3RoKCkgLSAxKS5kZWxldGUoMSkpO1xuICAgICAgfVxuICAgICAgZGVidWcubG9nKCdjb252ZXJ0JywgdGhpcy5jb250YWluZXIuaW5uZXJIVE1MLCBkZWx0YSk7XG4gICAgICB0aGlzLmNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICAgIHJldHVybiBkZWx0YTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkYW5nZXJvdXNseVBhc3RlSFRNTCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRhbmdlcm91c2x5UGFzdGVIVE1MKGluZGV4LCBodG1sKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5BUEk7XG5cbiAgICAgIGlmICh0eXBlb2YgaW5kZXggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMucXVpbGwuc2V0Q29udGVudHModGhpcy5jb252ZXJ0KGluZGV4KSwgaHRtbCk7XG4gICAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKDAsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcGFzdGUgPSB0aGlzLmNvbnZlcnQoaHRtbCk7XG4gICAgICAgIHRoaXMucXVpbGwudXBkYXRlQ29udGVudHMobmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkucmV0YWluKGluZGV4KS5jb25jYXQocGFzdGUpLCBzb3VyY2UpO1xuICAgICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihpbmRleCArIHBhc3RlLmxlbmd0aCgpLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5TSUxFTlQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ29uUGFzdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvblBhc3RlKGUpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAoZS5kZWZhdWx0UHJldmVudGVkIHx8ICF0aGlzLnF1aWxsLmlzRW5hYmxlZCgpKSByZXR1cm47XG4gICAgICB2YXIgcmFuZ2UgPSB0aGlzLnF1aWxsLmdldFNlbGVjdGlvbigpO1xuICAgICAgdmFyIGRlbHRhID0gbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkucmV0YWluKHJhbmdlLmluZGV4KTtcbiAgICAgIHZhciBzY3JvbGxUb3AgPSB0aGlzLnF1aWxsLnNjcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxUb3A7XG4gICAgICB0aGlzLmNvbnRhaW5lci5mb2N1cygpO1xuICAgICAgdGhpcy5xdWlsbC5zZWxlY3Rpb24udXBkYXRlKF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVsdGEgPSBkZWx0YS5jb25jYXQoX3RoaXMyLmNvbnZlcnQoKSkuZGVsZXRlKHJhbmdlLmxlbmd0aCk7XG4gICAgICAgIF90aGlzMi5xdWlsbC51cGRhdGVDb250ZW50cyhkZWx0YSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICAgIC8vIHJhbmdlLmxlbmd0aCBjb250cmlidXRlcyB0byBkZWx0YS5sZW5ndGgoKVxuICAgICAgICBfdGhpczIucXVpbGwuc2V0U2VsZWN0aW9uKGRlbHRhLmxlbmd0aCgpIC0gcmFuZ2UubGVuZ3RoLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5TSUxFTlQpO1xuICAgICAgICBfdGhpczIucXVpbGwuc2Nyb2xsaW5nQ29udGFpbmVyLnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgICAgX3RoaXMyLnF1aWxsLmZvY3VzKCk7XG4gICAgICB9LCAxKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwcmVwYXJlTWF0Y2hpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVwYXJlTWF0Y2hpbmcoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuICAgICAgICAgIHRleHRNYXRjaGVycyA9IFtdO1xuICAgICAgdGhpcy5tYXRjaGVycy5mb3JFYWNoKGZ1bmN0aW9uIChwYWlyKSB7XG4gICAgICAgIHZhciBfcGFpciA9IF9zbGljZWRUb0FycmF5KHBhaXIsIDIpLFxuICAgICAgICAgICAgc2VsZWN0b3IgPSBfcGFpclswXSxcbiAgICAgICAgICAgIG1hdGNoZXIgPSBfcGFpclsxXTtcblxuICAgICAgICBzd2l0Y2ggKHNlbGVjdG9yKSB7XG4gICAgICAgICAgY2FzZSBOb2RlLlRFWFRfTk9ERTpcbiAgICAgICAgICAgIHRleHRNYXRjaGVycy5wdXNoKG1hdGNoZXIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBOb2RlLkVMRU1FTlRfTk9ERTpcbiAgICAgICAgICAgIGVsZW1lbnRNYXRjaGVycy5wdXNoKG1hdGNoZXIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbChfdGhpczMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAvLyBUT0RPIHVzZSB3ZWFrbWFwXG4gICAgICAgICAgICAgIG5vZGVbRE9NX0tFWV0gPSBub2RlW0RPTV9LRVldIHx8IFtdO1xuICAgICAgICAgICAgICBub2RlW0RPTV9LRVldLnB1c2gobWF0Y2hlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBbZWxlbWVudE1hdGNoZXJzLCB0ZXh0TWF0Y2hlcnNdO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDbGlwYm9hcmQ7XG59KF9tb2R1bGUyLmRlZmF1bHQpO1xuXG5DbGlwYm9hcmQuREVGQVVMVFMgPSB7XG4gIG1hdGNoZXJzOiBbXSxcbiAgbWF0Y2hWaXN1YWw6IHRydWVcbn07XG5cbmZ1bmN0aW9uIGFwcGx5Rm9ybWF0KGRlbHRhLCBmb3JtYXQsIHZhbHVlKSB7XG4gIGlmICgodHlwZW9mIGZvcm1hdCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoZm9ybWF0KSkgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGZvcm1hdCkucmVkdWNlKGZ1bmN0aW9uIChkZWx0YSwga2V5KSB7XG4gICAgICByZXR1cm4gYXBwbHlGb3JtYXQoZGVsdGEsIGtleSwgZm9ybWF0W2tleV0pO1xuICAgIH0sIGRlbHRhKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZGVsdGEucmVkdWNlKGZ1bmN0aW9uIChkZWx0YSwgb3ApIHtcbiAgICAgIGlmIChvcC5hdHRyaWJ1dGVzICYmIG9wLmF0dHJpYnV0ZXNbZm9ybWF0XSkge1xuICAgICAgICByZXR1cm4gZGVsdGEucHVzaChvcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVsdGEuaW5zZXJ0KG9wLmluc2VydCwgKDAsIF9leHRlbmQzLmRlZmF1bHQpKHt9LCBfZGVmaW5lUHJvcGVydHkoe30sIGZvcm1hdCwgdmFsdWUpLCBvcC5hdHRyaWJ1dGVzKSk7XG4gICAgICB9XG4gICAgfSwgbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVTdHlsZShub2RlKSB7XG4gIGlmIChub2RlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkgcmV0dXJuIHt9O1xuICB2YXIgRE9NX0tFWSA9ICdfX3FsLWNvbXB1dGVkLXN0eWxlJztcbiAgcmV0dXJuIG5vZGVbRE9NX0tFWV0gfHwgKG5vZGVbRE9NX0tFWV0gPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKSk7XG59XG5cbmZ1bmN0aW9uIGRlbHRhRW5kc1dpdGgoZGVsdGEsIHRleHQpIHtcbiAgdmFyIGVuZFRleHQgPSBcIlwiO1xuICBmb3IgKHZhciBpID0gZGVsdGEub3BzLmxlbmd0aCAtIDE7IGkgPj0gMCAmJiBlbmRUZXh0Lmxlbmd0aCA8IHRleHQubGVuZ3RoOyAtLWkpIHtcbiAgICB2YXIgb3AgPSBkZWx0YS5vcHNbaV07XG4gICAgaWYgKHR5cGVvZiBvcC5pbnNlcnQgIT09ICdzdHJpbmcnKSBicmVhaztcbiAgICBlbmRUZXh0ID0gb3AuaW5zZXJ0ICsgZW5kVGV4dDtcbiAgfVxuICByZXR1cm4gZW5kVGV4dC5zbGljZSgtMSAqIHRleHQubGVuZ3RoKSA9PT0gdGV4dDtcbn1cblxuZnVuY3Rpb24gaXNMaW5lKG5vZGUpIHtcbiAgaWYgKG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggPT09IDApIHJldHVybiBmYWxzZTsgLy8gRXhjbHVkZSBlbWJlZCBibG9ja3NcbiAgdmFyIHN0eWxlID0gY29tcHV0ZVN0eWxlKG5vZGUpO1xuICByZXR1cm4gWydibG9jaycsICdsaXN0LWl0ZW0nXS5pbmRleE9mKHN0eWxlLmRpc3BsYXkpID4gLTE7XG59XG5cbmZ1bmN0aW9uIHRyYXZlcnNlKG5vZGUsIGVsZW1lbnRNYXRjaGVycywgdGV4dE1hdGNoZXJzKSB7XG4gIC8vIFBvc3Qtb3JkZXJcbiAgaWYgKG5vZGUubm9kZVR5cGUgPT09IG5vZGUuVEVYVF9OT0RFKSB7XG4gICAgcmV0dXJuIHRleHRNYXRjaGVycy5yZWR1Y2UoZnVuY3Rpb24gKGRlbHRhLCBtYXRjaGVyKSB7XG4gICAgICByZXR1cm4gbWF0Y2hlcihub2RlLCBkZWx0YSk7XG4gICAgfSwgbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCkpO1xuICB9IGVsc2UgaWYgKG5vZGUubm9kZVR5cGUgPT09IG5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgcmV0dXJuIFtdLnJlZHVjZS5jYWxsKG5vZGUuY2hpbGROb2RlcyB8fCBbXSwgZnVuY3Rpb24gKGRlbHRhLCBjaGlsZE5vZGUpIHtcbiAgICAgIHZhciBjaGlsZHJlbkRlbHRhID0gdHJhdmVyc2UoY2hpbGROb2RlLCBlbGVtZW50TWF0Y2hlcnMsIHRleHRNYXRjaGVycyk7XG4gICAgICBpZiAoY2hpbGROb2RlLm5vZGVUeXBlID09PSBub2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICBjaGlsZHJlbkRlbHRhID0gZWxlbWVudE1hdGNoZXJzLnJlZHVjZShmdW5jdGlvbiAoY2hpbGRyZW5EZWx0YSwgbWF0Y2hlcikge1xuICAgICAgICAgIHJldHVybiBtYXRjaGVyKGNoaWxkTm9kZSwgY2hpbGRyZW5EZWx0YSk7XG4gICAgICAgIH0sIGNoaWxkcmVuRGVsdGEpO1xuICAgICAgICBjaGlsZHJlbkRlbHRhID0gKGNoaWxkTm9kZVtET01fS0VZXSB8fCBbXSkucmVkdWNlKGZ1bmN0aW9uIChjaGlsZHJlbkRlbHRhLCBtYXRjaGVyKSB7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoZXIoY2hpbGROb2RlLCBjaGlsZHJlbkRlbHRhKTtcbiAgICAgICAgfSwgY2hpbGRyZW5EZWx0YSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVsdGEuY29uY2F0KGNoaWxkcmVuRGVsdGEpO1xuICAgIH0sIG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IF9xdWlsbERlbHRhMi5kZWZhdWx0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF0Y2hBbGlhcyhmb3JtYXQsIG5vZGUsIGRlbHRhKSB7XG4gIHJldHVybiBhcHBseUZvcm1hdChkZWx0YSwgZm9ybWF0LCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hBdHRyaWJ1dG9yKG5vZGUsIGRlbHRhKSB7XG4gIHZhciBhdHRyaWJ1dGVzID0gX3BhcmNobWVudDIuZGVmYXVsdC5BdHRyaWJ1dG9yLkF0dHJpYnV0ZS5rZXlzKG5vZGUpO1xuICB2YXIgY2xhc3NlcyA9IF9wYXJjaG1lbnQyLmRlZmF1bHQuQXR0cmlidXRvci5DbGFzcy5rZXlzKG5vZGUpO1xuICB2YXIgc3R5bGVzID0gX3BhcmNobWVudDIuZGVmYXVsdC5BdHRyaWJ1dG9yLlN0eWxlLmtleXMobm9kZSk7XG4gIHZhciBmb3JtYXRzID0ge307XG4gIGF0dHJpYnV0ZXMuY29uY2F0KGNsYXNzZXMpLmNvbmNhdChzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgYXR0ciA9IF9wYXJjaG1lbnQyLmRlZmF1bHQucXVlcnkobmFtZSwgX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5BVFRSSUJVVEUpO1xuICAgIGlmIChhdHRyICE9IG51bGwpIHtcbiAgICAgIGZvcm1hdHNbYXR0ci5hdHRyTmFtZV0gPSBhdHRyLnZhbHVlKG5vZGUpO1xuICAgICAgaWYgKGZvcm1hdHNbYXR0ci5hdHRyTmFtZV0pIHJldHVybjtcbiAgICB9XG4gICAgYXR0ciA9IEFUVFJJQlVURV9BVFRSSUJVVE9SU1tuYW1lXTtcbiAgICBpZiAoYXR0ciAhPSBudWxsICYmIChhdHRyLmF0dHJOYW1lID09PSBuYW1lIHx8IGF0dHIua2V5TmFtZSA9PT0gbmFtZSkpIHtcbiAgICAgIGZvcm1hdHNbYXR0ci5hdHRyTmFtZV0gPSBhdHRyLnZhbHVlKG5vZGUpIHx8IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgYXR0ciA9IFNUWUxFX0FUVFJJQlVUT1JTW25hbWVdO1xuICAgIGlmIChhdHRyICE9IG51bGwgJiYgKGF0dHIuYXR0ck5hbWUgPT09IG5hbWUgfHwgYXR0ci5rZXlOYW1lID09PSBuYW1lKSkge1xuICAgICAgYXR0ciA9IFNUWUxFX0FUVFJJQlVUT1JTW25hbWVdO1xuICAgICAgZm9ybWF0c1thdHRyLmF0dHJOYW1lXSA9IGF0dHIudmFsdWUobm9kZSkgfHwgdW5kZWZpbmVkO1xuICAgIH1cbiAgfSk7XG4gIGlmIChPYmplY3Qua2V5cyhmb3JtYXRzKS5sZW5ndGggPiAwKSB7XG4gICAgZGVsdGEgPSBhcHBseUZvcm1hdChkZWx0YSwgZm9ybWF0cyk7XG4gIH1cbiAgcmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBtYXRjaEJsb3Qobm9kZSwgZGVsdGEpIHtcbiAgdmFyIG1hdGNoID0gX3BhcmNobWVudDIuZGVmYXVsdC5xdWVyeShub2RlKTtcbiAgaWYgKG1hdGNoID09IG51bGwpIHJldHVybiBkZWx0YTtcbiAgaWYgKG1hdGNoLnByb3RvdHlwZSBpbnN0YW5jZW9mIF9wYXJjaG1lbnQyLmRlZmF1bHQuRW1iZWQpIHtcbiAgICB2YXIgZW1iZWQgPSB7fTtcbiAgICB2YXIgdmFsdWUgPSBtYXRjaC52YWx1ZShub2RlKTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgZW1iZWRbbWF0Y2guYmxvdE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWx0YSA9IG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLmluc2VydChlbWJlZCwgbWF0Y2guZm9ybWF0cyhub2RlKSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBtYXRjaC5mb3JtYXRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZGVsdGEgPSBhcHBseUZvcm1hdChkZWx0YSwgbWF0Y2guYmxvdE5hbWUsIG1hdGNoLmZvcm1hdHMobm9kZSkpO1xuICB9XG4gIHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hCcmVhayhub2RlLCBkZWx0YSkge1xuICBpZiAoIWRlbHRhRW5kc1dpdGgoZGVsdGEsICdcXG4nKSkge1xuICAgIGRlbHRhLmluc2VydCgnXFxuJyk7XG4gIH1cbiAgcmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBtYXRjaElnbm9yZSgpIHtcbiAgcmV0dXJuIG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpO1xufVxuXG5mdW5jdGlvbiBtYXRjaEluZGVudChub2RlLCBkZWx0YSkge1xuICB2YXIgbWF0Y2ggPSBfcGFyY2htZW50Mi5kZWZhdWx0LnF1ZXJ5KG5vZGUpO1xuICBpZiAobWF0Y2ggPT0gbnVsbCB8fCBtYXRjaC5ibG90TmFtZSAhPT0gJ2xpc3QtaXRlbScgfHwgIWRlbHRhRW5kc1dpdGgoZGVsdGEsICdcXG4nKSkge1xuICAgIHJldHVybiBkZWx0YTtcbiAgfVxuICB2YXIgaW5kZW50ID0gLTEsXG4gICAgICBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gIHdoaWxlICghcGFyZW50LmNsYXNzTGlzdC5jb250YWlucygncWwtY2xpcGJvYXJkJykpIHtcbiAgICBpZiAoKF9wYXJjaG1lbnQyLmRlZmF1bHQucXVlcnkocGFyZW50KSB8fCB7fSkuYmxvdE5hbWUgPT09ICdsaXN0Jykge1xuICAgICAgaW5kZW50ICs9IDE7XG4gICAgfVxuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICB9XG4gIGlmIChpbmRlbnQgPD0gMCkgcmV0dXJuIGRlbHRhO1xuICByZXR1cm4gZGVsdGEuY29tcG9zZShuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKS5yZXRhaW4oZGVsdGEubGVuZ3RoKCkgLSAxKS5yZXRhaW4oMSwgeyBpbmRlbnQ6IGluZGVudCB9KSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoTmV3bGluZShub2RlLCBkZWx0YSkge1xuICBpZiAoIWRlbHRhRW5kc1dpdGgoZGVsdGEsICdcXG4nKSkge1xuICAgIGlmIChpc0xpbmUobm9kZSkgfHwgZGVsdGEubGVuZ3RoKCkgPiAwICYmIG5vZGUubmV4dFNpYmxpbmcgJiYgaXNMaW5lKG5vZGUubmV4dFNpYmxpbmcpKSB7XG4gICAgICBkZWx0YS5pbnNlcnQoJ1xcbicpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIG1hdGNoU3BhY2luZyhub2RlLCBkZWx0YSkge1xuICBpZiAoaXNMaW5lKG5vZGUpICYmIG5vZGUubmV4dEVsZW1lbnRTaWJsaW5nICE9IG51bGwgJiYgIWRlbHRhRW5kc1dpdGgoZGVsdGEsICdcXG5cXG4nKSkge1xuICAgIHZhciBub2RlSGVpZ2h0ID0gbm9kZS5vZmZzZXRIZWlnaHQgKyBwYXJzZUZsb2F0KGNvbXB1dGVTdHlsZShub2RlKS5tYXJnaW5Ub3ApICsgcGFyc2VGbG9hdChjb21wdXRlU3R5bGUobm9kZSkubWFyZ2luQm90dG9tKTtcbiAgICBpZiAobm9kZS5uZXh0RWxlbWVudFNpYmxpbmcub2Zmc2V0VG9wID4gbm9kZS5vZmZzZXRUb3AgKyBub2RlSGVpZ2h0ICogMS41KSB7XG4gICAgICBkZWx0YS5pbnNlcnQoJ1xcbicpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIG1hdGNoU3R5bGVzKG5vZGUsIGRlbHRhKSB7XG4gIHZhciBmb3JtYXRzID0ge307XG4gIHZhciBzdHlsZSA9IG5vZGUuc3R5bGUgfHwge307XG4gIGlmIChzdHlsZS5mb250U3R5bGUgJiYgY29tcHV0ZVN0eWxlKG5vZGUpLmZvbnRTdHlsZSA9PT0gJ2l0YWxpYycpIHtcbiAgICBmb3JtYXRzLml0YWxpYyA9IHRydWU7XG4gIH1cbiAgaWYgKHN0eWxlLmZvbnRXZWlnaHQgJiYgKGNvbXB1dGVTdHlsZShub2RlKS5mb250V2VpZ2h0LnN0YXJ0c1dpdGgoJ2JvbGQnKSB8fCBwYXJzZUludChjb21wdXRlU3R5bGUobm9kZSkuZm9udFdlaWdodCkgPj0gNzAwKSkge1xuICAgIGZvcm1hdHMuYm9sZCA9IHRydWU7XG4gIH1cbiAgaWYgKE9iamVjdC5rZXlzKGZvcm1hdHMpLmxlbmd0aCA+IDApIHtcbiAgICBkZWx0YSA9IGFwcGx5Rm9ybWF0KGRlbHRhLCBmb3JtYXRzKTtcbiAgfVxuICBpZiAocGFyc2VGbG9hdChzdHlsZS50ZXh0SW5kZW50IHx8IDApID4gMCkge1xuICAgIC8vIENvdWxkIGJlIDAuNWluXG4gICAgZGVsdGEgPSBuZXcgX3F1aWxsRGVsdGEyLmRlZmF1bHQoKS5pbnNlcnQoJ1xcdCcpLmNvbmNhdChkZWx0YSk7XG4gIH1cbiAgcmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBtYXRjaFRleHQobm9kZSwgZGVsdGEpIHtcbiAgdmFyIHRleHQgPSBub2RlLmRhdGE7XG4gIC8vIFdvcmQgcmVwcmVzZW50cyBlbXB0eSBsaW5lIHdpdGggPG86cD4mbmJzcDs8L286cD5cbiAgaWYgKG5vZGUucGFyZW50Tm9kZS50YWdOYW1lID09PSAnTzpQJykge1xuICAgIHJldHVybiBkZWx0YS5pbnNlcnQodGV4dC50cmltKCkpO1xuICB9XG4gIGlmICh0ZXh0LnRyaW0oKS5sZW5ndGggPT09IDAgJiYgbm9kZS5wYXJlbnROb2RlLmNsYXNzTGlzdC5jb250YWlucygncWwtY2xpcGJvYXJkJykpIHtcbiAgICByZXR1cm4gZGVsdGE7XG4gIH1cbiAgaWYgKCFjb21wdXRlU3R5bGUobm9kZS5wYXJlbnROb2RlKS53aGl0ZVNwYWNlLnN0YXJ0c1dpdGgoJ3ByZScpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtc3R5bGVcbiAgICB2YXIgcmVwbGFjZXIgPSBmdW5jdGlvbiByZXBsYWNlcihjb2xsYXBzZSwgbWF0Y2gpIHtcbiAgICAgIG1hdGNoID0gbWF0Y2gucmVwbGFjZSgvW15cXHUwMGEwXS9nLCAnJyk7IC8vIFxcdTAwYTAgaXMgbmJzcDtcbiAgICAgIHJldHVybiBtYXRjaC5sZW5ndGggPCAxICYmIGNvbGxhcHNlID8gJyAnIDogbWF0Y2g7XG4gICAgfTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHJcXG4vZywgJyAnKS5yZXBsYWNlKC9cXG4vZywgJyAnKTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHNcXHMrL2csIHJlcGxhY2VyLmJpbmQocmVwbGFjZXIsIHRydWUpKTsgLy8gY29sbGFwc2Ugd2hpdGVzcGFjZVxuICAgIGlmIChub2RlLnByZXZpb3VzU2libGluZyA9PSBudWxsICYmIGlzTGluZShub2RlLnBhcmVudE5vZGUpIHx8IG5vZGUucHJldmlvdXNTaWJsaW5nICE9IG51bGwgJiYgaXNMaW5lKG5vZGUucHJldmlvdXNTaWJsaW5nKSkge1xuICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXlxccysvLCByZXBsYWNlci5iaW5kKHJlcGxhY2VyLCBmYWxzZSkpO1xuICAgIH1cbiAgICBpZiAobm9kZS5uZXh0U2libGluZyA9PSBudWxsICYmIGlzTGluZShub2RlLnBhcmVudE5vZGUpIHx8IG5vZGUubmV4dFNpYmxpbmcgIT0gbnVsbCAmJiBpc0xpbmUobm9kZS5uZXh0U2libGluZykpIHtcbiAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xccyskLywgcmVwbGFjZXIuYmluZChyZXBsYWNlciwgZmFsc2UpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlbHRhLmluc2VydCh0ZXh0KTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gQ2xpcGJvYXJkO1xuZXhwb3J0cy5tYXRjaEF0dHJpYnV0b3IgPSBtYXRjaEF0dHJpYnV0b3I7XG5leHBvcnRzLm1hdGNoQmxvdCA9IG1hdGNoQmxvdDtcbmV4cG9ydHMubWF0Y2hOZXdsaW5lID0gbWF0Y2hOZXdsaW5lO1xuZXhwb3J0cy5tYXRjaFNwYWNpbmcgPSBtYXRjaFNwYWNpbmc7XG5leHBvcnRzLm1hdGNoVGV4dCA9IG1hdGNoVGV4dDtcblxuLyoqKi8gfSksXG4vKiA1NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfaW5saW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxudmFyIF9pbmxpbmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5saW5lKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgQm9sZCA9IGZ1bmN0aW9uIChfSW5saW5lKSB7XG4gIF9pbmhlcml0cyhCb2xkLCBfSW5saW5lKTtcblxuICBmdW5jdGlvbiBCb2xkKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCb2xkKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQm9sZC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJvbGQpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhCb2xkLCBbe1xuICAgIGtleTogJ29wdGltaXplJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb3B0aW1pemUoY29udGV4dCkge1xuICAgICAgX2dldChCb2xkLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJvbGQucHJvdG90eXBlKSwgJ29wdGltaXplJywgdGhpcykuY2FsbCh0aGlzLCBjb250ZXh0KTtcbiAgICAgIGlmICh0aGlzLmRvbU5vZGUudGFnTmFtZSAhPT0gdGhpcy5zdGF0aWNzLnRhZ05hbWVbMF0pIHtcbiAgICAgICAgdGhpcy5yZXBsYWNlV2l0aCh0aGlzLnN0YXRpY3MuYmxvdE5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiAnY3JlYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgcmV0dXJuIF9nZXQoQm9sZC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJvbGQpLCAnY3JlYXRlJywgdGhpcykuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0cygpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCb2xkO1xufShfaW5saW5lMi5kZWZhdWx0KTtcblxuQm9sZC5ibG90TmFtZSA9ICdib2xkJztcbkJvbGQudGFnTmFtZSA9IFsnU1RST05HJywgJ0InXTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQm9sZDtcblxuLyoqKi8gfSksXG4vKiA1NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hZGRDb250cm9scyA9IGV4cG9ydHMuZGVmYXVsdCA9IHVuZGVmaW5lZDtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3F1aWxsRGVsdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX3F1aWxsRGVsdGEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVpbGxEZWx0YSk7XG5cbnZhciBfcGFyY2htZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9wYXJjaG1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyY2htZW50KTtcblxudmFyIF9xdWlsbCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfcXVpbGwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVpbGwpO1xuXG52YXIgX2xvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXG52YXIgX2xvZ2dlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2dnZXIpO1xuXG52YXIgX21vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cbnZhciBfbW9kdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vZHVsZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIGRlYnVnID0gKDAsIF9sb2dnZXIyLmRlZmF1bHQpKCdxdWlsbDp0b29sYmFyJyk7XG5cbnZhciBUb29sYmFyID0gZnVuY3Rpb24gKF9Nb2R1bGUpIHtcbiAgX2luaGVyaXRzKFRvb2xiYXIsIF9Nb2R1bGUpO1xuXG4gIGZ1bmN0aW9uIFRvb2xiYXIocXVpbGwsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVG9vbGJhcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVG9vbGJhci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRvb2xiYXIpKS5jYWxsKHRoaXMsIHF1aWxsLCBvcHRpb25zKSk7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShfdGhpcy5vcHRpb25zLmNvbnRhaW5lcikpIHtcbiAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGFkZENvbnRyb2xzKGNvbnRhaW5lciwgX3RoaXMub3B0aW9ucy5jb250YWluZXIpO1xuICAgICAgcXVpbGwuY29udGFpbmVyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNvbnRhaW5lciwgcXVpbGwuY29udGFpbmVyKTtcbiAgICAgIF90aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBfdGhpcy5vcHRpb25zLmNvbnRhaW5lciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIF90aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoX3RoaXMub3B0aW9ucy5jb250YWluZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpcy5jb250YWluZXIgPSBfdGhpcy5vcHRpb25zLmNvbnRhaW5lcjtcbiAgICB9XG4gICAgaWYgKCEoX3RoaXMuY29udGFpbmVyIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKSB7XG4gICAgICB2YXIgX3JldDtcblxuICAgICAgcmV0dXJuIF9yZXQgPSBkZWJ1Zy5lcnJvcignQ29udGFpbmVyIHJlcXVpcmVkIGZvciB0b29sYmFyJywgX3RoaXMub3B0aW9ucyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG4gICAgX3RoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3FsLXRvb2xiYXInKTtcbiAgICBfdGhpcy5jb250cm9scyA9IFtdO1xuICAgIF90aGlzLmhhbmRsZXJzID0ge307XG4gICAgT2JqZWN0LmtleXMoX3RoaXMub3B0aW9ucy5oYW5kbGVycykuZm9yRWFjaChmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICBfdGhpcy5hZGRIYW5kbGVyKGZvcm1hdCwgX3RoaXMub3B0aW9ucy5oYW5kbGVyc1tmb3JtYXRdKTtcbiAgICB9KTtcbiAgICBbXS5mb3JFYWNoLmNhbGwoX3RoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbiwgc2VsZWN0JyksIGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgX3RoaXMuYXR0YWNoKGlucHV0KTtcbiAgICB9KTtcbiAgICBfdGhpcy5xdWlsbC5vbihfcXVpbGwyLmRlZmF1bHQuZXZlbnRzLkVESVRPUl9DSEFOR0UsIGZ1bmN0aW9uICh0eXBlLCByYW5nZSkge1xuICAgICAgaWYgKHR5cGUgPT09IF9xdWlsbDIuZGVmYXVsdC5ldmVudHMuU0VMRUNUSU9OX0NIQU5HRSkge1xuICAgICAgICBfdGhpcy51cGRhdGUocmFuZ2UpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF90aGlzLnF1aWxsLm9uKF9xdWlsbDIuZGVmYXVsdC5ldmVudHMuU0NST0xMX09QVElNSVpFLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcXVpbGwkc2VsZWN0aW9uID0gX3RoaXMucXVpbGwuc2VsZWN0aW9uLmdldFJhbmdlKCksXG4gICAgICAgICAgX3RoaXMkcXVpbGwkc2VsZWN0aW9uMiA9IF9zbGljZWRUb0FycmF5KF90aGlzJHF1aWxsJHNlbGVjdGlvbiwgMSksXG4gICAgICAgICAgcmFuZ2UgPSBfdGhpcyRxdWlsbCRzZWxlY3Rpb24yWzBdOyAvLyBxdWlsbC5nZXRTZWxlY3Rpb24gdHJpZ2dlcnMgdXBkYXRlXG5cblxuICAgICAgX3RoaXMudXBkYXRlKHJhbmdlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVG9vbGJhciwgW3tcbiAgICBrZXk6ICdhZGRIYW5kbGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkSGFuZGxlcihmb3JtYXQsIGhhbmRsZXIpIHtcbiAgICAgIHRoaXMuaGFuZGxlcnNbZm9ybWF0XSA9IGhhbmRsZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYXR0YWNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXR0YWNoKGlucHV0KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIGZvcm1hdCA9IFtdLmZpbmQuY2FsbChpbnB1dC5jbGFzc0xpc3QsIGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgICAgcmV0dXJuIGNsYXNzTmFtZS5pbmRleE9mKCdxbC0nKSA9PT0gMDtcbiAgICAgIH0pO1xuICAgICAgaWYgKCFmb3JtYXQpIHJldHVybjtcbiAgICAgIGZvcm1hdCA9IGZvcm1hdC5zbGljZSgncWwtJy5sZW5ndGgpO1xuICAgICAgaWYgKGlucHV0LnRhZ05hbWUgPT09ICdCVVRUT04nKSB7XG4gICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgndHlwZScsICdidXR0b24nKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmhhbmRsZXJzW2Zvcm1hdF0gPT0gbnVsbCkge1xuICAgICAgICBpZiAodGhpcy5xdWlsbC5zY3JvbGwud2hpdGVsaXN0ICE9IG51bGwgJiYgdGhpcy5xdWlsbC5zY3JvbGwud2hpdGVsaXN0W2Zvcm1hdF0gPT0gbnVsbCkge1xuICAgICAgICAgIGRlYnVnLndhcm4oJ2lnbm9yaW5nIGF0dGFjaGluZyB0byBkaXNhYmxlZCBmb3JtYXQnLCBmb3JtYXQsIGlucHV0KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9wYXJjaG1lbnQyLmRlZmF1bHQucXVlcnkoZm9ybWF0KSA9PSBudWxsKSB7XG4gICAgICAgICAgZGVidWcud2FybignaWdub3JpbmcgYXR0YWNoaW5nIHRvIG5vbmV4aXN0ZW50IGZvcm1hdCcsIGZvcm1hdCwgaW5wdXQpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGV2ZW50TmFtZSA9IGlucHV0LnRhZ05hbWUgPT09ICdTRUxFQ1QnID8gJ2NoYW5nZScgOiAnY2xpY2snO1xuICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHZvaWQgMDtcbiAgICAgICAgaWYgKGlucHV0LnRhZ05hbWUgPT09ICdTRUxFQ1QnKSB7XG4gICAgICAgICAgaWYgKGlucHV0LnNlbGVjdGVkSW5kZXggPCAwKSByZXR1cm47XG4gICAgICAgICAgdmFyIHNlbGVjdGVkID0gaW5wdXQub3B0aW9uc1tpbnB1dC5zZWxlY3RlZEluZGV4XTtcbiAgICAgICAgICBpZiAoc2VsZWN0ZWQuaGFzQXR0cmlidXRlKCdzZWxlY3RlZCcpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHNlbGVjdGVkLnZhbHVlIHx8IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaW5wdXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdxbC1hY3RpdmUnKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBpbnB1dC52YWx1ZSB8fCAhaW5wdXQuaGFzQXR0cmlidXRlKCd2YWx1ZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMyLnF1aWxsLmZvY3VzKCk7XG5cbiAgICAgICAgdmFyIF9xdWlsbCRzZWxlY3Rpb24kZ2V0UiA9IF90aGlzMi5xdWlsbC5zZWxlY3Rpb24uZ2V0UmFuZ2UoKSxcbiAgICAgICAgICAgIF9xdWlsbCRzZWxlY3Rpb24kZ2V0UjIgPSBfc2xpY2VkVG9BcnJheShfcXVpbGwkc2VsZWN0aW9uJGdldFIsIDEpLFxuICAgICAgICAgICAgcmFuZ2UgPSBfcXVpbGwkc2VsZWN0aW9uJGdldFIyWzBdO1xuXG4gICAgICAgIGlmIChfdGhpczIuaGFuZGxlcnNbZm9ybWF0XSAhPSBudWxsKSB7XG4gICAgICAgICAgX3RoaXMyLmhhbmRsZXJzW2Zvcm1hdF0uY2FsbChfdGhpczIsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChfcGFyY2htZW50Mi5kZWZhdWx0LnF1ZXJ5KGZvcm1hdCkucHJvdG90eXBlIGluc3RhbmNlb2YgX3BhcmNobWVudDIuZGVmYXVsdC5FbWJlZCkge1xuICAgICAgICAgIHZhbHVlID0gcHJvbXB0KCdFbnRlciAnICsgZm9ybWF0KTtcbiAgICAgICAgICBpZiAoIXZhbHVlKSByZXR1cm47XG4gICAgICAgICAgX3RoaXMyLnF1aWxsLnVwZGF0ZUNvbnRlbnRzKG5ldyBfcXVpbGxEZWx0YTIuZGVmYXVsdCgpLnJldGFpbihyYW5nZS5pbmRleCkuZGVsZXRlKHJhbmdlLmxlbmd0aCkuaW5zZXJ0KF9kZWZpbmVQcm9wZXJ0eSh7fSwgZm9ybWF0LCB2YWx1ZSkpLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpczIucXVpbGwuZm9ybWF0KGZvcm1hdCwgdmFsdWUsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzMi51cGRhdGUocmFuZ2UpO1xuICAgICAgfSk7XG4gICAgICAvLyBUT0RPIHVzZSB3ZWFrbWFwXG4gICAgICB0aGlzLmNvbnRyb2xzLnB1c2goW2Zvcm1hdCwgaW5wdXRdKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd1cGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUocmFuZ2UpIHtcbiAgICAgIHZhciBmb3JtYXRzID0gcmFuZ2UgPT0gbnVsbCA/IHt9IDogdGhpcy5xdWlsbC5nZXRGb3JtYXQocmFuZ2UpO1xuICAgICAgdGhpcy5jb250cm9scy5mb3JFYWNoKGZ1bmN0aW9uIChwYWlyKSB7XG4gICAgICAgIHZhciBfcGFpciA9IF9zbGljZWRUb0FycmF5KHBhaXIsIDIpLFxuICAgICAgICAgICAgZm9ybWF0ID0gX3BhaXJbMF0sXG4gICAgICAgICAgICBpbnB1dCA9IF9wYWlyWzFdO1xuXG4gICAgICAgIGlmIChpbnB1dC50YWdOYW1lID09PSAnU0VMRUNUJykge1xuICAgICAgICAgIHZhciBvcHRpb24gPSB2b2lkIDA7XG4gICAgICAgICAgaWYgKHJhbmdlID09IG51bGwpIHtcbiAgICAgICAgICAgIG9wdGlvbiA9IG51bGw7XG4gICAgICAgICAgfSBlbHNlIGlmIChmb3JtYXRzW2Zvcm1hdF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgb3B0aW9uID0gaW5wdXQucXVlcnlTZWxlY3Rvcignb3B0aW9uW3NlbGVjdGVkXScpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkoZm9ybWF0c1tmb3JtYXRdKSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gZm9ybWF0c1tmb3JtYXRdO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXFwiL2csICdcXFxcXCInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbiA9IGlucHV0LnF1ZXJ5U2VsZWN0b3IoJ29wdGlvblt2YWx1ZT1cIicgKyB2YWx1ZSArICdcIl0nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9wdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICBpbnB1dC52YWx1ZSA9ICcnOyAvLyBUT0RPIG1ha2UgY29uZmlndXJhYmxlP1xuICAgICAgICAgICAgaW5wdXQuc2VsZWN0ZWRJbmRleCA9IC0xO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAocmFuZ2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgaW5wdXQuY2xhc3NMaXN0LnJlbW92ZSgncWwtYWN0aXZlJyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpbnB1dC5oYXNBdHRyaWJ1dGUoJ3ZhbHVlJykpIHtcbiAgICAgICAgICAgIC8vIGJvdGggYmVpbmcgbnVsbCBzaG91bGQgbWF0Y2ggKGRlZmF1bHQgdmFsdWVzKVxuICAgICAgICAgICAgLy8gJzEnIHNob3VsZCBtYXRjaCB3aXRoIDEgKGhlYWRlcnMpXG4gICAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBmb3JtYXRzW2Zvcm1hdF0gPT09IGlucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSB8fCBmb3JtYXRzW2Zvcm1hdF0gIT0gbnVsbCAmJiBmb3JtYXRzW2Zvcm1hdF0udG9TdHJpbmcoKSA9PT0gaW5wdXQuZ2V0QXR0cmlidXRlKCd2YWx1ZScpIHx8IGZvcm1hdHNbZm9ybWF0XSA9PSBudWxsICYmICFpbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICAgICAgICBpbnB1dC5jbGFzc0xpc3QudG9nZ2xlKCdxbC1hY3RpdmUnLCBpc0FjdGl2ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlucHV0LmNsYXNzTGlzdC50b2dnbGUoJ3FsLWFjdGl2ZScsIGZvcm1hdHNbZm9ybWF0XSAhPSBudWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUb29sYmFyO1xufShfbW9kdWxlMi5kZWZhdWx0KTtcblxuVG9vbGJhci5ERUZBVUxUUyA9IHt9O1xuXG5mdW5jdGlvbiBhZGRCdXR0b24oY29udGFpbmVyLCBmb3JtYXQsIHZhbHVlKSB7XG4gIHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnYnV0dG9uJyk7XG4gIGlucHV0LmNsYXNzTGlzdC5hZGQoJ3FsLScgKyBmb3JtYXQpO1xuICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgIGlucHV0LnZhbHVlID0gdmFsdWU7XG4gIH1cbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKGlucHV0KTtcbn1cblxuZnVuY3Rpb24gYWRkQ29udHJvbHMoY29udGFpbmVyLCBncm91cHMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGdyb3Vwc1swXSkpIHtcbiAgICBncm91cHMgPSBbZ3JvdXBzXTtcbiAgfVxuICBncm91cHMuZm9yRWFjaChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICB2YXIgZ3JvdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgZ3JvdXAuY2xhc3NMaXN0LmFkZCgncWwtZm9ybWF0cycpO1xuICAgIGNvbnRyb2xzLmZvckVhY2goZnVuY3Rpb24gKGNvbnRyb2wpIHtcbiAgICAgIGlmICh0eXBlb2YgY29udHJvbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYWRkQnV0dG9uKGdyb3VwLCBjb250cm9sKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSBPYmplY3Qua2V5cyhjb250cm9sKVswXTtcbiAgICAgICAgdmFyIHZhbHVlID0gY29udHJvbFtmb3JtYXRdO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICBhZGRTZWxlY3QoZ3JvdXAsIGZvcm1hdCwgdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZEJ1dHRvbihncm91cCwgZm9ybWF0LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZ3JvdXApO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkU2VsZWN0KGNvbnRhaW5lciwgZm9ybWF0LCB2YWx1ZXMpIHtcbiAgdmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XG4gIGlucHV0LmNsYXNzTGlzdC5hZGQoJ3FsLScgKyBmb3JtYXQpO1xuICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YXIgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgaWYgKHZhbHVlICE9PSBmYWxzZSkge1xuICAgICAgb3B0aW9uLnNldEF0dHJpYnV0ZSgndmFsdWUnLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJyk7XG4gICAgfVxuICAgIGlucHV0LmFwcGVuZENoaWxkKG9wdGlvbik7XG4gIH0pO1xuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaW5wdXQpO1xufVxuXG5Ub29sYmFyLkRFRkFVTFRTID0ge1xuICBjb250YWluZXI6IG51bGwsXG4gIGhhbmRsZXJzOiB7XG4gICAgY2xlYW46IGZ1bmN0aW9uIGNsZWFuKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciByYW5nZSA9IHRoaXMucXVpbGwuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICBpZiAocmFuZ2UgPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgaWYgKHJhbmdlLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIHZhciBmb3JtYXRzID0gdGhpcy5xdWlsbC5nZXRGb3JtYXQoKTtcbiAgICAgICAgT2JqZWN0LmtleXMoZm9ybWF0cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgIC8vIENsZWFuIGZ1bmN0aW9uYWxpdHkgaW4gZXhpc3RpbmcgYXBwcyBvbmx5IGNsZWFuIGlubGluZSBmb3JtYXRzXG4gICAgICAgICAgaWYgKF9wYXJjaG1lbnQyLmRlZmF1bHQucXVlcnkobmFtZSwgX3BhcmNobWVudDIuZGVmYXVsdC5TY29wZS5JTkxJTkUpICE9IG51bGwpIHtcbiAgICAgICAgICAgIF90aGlzMy5xdWlsbC5mb3JtYXQobmFtZSwgZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnF1aWxsLnJlbW92ZUZvcm1hdChyYW5nZSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICB9XG4gICAgfSxcbiAgICBkaXJlY3Rpb246IGZ1bmN0aW9uIGRpcmVjdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIGFsaWduID0gdGhpcy5xdWlsbC5nZXRGb3JtYXQoKVsnYWxpZ24nXTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gJ3J0bCcgJiYgYWxpZ24gPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnYWxpZ24nLCAncmlnaHQnLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgIH0gZWxzZSBpZiAoIXZhbHVlICYmIGFsaWduID09PSAncmlnaHQnKSB7XG4gICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdhbGlnbicsIGZhbHNlLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdkaXJlY3Rpb24nLCB2YWx1ZSwgX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgfSxcbiAgICBpbmRlbnQ6IGZ1bmN0aW9uIGluZGVudCh2YWx1ZSkge1xuICAgICAgdmFyIHJhbmdlID0gdGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgIHZhciBmb3JtYXRzID0gdGhpcy5xdWlsbC5nZXRGb3JtYXQocmFuZ2UpO1xuICAgICAgdmFyIGluZGVudCA9IHBhcnNlSW50KGZvcm1hdHMuaW5kZW50IHx8IDApO1xuICAgICAgaWYgKHZhbHVlID09PSAnKzEnIHx8IHZhbHVlID09PSAnLTEnKSB7XG4gICAgICAgIHZhciBtb2RpZmllciA9IHZhbHVlID09PSAnKzEnID8gMSA6IC0xO1xuICAgICAgICBpZiAoZm9ybWF0cy5kaXJlY3Rpb24gPT09ICdydGwnKSBtb2RpZmllciAqPSAtMTtcbiAgICAgICAgdGhpcy5xdWlsbC5mb3JtYXQoJ2luZGVudCcsIGluZGVudCArIG1vZGlmaWVyLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGxpbms6IGZ1bmN0aW9uIGxpbmsodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICB2YWx1ZSA9IHByb21wdCgnRW50ZXIgbGluayBVUkw6Jyk7XG4gICAgICB9XG4gICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnbGluaycsIHZhbHVlLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICB9LFxuICAgIGxpc3Q6IGZ1bmN0aW9uIGxpc3QodmFsdWUpIHtcbiAgICAgIHZhciByYW5nZSA9IHRoaXMucXVpbGwuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICB2YXIgZm9ybWF0cyA9IHRoaXMucXVpbGwuZ2V0Rm9ybWF0KHJhbmdlKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gJ2NoZWNrJykge1xuICAgICAgICBpZiAoZm9ybWF0c1snbGlzdCddID09PSAnY2hlY2tlZCcgfHwgZm9ybWF0c1snbGlzdCddID09PSAndW5jaGVja2VkJykge1xuICAgICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdsaXN0JywgZmFsc2UsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdsaXN0JywgJ3VuY2hlY2tlZCcsIF9xdWlsbDIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnbGlzdCcsIHZhbHVlLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFRvb2xiYXI7XG5leHBvcnRzLmFkZENvbnRyb2xzID0gYWRkQ29udHJvbHM7XG5cbi8qKiovIH0pLFxuLyogNTggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHBvbHlsaW5lIGNsYXNzPVxcXCJxbC1ldmVuIHFsLXN0cm9rZVxcXCIgcG9pbnRzPVxcXCI1IDcgMyA5IDUgMTFcXFwiPjwvcG9seWxpbmU+IDxwb2x5bGluZSBjbGFzcz1cXFwicWwtZXZlbiBxbC1zdHJva2VcXFwiIHBvaW50cz1cXFwiMTMgNyAxNSA5IDEzIDExXFxcIj48L3BvbHlsaW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MTAgeDI9OCB5MT01IHkyPTEzPjwvbGluZT4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogNTkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX3BpY2tlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpO1xuXG52YXIgX3BpY2tlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9waWNrZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBDb2xvclBpY2tlciA9IGZ1bmN0aW9uIChfUGlja2VyKSB7XG4gIF9pbmhlcml0cyhDb2xvclBpY2tlciwgX1BpY2tlcik7XG5cbiAgZnVuY3Rpb24gQ29sb3JQaWNrZXIoc2VsZWN0LCBsYWJlbCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2xvclBpY2tlcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ29sb3JQaWNrZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDb2xvclBpY2tlcikpLmNhbGwodGhpcywgc2VsZWN0KSk7XG5cbiAgICBfdGhpcy5sYWJlbC5pbm5lckhUTUwgPSBsYWJlbDtcbiAgICBfdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgncWwtY29sb3ItcGlja2VyJyk7XG4gICAgW10uc2xpY2UuY2FsbChfdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLnFsLXBpY2tlci1pdGVtJyksIDAsIDcpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZCgncWwtcHJpbWFyeScpO1xuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDb2xvclBpY2tlciwgW3tcbiAgICBrZXk6ICdidWlsZEl0ZW0nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBidWlsZEl0ZW0ob3B0aW9uKSB7XG4gICAgICB2YXIgaXRlbSA9IF9nZXQoQ29sb3JQaWNrZXIucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ29sb3JQaWNrZXIucHJvdG90eXBlKSwgJ2J1aWxkSXRlbScsIHRoaXMpLmNhbGwodGhpcywgb3B0aW9uKTtcbiAgICAgIGl0ZW0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gb3B0aW9uLmdldEF0dHJpYnV0ZSgndmFsdWUnKSB8fCAnJztcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NlbGVjdEl0ZW0nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZWxlY3RJdGVtKGl0ZW0sIHRyaWdnZXIpIHtcbiAgICAgIF9nZXQoQ29sb3JQaWNrZXIucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ29sb3JQaWNrZXIucHJvdG90eXBlKSwgJ3NlbGVjdEl0ZW0nLCB0aGlzKS5jYWxsKHRoaXMsIGl0ZW0sIHRyaWdnZXIpO1xuICAgICAgdmFyIGNvbG9yTGFiZWwgPSB0aGlzLmxhYmVsLnF1ZXJ5U2VsZWN0b3IoJy5xbC1jb2xvci1sYWJlbCcpO1xuICAgICAgdmFyIHZhbHVlID0gaXRlbSA/IGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykgfHwgJycgOiAnJztcbiAgICAgIGlmIChjb2xvckxhYmVsKSB7XG4gICAgICAgIGlmIChjb2xvckxhYmVsLnRhZ05hbWUgPT09ICdsaW5lJykge1xuICAgICAgICAgIGNvbG9yTGFiZWwuc3R5bGUuc3Ryb2tlID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29sb3JMYWJlbC5zdHlsZS5maWxsID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29sb3JQaWNrZXI7XG59KF9waWNrZXIyLmRlZmF1bHQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBDb2xvclBpY2tlcjtcblxuLyoqKi8gfSksXG4vKiA2MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfcGlja2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7XG5cbnZhciBfcGlja2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BpY2tlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEljb25QaWNrZXIgPSBmdW5jdGlvbiAoX1BpY2tlcikge1xuICBfaW5oZXJpdHMoSWNvblBpY2tlciwgX1BpY2tlcik7XG5cbiAgZnVuY3Rpb24gSWNvblBpY2tlcihzZWxlY3QsIGljb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEljb25QaWNrZXIpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEljb25QaWNrZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJY29uUGlja2VyKSkuY2FsbCh0aGlzLCBzZWxlY3QpKTtcblxuICAgIF90aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdxbC1pY29uLXBpY2tlcicpO1xuICAgIFtdLmZvckVhY2guY2FsbChfdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLnFsLXBpY2tlci1pdGVtJyksIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICBpdGVtLmlubmVySFRNTCA9IGljb25zW2l0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykgfHwgJyddO1xuICAgIH0pO1xuICAgIF90aGlzLmRlZmF1bHRJdGVtID0gX3RoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5xbC1zZWxlY3RlZCcpO1xuICAgIF90aGlzLnNlbGVjdEl0ZW0oX3RoaXMuZGVmYXVsdEl0ZW0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhJY29uUGlja2VyLCBbe1xuICAgIGtleTogJ3NlbGVjdEl0ZW0nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZWxlY3RJdGVtKGl0ZW0sIHRyaWdnZXIpIHtcbiAgICAgIF9nZXQoSWNvblBpY2tlci5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJY29uUGlja2VyLnByb3RvdHlwZSksICdzZWxlY3RJdGVtJywgdGhpcykuY2FsbCh0aGlzLCBpdGVtLCB0cmlnZ2VyKTtcbiAgICAgIGl0ZW0gPSBpdGVtIHx8IHRoaXMuZGVmYXVsdEl0ZW07XG4gICAgICB0aGlzLmxhYmVsLmlubmVySFRNTCA9IGl0ZW0uaW5uZXJIVE1MO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBJY29uUGlja2VyO1xufShfcGlja2VyMi5kZWZhdWx0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gSWNvblBpY2tlcjtcblxuLyoqKi8gfSksXG4vKiA2MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgVG9vbHRpcCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVG9vbHRpcChxdWlsbCwgYm91bmRzQ29udGFpbmVyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUb29sdGlwKTtcblxuICAgIHRoaXMucXVpbGwgPSBxdWlsbDtcbiAgICB0aGlzLmJvdW5kc0NvbnRhaW5lciA9IGJvdW5kc0NvbnRhaW5lciB8fCBkb2N1bWVudC5ib2R5O1xuICAgIHRoaXMucm9vdCA9IHF1aWxsLmFkZENvbnRhaW5lcigncWwtdG9vbHRpcCcpO1xuICAgIHRoaXMucm9vdC5pbm5lckhUTUwgPSB0aGlzLmNvbnN0cnVjdG9yLlRFTVBMQVRFO1xuICAgIGlmICh0aGlzLnF1aWxsLnJvb3QgPT09IHRoaXMucXVpbGwuc2Nyb2xsaW5nQ29udGFpbmVyKSB7XG4gICAgICB0aGlzLnF1aWxsLnJvb3QuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5yb290LnN0eWxlLm1hcmdpblRvcCA9IC0xICogX3RoaXMucXVpbGwucm9vdC5zY3JvbGxUb3AgKyAncHgnO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuaGlkZSgpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRvb2x0aXAsIFt7XG4gICAga2V5OiAnaGlkZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICB0aGlzLnJvb3QuY2xhc3NMaXN0LmFkZCgncWwtaGlkZGVuJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwb3NpdGlvbihyZWZlcmVuY2UpIHtcbiAgICAgIHZhciBsZWZ0ID0gcmVmZXJlbmNlLmxlZnQgKyByZWZlcmVuY2Uud2lkdGggLyAyIC0gdGhpcy5yb290Lm9mZnNldFdpZHRoIC8gMjtcbiAgICAgIC8vIHJvb3Quc2Nyb2xsVG9wIHNob3VsZCBiZSAwIGlmIHNjcm9sbENvbnRhaW5lciAhPT0gcm9vdFxuICAgICAgdmFyIHRvcCA9IHJlZmVyZW5jZS5ib3R0b20gKyB0aGlzLnF1aWxsLnJvb3Quc2Nyb2xsVG9wO1xuICAgICAgdGhpcy5yb290LnN0eWxlLmxlZnQgPSBsZWZ0ICsgJ3B4JztcbiAgICAgIHRoaXMucm9vdC5zdHlsZS50b3AgPSB0b3AgKyAncHgnO1xuICAgICAgdGhpcy5yb290LmNsYXNzTGlzdC5yZW1vdmUoJ3FsLWZsaXAnKTtcbiAgICAgIHZhciBjb250YWluZXJCb3VuZHMgPSB0aGlzLmJvdW5kc0NvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciByb290Qm91bmRzID0gdGhpcy5yb290LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIHNoaWZ0ID0gMDtcbiAgICAgIGlmIChyb290Qm91bmRzLnJpZ2h0ID4gY29udGFpbmVyQm91bmRzLnJpZ2h0KSB7XG4gICAgICAgIHNoaWZ0ID0gY29udGFpbmVyQm91bmRzLnJpZ2h0IC0gcm9vdEJvdW5kcy5yaWdodDtcbiAgICAgICAgdGhpcy5yb290LnN0eWxlLmxlZnQgPSBsZWZ0ICsgc2hpZnQgKyAncHgnO1xuICAgICAgfVxuICAgICAgaWYgKHJvb3RCb3VuZHMubGVmdCA8IGNvbnRhaW5lckJvdW5kcy5sZWZ0KSB7XG4gICAgICAgIHNoaWZ0ID0gY29udGFpbmVyQm91bmRzLmxlZnQgLSByb290Qm91bmRzLmxlZnQ7XG4gICAgICAgIHRoaXMucm9vdC5zdHlsZS5sZWZ0ID0gbGVmdCArIHNoaWZ0ICsgJ3B4JztcbiAgICAgIH1cbiAgICAgIGlmIChyb290Qm91bmRzLmJvdHRvbSA+IGNvbnRhaW5lckJvdW5kcy5ib3R0b20pIHtcbiAgICAgICAgdmFyIGhlaWdodCA9IHJvb3RCb3VuZHMuYm90dG9tIC0gcm9vdEJvdW5kcy50b3A7XG4gICAgICAgIHZhciB2ZXJ0aWNhbFNoaWZ0ID0gcmVmZXJlbmNlLmJvdHRvbSAtIHJlZmVyZW5jZS50b3AgKyBoZWlnaHQ7XG4gICAgICAgIHRoaXMucm9vdC5zdHlsZS50b3AgPSB0b3AgLSB2ZXJ0aWNhbFNoaWZ0ICsgJ3B4JztcbiAgICAgICAgdGhpcy5yb290LmNsYXNzTGlzdC5hZGQoJ3FsLWZsaXAnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzaGlmdDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzaG93JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgIHRoaXMucm9vdC5jbGFzc0xpc3QucmVtb3ZlKCdxbC1lZGl0aW5nJyk7XG4gICAgICB0aGlzLnJvb3QuY2xhc3NMaXN0LnJlbW92ZSgncWwtaGlkZGVuJyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRvb2x0aXA7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFRvb2x0aXA7XG5cbi8qKiovIH0pLFxuLyogNjIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZXh0ZW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIF9leHRlbmQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kKTtcblxudmFyIF9lbWl0dGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxudmFyIF9lbWl0dGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VtaXR0ZXIpO1xuXG52YXIgX2Jhc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzKTtcblxudmFyIF9iYXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Jhc2UpO1xuXG52YXIgX2xpbmsgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTtcblxudmFyIF9saW5rMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xpbmspO1xuXG52YXIgX3NlbGVjdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xuXG52YXIgX2ljb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSk7XG5cbnZhciBfaWNvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaWNvbnMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBUT09MQkFSX0NPTkZJRyA9IFtbeyBoZWFkZXI6IFsnMScsICcyJywgJzMnLCBmYWxzZV0gfV0sIFsnYm9sZCcsICdpdGFsaWMnLCAndW5kZXJsaW5lJywgJ2xpbmsnXSwgW3sgbGlzdDogJ29yZGVyZWQnIH0sIHsgbGlzdDogJ2J1bGxldCcgfV0sIFsnY2xlYW4nXV07XG5cbnZhciBTbm93VGhlbWUgPSBmdW5jdGlvbiAoX0Jhc2VUaGVtZSkge1xuICBfaW5oZXJpdHMoU25vd1RoZW1lLCBfQmFzZVRoZW1lKTtcblxuICBmdW5jdGlvbiBTbm93VGhlbWUocXVpbGwsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU25vd1RoZW1lKTtcblxuICAgIGlmIChvcHRpb25zLm1vZHVsZXMudG9vbGJhciAhPSBudWxsICYmIG9wdGlvbnMubW9kdWxlcy50b29sYmFyLmNvbnRhaW5lciA9PSBudWxsKSB7XG4gICAgICBvcHRpb25zLm1vZHVsZXMudG9vbGJhci5jb250YWluZXIgPSBUT09MQkFSX0NPTkZJRztcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU25vd1RoZW1lLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU25vd1RoZW1lKSkuY2FsbCh0aGlzLCBxdWlsbCwgb3B0aW9ucykpO1xuXG4gICAgX3RoaXMucXVpbGwuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3FsLXNub3cnKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU25vd1RoZW1lLCBbe1xuICAgIGtleTogJ2V4dGVuZFRvb2xiYXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleHRlbmRUb29sYmFyKHRvb2xiYXIpIHtcbiAgICAgIHRvb2xiYXIuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3FsLXNub3cnKTtcbiAgICAgIHRoaXMuYnVpbGRCdXR0b25zKFtdLnNsaWNlLmNhbGwodG9vbGJhci5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uJykpLCBfaWNvbnMyLmRlZmF1bHQpO1xuICAgICAgdGhpcy5idWlsZFBpY2tlcnMoW10uc2xpY2UuY2FsbCh0b29sYmFyLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdzZWxlY3QnKSksIF9pY29uczIuZGVmYXVsdCk7XG4gICAgICB0aGlzLnRvb2x0aXAgPSBuZXcgU25vd1Rvb2x0aXAodGhpcy5xdWlsbCwgdGhpcy5vcHRpb25zLmJvdW5kcyk7XG4gICAgICBpZiAodG9vbGJhci5jb250YWluZXIucXVlcnlTZWxlY3RvcignLnFsLWxpbmsnKSkge1xuICAgICAgICB0aGlzLnF1aWxsLmtleWJvYXJkLmFkZEJpbmRpbmcoeyBrZXk6ICdLJywgc2hvcnRLZXk6IHRydWUgfSwgZnVuY3Rpb24gKHJhbmdlLCBjb250ZXh0KSB7XG4gICAgICAgICAgdG9vbGJhci5oYW5kbGVyc1snbGluayddLmNhbGwodG9vbGJhciwgIWNvbnRleHQuZm9ybWF0LmxpbmspO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU25vd1RoZW1lO1xufShfYmFzZTIuZGVmYXVsdCk7XG5cblNub3dUaGVtZS5ERUZBVUxUUyA9ICgwLCBfZXh0ZW5kMi5kZWZhdWx0KSh0cnVlLCB7fSwgX2Jhc2UyLmRlZmF1bHQuREVGQVVMVFMsIHtcbiAgbW9kdWxlczoge1xuICAgIHRvb2xiYXI6IHtcbiAgICAgIGhhbmRsZXJzOiB7XG4gICAgICAgIGxpbms6IGZ1bmN0aW9uIGxpbmsodmFsdWUpIHtcbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciByYW5nZSA9IHRoaXMucXVpbGwuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgICAgICBpZiAocmFuZ2UgPT0gbnVsbCB8fCByYW5nZS5sZW5ndGggPT0gMCkgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIHByZXZpZXcgPSB0aGlzLnF1aWxsLmdldFRleHQocmFuZ2UpO1xuICAgICAgICAgICAgaWYgKC9eXFxTK0BcXFMrXFwuXFxTKyQvLnRlc3QocHJldmlldykgJiYgcHJldmlldy5pbmRleE9mKCdtYWlsdG86JykgIT09IDApIHtcbiAgICAgICAgICAgICAgcHJldmlldyA9ICdtYWlsdG86JyArIHByZXZpZXc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdG9vbHRpcCA9IHRoaXMucXVpbGwudGhlbWUudG9vbHRpcDtcbiAgICAgICAgICAgIHRvb2x0aXAuZWRpdCgnbGluaycsIHByZXZpZXcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnF1aWxsLmZvcm1hdCgnbGluaycsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgU25vd1Rvb2x0aXAgPSBmdW5jdGlvbiAoX0Jhc2VUb29sdGlwKSB7XG4gIF9pbmhlcml0cyhTbm93VG9vbHRpcCwgX0Jhc2VUb29sdGlwKTtcblxuICBmdW5jdGlvbiBTbm93VG9vbHRpcChxdWlsbCwgYm91bmRzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNub3dUb29sdGlwKTtcblxuICAgIHZhciBfdGhpczIgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU25vd1Rvb2x0aXAuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTbm93VG9vbHRpcCkpLmNhbGwodGhpcywgcXVpbGwsIGJvdW5kcykpO1xuXG4gICAgX3RoaXMyLnByZXZpZXcgPSBfdGhpczIucm9vdC5xdWVyeVNlbGVjdG9yKCdhLnFsLXByZXZpZXcnKTtcbiAgICByZXR1cm4gX3RoaXMyO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNub3dUb29sdGlwLCBbe1xuICAgIGtleTogJ2xpc3RlbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RlbigpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBfZ2V0KFNub3dUb29sdGlwLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNub3dUb29sdGlwLnByb3RvdHlwZSksICdsaXN0ZW4nLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5yb290LnF1ZXJ5U2VsZWN0b3IoJ2EucWwtYWN0aW9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKF90aGlzMy5yb290LmNsYXNzTGlzdC5jb250YWlucygncWwtZWRpdGluZycpKSB7XG4gICAgICAgICAgX3RoaXMzLnNhdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpczMuZWRpdCgnbGluaycsIF90aGlzMy5wcmV2aWV3LnRleHRDb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcignYS5xbC1yZW1vdmUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoX3RoaXMzLmxpbmtSYW5nZSAhPSBudWxsKSB7XG4gICAgICAgICAgdmFyIHJhbmdlID0gX3RoaXMzLmxpbmtSYW5nZTtcbiAgICAgICAgICBfdGhpczMucmVzdG9yZUZvY3VzKCk7XG4gICAgICAgICAgX3RoaXMzLnF1aWxsLmZvcm1hdFRleHQocmFuZ2UsICdsaW5rJywgZmFsc2UsIF9lbWl0dGVyMi5kZWZhdWx0LnNvdXJjZXMuVVNFUik7XG4gICAgICAgICAgZGVsZXRlIF90aGlzMy5saW5rUmFuZ2U7XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgX3RoaXMzLmhpZGUoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5xdWlsbC5vbihfZW1pdHRlcjIuZGVmYXVsdC5ldmVudHMuU0VMRUNUSU9OX0NIQU5HRSwgZnVuY3Rpb24gKHJhbmdlLCBvbGRSYW5nZSwgc291cmNlKSB7XG4gICAgICAgIGlmIChyYW5nZSA9PSBudWxsKSByZXR1cm47XG4gICAgICAgIGlmIChyYW5nZS5sZW5ndGggPT09IDAgJiYgc291cmNlID09PSBfZW1pdHRlcjIuZGVmYXVsdC5zb3VyY2VzLlVTRVIpIHtcbiAgICAgICAgICB2YXIgX3F1aWxsJHNjcm9sbCRkZXNjZW5kID0gX3RoaXMzLnF1aWxsLnNjcm9sbC5kZXNjZW5kYW50KF9saW5rMi5kZWZhdWx0LCByYW5nZS5pbmRleCksXG4gICAgICAgICAgICAgIF9xdWlsbCRzY3JvbGwkZGVzY2VuZDIgPSBfc2xpY2VkVG9BcnJheShfcXVpbGwkc2Nyb2xsJGRlc2NlbmQsIDIpLFxuICAgICAgICAgICAgICBsaW5rID0gX3F1aWxsJHNjcm9sbCRkZXNjZW5kMlswXSxcbiAgICAgICAgICAgICAgb2Zmc2V0ID0gX3F1aWxsJHNjcm9sbCRkZXNjZW5kMlsxXTtcblxuICAgICAgICAgIGlmIChsaW5rICE9IG51bGwpIHtcbiAgICAgICAgICAgIF90aGlzMy5saW5rUmFuZ2UgPSBuZXcgX3NlbGVjdGlvbi5SYW5nZShyYW5nZS5pbmRleCAtIG9mZnNldCwgbGluay5sZW5ndGgoKSk7XG4gICAgICAgICAgICB2YXIgcHJldmlldyA9IF9saW5rMi5kZWZhdWx0LmZvcm1hdHMobGluay5kb21Ob2RlKTtcbiAgICAgICAgICAgIF90aGlzMy5wcmV2aWV3LnRleHRDb250ZW50ID0gcHJldmlldztcbiAgICAgICAgICAgIF90aGlzMy5wcmV2aWV3LnNldEF0dHJpYnV0ZSgnaHJlZicsIHByZXZpZXcpO1xuICAgICAgICAgICAgX3RoaXMzLnNob3coKTtcbiAgICAgICAgICAgIF90aGlzMy5wb3NpdGlvbihfdGhpczMucXVpbGwuZ2V0Qm91bmRzKF90aGlzMy5saW5rUmFuZ2UpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIF90aGlzMy5saW5rUmFuZ2U7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMzLmhpZGUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Nob3cnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgX2dldChTbm93VG9vbHRpcC5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTbm93VG9vbHRpcC5wcm90b3R5cGUpLCAnc2hvdycsIHRoaXMpLmNhbGwodGhpcyk7XG4gICAgICB0aGlzLnJvb3QucmVtb3ZlQXR0cmlidXRlKCdkYXRhLW1vZGUnKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU25vd1Rvb2x0aXA7XG59KF9iYXNlLkJhc2VUb29sdGlwKTtcblxuU25vd1Rvb2x0aXAuVEVNUExBVEUgPSBbJzxhIGNsYXNzPVwicWwtcHJldmlld1wiIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIiB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiYWJvdXQ6YmxhbmtcIj48L2E+JywgJzxpbnB1dCB0eXBlPVwidGV4dFwiIGRhdGEtZm9ybXVsYT1cImU9bWNeMlwiIGRhdGEtbGluaz1cImh0dHBzOi8vcXVpbGxqcy5jb21cIiBkYXRhLXZpZGVvPVwiRW1iZWQgVVJMXCI+JywgJzxhIGNsYXNzPVwicWwtYWN0aW9uXCI+PC9hPicsICc8YSBjbGFzcz1cInFsLXJlbW92ZVwiPjwvYT4nXS5qb2luKCcnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU25vd1RoZW1lO1xuXG4vKioqLyB9KSxcbi8qIDYzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY29yZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpO1xuXG52YXIgX2NvcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29yZSk7XG5cbnZhciBfYWxpZ24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KTtcblxudmFyIF9kaXJlY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM4KTtcblxudmFyIF9pbmRlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY0KTtcblxudmFyIF9ibG9ja3F1b3RlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NSk7XG5cbnZhciBfYmxvY2txdW90ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ibG9ja3F1b3RlKTtcblxudmFyIF9oZWFkZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2KTtcblxudmFyIF9oZWFkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGVhZGVyKTtcblxudmFyIF9saXN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Nyk7XG5cbnZhciBfbGlzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9saXN0KTtcblxudmFyIF9iYWNrZ3JvdW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNyk7XG5cbnZhciBfY29sb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KTtcblxudmFyIF9mb250ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOSk7XG5cbnZhciBfc2l6ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXG52YXIgX2JvbGQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU2KTtcblxudmFyIF9ib2xkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2JvbGQpO1xuXG52YXIgX2l0YWxpYyA9IF9fd2VicGFja19yZXF1aXJlX18oNjgpO1xuXG52YXIgX2l0YWxpYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pdGFsaWMpO1xuXG52YXIgX2xpbmsgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTtcblxudmFyIF9saW5rMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xpbmspO1xuXG52YXIgX3NjcmlwdCA9IF9fd2VicGFja19yZXF1aXJlX18oNjkpO1xuXG52YXIgX3NjcmlwdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zY3JpcHQpO1xuXG52YXIgX3N0cmlrZSA9IF9fd2VicGFja19yZXF1aXJlX18oNzApO1xuXG52YXIgX3N0cmlrZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHJpa2UpO1xuXG52YXIgX3VuZGVybGluZSA9IF9fd2VicGFja19yZXF1aXJlX18oNzEpO1xuXG52YXIgX3VuZGVybGluZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91bmRlcmxpbmUpO1xuXG52YXIgX2ltYWdlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Mik7XG5cbnZhciBfaW1hZ2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW1hZ2UpO1xuXG52YXIgX3ZpZGVvID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Myk7XG5cbnZhciBfdmlkZW8yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmlkZW8pO1xuXG52YXIgX2NvZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcblxudmFyIF9jb2RlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvZGUpO1xuXG52YXIgX2Zvcm11bGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc0KTtcblxudmFyIF9mb3JtdWxhMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Zvcm11bGEpO1xuXG52YXIgX3N5bnRheCA9IF9fd2VicGFja19yZXF1aXJlX18oNzUpO1xuXG52YXIgX3N5bnRheDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zeW50YXgpO1xuXG52YXIgX3Rvb2xiYXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU3KTtcblxudmFyIF90b29sYmFyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Rvb2xiYXIpO1xuXG52YXIgX2ljb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSk7XG5cbnZhciBfaWNvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaWNvbnMpO1xuXG52YXIgX3BpY2tlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpO1xuXG52YXIgX3BpY2tlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9waWNrZXIpO1xuXG52YXIgX2NvbG9yUGlja2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1OSk7XG5cbnZhciBfY29sb3JQaWNrZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29sb3JQaWNrZXIpO1xuXG52YXIgX2ljb25QaWNrZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYwKTtcblxudmFyIF9pY29uUGlja2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ljb25QaWNrZXIpO1xuXG52YXIgX3Rvb2x0aXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYxKTtcblxudmFyIF90b29sdGlwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Rvb2x0aXApO1xuXG52YXIgX2J1YmJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTA4KTtcblxudmFyIF9idWJibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYnViYmxlKTtcblxudmFyIF9zbm93ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Mik7XG5cbnZhciBfc25vdzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zbm93KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuX2NvcmUyLmRlZmF1bHQucmVnaXN0ZXIoe1xuICAnYXR0cmlidXRvcnMvYXR0cmlidXRlL2RpcmVjdGlvbic6IF9kaXJlY3Rpb24uRGlyZWN0aW9uQXR0cmlidXRlLFxuXG4gICdhdHRyaWJ1dG9ycy9jbGFzcy9hbGlnbic6IF9hbGlnbi5BbGlnbkNsYXNzLFxuICAnYXR0cmlidXRvcnMvY2xhc3MvYmFja2dyb3VuZCc6IF9iYWNrZ3JvdW5kLkJhY2tncm91bmRDbGFzcyxcbiAgJ2F0dHJpYnV0b3JzL2NsYXNzL2NvbG9yJzogX2NvbG9yLkNvbG9yQ2xhc3MsXG4gICdhdHRyaWJ1dG9ycy9jbGFzcy9kaXJlY3Rpb24nOiBfZGlyZWN0aW9uLkRpcmVjdGlvbkNsYXNzLFxuICAnYXR0cmlidXRvcnMvY2xhc3MvZm9udCc6IF9mb250LkZvbnRDbGFzcyxcbiAgJ2F0dHJpYnV0b3JzL2NsYXNzL3NpemUnOiBfc2l6ZS5TaXplQ2xhc3MsXG5cbiAgJ2F0dHJpYnV0b3JzL3N0eWxlL2FsaWduJzogX2FsaWduLkFsaWduU3R5bGUsXG4gICdhdHRyaWJ1dG9ycy9zdHlsZS9iYWNrZ3JvdW5kJzogX2JhY2tncm91bmQuQmFja2dyb3VuZFN0eWxlLFxuICAnYXR0cmlidXRvcnMvc3R5bGUvY29sb3InOiBfY29sb3IuQ29sb3JTdHlsZSxcbiAgJ2F0dHJpYnV0b3JzL3N0eWxlL2RpcmVjdGlvbic6IF9kaXJlY3Rpb24uRGlyZWN0aW9uU3R5bGUsXG4gICdhdHRyaWJ1dG9ycy9zdHlsZS9mb250JzogX2ZvbnQuRm9udFN0eWxlLFxuICAnYXR0cmlidXRvcnMvc3R5bGUvc2l6ZSc6IF9zaXplLlNpemVTdHlsZVxufSwgdHJ1ZSk7XG5cbl9jb3JlMi5kZWZhdWx0LnJlZ2lzdGVyKHtcbiAgJ2Zvcm1hdHMvYWxpZ24nOiBfYWxpZ24uQWxpZ25DbGFzcyxcbiAgJ2Zvcm1hdHMvZGlyZWN0aW9uJzogX2RpcmVjdGlvbi5EaXJlY3Rpb25DbGFzcyxcbiAgJ2Zvcm1hdHMvaW5kZW50JzogX2luZGVudC5JbmRlbnRDbGFzcyxcblxuICAnZm9ybWF0cy9iYWNrZ3JvdW5kJzogX2JhY2tncm91bmQuQmFja2dyb3VuZFN0eWxlLFxuICAnZm9ybWF0cy9jb2xvcic6IF9jb2xvci5Db2xvclN0eWxlLFxuICAnZm9ybWF0cy9mb250JzogX2ZvbnQuRm9udENsYXNzLFxuICAnZm9ybWF0cy9zaXplJzogX3NpemUuU2l6ZUNsYXNzLFxuXG4gICdmb3JtYXRzL2Jsb2NrcXVvdGUnOiBfYmxvY2txdW90ZTIuZGVmYXVsdCxcbiAgJ2Zvcm1hdHMvY29kZS1ibG9jayc6IF9jb2RlMi5kZWZhdWx0LFxuICAnZm9ybWF0cy9oZWFkZXInOiBfaGVhZGVyMi5kZWZhdWx0LFxuICAnZm9ybWF0cy9saXN0JzogX2xpc3QyLmRlZmF1bHQsXG5cbiAgJ2Zvcm1hdHMvYm9sZCc6IF9ib2xkMi5kZWZhdWx0LFxuICAnZm9ybWF0cy9jb2RlJzogX2NvZGUuQ29kZSxcbiAgJ2Zvcm1hdHMvaXRhbGljJzogX2l0YWxpYzIuZGVmYXVsdCxcbiAgJ2Zvcm1hdHMvbGluayc6IF9saW5rMi5kZWZhdWx0LFxuICAnZm9ybWF0cy9zY3JpcHQnOiBfc2NyaXB0Mi5kZWZhdWx0LFxuICAnZm9ybWF0cy9zdHJpa2UnOiBfc3RyaWtlMi5kZWZhdWx0LFxuICAnZm9ybWF0cy91bmRlcmxpbmUnOiBfdW5kZXJsaW5lMi5kZWZhdWx0LFxuXG4gICdmb3JtYXRzL2ltYWdlJzogX2ltYWdlMi5kZWZhdWx0LFxuICAnZm9ybWF0cy92aWRlbyc6IF92aWRlbzIuZGVmYXVsdCxcblxuICAnZm9ybWF0cy9saXN0L2l0ZW0nOiBfbGlzdC5MaXN0SXRlbSxcblxuICAnbW9kdWxlcy9mb3JtdWxhJzogX2Zvcm11bGEyLmRlZmF1bHQsXG4gICdtb2R1bGVzL3N5bnRheCc6IF9zeW50YXgyLmRlZmF1bHQsXG4gICdtb2R1bGVzL3Rvb2xiYXInOiBfdG9vbGJhcjIuZGVmYXVsdCxcblxuICAndGhlbWVzL2J1YmJsZSc6IF9idWJibGUyLmRlZmF1bHQsXG4gICd0aGVtZXMvc25vdyc6IF9zbm93Mi5kZWZhdWx0LFxuXG4gICd1aS9pY29ucyc6IF9pY29uczIuZGVmYXVsdCxcbiAgJ3VpL3BpY2tlcic6IF9waWNrZXIyLmRlZmF1bHQsXG4gICd1aS9pY29uLXBpY2tlcic6IF9pY29uUGlja2VyMi5kZWZhdWx0LFxuICAndWkvY29sb3ItcGlja2VyJzogX2NvbG9yUGlja2VyMi5kZWZhdWx0LFxuICAndWkvdG9vbHRpcCc6IF90b29sdGlwMi5kZWZhdWx0XG59LCB0cnVlKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2NvcmUyLmRlZmF1bHQ7XG5cbi8qKiovIH0pLFxuLyogNjQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuSW5kZW50Q2xhc3MgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9wYXJjaG1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3BhcmNobWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJjaG1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBJZGVudEF0dHJpYnV0b3IgPSBmdW5jdGlvbiAoX1BhcmNobWVudCRBdHRyaWJ1dG9yKSB7XG4gIF9pbmhlcml0cyhJZGVudEF0dHJpYnV0b3IsIF9QYXJjaG1lbnQkQXR0cmlidXRvcik7XG5cbiAgZnVuY3Rpb24gSWRlbnRBdHRyaWJ1dG9yKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJZGVudEF0dHJpYnV0b3IpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChJZGVudEF0dHJpYnV0b3IuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJZGVudEF0dHJpYnV0b3IpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhJZGVudEF0dHJpYnV0b3IsIFt7XG4gICAga2V5OiAnYWRkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkKG5vZGUsIHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT09ICcrMScgfHwgdmFsdWUgPT09ICctMScpIHtcbiAgICAgICAgdmFyIGluZGVudCA9IHRoaXMudmFsdWUobm9kZSkgfHwgMDtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZSA9PT0gJysxJyA/IGluZGVudCArIDEgOiBpbmRlbnQgLSAxO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09PSAwKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKG5vZGUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBfZ2V0KElkZW50QXR0cmlidXRvci5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJZGVudEF0dHJpYnV0b3IucHJvdG90eXBlKSwgJ2FkZCcsIHRoaXMpLmNhbGwodGhpcywgbm9kZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NhbkFkZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbkFkZChub2RlLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIF9nZXQoSWRlbnRBdHRyaWJ1dG9yLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKElkZW50QXR0cmlidXRvci5wcm90b3R5cGUpLCAnY2FuQWRkJywgdGhpcykuY2FsbCh0aGlzLCBub2RlLCB2YWx1ZSkgfHwgX2dldChJZGVudEF0dHJpYnV0b3IucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSWRlbnRBdHRyaWJ1dG9yLnByb3RvdHlwZSksICdjYW5BZGQnLCB0aGlzKS5jYWxsKHRoaXMsIG5vZGUsIHBhcnNlSW50KHZhbHVlKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShub2RlKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQoX2dldChJZGVudEF0dHJpYnV0b3IucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSWRlbnRBdHRyaWJ1dG9yLnByb3RvdHlwZSksICd2YWx1ZScsIHRoaXMpLmNhbGwodGhpcywgbm9kZSkpIHx8IHVuZGVmaW5lZDsgLy8gRG9uJ3QgcmV0dXJuIE5hTlxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBJZGVudEF0dHJpYnV0b3I7XG59KF9wYXJjaG1lbnQyLmRlZmF1bHQuQXR0cmlidXRvci5DbGFzcyk7XG5cbnZhciBJbmRlbnRDbGFzcyA9IG5ldyBJZGVudEF0dHJpYnV0b3IoJ2luZGVudCcsICdxbC1pbmRlbnQnLCB7XG4gIHNjb3BlOiBfcGFyY2htZW50Mi5kZWZhdWx0LlNjb3BlLkJMT0NLLFxuICB3aGl0ZWxpc3Q6IFsxLCAyLCAzLCA0LCA1LCA2LCA3LCA4XVxufSk7XG5cbmV4cG9ydHMuSW5kZW50Q2xhc3MgPSBJbmRlbnRDbGFzcztcblxuLyoqKi8gfSksXG4vKiA2NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2Jsb2NrID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxudmFyIF9ibG9jazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ibG9jayk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEJsb2NrcXVvdGUgPSBmdW5jdGlvbiAoX0Jsb2NrKSB7XG4gIF9pbmhlcml0cyhCbG9ja3F1b3RlLCBfQmxvY2spO1xuXG4gIGZ1bmN0aW9uIEJsb2NrcXVvdGUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJsb2NrcXVvdGUpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChCbG9ja3F1b3RlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmxvY2txdW90ZSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgcmV0dXJuIEJsb2NrcXVvdGU7XG59KF9ibG9jazIuZGVmYXVsdCk7XG5cbkJsb2NrcXVvdGUuYmxvdE5hbWUgPSAnYmxvY2txdW90ZSc7XG5CbG9ja3F1b3RlLnRhZ05hbWUgPSAnYmxvY2txdW90ZSc7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEJsb2NrcXVvdGU7XG5cbi8qKiovIH0pLFxuLyogNjYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9ibG9jayA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfYmxvY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYmxvY2spO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBIZWFkZXIgPSBmdW5jdGlvbiAoX0Jsb2NrKSB7XG4gIF9pbmhlcml0cyhIZWFkZXIsIF9CbG9jayk7XG5cbiAgZnVuY3Rpb24gSGVhZGVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIZWFkZXIpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChIZWFkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihIZWFkZXIpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhIZWFkZXIsIG51bGwsIFt7XG4gICAga2V5OiAnZm9ybWF0cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdHMoZG9tTm9kZSkge1xuICAgICAgcmV0dXJuIHRoaXMudGFnTmFtZS5pbmRleE9mKGRvbU5vZGUudGFnTmFtZSkgKyAxO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBIZWFkZXI7XG59KF9ibG9jazIuZGVmYXVsdCk7XG5cbkhlYWRlci5ibG90TmFtZSA9ICdoZWFkZXInO1xuSGVhZGVyLnRhZ05hbWUgPSBbJ0gxJywgJ0gyJywgJ0gzJywgJ0g0JywgJ0g1JywgJ0g2J107XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEhlYWRlcjtcblxuLyoqKi8gfSksXG4vKiA2NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5MaXN0SXRlbSA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbnZhciBfYmxvY2sgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG52YXIgX2Jsb2NrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Jsb2NrKTtcblxudmFyIF9jb250YWluZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1KTtcblxudmFyIF9jb250YWluZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29udGFpbmVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgTGlzdEl0ZW0gPSBmdW5jdGlvbiAoX0Jsb2NrKSB7XG4gIF9pbmhlcml0cyhMaXN0SXRlbSwgX0Jsb2NrKTtcblxuICBmdW5jdGlvbiBMaXN0SXRlbSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGlzdEl0ZW0pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChMaXN0SXRlbS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExpc3RJdGVtKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTGlzdEl0ZW0sIFt7XG4gICAga2V5OiAnZm9ybWF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0KG5hbWUsIHZhbHVlKSB7XG4gICAgICBpZiAobmFtZSA9PT0gTGlzdC5ibG90TmFtZSAmJiAhdmFsdWUpIHtcbiAgICAgICAgdGhpcy5yZXBsYWNlV2l0aChfcGFyY2htZW50Mi5kZWZhdWx0LmNyZWF0ZSh0aGlzLnN0YXRpY3Muc2NvcGUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9nZXQoTGlzdEl0ZW0ucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTGlzdEl0ZW0ucHJvdG90eXBlKSwgJ2Zvcm1hdCcsIHRoaXMpLmNhbGwodGhpcywgbmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbW92ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIGlmICh0aGlzLnByZXYgPT0gbnVsbCAmJiB0aGlzLm5leHQgPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnBhcmVudC5yZW1vdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9nZXQoTGlzdEl0ZW0ucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTGlzdEl0ZW0ucHJvdG90eXBlKSwgJ3JlbW92ZScsIHRoaXMpLmNhbGwodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVwbGFjZVdpdGgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXBsYWNlV2l0aChuYW1lLCB2YWx1ZSkge1xuICAgICAgdGhpcy5wYXJlbnQuaXNvbGF0ZSh0aGlzLm9mZnNldCh0aGlzLnBhcmVudCksIHRoaXMubGVuZ3RoKCkpO1xuICAgICAgaWYgKG5hbWUgPT09IHRoaXMucGFyZW50LnN0YXRpY3MuYmxvdE5hbWUpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQucmVwbGFjZVdpdGgobmFtZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGFyZW50LnVud3JhcCgpO1xuICAgICAgICByZXR1cm4gX2dldChMaXN0SXRlbS5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMaXN0SXRlbS5wcm90b3R5cGUpLCAncmVwbGFjZVdpdGgnLCB0aGlzKS5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogJ2Zvcm1hdHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRzKGRvbU5vZGUpIHtcbiAgICAgIHJldHVybiBkb21Ob2RlLnRhZ05hbWUgPT09IHRoaXMudGFnTmFtZSA/IHVuZGVmaW5lZCA6IF9nZXQoTGlzdEl0ZW0uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMaXN0SXRlbSksICdmb3JtYXRzJywgdGhpcykuY2FsbCh0aGlzLCBkb21Ob2RlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTGlzdEl0ZW07XG59KF9ibG9jazIuZGVmYXVsdCk7XG5cbkxpc3RJdGVtLmJsb3ROYW1lID0gJ2xpc3QtaXRlbSc7XG5MaXN0SXRlbS50YWdOYW1lID0gJ0xJJztcblxudmFyIExpc3QgPSBmdW5jdGlvbiAoX0NvbnRhaW5lcikge1xuICBfaW5oZXJpdHMoTGlzdCwgX0NvbnRhaW5lcik7XG5cbiAgX2NyZWF0ZUNsYXNzKExpc3QsIG51bGwsIFt7XG4gICAga2V5OiAnY3JlYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlKHZhbHVlKSB7XG4gICAgICB2YXIgdGFnTmFtZSA9IHZhbHVlID09PSAnb3JkZXJlZCcgPyAnT0wnIDogJ1VMJztcbiAgICAgIHZhciBub2RlID0gX2dldChMaXN0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTGlzdCksICdjcmVhdGUnLCB0aGlzKS5jYWxsKHRoaXMsIHRhZ05hbWUpO1xuICAgICAgaWYgKHZhbHVlID09PSAnY2hlY2tlZCcgfHwgdmFsdWUgPT09ICd1bmNoZWNrZWQnKSB7XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdkYXRhLWNoZWNrZWQnLCB2YWx1ZSA9PT0gJ2NoZWNrZWQnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Zvcm1hdHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRzKGRvbU5vZGUpIHtcbiAgICAgIGlmIChkb21Ob2RlLnRhZ05hbWUgPT09ICdPTCcpIHJldHVybiAnb3JkZXJlZCc7XG4gICAgICBpZiAoZG9tTm9kZS50YWdOYW1lID09PSAnVUwnKSB7XG4gICAgICAgIGlmIChkb21Ob2RlLmhhc0F0dHJpYnV0ZSgnZGF0YS1jaGVja2VkJykpIHtcbiAgICAgICAgICByZXR1cm4gZG9tTm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtY2hlY2tlZCcpID09PSAndHJ1ZScgPyAnY2hlY2tlZCcgOiAndW5jaGVja2VkJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJ2J1bGxldCc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XSk7XG5cbiAgZnVuY3Rpb24gTGlzdChkb21Ob2RlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpc3QpO1xuXG4gICAgdmFyIF90aGlzMiA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChMaXN0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTGlzdCkpLmNhbGwodGhpcywgZG9tTm9kZSkpO1xuXG4gICAgdmFyIGxpc3RFdmVudEhhbmRsZXIgPSBmdW5jdGlvbiBsaXN0RXZlbnRIYW5kbGVyKGUpIHtcbiAgICAgIGlmIChlLnRhcmdldC5wYXJlbnROb2RlICE9PSBkb21Ob2RlKSByZXR1cm47XG4gICAgICB2YXIgZm9ybWF0ID0gX3RoaXMyLnN0YXRpY3MuZm9ybWF0cyhkb21Ob2RlKTtcbiAgICAgIHZhciBibG90ID0gX3BhcmNobWVudDIuZGVmYXVsdC5maW5kKGUudGFyZ2V0KTtcbiAgICAgIGlmIChmb3JtYXQgPT09ICdjaGVja2VkJykge1xuICAgICAgICBibG90LmZvcm1hdCgnbGlzdCcsICd1bmNoZWNrZWQnKTtcbiAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAndW5jaGVja2VkJykge1xuICAgICAgICBibG90LmZvcm1hdCgnbGlzdCcsICdjaGVja2VkJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGRvbU5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGxpc3RFdmVudEhhbmRsZXIpO1xuICAgIGRvbU5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgbGlzdEV2ZW50SGFuZGxlcik7XG4gICAgcmV0dXJuIF90aGlzMjtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhMaXN0LCBbe1xuICAgIGtleTogJ2Zvcm1hdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdChuYW1lLCB2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnRhaWwuZm9ybWF0KG5hbWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0cygpIHtcbiAgICAgIC8vIFdlIGRvbid0IGluaGVyaXQgZnJvbSBGb3JtYXRCbG90XG4gICAgICByZXR1cm4gX2RlZmluZVByb3BlcnR5KHt9LCB0aGlzLnN0YXRpY3MuYmxvdE5hbWUsIHRoaXMuc3RhdGljcy5mb3JtYXRzKHRoaXMuZG9tTm9kZSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2luc2VydEJlZm9yZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc2VydEJlZm9yZShibG90LCByZWYpIHtcbiAgICAgIGlmIChibG90IGluc3RhbmNlb2YgTGlzdEl0ZW0pIHtcbiAgICAgICAgX2dldChMaXN0LnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExpc3QucHJvdG90eXBlKSwgJ2luc2VydEJlZm9yZScsIHRoaXMpLmNhbGwodGhpcywgYmxvdCwgcmVmKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBpbmRleCA9IHJlZiA9PSBudWxsID8gdGhpcy5sZW5ndGgoKSA6IHJlZi5vZmZzZXQodGhpcyk7XG4gICAgICAgIHZhciBhZnRlciA9IHRoaXMuc3BsaXQoaW5kZXgpO1xuICAgICAgICBhZnRlci5wYXJlbnQuaW5zZXJ0QmVmb3JlKGJsb3QsIGFmdGVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdvcHRpbWl6ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9wdGltaXplKGNvbnRleHQpIHtcbiAgICAgIF9nZXQoTGlzdC5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMaXN0LnByb3RvdHlwZSksICdvcHRpbWl6ZScsIHRoaXMpLmNhbGwodGhpcywgY29udGV4dCk7XG4gICAgICB2YXIgbmV4dCA9IHRoaXMubmV4dDtcbiAgICAgIGlmIChuZXh0ICE9IG51bGwgJiYgbmV4dC5wcmV2ID09PSB0aGlzICYmIG5leHQuc3RhdGljcy5ibG90TmFtZSA9PT0gdGhpcy5zdGF0aWNzLmJsb3ROYW1lICYmIG5leHQuZG9tTm9kZS50YWdOYW1lID09PSB0aGlzLmRvbU5vZGUudGFnTmFtZSAmJiBuZXh0LmRvbU5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWNoZWNrZWQnKSA9PT0gdGhpcy5kb21Ob2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1jaGVja2VkJykpIHtcbiAgICAgICAgbmV4dC5tb3ZlQ2hpbGRyZW4odGhpcyk7XG4gICAgICAgIG5leHQucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVwbGFjZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlcGxhY2UodGFyZ2V0KSB7XG4gICAgICBpZiAodGFyZ2V0LnN0YXRpY3MuYmxvdE5hbWUgIT09IHRoaXMuc3RhdGljcy5ibG90TmFtZSkge1xuICAgICAgICB2YXIgaXRlbSA9IF9wYXJjaG1lbnQyLmRlZmF1bHQuY3JlYXRlKHRoaXMuc3RhdGljcy5kZWZhdWx0Q2hpbGQpO1xuICAgICAgICB0YXJnZXQubW92ZUNoaWxkcmVuKGl0ZW0pO1xuICAgICAgICB0aGlzLmFwcGVuZENoaWxkKGl0ZW0pO1xuICAgICAgfVxuICAgICAgX2dldChMaXN0LnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExpc3QucHJvdG90eXBlKSwgJ3JlcGxhY2UnLCB0aGlzKS5jYWxsKHRoaXMsIHRhcmdldCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIExpc3Q7XG59KF9jb250YWluZXIyLmRlZmF1bHQpO1xuXG5MaXN0LmJsb3ROYW1lID0gJ2xpc3QnO1xuTGlzdC5zY29wZSA9IF9wYXJjaG1lbnQyLmRlZmF1bHQuU2NvcGUuQkxPQ0tfQkxPVDtcbkxpc3QudGFnTmFtZSA9IFsnT0wnLCAnVUwnXTtcbkxpc3QuZGVmYXVsdENoaWxkID0gJ2xpc3QtaXRlbSc7XG5MaXN0LmFsbG93ZWRDaGlsZHJlbiA9IFtMaXN0SXRlbV07XG5cbmV4cG9ydHMuTGlzdEl0ZW0gPSBMaXN0SXRlbTtcbmV4cG9ydHMuZGVmYXVsdCA9IExpc3Q7XG5cbi8qKiovIH0pLFxuLyogNjggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9ib2xkID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Nik7XG5cbnZhciBfYm9sZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ib2xkKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgSXRhbGljID0gZnVuY3Rpb24gKF9Cb2xkKSB7XG4gIF9pbmhlcml0cyhJdGFsaWMsIF9Cb2xkKTtcblxuICBmdW5jdGlvbiBJdGFsaWMoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEl0YWxpYyk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEl0YWxpYy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEl0YWxpYykpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgcmV0dXJuIEl0YWxpYztcbn0oX2JvbGQyLmRlZmF1bHQpO1xuXG5JdGFsaWMuYmxvdE5hbWUgPSAnaXRhbGljJztcbkl0YWxpYy50YWdOYW1lID0gWydFTScsICdJJ107XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEl0YWxpYztcblxuLyoqKi8gfSksXG4vKiA2OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfaW5saW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxudmFyIF9pbmxpbmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5saW5lKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgU2NyaXB0ID0gZnVuY3Rpb24gKF9JbmxpbmUpIHtcbiAgX2luaGVyaXRzKFNjcmlwdCwgX0lubGluZSk7XG5cbiAgZnVuY3Rpb24gU2NyaXB0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTY3JpcHQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTY3JpcHQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTY3JpcHQpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTY3JpcHQsIG51bGwsIFt7XG4gICAga2V5OiAnY3JlYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT09ICdzdXBlcicpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N1cCcpO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJ3N1YicpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N1YicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIF9nZXQoU2NyaXB0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2NyaXB0KSwgJ2NyZWF0ZScsIHRoaXMpLmNhbGwodGhpcywgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Zvcm1hdHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRzKGRvbU5vZGUpIHtcbiAgICAgIGlmIChkb21Ob2RlLnRhZ05hbWUgPT09ICdTVUInKSByZXR1cm4gJ3N1Yic7XG4gICAgICBpZiAoZG9tTm9kZS50YWdOYW1lID09PSAnU1VQJykgcmV0dXJuICdzdXBlcic7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTY3JpcHQ7XG59KF9pbmxpbmUyLmRlZmF1bHQpO1xuXG5TY3JpcHQuYmxvdE5hbWUgPSAnc2NyaXB0JztcblNjcmlwdC50YWdOYW1lID0gWydTVUInLCAnU1VQJ107XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFNjcmlwdDtcblxuLyoqKi8gfSksXG4vKiA3MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2lubGluZSA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cbnZhciBfaW5saW5lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lubGluZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFN0cmlrZSA9IGZ1bmN0aW9uIChfSW5saW5lKSB7XG4gIF9pbmhlcml0cyhTdHJpa2UsIF9JbmxpbmUpO1xuXG4gIGZ1bmN0aW9uIFN0cmlrZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RyaWtlKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU3RyaWtlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU3RyaWtlKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICByZXR1cm4gU3RyaWtlO1xufShfaW5saW5lMi5kZWZhdWx0KTtcblxuU3RyaWtlLmJsb3ROYW1lID0gJ3N0cmlrZSc7XG5TdHJpa2UudGFnTmFtZSA9ICdTJztcblxuZXhwb3J0cy5kZWZhdWx0ID0gU3RyaWtlO1xuXG4vKioqLyB9KSxcbi8qIDcxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfaW5saW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxudmFyIF9pbmxpbmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5saW5lKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgVW5kZXJsaW5lID0gZnVuY3Rpb24gKF9JbmxpbmUpIHtcbiAgX2luaGVyaXRzKFVuZGVybGluZSwgX0lubGluZSk7XG5cbiAgZnVuY3Rpb24gVW5kZXJsaW5lKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVbmRlcmxpbmUpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChVbmRlcmxpbmUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihVbmRlcmxpbmUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBVbmRlcmxpbmU7XG59KF9pbmxpbmUyLmRlZmF1bHQpO1xuXG5VbmRlcmxpbmUuYmxvdE5hbWUgPSAndW5kZXJsaW5lJztcblVuZGVybGluZS50YWdOYW1lID0gJ1UnO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBVbmRlcmxpbmU7XG5cbi8qKiovIH0pLFxuLyogNzIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbnZhciBfbGluayA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBBVFRSSUJVVEVTID0gWydhbHQnLCAnaGVpZ2h0JywgJ3dpZHRoJ107XG5cbnZhciBJbWFnZSA9IGZ1bmN0aW9uIChfUGFyY2htZW50JEVtYmVkKSB7XG4gIF9pbmhlcml0cyhJbWFnZSwgX1BhcmNobWVudCRFbWJlZCk7XG5cbiAgZnVuY3Rpb24gSW1hZ2UoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEltYWdlKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoSW1hZ2UuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJbWFnZSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEltYWdlLCBbe1xuICAgIGtleTogJ2Zvcm1hdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdChuYW1lLCB2YWx1ZSkge1xuICAgICAgaWYgKEFUVFJJQlVURVMuaW5kZXhPZihuYW1lKSA+IC0xKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHRoaXMuZG9tTm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZG9tTm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9nZXQoSW1hZ2UucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSW1hZ2UucHJvdG90eXBlKSwgJ2Zvcm1hdCcsIHRoaXMpLmNhbGwodGhpcywgbmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiAnY3JlYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlKHZhbHVlKSB7XG4gICAgICB2YXIgbm9kZSA9IF9nZXQoSW1hZ2UuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJbWFnZSksICdjcmVhdGUnLCB0aGlzKS5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdzcmMnLCB0aGlzLnNhbml0aXplKHZhbHVlKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0cyhkb21Ob2RlKSB7XG4gICAgICByZXR1cm4gQVRUUklCVVRFUy5yZWR1Y2UoZnVuY3Rpb24gKGZvcm1hdHMsIGF0dHJpYnV0ZSkge1xuICAgICAgICBpZiAoZG9tTm9kZS5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlKSkge1xuICAgICAgICAgIGZvcm1hdHNbYXR0cmlidXRlXSA9IGRvbU5vZGUuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvcm1hdHM7XG4gICAgICB9LCB7fSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbWF0Y2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtYXRjaCh1cmwpIHtcbiAgICAgIHJldHVybiAoL1xcLihqcGU/Z3xnaWZ8cG5nKSQvLnRlc3QodXJsKSB8fCAvXmRhdGE6aW1hZ2VcXC8uKztiYXNlNjQvLnRlc3QodXJsKVxuICAgICAgKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzYW5pdGl6ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNhbml0aXplKHVybCkge1xuICAgICAgcmV0dXJuICgwLCBfbGluay5zYW5pdGl6ZSkodXJsLCBbJ2h0dHAnLCAnaHR0cHMnLCAnZGF0YSddKSA/IHVybCA6ICcvLzowJztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd2YWx1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKGRvbU5vZGUpIHtcbiAgICAgIHJldHVybiBkb21Ob2RlLmdldEF0dHJpYnV0ZSgnc3JjJyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEltYWdlO1xufShfcGFyY2htZW50Mi5kZWZhdWx0LkVtYmVkKTtcblxuSW1hZ2UuYmxvdE5hbWUgPSAnaW1hZ2UnO1xuSW1hZ2UudGFnTmFtZSA9ICdJTUcnO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBJbWFnZTtcblxuLyoqKi8gfSksXG4vKiA3MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfYmxvY2sgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG52YXIgX2xpbmsgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTtcblxudmFyIF9saW5rMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xpbmspO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBBVFRSSUJVVEVTID0gWydoZWlnaHQnLCAnd2lkdGgnXTtcblxudmFyIFZpZGVvID0gZnVuY3Rpb24gKF9CbG9ja0VtYmVkKSB7XG4gIF9pbmhlcml0cyhWaWRlbywgX0Jsb2NrRW1iZWQpO1xuXG4gIGZ1bmN0aW9uIFZpZGVvKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWaWRlbyk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFZpZGVvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVmlkZW8pKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhWaWRlbywgW3tcbiAgICBrZXk6ICdmb3JtYXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXQobmFtZSwgdmFsdWUpIHtcbiAgICAgIGlmIChBVFRSSUJVVEVTLmluZGV4T2YobmFtZSkgPiAtMSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICB0aGlzLmRvbU5vZGUuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmRvbU5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfZ2V0KFZpZGVvLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFZpZGVvLnByb3RvdHlwZSksICdmb3JtYXQnLCB0aGlzKS5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogJ2NyZWF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgdmFyIG5vZGUgPSBfZ2V0KFZpZGVvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVmlkZW8pLCAnY3JlYXRlJywgdGhpcykuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSgnZnJhbWVib3JkZXInLCAnMCcpO1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2FsbG93ZnVsbHNjcmVlbicsIHRydWUpO1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3NyYycsIHRoaXMuc2FuaXRpemUodmFsdWUpKTtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Zvcm1hdHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRzKGRvbU5vZGUpIHtcbiAgICAgIHJldHVybiBBVFRSSUJVVEVTLnJlZHVjZShmdW5jdGlvbiAoZm9ybWF0cywgYXR0cmlidXRlKSB7XG4gICAgICAgIGlmIChkb21Ob2RlLmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGUpKSB7XG4gICAgICAgICAgZm9ybWF0c1thdHRyaWJ1dGVdID0gZG9tTm9kZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9ybWF0cztcbiAgICAgIH0sIHt9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzYW5pdGl6ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNhbml0aXplKHVybCkge1xuICAgICAgcmV0dXJuIF9saW5rMi5kZWZhdWx0LnNhbml0aXplKHVybCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShkb21Ob2RlKSB7XG4gICAgICByZXR1cm4gZG9tTm9kZS5nZXRBdHRyaWJ1dGUoJ3NyYycpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBWaWRlbztcbn0oX2Jsb2NrLkJsb2NrRW1iZWQpO1xuXG5WaWRlby5ibG90TmFtZSA9ICd2aWRlbyc7XG5WaWRlby5jbGFzc05hbWUgPSAncWwtdmlkZW8nO1xuVmlkZW8udGFnTmFtZSA9ICdJRlJBTUUnO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBWaWRlbztcblxuLyoqKi8gfSksXG4vKiA3NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5Gb3JtdWxhQmxvdCA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX2VtYmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNSk7XG5cbnZhciBfZW1iZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZW1iZWQpO1xuXG52YXIgX3F1aWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxudmFyIF9xdWlsbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWlsbCk7XG5cbnZhciBfbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblxudmFyIF9tb2R1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbW9kdWxlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgRm9ybXVsYUJsb3QgPSBmdW5jdGlvbiAoX0VtYmVkKSB7XG4gIF9pbmhlcml0cyhGb3JtdWxhQmxvdCwgX0VtYmVkKTtcblxuICBmdW5jdGlvbiBGb3JtdWxhQmxvdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRm9ybXVsYUJsb3QpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChGb3JtdWxhQmxvdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEZvcm11bGFCbG90KSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRm9ybXVsYUJsb3QsIG51bGwsIFt7XG4gICAga2V5OiAnY3JlYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlKHZhbHVlKSB7XG4gICAgICB2YXIgbm9kZSA9IF9nZXQoRm9ybXVsYUJsb3QuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihGb3JtdWxhQmxvdCksICdjcmVhdGUnLCB0aGlzKS5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHdpbmRvdy5rYXRleC5yZW5kZXIodmFsdWUsIG5vZGUsIHtcbiAgICAgICAgICB0aHJvd09uRXJyb3I6IGZhbHNlLFxuICAgICAgICAgIGVycm9yQ29sb3I6ICcjZjAwJ1xuICAgICAgICB9KTtcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd2YWx1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKGRvbU5vZGUpIHtcbiAgICAgIHJldHVybiBkb21Ob2RlLmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBGb3JtdWxhQmxvdDtcbn0oX2VtYmVkMi5kZWZhdWx0KTtcblxuRm9ybXVsYUJsb3QuYmxvdE5hbWUgPSAnZm9ybXVsYSc7XG5Gb3JtdWxhQmxvdC5jbGFzc05hbWUgPSAncWwtZm9ybXVsYSc7XG5Gb3JtdWxhQmxvdC50YWdOYW1lID0gJ1NQQU4nO1xuXG52YXIgRm9ybXVsYSA9IGZ1bmN0aW9uIChfTW9kdWxlKSB7XG4gIF9pbmhlcml0cyhGb3JtdWxhLCBfTW9kdWxlKTtcblxuICBfY3JlYXRlQ2xhc3MoRm9ybXVsYSwgbnVsbCwgW3tcbiAgICBrZXk6ICdyZWdpc3RlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyKCkge1xuICAgICAgX3F1aWxsMi5kZWZhdWx0LnJlZ2lzdGVyKEZvcm11bGFCbG90LCB0cnVlKTtcbiAgICB9XG4gIH1dKTtcblxuICBmdW5jdGlvbiBGb3JtdWxhKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGb3JtdWxhKTtcblxuICAgIHZhciBfdGhpczIgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRm9ybXVsYS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEZvcm11bGEpKS5jYWxsKHRoaXMpKTtcblxuICAgIGlmICh3aW5kb3cua2F0ZXggPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3JtdWxhIG1vZHVsZSByZXF1aXJlcyBLYVRlWC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIF90aGlzMjtcbiAgfVxuXG4gIHJldHVybiBGb3JtdWxhO1xufShfbW9kdWxlMi5kZWZhdWx0KTtcblxuZXhwb3J0cy5Gb3JtdWxhQmxvdCA9IEZvcm11bGFCbG90O1xuZXhwb3J0cy5kZWZhdWx0ID0gRm9ybXVsYTtcblxuLyoqKi8gfSksXG4vKiA3NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5Db2RlVG9rZW4gPSBleHBvcnRzLkNvZGVCbG9jayA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX3BhcmNobWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcGFyY2htZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmNobWVudCk7XG5cbnZhciBfcXVpbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG52YXIgX3F1aWxsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1aWxsKTtcblxudmFyIF9tb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXG52YXIgX21vZHVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tb2R1bGUpO1xuXG52YXIgX2NvZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcblxudmFyIF9jb2RlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvZGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTeW50YXhDb2RlQmxvY2sgPSBmdW5jdGlvbiAoX0NvZGVCbG9jaykge1xuICBfaW5oZXJpdHMoU3ludGF4Q29kZUJsb2NrLCBfQ29kZUJsb2NrKTtcblxuICBmdW5jdGlvbiBTeW50YXhDb2RlQmxvY2soKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN5bnRheENvZGVCbG9jayk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFN5bnRheENvZGVCbG9jay5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFN5bnRheENvZGVCbG9jaykpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFN5bnRheENvZGVCbG9jaywgW3tcbiAgICBrZXk6ICdyZXBsYWNlV2l0aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlcGxhY2VXaXRoKGJsb2NrKSB7XG4gICAgICB0aGlzLmRvbU5vZGUudGV4dENvbnRlbnQgPSB0aGlzLmRvbU5vZGUudGV4dENvbnRlbnQ7XG4gICAgICB0aGlzLmF0dGFjaCgpO1xuICAgICAgX2dldChTeW50YXhDb2RlQmxvY2sucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU3ludGF4Q29kZUJsb2NrLnByb3RvdHlwZSksICdyZXBsYWNlV2l0aCcsIHRoaXMpLmNhbGwodGhpcywgYmxvY2spO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2hpZ2hsaWdodCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhpZ2hsaWdodChfaGlnaGxpZ2h0KSB7XG4gICAgICB2YXIgdGV4dCA9IHRoaXMuZG9tTm9kZS50ZXh0Q29udGVudDtcbiAgICAgIGlmICh0aGlzLmNhY2hlZFRleHQgIT09IHRleHQpIHtcbiAgICAgICAgaWYgKHRleHQudHJpbSgpLmxlbmd0aCA+IDAgfHwgdGhpcy5jYWNoZWRUZXh0ID09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLmRvbU5vZGUuaW5uZXJIVE1MID0gX2hpZ2hsaWdodCh0ZXh0KTtcbiAgICAgICAgICB0aGlzLmRvbU5vZGUubm9ybWFsaXplKCk7XG4gICAgICAgICAgdGhpcy5hdHRhY2goKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhY2hlZFRleHQgPSB0ZXh0O1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTeW50YXhDb2RlQmxvY2s7XG59KF9jb2RlMi5kZWZhdWx0KTtcblxuU3ludGF4Q29kZUJsb2NrLmNsYXNzTmFtZSA9ICdxbC1zeW50YXgnO1xuXG52YXIgQ29kZVRva2VuID0gbmV3IF9wYXJjaG1lbnQyLmRlZmF1bHQuQXR0cmlidXRvci5DbGFzcygndG9rZW4nLCAnaGxqcycsIHtcbiAgc2NvcGU6IF9wYXJjaG1lbnQyLmRlZmF1bHQuU2NvcGUuSU5MSU5FXG59KTtcblxudmFyIFN5bnRheCA9IGZ1bmN0aW9uIChfTW9kdWxlKSB7XG4gIF9pbmhlcml0cyhTeW50YXgsIF9Nb2R1bGUpO1xuXG4gIF9jcmVhdGVDbGFzcyhTeW50YXgsIG51bGwsIFt7XG4gICAga2V5OiAncmVnaXN0ZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlcigpIHtcbiAgICAgIF9xdWlsbDIuZGVmYXVsdC5yZWdpc3RlcihDb2RlVG9rZW4sIHRydWUpO1xuICAgICAgX3F1aWxsMi5kZWZhdWx0LnJlZ2lzdGVyKFN5bnRheENvZGVCbG9jaywgdHJ1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgZnVuY3Rpb24gU3ludGF4KHF1aWxsLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN5bnRheCk7XG5cbiAgICB2YXIgX3RoaXMyID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFN5bnRheC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFN5bnRheCkpLmNhbGwodGhpcywgcXVpbGwsIG9wdGlvbnMpKTtcblxuICAgIGlmICh0eXBlb2YgX3RoaXMyLm9wdGlvbnMuaGlnaGxpZ2h0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N5bnRheCBtb2R1bGUgcmVxdWlyZXMgaGlnaGxpZ2h0LmpzLiBQbGVhc2UgaW5jbHVkZSB0aGUgbGlicmFyeSBvbiB0aGUgcGFnZSBiZWZvcmUgUXVpbGwuJyk7XG4gICAgfVxuICAgIHZhciB0aW1lciA9IG51bGw7XG4gICAgX3RoaXMyLnF1aWxsLm9uKF9xdWlsbDIuZGVmYXVsdC5ldmVudHMuU0NST0xMX09QVElNSVpFLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLmhpZ2hsaWdodCgpO1xuICAgICAgICB0aW1lciA9IG51bGw7XG4gICAgICB9LCBfdGhpczIub3B0aW9ucy5pbnRlcnZhbCk7XG4gICAgfSk7XG4gICAgX3RoaXMyLmhpZ2hsaWdodCgpO1xuICAgIHJldHVybiBfdGhpczI7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU3ludGF4LCBbe1xuICAgIGtleTogJ2hpZ2hsaWdodCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhpZ2hsaWdodCgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5xdWlsbC5zZWxlY3Rpb24uY29tcG9zaW5nKSByZXR1cm47XG4gICAgICB0aGlzLnF1aWxsLnVwZGF0ZShfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5VU0VSKTtcbiAgICAgIHZhciByYW5nZSA9IHRoaXMucXVpbGwuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICB0aGlzLnF1aWxsLnNjcm9sbC5kZXNjZW5kYW50cyhTeW50YXhDb2RlQmxvY2spLmZvckVhY2goZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgICAgY29kZS5oaWdobGlnaHQoX3RoaXMzLm9wdGlvbnMuaGlnaGxpZ2h0KTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5xdWlsbC51cGRhdGUoX3F1aWxsMi5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKTtcbiAgICAgIGlmIChyYW5nZSAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKHJhbmdlLCBfcXVpbGwyLmRlZmF1bHQuc291cmNlcy5TSUxFTlQpO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTeW50YXg7XG59KF9tb2R1bGUyLmRlZmF1bHQpO1xuXG5TeW50YXguREVGQVVMVFMgPSB7XG4gIGhpZ2hsaWdodDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh3aW5kb3cuaGxqcyA9PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgIHZhciByZXN1bHQgPSB3aW5kb3cuaGxqcy5oaWdobGlnaHRBdXRvKHRleHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdC52YWx1ZTtcbiAgICB9O1xuICB9KCksXG4gIGludGVydmFsOiAxMDAwXG59O1xuXG5leHBvcnRzLkNvZGVCbG9jayA9IFN5bnRheENvZGVCbG9jaztcbmV4cG9ydHMuQ29kZVRva2VuID0gQ29kZVRva2VuO1xuZXhwb3J0cy5kZWZhdWx0ID0gU3ludGF4O1xuXG4vKioqLyB9KSxcbi8qIDc2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0zIHgyPTE1IHkxPTkgeTI9OT48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0zIHgyPTEzIHkxPTE0IHkyPTE0PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTMgeDI9OSB5MT00IHkyPTQ+PC9saW5lPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA3NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MTUgeDI9MyB5MT05IHkyPTk+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MTQgeDI9NCB5MT0xNCB5Mj0xND48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0xMiB4Mj02IHkxPTQgeTI9ND48L2xpbmU+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDc4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0xNSB4Mj0zIHkxPTkgeTI9OT48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0xNSB4Mj01IHkxPTE0IHkyPTE0PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTE1IHgyPTkgeTE9NCB5Mj00PjwvbGluZT4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogNzkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTE1IHgyPTMgeTE9OSB5Mj05PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTE1IHgyPTMgeTE9MTQgeTI9MTQ+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MTUgeDI9MyB5MT00IHkyPTQ+PC9saW5lPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA4MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8ZyBjbGFzcz1cXFwicWwtZmlsbCBxbC1jb2xvci1sYWJlbFxcXCI+IDxwb2x5Z29uIHBvaW50cz1cXFwiNiA2Ljg2OCA2IDYgNSA2IDUgNyA1Ljk0MiA3IDYgNi44NjhcXFwiPjwvcG9seWdvbj4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTQgeT00PjwvcmVjdD4gPHBvbHlnb24gcG9pbnRzPVxcXCI2LjgxNyA1IDYgNSA2IDYgNi4zOCA2IDYuODE3IDVcXFwiPjwvcG9seWdvbj4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTIgeT02PjwvcmVjdD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTMgeT01PjwvcmVjdD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTQgeT03PjwvcmVjdD4gPHBvbHlnb24gcG9pbnRzPVxcXCI0IDExLjQzOSA0IDExIDMgMTEgMyAxMiAzLjc1NSAxMiA0IDExLjQzOVxcXCI+PC9wb2x5Z29uPiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MiB5PTEyPjwvcmVjdD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTIgeT05PjwvcmVjdD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTIgeT0xNT48L3JlY3Q+IDxwb2x5Z29uIHBvaW50cz1cXFwiNC42MyAxMCA0IDEwIDQgMTEgNC4xOTIgMTEgNC42MyAxMFxcXCI+PC9wb2x5Z29uPiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MyB5PTg+PC9yZWN0PiA8cGF0aCBkPU0xMC44MzIsNC4yTDExLDQuNTgyVjRIMTAuNzA4QTEuOTQ4LDEuOTQ4LDAsMCwxLDEwLjgzMiw0LjJaPjwvcGF0aD4gPHBhdGggZD1NNyw0LjU4Mkw3LjE2OCw0LjJBMS45MjksMS45MjksMCwwLDEsNy4yOTIsNEg3VjQuNTgyWj48L3BhdGg+IDxwYXRoIGQ9TTgsMTNINy42ODNsLTAuMzUxLjhhMS45MzMsMS45MzMsMCwwLDEtLjEyNC4ySDhWMTNaPjwvcGF0aD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTEyIHk9Mj48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0xMSB5PTM+PC9yZWN0PiA8cGF0aCBkPU05LDNIOFYzLjI4MkExLjk4NSwxLjk4NSwwLDAsMSw5LDNaPjwvcGF0aD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTIgeT0zPjwvcmVjdD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTYgeT0yPjwvcmVjdD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTMgeT0yPjwvcmVjdD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTUgeT0zPjwvcmVjdD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTkgeT0yPjwvcmVjdD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTE1IHk9MTQ+PC9yZWN0PiA8cG9seWdvbiBwb2ludHM9XFxcIjEzLjQ0NyAxMC4xNzQgMTMuNDY5IDEwLjIyNSAxMy40NzIgMTAuMjMyIDEzLjgwOCAxMSAxNCAxMSAxNCAxMCAxMy4zNyAxMCAxMy40NDcgMTAuMTc0XFxcIj48L3BvbHlnb24+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0xMyB5PTc+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MTUgeT01PjwvcmVjdD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTE0IHk9Nj48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0xNSB5PTg+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MTQgeT05PjwvcmVjdD4gPHBhdGggZD1NMy43NzUsMTRIM3YxSDRWMTQuMzE0QTEuOTcsMS45NywwLDAsMSwzLjc3NSwxNFo+PC9wYXRoPiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MTQgeT0zPjwvcmVjdD4gPHBvbHlnb24gcG9pbnRzPVxcXCIxMiA2Ljg2OCAxMiA2IDExLjYyIDYgMTIgNi44NjhcXFwiPjwvcG9seWdvbj4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTE1IHk9Mj48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0xMiB5PTU+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MTMgeT00PjwvcmVjdD4gPHBvbHlnb24gcG9pbnRzPVxcXCIxMi45MzMgOSAxMyA5IDEzIDggMTIuNDk1IDggMTIuOTMzIDlcXFwiPjwvcG9seWdvbj4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTkgeT0xND48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD04IHk9MTU+PC9yZWN0PiA8cGF0aCBkPU02LDE0LjkyNlYxNUg3VjE0LjMxNkExLjk5MywxLjk5MywwLDAsMSw2LDE0LjkyNlo+PC9wYXRoPiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9NSB5PTE1PjwvcmVjdD4gPHBhdGggZD1NMTAuNjY4LDEzLjhMMTAuMzE3LDEzSDEwdjFoMC43OTJBMS45NDcsMS45NDcsMCwwLDEsMTAuNjY4LDEzLjhaPjwvcGF0aD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTExIHk9MTU+PC9yZWN0PiA8cGF0aCBkPU0xNC4zMzIsMTIuMmExLjk5LDEuOTksMCwwLDEsLjE2Ni44SDE1VjEySDE0LjI0NVo+PC9wYXRoPiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MTQgeT0xNT48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0xNSB5PTExPjwvcmVjdD4gPC9nPiA8cG9seWxpbmUgY2xhc3M9cWwtc3Ryb2tlIHBvaW50cz1cXFwiNS41IDEzIDkgNSAxMi41IDEzXFxcIj48L3BvbHlsaW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MTEuNjMgeDI9Ni4zOCB5MT0xMSB5Mj0xMT48L2xpbmU+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDgxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxyZWN0IGNsYXNzPVxcXCJxbC1maWxsIHFsLXN0cm9rZVxcXCIgaGVpZ2h0PTMgd2lkdGg9MyB4PTQgeT01PjwvcmVjdD4gPHJlY3QgY2xhc3M9XFxcInFsLWZpbGwgcWwtc3Ryb2tlXFxcIiBoZWlnaHQ9MyB3aWR0aD0zIHg9MTEgeT01PjwvcmVjdD4gPHBhdGggY2xhc3M9XFxcInFsLWV2ZW4gcWwtZmlsbCBxbC1zdHJva2VcXFwiIGQ9TTcsOGMwLDQuMDMxLTMsNS0zLDU+PC9wYXRoPiA8cGF0aCBjbGFzcz1cXFwicWwtZXZlbiBxbC1maWxsIHFsLXN0cm9rZVxcXCIgZD1NMTQsOGMwLDQuMDMxLTMsNS0zLDU+PC9wYXRoPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA4MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8cGF0aCBjbGFzcz1xbC1zdHJva2UgZD1NNSw0SDkuNUEyLjUsMi41LDAsMCwxLDEyLDYuNXYwQTIuNSwyLjUsMCwwLDEsOS41LDlINUEwLDAsMCwwLDEsNSw5VjRBMCwwLDAsMCwxLDUsNFo+PC9wYXRoPiA8cGF0aCBjbGFzcz1xbC1zdHJva2UgZD1NNSw5aDUuNUEyLjUsMi41LDAsMCwxLDEzLDExLjV2MEEyLjUsMi41LDAsMCwxLDEwLjUsMTRINWEwLDAsMCwwLDEsMCwwVjlBMCwwLDAsMCwxLDUsOVo+PC9wYXRoPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA4MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyBjbGFzcz1cXFwiXFxcIiB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9NSB4Mj0xMyB5MT0zIHkyPTM+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9NiB4Mj05LjM1IHkxPTEyIHkyPTM+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MTEgeDI9MTUgeTE9MTEgeTI9MTU+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MTUgeDI9MTEgeTE9MTEgeTI9MTU+PC9saW5lPiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0xIHJ4PTAuNSByeT0wLjUgd2lkdGg9NyB4PTIgeT0xND48L3JlY3Q+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDg0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxsaW5lIGNsYXNzPVxcXCJxbC1jb2xvci1sYWJlbCBxbC1zdHJva2UgcWwtdHJhbnNwYXJlbnRcXFwiIHgxPTMgeDI9MTUgeTE9MTUgeTI9MTU+PC9saW5lPiA8cG9seWxpbmUgY2xhc3M9cWwtc3Ryb2tlIHBvaW50cz1cXFwiNS41IDExIDkgMyAxMi41IDExXFxcIj48L3BvbHlsaW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MTEuNjMgeDI9Ni4zOCB5MT05IHkyPTk+PC9saW5lPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA4NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8cG9seWdvbiBjbGFzcz1cXFwicWwtc3Ryb2tlIHFsLWZpbGxcXFwiIHBvaW50cz1cXFwiMyAxMSA1IDkgMyA3IDMgMTFcXFwiPjwvcG9seWdvbj4gPGxpbmUgY2xhc3M9XFxcInFsLXN0cm9rZSBxbC1maWxsXFxcIiB4MT0xNSB4Mj0xMSB5MT00IHkyPTQ+PC9saW5lPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTExLDNhMywzLDAsMCwwLDAsNmgxVjNIMTFaPjwvcGF0aD4gPHJlY3QgY2xhc3M9cWwtZmlsbCBoZWlnaHQ9MTEgd2lkdGg9MSB4PTExIHk9ND48L3JlY3Q+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTExIHdpZHRoPTEgeD0xMyB5PTQ+PC9yZWN0PiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA4NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8cG9seWdvbiBjbGFzcz1cXFwicWwtc3Ryb2tlIHFsLWZpbGxcXFwiIHBvaW50cz1cXFwiMTUgMTIgMTMgMTAgMTUgOCAxNSAxMlxcXCI+PC9wb2x5Z29uPiA8bGluZSBjbGFzcz1cXFwicWwtc3Ryb2tlIHFsLWZpbGxcXFwiIHgxPTkgeDI9NSB5MT00IHkyPTQ+PC9saW5lPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTUsM0EzLDMsMCwwLDAsNSw5SDZWM0g1Wj48L3BhdGg+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTExIHdpZHRoPTEgeD01IHk9ND48L3JlY3Q+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTExIHdpZHRoPTEgeD03IHk9ND48L3JlY3Q+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDg3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMTQsMTZINGExLDEsMCwwLDEsMC0ySDE0QTEsMSwwLDAsMSwxNCwxNlogLz4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xNCw0SDRBMSwxLDAsMCwxLDQsMkgxNEExLDEsMCwwLDEsMTQsNFogLz4gPHJlY3QgY2xhc3M9cWwtZmlsbCB4PTMgeT02IHdpZHRoPTEyIGhlaWdodD02IHJ4PTEgcnk9MSAvPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA4OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTEzLDE2SDVhMSwxLDAsMCwxLDAtMmg4QTEsMSwwLDAsMSwxMywxNlogLz4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xMyw0SDVBMSwxLDAsMCwxLDUsMmg4QTEsMSwwLDAsMSwxMyw0WiAvPiA8cmVjdCBjbGFzcz1xbC1maWxsIHg9MiB5PTYgd2lkdGg9MTQgaGVpZ2h0PTYgcng9MSByeT0xIC8+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDg5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMTUsOEgxM2ExLDEsMCwwLDEsMC0yaDJBMSwxLDAsMCwxLDE1LDhaIC8+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMTUsMTJIMTNhMSwxLDAsMCwxLDAtMmgyQTEsMSwwLDAsMSwxNSwxMlogLz4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xNSwxNkg1YTEsMSwwLDAsMSwwLTJIMTVBMSwxLDAsMCwxLDE1LDE2WiAvPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTE1LDRINUExLDEsMCwwLDEsNSwySDE1QTEsMSwwLDAsMSwxNSw0WiAvPiA8cmVjdCBjbGFzcz1xbC1maWxsIHg9MiB5PTYgd2lkdGg9OCBoZWlnaHQ9NiByeD0xIHJ5PTEgLz4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogOTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU01LDhIM0ExLDEsMCwwLDEsMyw2SDVBMSwxLDAsMCwxLDUsOFogLz4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU01LDEySDNhMSwxLDAsMCwxLDAtMkg1QTEsMSwwLDAsMSw1LDEyWiAvPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTEzLDE2SDNhMSwxLDAsMCwxLDAtMkgxM0ExLDEsMCwwLDEsMTMsMTZaIC8+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMTMsNEgzQTEsMSwwLDAsMSwzLDJIMTNBMSwxLDAsMCwxLDEzLDRaIC8+IDxyZWN0IGNsYXNzPXFsLWZpbGwgeD04IHk9NiB3aWR0aD04IGhlaWdodD02IHJ4PTEgcnk9MSB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgyNCAxOCkgcm90YXRlKC0xODApXFxcIi8+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDkxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMTEuNzU5LDIuNDgyYTIuNTYxLDIuNTYxLDAsMCwwLTMuNTMuNjA3QTcuNjU2LDcuNjU2LDAsMCwwLDYuOCw2LjJDNi4xMDksOS4xODgsNS4yNzUsMTQuNjc3LDQuMTUsMTQuOTI3YTEuNTQ1LDEuNTQ1LDAsMCwwLTEuMy0uOTMzQTAuOTIyLDAuOTIyLDAsMCwwLDIsMTUuMDM2UzEuOTU0LDE2LDQuMTE5LDE2czMuMDkxLTIuNjkxLDMuNy01LjU1M2MwLjE3Ny0uODI2LjM2LTEuNzI2LDAuNTU0LTIuNkw4Ljc3NSw2LjJjMC4zODEtMS40MjEuODA3LTIuNTIxLDEuMzA2LTIuNjc2YTEuMDE0LDEuMDE0LDAsMCwwLDEuMDIuNTZBMC45NjYsMC45NjYsMCwwLDAsMTEuNzU5LDIuNDgyWj48L3BhdGg+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTEuNiByeD0wLjggcnk9MC44IHdpZHRoPTUgeD01LjE1IHk9Ni4yPjwvcmVjdD4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xMy42NjMsMTIuMDI3YTEuNjYyLDEuNjYyLDAsMCwxLC4yNjYtMC4yNzZxMC4xOTMsMC4wNjkuNDU2LDAuMTM4YTIuMSwyLjEsMCwwLDAsLjUzNS4wNjksMS4wNzUsMS4wNzUsMCwwLDAsLjc2Ny0wLjMsMS4wNDQsMS4wNDQsMCwwLDAsLjMxNC0wLjgsMC44NCwwLjg0LDAsMCwwLS4yMzgtMC42MTksMC44LDAuOCwwLDAsMC0uNTk0LTAuMjM5LDEuMTU0LDEuMTU0LDAsMCwwLS43ODEuMyw0LjYwNyw0LjYwNywwLDAsMC0uNzgxLDFxLTAuMDkxLjE1LS4yMTgsMC4zNDZsLTAuMjQ2LjM4Yy0wLjA2OC0uMjg4LTAuMTM3LTAuNTgyLTAuMjEyLTAuODg1LTAuNDU5LTEuODQ3LTIuNDk0LS45ODQtMi45NDEtMC44LTAuNDgyLjItLjM1MywwLjY0Ny0wLjA5NCwwLjUyOWEwLjg2OSwwLjg2OSwwLDAsMSwxLjI4MS41ODVjMC4yMTcsMC43NTEuMzc3LDEuNDM2LDAuNTI3LDIuMDM4YTUuNjg4LDUuNjg4LDAsMCwxLS4zNjIuNDY3LDIuNjksMi42OSwwLDAsMS0uMjY0LjI3MXEtMC4yMjEtLjA4LTAuNDcxLTAuMTQ3YTIuMDI5LDIuMDI5LDAsMCwwLS41MjItMC4wNjYsMS4wNzksMS4wNzksMCwwLDAtLjc2OC4zQTEuMDU4LDEuMDU4LDAsMCwwLDksMTUuMTMxYTAuODIsMC44MiwwLDAsMCwuODMyLjg1MiwxLjEzNCwxLjEzNCwwLDAsMCwuNzg3LTAuMyw1LjExLDUuMTEsMCwwLDAsLjc3Ni0wLjk5M3EwLjE0MS0uMjE5LjIxNS0wLjM0YzAuMDQ2LS4wNzYuMTIyLTAuMTk0LDAuMjIzLTAuMzQ2YTIuNzg2LDIuNzg2LDAsMCwwLC45MTgsMS43MjYsMi41ODIsMi41ODIsMCwwLDAsMi4zNzYtLjE4NWMwLjMxNy0uMTgxLjIxMi0wLjU2NSwwLTAuNDk0QTAuODA3LDAuODA3LDAsMCwxLDE0LjE3NiwxNWE1LjE1OSw1LjE1OSwwLDAsMS0uOTEzLTIuNDQ2bDAsMFExMy40ODcsMTIuMjQsMTMuNjYzLDEyLjAyN1o+PC9wYXRoPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA5MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Qm94PVxcXCIwIDAgMTggMThcXFwiPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTEwLDRWMTRhMSwxLDAsMCwxLTIsMFYxMEgzdjRhMSwxLDAsMCwxLTIsMFY0QTEsMSwwLDAsMSwzLDRWOEg4VjRhMSwxLDAsMCwxLDIsMFptNi4wNjc4Nyw5LjIwOUgxNC45ODk3NVY3LjU5ODYzYS41NDA4NS41NDA4NSwwLDAsMC0uNjA1LS42MDU0N2gtLjYyNzQ0YTEuMDExMTksMS4wMTExOSwwLDAsMC0uNzQ4LjI5Njg4TDExLjY0NSw4LjU2NjQxYS41NDM1LjU0MzUsMCwwLDAtLjAyMi44NTg0bC4yODYxMy4zMDc2MmEuNTM4NjEuNTM4NjEsMCwwLDAsLjg0NzE3LjAzMzJsLjA5OTEyLS4wODc4OWExLjIxMzcsMS4yMTM3LDAsMCwwLC4yNDE3LS4zNTI1NGguMDIyNDZzLS4wMTEyMy4zMDg1OS0uMDExMjMuNjA1NDdWMTMuMjA5SDEyLjA0MWEuNTQwODUuNTQwODUsMCwwLDAtLjYwNS42MDU0N3YuNDM5NDVhLjU0MDg1LjU0MDg1LDAsMCwwLC42MDUuNjA1NDdoNC4wMjY4NmEuNTQwODUuNTQwODUsMCwwLDAsLjYwNS0uNjA1NDd2LS40Mzk0NUEuNTQwODUuNTQwODUsMCwwLDAsMTYuMDY3ODcsMTMuMjA5WiAvPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA5MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Qm94PVxcXCIwIDAgMTggMThcXFwiPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTE2LjczOTc1LDEzLjgxNDQ1di40Mzk0NWEuNTQwODUuNTQwODUsMCwwLDEtLjYwNS42MDU0N0gxMS44NTVhLjU4MzkyLjU4MzkyLDAsMCwxLS42NDg5My0uNjA1NDdWMTQuMDEyN2MwLTIuOTA1MjcsMy4zOTk0MS0zLjQyMTg3LDMuMzk5NDEtNC41NTQ2OWEuNzc2NzUuNzc2NzUsMCwwLDAtLjg0NzE3LS43ODEyNSwxLjE3Njg0LDEuMTc2ODQsMCwwLDAtLjgzNTk0LjM4NDc3Yy0uMjc0OS4yNjM2Ny0uNTYxLjM3NC0uODU3OTEuMTMxODRsLS40MjkyLS4zNDA4MmMtLjMwODExLS4yNDIxOS0uMzg1MjUtLjUxNzU4LS4xNTQzLS44MTQ0NWEyLjk3MTU1LDIuOTcxNTUsMCwwLDEsMi40NTM2MS0xLjE3Njc2LDIuNDUzOTMsMi40NTM5MywwLDAsMSwyLjY4NDA4LDIuNDA5MThjMCwyLjQ1MzEyLTMuMTc5MiwyLjkyNjc2LTMuMjc4MzIsMy45Mzg0OGgyLjc5NDQzQS41NDA4NS41NDA4NSwwLDAsMSwxNi43Mzk3NSwxMy44MTQ0NVpNOSwzQS45OTk3NC45OTk3NCwwLDAsMCw4LDRWOEgzVjRBMSwxLDAsMCwwLDEsNFYxNGExLDEsMCwwLDAsMiwwVjEwSDh2NGExLDEsMCwwLDAsMiwwVjRBLjk5OTc0Ljk5OTc0LDAsMCwwLDksM1ogLz4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogOTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTcgeDI9MTMgeTE9NCB5Mj00PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTUgeDI9MTEgeTE9MTQgeTI9MTQ+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9OCB4Mj0xMCB5MT0xNCB5Mj00PjwvbGluZT4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogOTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHJlY3QgY2xhc3M9cWwtc3Ryb2tlIGhlaWdodD0xMCB3aWR0aD0xMiB4PTMgeT00PjwvcmVjdD4gPGNpcmNsZSBjbGFzcz1xbC1maWxsIGN4PTYgY3k9NyByPTE+PC9jaXJjbGU+IDxwb2x5bGluZSBjbGFzcz1cXFwicWwtZXZlbiBxbC1maWxsXFxcIiBwb2ludHM9XFxcIjUgMTIgNSAxMSA3IDkgOCAxMCAxMSA3IDEzIDkgMTMgMTIgNSAxMlxcXCI+PC9wb2x5bGluZT4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogOTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTMgeDI9MTUgeTE9MTQgeTI9MTQ+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MyB4Mj0xNSB5MT00IHkyPTQ+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9OSB4Mj0xNSB5MT05IHkyPTk+PC9saW5lPiA8cG9seWxpbmUgY2xhc3M9XFxcInFsLWZpbGwgcWwtc3Ryb2tlXFxcIiBwb2ludHM9XFxcIjMgNyAzIDExIDUgOSAzIDdcXFwiPjwvcG9seWxpbmU+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDk3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0zIHgyPTE1IHkxPTE0IHkyPTE0PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTMgeDI9MTUgeTE9NCB5Mj00PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTkgeDI9MTUgeTE9OSB5Mj05PjwvbGluZT4gPHBvbHlsaW5lIGNsYXNzPXFsLXN0cm9rZSBwb2ludHM9XFxcIjUgNyA1IDExIDMgOSA1IDdcXFwiPjwvcG9seWxpbmU+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDk4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT03IHgyPTExIHkxPTcgeTI9MTE+PC9saW5lPiA8cGF0aCBjbGFzcz1cXFwicWwtZXZlbiBxbC1zdHJva2VcXFwiIGQ9TTguOSw0LjU3N2EzLjQ3NiwzLjQ3NiwwLDAsMSwuMzYsNC42NzlBMy40NzYsMy40NzYsMCwwLDEsNC41NzcsOC45QzMuMTg1LDcuNSwyLjAzNSw2LjQsNC4yMTcsNC4yMTdTNy41LDMuMTg1LDguOSw0LjU3N1o+PC9wYXRoPiA8cGF0aCBjbGFzcz1cXFwicWwtZXZlbiBxbC1zdHJva2VcXFwiIGQ9TTEzLjQyMyw5LjFhMy40NzYsMy40NzYsMCwwLDAtNC42NzktLjM2LDMuNDc2LDMuNDc2LDAsMCwwLC4zNiw0LjY3OWMxLjM5MiwxLjM5MiwyLjUsMi41NDIsNC42NzkuMzZTMTQuODE1LDEwLjUsMTMuNDIzLDkuMVo+PC9wYXRoPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiA5OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9NyB4Mj0xNSB5MT00IHkyPTQ+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9NyB4Mj0xNSB5MT05IHkyPTk+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9NyB4Mj0xNSB5MT0xNCB5Mj0xND48L2xpbmU+IDxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2UgcWwtdGhpblxcXCIgeDE9Mi41IHgyPTQuNSB5MT01LjUgeTI9NS41PjwvbGluZT4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0zLjUsNkEwLjUsMC41LDAsMCwxLDMsNS41VjMuMDg1bC0wLjI3Ni4xMzhBMC41LDAuNSwwLDAsMSwyLjA1MywzYy0wLjEyNC0uMjQ3LTAuMDIzLTAuMzI0LjIyNC0wLjQ0N2wxLS41QTAuNSwwLjUsMCwwLDEsNCwyLjV2M0EwLjUsMC41LDAsMCwxLDMuNSw2Wj48L3BhdGg+IDxwYXRoIGNsYXNzPVxcXCJxbC1zdHJva2UgcWwtdGhpblxcXCIgZD1NNC41LDEwLjVoLTJjMC0uMjM0LDEuODUtMS4wNzYsMS44NS0yLjIzNEEwLjk1OSwwLjk1OSwwLDAsMCwyLjUsOC4xNTY+PC9wYXRoPiA8cGF0aCBjbGFzcz1cXFwicWwtc3Ryb2tlIHFsLXRoaW5cXFwiIGQ9TTIuNSwxNC44NDZhMC45NTksMC45NTksMCwwLDAsMS44NS0uMTA5QTAuNywwLjcsMCwwLDAsMy43NSwxNGEwLjY4OCwwLjY4OCwwLDAsMCwuNi0wLjczNiwwLjk1OSwwLjk1OSwwLDAsMC0xLjg1LS4xMDk+PC9wYXRoPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiAxMDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTYgeDI9MTUgeTE9NCB5Mj00PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTYgeDI9MTUgeTE9OSB5Mj05PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTYgeDI9MTUgeTE9MTQgeTI9MTQ+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MyB4Mj0zIHkxPTQgeTI9ND48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0zIHgyPTMgeTE9OSB5Mj05PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTMgeDI9MyB5MT0xNCB5Mj0xND48L2xpbmU+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDEwMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyBjbGFzcz1cXFwiXFxcIiB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9OSB4Mj0xNSB5MT00IHkyPTQ+PC9saW5lPiA8cG9seWxpbmUgY2xhc3M9cWwtc3Ryb2tlIHBvaW50cz1cXFwiMyA0IDQgNSA2IDNcXFwiPjwvcG9seWxpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT05IHgyPTE1IHkxPTE0IHkyPTE0PjwvbGluZT4gPHBvbHlsaW5lIGNsYXNzPXFsLXN0cm9rZSBwb2ludHM9XFxcIjMgMTQgNCAxNSA2IDEzXFxcIj48L3BvbHlsaW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9OSB4Mj0xNSB5MT05IHkyPTk+PC9saW5lPiA8cG9seWxpbmUgY2xhc3M9cWwtc3Ryb2tlIHBvaW50cz1cXFwiMyA5IDQgMTAgNiA4XFxcIj48L3BvbHlsaW5lPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiAxMDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xNS41LDE1SDEzLjg2MWEzLjg1OCwzLjg1OCwwLDAsMCwxLjkxNC0yLjk3NSwxLjgsMS44LDAsMCwwLTEuNi0xLjc1MUExLjkyMSwxLjkyMSwwLDAsMCwxMi4wMjEsMTEuN2EwLjUwMDEzLDAuNTAwMTMsMCwxLDAsLjk1Ny4yOTFoMGEwLjkxNCwwLjkxNCwwLDAsMSwxLjA1My0uNzI1LDAuODEsMC44MSwwLDAsMSwuNzQ0Ljc2MmMwLDEuMDc2LTEuMTY5NzEsMS44Njk4Mi0xLjkzOTcxLDIuNDMwODJBMS40NTYzOSwxLjQ1NjM5LDAsMCwwLDEyLDE1LjVhMC41LDAuNSwwLDAsMCwuNS41aDNBMC41LDAuNSwwLDAsMCwxNS41LDE1WiAvPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTkuNjUsNS4yNDFhMSwxLDAsMCwwLTEuNDA5LjEwOEw2LDcuOTY0LDMuNzU5LDUuMzQ5QTEsMSwwLDAsMCwyLjE5Miw2LjU5MTc4UTIuMjE1NDEsNi42MjEzLDIuMjQxLDYuNjQ5TDQuNjg0LDkuNSwyLjI0MSwxMi4zNUExLDEsMCwwLDAsMy43MSwxMy43MDcyMnEwLjAyNTU3LS4wMjc2OC4wNDktMC4wNTcyMkw2LDExLjAzNiw4LjI0MSwxMy42NWExLDEsMCwxLDAsMS41NjctMS4yNDI3N1E5Ljc4NDU5LDEyLjM3NzcsOS43NTksMTIuMzVMNy4zMTYsOS41LDkuNzU5LDYuNjUxQTEsMSwwLDAsMCw5LjY1LDUuMjQxWiAvPiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiAxMDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xNS41LDdIMTMuODYxYTQuMDE1LDQuMDE1LDAsMCwwLDEuOTE0LTIuOTc1LDEuOCwxLjgsMCwwLDAtMS42LTEuNzUxQTEuOTIyLDEuOTIyLDAsMCwwLDEyLjAyMSwzLjdhMC41LDAuNSwwLDEsMCwuOTU3LjI5MSwwLjkxNywwLjkxNywwLDAsMSwxLjA1My0uNzI1LDAuODEsMC44MSwwLDAsMSwuNzQ0Ljc2MmMwLDEuMDc3LTEuMTY0LDEuOTI1LTEuOTM0LDIuNDg2QTEuNDIzLDEuNDIzLDAsMCwwLDEyLDcuNWEwLjUsMC41LDAsMCwwLC41LjVoM0EwLjUsMC41LDAsMCwwLDE1LjUsN1ogLz4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU05LjY1MSw1LjI0MWExLDEsMCwwLDAtMS40MS4xMDhMNiw3Ljk2NCwzLjc1OSw1LjM0OWExLDEsMCwxLDAtMS41MTksMS4zTDQuNjgzLDkuNSwyLjI0MSwxMi4zNWExLDEsMCwxLDAsMS41MTksMS4zTDYsMTEuMDM2LDguMjQxLDEzLjY1YTEsMSwwLDAsMCwxLjUxOS0xLjNMNy4zMTcsOS41LDkuNzU5LDYuNjUxQTEsMSwwLDAsMCw5LjY1MSw1LjI0MVogLz4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogMTA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxsaW5lIGNsYXNzPVxcXCJxbC1zdHJva2UgcWwtdGhpblxcXCIgeDE9MTUuNSB4Mj0yLjUgeTE9OC41IHkyPTkuNT48L2xpbmU+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NOS4wMDcsOEM2LjU0Miw3Ljc5MSw2LDcuNTE5LDYsNi41LDYsNS43OTIsNy4yODMsNSw5LDVjMS41NzEsMCwyLjc2NS42NzksMi45NjksMS4zMDlhMSwxLDAsMCwwLDEuOS0uNjE3QzEzLjM1Niw0LjEwNiwxMS4zNTQsMyw5LDMsNi4yLDMsNCw0LjUzOCw0LDYuNWEzLjIsMy4yLDAsMCwwLC41LDEuODQzWj48L3BhdGg+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NOC45ODQsMTBDMTEuNDU3LDEwLjIwOCwxMiwxMC40NzksMTIsMTEuNWMwLDAuNzA4LTEuMjgzLDEuNS0zLDEuNS0xLjU3MSwwLTIuNzY1LS42NzktMi45NjktMS4zMDlhMSwxLDAsMSwwLTEuOS42MTdDNC42NDQsMTMuODk0LDYuNjQ2LDE1LDksMTVjMi44LDAsNS0xLjUzOCw1LTMuNWEzLjIsMy4yLDAsMCwwLS41LTEuODQzWj48L3BhdGg+IDwvc3ZnPlwiO1xuXG4vKioqLyB9KSxcbi8qIDEwNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2aWV3Ym94PVxcXCIwIDAgMTggMThcXFwiPiA8cGF0aCBjbGFzcz1xbC1zdHJva2UgZD1NNSwzVjlhNC4wMTIsNC4wMTIsMCwwLDAsNCw0SDlhNC4wMTIsNC4wMTIsMCwwLDAsNC00VjM+PC9wYXRoPiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0xIHJ4PTAuNSByeT0wLjUgd2lkdGg9MTIgeD0zIHk9MTU+PC9yZWN0PiA8L3N2Zz5cIjtcblxuLyoqKi8gfSksXG4vKiAxMDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmlld2JveD1cXFwiMCAwIDE4IDE4XFxcIj4gPHJlY3QgY2xhc3M9cWwtc3Ryb2tlIGhlaWdodD0xMiB3aWR0aD0xMiB4PTMgeT0zPjwvcmVjdD4gPHJlY3QgY2xhc3M9cWwtZmlsbCBoZWlnaHQ9MTIgd2lkdGg9MSB4PTUgeT0zPjwvcmVjdD4gPHJlY3QgY2xhc3M9cWwtZmlsbCBoZWlnaHQ9MTIgd2lkdGg9MSB4PTEyIHk9Mz48L3JlY3Q+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTIgd2lkdGg9OCB4PTUgeT04PjwvcmVjdD4gPHJlY3QgY2xhc3M9cWwtZmlsbCBoZWlnaHQ9MSB3aWR0aD0zIHg9MyB5PTU+PC9yZWN0PiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0xIHdpZHRoPTMgeD0zIHk9Nz48L3JlY3Q+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTEgd2lkdGg9MyB4PTMgeT0xMD48L3JlY3Q+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTEgd2lkdGg9MyB4PTMgeT0xMj48L3JlY3Q+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTEgd2lkdGg9MyB4PTEyIHk9NT48L3JlY3Q+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTEgd2lkdGg9MyB4PTEyIHk9Nz48L3JlY3Q+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTEgd2lkdGg9MyB4PTEyIHk9MTA+PC9yZWN0PiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0xIHdpZHRoPTMgeD0xMiB5PTEyPjwvcmVjdD4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogMTA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZpZXdib3g9XFxcIjAgMCAxOCAxOFxcXCI+IDxwb2x5Z29uIGNsYXNzPXFsLXN0cm9rZSBwb2ludHM9XFxcIjcgMTEgOSAxMyAxMSAxMSA3IDExXFxcIj48L3BvbHlnb24+IDxwb2x5Z29uIGNsYXNzPXFsLXN0cm9rZSBwb2ludHM9XFxcIjcgNyA5IDUgMTEgNyA3IDdcXFwiPjwvcG9seWdvbj4gPC9zdmc+XCI7XG5cbi8qKiovIH0pLFxuLyogMTA4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLkJ1YmJsZVRvb2x0aXAgPSB1bmRlZmluZWQ7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9leHRlbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX2V4dGVuZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmQpO1xuXG52YXIgX2VtaXR0ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG52YXIgX2VtaXR0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZW1pdHRlcik7XG5cbnZhciBfYmFzZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpO1xuXG52YXIgX2Jhc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYmFzZSk7XG5cbnZhciBfc2VsZWN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cbnZhciBfaWNvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcblxudmFyIF9pY29uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pY29ucyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFRPT0xCQVJfQ09ORklHID0gW1snYm9sZCcsICdpdGFsaWMnLCAnbGluayddLCBbeyBoZWFkZXI6IDEgfSwgeyBoZWFkZXI6IDIgfSwgJ2Jsb2NrcXVvdGUnXV07XG5cbnZhciBCdWJibGVUaGVtZSA9IGZ1bmN0aW9uIChfQmFzZVRoZW1lKSB7XG4gIF9pbmhlcml0cyhCdWJibGVUaGVtZSwgX0Jhc2VUaGVtZSk7XG5cbiAgZnVuY3Rpb24gQnViYmxlVGhlbWUocXVpbGwsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnViYmxlVGhlbWUpO1xuXG4gICAgaWYgKG9wdGlvbnMubW9kdWxlcy50b29sYmFyICE9IG51bGwgJiYgb3B0aW9ucy5tb2R1bGVzLnRvb2xiYXIuY29udGFpbmVyID09IG51bGwpIHtcbiAgICAgIG9wdGlvbnMubW9kdWxlcy50b29sYmFyLmNvbnRhaW5lciA9IFRPT0xCQVJfQ09ORklHO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChCdWJibGVUaGVtZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJ1YmJsZVRoZW1lKSkuY2FsbCh0aGlzLCBxdWlsbCwgb3B0aW9ucykpO1xuXG4gICAgX3RoaXMucXVpbGwuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3FsLWJ1YmJsZScpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhCdWJibGVUaGVtZSwgW3tcbiAgICBrZXk6ICdleHRlbmRUb29sYmFyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXh0ZW5kVG9vbGJhcih0b29sYmFyKSB7XG4gICAgICB0aGlzLnRvb2x0aXAgPSBuZXcgQnViYmxlVG9vbHRpcCh0aGlzLnF1aWxsLCB0aGlzLm9wdGlvbnMuYm91bmRzKTtcbiAgICAgIHRoaXMudG9vbHRpcC5yb290LmFwcGVuZENoaWxkKHRvb2xiYXIuY29udGFpbmVyKTtcbiAgICAgIHRoaXMuYnVpbGRCdXR0b25zKFtdLnNsaWNlLmNhbGwodG9vbGJhci5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uJykpLCBfaWNvbnMyLmRlZmF1bHQpO1xuICAgICAgdGhpcy5idWlsZFBpY2tlcnMoW10uc2xpY2UuY2FsbCh0b29sYmFyLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdzZWxlY3QnKSksIF9pY29uczIuZGVmYXVsdCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEJ1YmJsZVRoZW1lO1xufShfYmFzZTIuZGVmYXVsdCk7XG5cbkJ1YmJsZVRoZW1lLkRFRkFVTFRTID0gKDAsIF9leHRlbmQyLmRlZmF1bHQpKHRydWUsIHt9LCBfYmFzZTIuZGVmYXVsdC5ERUZBVUxUUywge1xuICBtb2R1bGVzOiB7XG4gICAgdG9vbGJhcjoge1xuICAgICAgaGFuZGxlcnM6IHtcbiAgICAgICAgbGluazogZnVuY3Rpb24gbGluayh2YWx1ZSkge1xuICAgICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMucXVpbGwuZm9ybWF0KCdsaW5rJywgZmFsc2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnF1aWxsLnRoZW1lLnRvb2x0aXAuZWRpdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG5cbnZhciBCdWJibGVUb29sdGlwID0gZnVuY3Rpb24gKF9CYXNlVG9vbHRpcCkge1xuICBfaW5oZXJpdHMoQnViYmxlVG9vbHRpcCwgX0Jhc2VUb29sdGlwKTtcblxuICBmdW5jdGlvbiBCdWJibGVUb29sdGlwKHF1aWxsLCBib3VuZHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnViYmxlVG9vbHRpcCk7XG5cbiAgICB2YXIgX3RoaXMyID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEJ1YmJsZVRvb2x0aXAuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCdWJibGVUb29sdGlwKSkuY2FsbCh0aGlzLCBxdWlsbCwgYm91bmRzKSk7XG5cbiAgICBfdGhpczIucXVpbGwub24oX2VtaXR0ZXIyLmRlZmF1bHQuZXZlbnRzLkVESVRPUl9DSEFOR0UsIGZ1bmN0aW9uICh0eXBlLCByYW5nZSwgb2xkUmFuZ2UsIHNvdXJjZSkge1xuICAgICAgaWYgKHR5cGUgIT09IF9lbWl0dGVyMi5kZWZhdWx0LmV2ZW50cy5TRUxFQ1RJT05fQ0hBTkdFKSByZXR1cm47XG4gICAgICBpZiAocmFuZ2UgIT0gbnVsbCAmJiByYW5nZS5sZW5ndGggPiAwICYmIHNvdXJjZSA9PT0gX2VtaXR0ZXIyLmRlZmF1bHQuc291cmNlcy5VU0VSKSB7XG4gICAgICAgIF90aGlzMi5zaG93KCk7XG4gICAgICAgIC8vIExvY2sgb3VyIHdpZHRoIHNvIHdlIHdpbGwgZXhwYW5kIGJleW9uZCBvdXIgb2Zmc2V0UGFyZW50IGJvdW5kYXJpZXNcbiAgICAgICAgX3RoaXMyLnJvb3Quc3R5bGUubGVmdCA9ICcwcHgnO1xuICAgICAgICBfdGhpczIucm9vdC5zdHlsZS53aWR0aCA9ICcnO1xuICAgICAgICBfdGhpczIucm9vdC5zdHlsZS53aWR0aCA9IF90aGlzMi5yb290Lm9mZnNldFdpZHRoICsgJ3B4JztcbiAgICAgICAgdmFyIGxpbmVzID0gX3RoaXMyLnF1aWxsLmdldExpbmVzKHJhbmdlLmluZGV4LCByYW5nZS5sZW5ndGgpO1xuICAgICAgICBpZiAobGluZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgX3RoaXMyLnBvc2l0aW9uKF90aGlzMi5xdWlsbC5nZXRCb3VuZHMocmFuZ2UpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgbGFzdExpbmUgPSBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICB2YXIgaW5kZXggPSBfdGhpczIucXVpbGwuZ2V0SW5kZXgobGFzdExpbmUpO1xuICAgICAgICAgIHZhciBsZW5ndGggPSBNYXRoLm1pbihsYXN0TGluZS5sZW5ndGgoKSAtIDEsIHJhbmdlLmluZGV4ICsgcmFuZ2UubGVuZ3RoIC0gaW5kZXgpO1xuICAgICAgICAgIHZhciBfYm91bmRzID0gX3RoaXMyLnF1aWxsLmdldEJvdW5kcyhuZXcgX3NlbGVjdGlvbi5SYW5nZShpbmRleCwgbGVuZ3RoKSk7XG4gICAgICAgICAgX3RoaXMyLnBvc2l0aW9uKF9ib3VuZHMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IF90aGlzMi50ZXh0Ym94ICYmIF90aGlzMi5xdWlsbC5oYXNGb2N1cygpKSB7XG4gICAgICAgIF90aGlzMi5oaWRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzMjtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhCdWJibGVUb29sdGlwLCBbe1xuICAgIGtleTogJ2xpc3RlbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RlbigpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBfZ2V0KEJ1YmJsZVRvb2x0aXAucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQnViYmxlVG9vbHRpcC5wcm90b3R5cGUpLCAnbGlzdGVuJywgdGhpcykuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKCcucWwtY2xvc2UnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnJvb3QuY2xhc3NMaXN0LnJlbW92ZSgncWwtZWRpdGluZycpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnF1aWxsLm9uKF9lbWl0dGVyMi5kZWZhdWx0LmV2ZW50cy5TQ1JPTExfT1BUSU1JWkUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gTGV0IHNlbGVjdGlvbiBiZSByZXN0b3JlZCBieSB0b29sYmFyIGhhbmRsZXJzIGJlZm9yZSByZXBvc2l0aW9uaW5nXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChfdGhpczMucm9vdC5jbGFzc0xpc3QuY29udGFpbnMoJ3FsLWhpZGRlbicpKSByZXR1cm47XG4gICAgICAgICAgdmFyIHJhbmdlID0gX3RoaXMzLnF1aWxsLmdldFNlbGVjdGlvbigpO1xuICAgICAgICAgIGlmIChyYW5nZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBfdGhpczMucG9zaXRpb24oX3RoaXMzLnF1aWxsLmdldEJvdW5kcyhyYW5nZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgMSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjYW5jZWwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBvc2l0aW9uKHJlZmVyZW5jZSkge1xuICAgICAgdmFyIHNoaWZ0ID0gX2dldChCdWJibGVUb29sdGlwLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJ1YmJsZVRvb2x0aXAucHJvdG90eXBlKSwgJ3Bvc2l0aW9uJywgdGhpcykuY2FsbCh0aGlzLCByZWZlcmVuY2UpO1xuICAgICAgdmFyIGFycm93ID0gdGhpcy5yb290LnF1ZXJ5U2VsZWN0b3IoJy5xbC10b29sdGlwLWFycm93Jyk7XG4gICAgICBhcnJvdy5zdHlsZS5tYXJnaW5MZWZ0ID0gJyc7XG4gICAgICBpZiAoc2hpZnQgPT09IDApIHJldHVybiBzaGlmdDtcbiAgICAgIGFycm93LnN0eWxlLm1hcmdpbkxlZnQgPSAtMSAqIHNoaWZ0IC0gYXJyb3cub2Zmc2V0V2lkdGggLyAyICsgJ3B4JztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQnViYmxlVG9vbHRpcDtcbn0oX2Jhc2UuQmFzZVRvb2x0aXApO1xuXG5CdWJibGVUb29sdGlwLlRFTVBMQVRFID0gWyc8c3BhbiBjbGFzcz1cInFsLXRvb2x0aXAtYXJyb3dcIj48L3NwYW4+JywgJzxkaXYgY2xhc3M9XCJxbC10b29sdGlwLWVkaXRvclwiPicsICc8aW5wdXQgdHlwZT1cInRleHRcIiBkYXRhLWZvcm11bGE9XCJlPW1jXjJcIiBkYXRhLWxpbms9XCJodHRwczovL3F1aWxsanMuY29tXCIgZGF0YS12aWRlbz1cIkVtYmVkIFVSTFwiPicsICc8YSBjbGFzcz1cInFsLWNsb3NlXCI+PC9hPicsICc8L2Rpdj4nXS5qb2luKCcnKTtcblxuZXhwb3J0cy5CdWJibGVUb29sdGlwID0gQnViYmxlVG9vbHRpcDtcbmV4cG9ydHMuZGVmYXVsdCA9IEJ1YmJsZVRoZW1lO1xuXG4vKioqLyB9KSxcbi8qIDEwOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNjMpO1xuXG5cbi8qKiovIH0pXG4vKioqKioqLyBdKVtcImRlZmF1bHRcIl07XG59KTsiLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgJ2FsaWduJzoge1xuICAgICcnICAgICAgICA6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy9hbGlnbi1sZWZ0LnN2ZycpLFxuICAgICdjZW50ZXInICA6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy9hbGlnbi1jZW50ZXIuc3ZnJyksXG4gICAgJ3JpZ2h0JyAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2FsaWduLXJpZ2h0LnN2ZycpLFxuICAgICdqdXN0aWZ5JyA6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy9hbGlnbi1qdXN0aWZ5LnN2ZycpXG4gIH0sXG4gICdiYWNrZ3JvdW5kJzogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2JhY2tncm91bmQuc3ZnJyksXG4gICdibG9ja3F1b3RlJzogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2Jsb2NrcXVvdGUuc3ZnJyksXG4gICdib2xkJyAgICAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2JvbGQuc3ZnJyksXG4gICdjbGVhbicgICAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2NsZWFuLnN2ZycpLFxuICAnY29kZScgICAgICA6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy9jb2RlLnN2ZycpLFxuICAnY29kZS1ibG9jayc6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy9jb2RlLnN2ZycpLFxuICAnY29sb3InICAgICA6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy9jb2xvci5zdmcnKSxcbiAgJ2RpcmVjdGlvbicgOiB7XG4gICAgJycgICAgICAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2RpcmVjdGlvbi1sdHIuc3ZnJyksXG4gICAgJ3J0bCcgICAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2RpcmVjdGlvbi1ydGwuc3ZnJylcbiAgfSxcbiAgJ2Zsb2F0Jzoge1xuICAgICdjZW50ZXInICA6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy9mbG9hdC1jZW50ZXIuc3ZnJyksXG4gICAgJ2Z1bGwnICAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2Zsb2F0LWZ1bGwuc3ZnJyksXG4gICAgJ2xlZnQnICAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2Zsb2F0LWxlZnQuc3ZnJyksXG4gICAgJ3JpZ2h0JyAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2Zsb2F0LXJpZ2h0LnN2ZycpXG4gIH0sXG4gICdmb3JtdWxhJyAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2Zvcm11bGEuc3ZnJyksXG4gICdoZWFkZXInOiB7XG4gICAgJzEnICAgICAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2hlYWRlci5zdmcnKSxcbiAgICAnMicgICAgICAgOiByZXF1aXJlKCcuLi9hc3NldHMvaWNvbnMvaGVhZGVyLTIuc3ZnJylcbiAgfSxcbiAgJ2l0YWxpYycgICAgOiByZXF1aXJlKCcuLi9hc3NldHMvaWNvbnMvaXRhbGljLnN2ZycpLFxuICAnaW1hZ2UnICAgICA6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy9pbWFnZS5zdmcnKSxcbiAgJ2luZGVudCc6IHtcbiAgICAnKzEnICAgICAgOiByZXF1aXJlKCcuLi9hc3NldHMvaWNvbnMvaW5kZW50LnN2ZycpLFxuICAgICctMScgICAgICA6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy9vdXRkZW50LnN2ZycpXG4gIH0sXG4gICdsaW5rJyAgICAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2xpbmsuc3ZnJyksXG4gICdsaXN0Jzoge1xuICAgICdvcmRlcmVkJyA6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy9saXN0LW9yZGVyZWQuc3ZnJyksXG4gICAgJ2J1bGxldCcgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL2xpc3QtYnVsbGV0LnN2ZycpLFxuICAgICdjaGVjaycgICA6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy9saXN0LWNoZWNrLnN2ZycpXG4gIH0sXG4gICdzY3JpcHQnOiB7XG4gICAgJ3N1YicgICAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL3N1YnNjcmlwdC5zdmcnKSxcbiAgICAnc3VwZXInICAgOiByZXF1aXJlKCcuLi9hc3NldHMvaWNvbnMvc3VwZXJzY3JpcHQuc3ZnJyksXG4gIH0sXG4gICdzdHJpa2UnICAgIDogcmVxdWlyZSgnLi4vYXNzZXRzL2ljb25zL3N0cmlrZS5zdmcnKSxcbiAgJ3VuZGVybGluZScgOiByZXF1aXJlKCcuLi9hc3NldHMvaWNvbnMvdW5kZXJsaW5lLnN2ZycpLFxuICAndmlkZW8nICAgICA6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pY29ucy92aWRlby5zdmcnKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHNldEZ1bmN0aW9uTmFtZSA9IHJlcXVpcmUoJ3NldC1mdW5jdGlvbi1uYW1lJyk7XG5cbnZhciAkT2JqZWN0ID0gT2JqZWN0O1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0RnVuY3Rpb25OYW1lKGZ1bmN0aW9uIGZsYWdzKCkge1xuXHRpZiAodGhpcyAhPSBudWxsICYmIHRoaXMgIT09ICRPYmplY3QodGhpcykpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignUmVnRXhwLnByb3RvdHlwZS5mbGFncyBnZXR0ZXIgY2FsbGVkIG9uIG5vbi1vYmplY3QnKTtcblx0fVxuXHR2YXIgcmVzdWx0ID0gJyc7XG5cdGlmICh0aGlzLmhhc0luZGljZXMpIHtcblx0XHRyZXN1bHQgKz0gJ2QnO1xuXHR9XG5cdGlmICh0aGlzLmdsb2JhbCkge1xuXHRcdHJlc3VsdCArPSAnZyc7XG5cdH1cblx0aWYgKHRoaXMuaWdub3JlQ2FzZSkge1xuXHRcdHJlc3VsdCArPSAnaSc7XG5cdH1cblx0aWYgKHRoaXMubXVsdGlsaW5lKSB7XG5cdFx0cmVzdWx0ICs9ICdtJztcblx0fVxuXHRpZiAodGhpcy5kb3RBbGwpIHtcblx0XHRyZXN1bHQgKz0gJ3MnO1xuXHR9XG5cdGlmICh0aGlzLnVuaWNvZGUpIHtcblx0XHRyZXN1bHQgKz0gJ3UnO1xuXHR9XG5cdGlmICh0aGlzLnVuaWNvZGVTZXRzKSB7XG5cdFx0cmVzdWx0ICs9ICd2Jztcblx0fVxuXHRpZiAodGhpcy5zdGlja3kpIHtcblx0XHRyZXN1bHQgKz0gJ3knO1xuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59LCAnZ2V0IGZsYWdzJywgdHJ1ZSk7XG5cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCdjYWxsLWJpbmQnKTtcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIHNoaW0gPSByZXF1aXJlKCcuL3NoaW0nKTtcblxudmFyIGZsYWdzQm91bmQgPSBjYWxsQmluZChnZXRQb2x5ZmlsbCgpKTtcblxuZGVmaW5lKGZsYWdzQm91bmQsIHtcblx0Z2V0UG9seWZpbGw6IGdldFBvbHlmaWxsLFxuXHRpbXBsZW1lbnRhdGlvbjogaW1wbGVtZW50YXRpb24sXG5cdHNoaW06IHNoaW1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYWdzQm91bmQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxudmFyIHN1cHBvcnRzRGVzY3JpcHRvcnMgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpLnN1cHBvcnRzRGVzY3JpcHRvcnM7XG52YXIgJGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycyAmJiAoL2EvbWlnKS5mbGFncyA9PT0gJ2dpbScpIHtcblx0XHR2YXIgZGVzY3JpcHRvciA9ICRnT1BEKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycpO1xuXHRcdGlmIChcblx0XHRcdGRlc2NyaXB0b3Jcblx0XHRcdCYmIHR5cGVvZiBkZXNjcmlwdG9yLmdldCA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdFx0JiYgdHlwZW9mIFJlZ0V4cC5wcm90b3R5cGUuZG90QWxsID09PSAnYm9vbGVhbidcblx0XHRcdCYmIHR5cGVvZiBSZWdFeHAucHJvdG90eXBlLmhhc0luZGljZXMgPT09ICdib29sZWFuJ1xuXHRcdCkge1xuXHRcdFx0LyogZXNsaW50IGdldHRlci1yZXR1cm46IDAgKi9cblx0XHRcdHZhciBjYWxscyA9ICcnO1xuXHRcdFx0dmFyIG8gPSB7fTtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCAnaGFzSW5kaWNlcycsIHtcblx0XHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0Y2FsbHMgKz0gJ2QnO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCAnc3RpY2t5Jywge1xuXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRjYWxscyArPSAneSc7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0aWYgKGNhbGxzID09PSAnZHknKSB7XG5cdFx0XHRcdHJldHVybiBkZXNjcmlwdG9yLmdldDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHN1cHBvcnRzRGVzY3JpcHRvcnMgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpLnN1cHBvcnRzRGVzY3JpcHRvcnM7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgVHlwZUVyciA9IFR5cGVFcnJvcjtcbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciByZWdleCA9IC9hLztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltRmxhZ3MoKSB7XG5cdGlmICghc3VwcG9ydHNEZXNjcmlwdG9ycyB8fCAhZ2V0UHJvdG8pIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycignUmVnRXhwLnByb3RvdHlwZS5mbGFncyByZXF1aXJlcyBhIHRydWUgRVM1IGVudmlyb25tZW50IHRoYXQgc3VwcG9ydHMgcHJvcGVydHkgZGVzY3JpcHRvcnMnKTtcblx0fVxuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHR2YXIgcHJvdG8gPSBnZXRQcm90byhyZWdleCk7XG5cdHZhciBkZXNjcmlwdG9yID0gZ09QRChwcm90bywgJ2ZsYWdzJyk7XG5cdGlmICghZGVzY3JpcHRvciB8fCBkZXNjcmlwdG9yLmdldCAhPT0gcG9seWZpbGwpIHtcblx0XHRkZWZpbmVQcm9wZXJ0eShwcm90bywgJ2ZsYWdzJywge1xuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRnZXQ6IHBvbHlmaWxsXG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtZGF0YS1wcm9wZXJ0eScpO1xudmFyIGhhc0Rlc2NyaXB0b3JzID0gcmVxdWlyZSgnaGFzLXByb3BlcnR5LWRlc2NyaXB0b3JzJykoKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnZ29wZCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcbnZhciAkZmxvb3IgPSBHZXRJbnRyaW5zaWMoJyVNYXRoLmZsb29yJScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldEZ1bmN0aW9uTGVuZ3RoKGZuLCBsZW5ndGgpIHtcblx0aWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgZm5gIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG5cdH1cblx0aWYgKHR5cGVvZiBsZW5ndGggIT09ICdudW1iZXInIHx8IGxlbmd0aCA8IDAgfHwgbGVuZ3RoID4gMHhGRkZGRkZGRiB8fCAkZmxvb3IobGVuZ3RoKSAhPT0gbGVuZ3RoKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BsZW5ndGhgIG11c3QgYmUgYSBwb3NpdGl2ZSAzMi1iaXQgaW50ZWdlcicpO1xuXHR9XG5cblx0dmFyIGxvb3NlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgISFhcmd1bWVudHNbMl07XG5cblx0dmFyIGZ1bmN0aW9uTGVuZ3RoSXNDb25maWd1cmFibGUgPSB0cnVlO1xuXHR2YXIgZnVuY3Rpb25MZW5ndGhJc1dyaXRhYmxlID0gdHJ1ZTtcblx0aWYgKCdsZW5ndGgnIGluIGZuICYmIGdPUEQpIHtcblx0XHR2YXIgZGVzYyA9IGdPUEQoZm4sICdsZW5ndGgnKTtcblx0XHRpZiAoZGVzYyAmJiAhZGVzYy5jb25maWd1cmFibGUpIHtcblx0XHRcdGZ1bmN0aW9uTGVuZ3RoSXNDb25maWd1cmFibGUgPSBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKGRlc2MgJiYgIWRlc2Mud3JpdGFibGUpIHtcblx0XHRcdGZ1bmN0aW9uTGVuZ3RoSXNXcml0YWJsZSA9IGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdGlmIChmdW5jdGlvbkxlbmd0aElzQ29uZmlndXJhYmxlIHx8IGZ1bmN0aW9uTGVuZ3RoSXNXcml0YWJsZSB8fCAhbG9vc2UpIHtcblx0XHRpZiAoaGFzRGVzY3JpcHRvcnMpIHtcblx0XHRcdGRlZmluZShmbiwgJ2xlbmd0aCcsIGxlbmd0aCwgdHJ1ZSwgdHJ1ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlZmluZShmbiwgJ2xlbmd0aCcsIGxlbmd0aCk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBmbjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtZGF0YS1wcm9wZXJ0eScpO1xudmFyIGhhc0Rlc2NyaXB0b3JzID0gcmVxdWlyZSgnaGFzLXByb3BlcnR5LWRlc2NyaXB0b3JzJykoKTtcbnZhciBmdW5jdGlvbnNIYXZlQ29uZmlndXJhYmxlTmFtZXMgPSByZXF1aXJlKCdmdW5jdGlvbnMtaGF2ZS1uYW1lcycpLmZ1bmN0aW9uc0hhdmVDb25maWd1cmFibGVOYW1lcygpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXRGdW5jdGlvbk5hbWUoZm4sIG5hbWUpIHtcblx0aWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgZm5gIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG5cdH1cblx0dmFyIGxvb3NlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgISFhcmd1bWVudHNbMl07XG5cdGlmICghbG9vc2UgfHwgZnVuY3Rpb25zSGF2ZUNvbmZpZ3VyYWJsZU5hbWVzKSB7XG5cdFx0aWYgKGhhc0Rlc2NyaXB0b3JzKSB7XG5cdFx0XHRkZWZpbmUoZm4sICduYW1lJywgbmFtZSwgdHJ1ZSwgdHJ1ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlZmluZShmbiwgJ25hbWUnLCBuYW1lKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGZuO1xufTtcbiIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL3N0eWxlcy5jc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIFByZXBhcmUgY3NzVHJhbnNmb3JtYXRpb25cbnZhciB0cmFuc2Zvcm07XG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcblx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vc3R5bGVzLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZXMuY3NzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24oc2VsZWN0b3IpIHtcblx0XHRpZiAodHlwZW9mIG1lbW9bc2VsZWN0b3JdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBmbi5jYWxsKHRoaXMsIHNlbGVjdG9yKTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAoc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3NlbGVjdG9yXSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1tzZWxlY3Rvcl1cblx0fTtcbn0pKGZ1bmN0aW9uICh0YXJnZXQpIHtcblx0cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KVxufSk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG5cdGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvICsgXCIgXCIgKyBvcHRpb25zLmluc2VydEF0LmJlZm9yZSk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcLykvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLypcbiAgQ3VycmVudGx5IHRoZXJlJ3Mgbm8gdHlwZXMgZm9yIHF1aWxsIG1vZHVsZXMsXG4gIHNvIHlvdSBuZWVkIHRvIGVpdGhlciBtYWtlIHR5cGVzLCBvciB1c2UgYSBqc1xuICBmaWxlIHRvIGltcG9ydCB0aGVtICh3aGljaCBpcyB3aGF0IHNldHVwLmpzIGlzKS5cbiovXG52YXIgc2V0dXBfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zZXR1cFwiKSk7XG52YXIgZnVsbFRvb2xiYXJPcHRpb25zID0gW1xuICAgIFt7IGhlYWRlcjogWzEsIDIsIDMsIGZhbHNlXSB9XSxcbiAgICBbXCJib2xkXCIsIFwiaXRhbGljXCJdLFxuICAgIFtcImNsZWFuXCJdLFxuICAgIFtcImltYWdlXCJdLFxuICAgIFt7IGxpc3Q6IFwib3JkZXJlZFwiIH0sIHsgbGlzdDogXCJidWxsZXRcIiB9XSxcbl07XG5jb25zb2xlLmxvZyhcIkRlbW8gbG9hZGVkLi4uXCIpO1xudmFyIHF1aWxsID0gbmV3IHNldHVwXzEuZGVmYXVsdChcIiNlZGl0b3JcIiwge1xuICAgIHRoZW1lOiBcInNub3dcIixcbiAgICBtb2R1bGVzOiB7XG4gICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgIGNvbnRhaW5lcjogZnVsbFRvb2xiYXJPcHRpb25zLFxuICAgICAgICB9LFxuICAgICAgICBodG1sRWRpdEJ1dHRvbjogeyBkZWJ1ZzogdHJ1ZSwgc3ludGF4OiB0cnVlIH0sXG4gICAgfSxcbn0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZvcm1hdEhUTUxTdHJpbmdJbmRlbnRhdGlvbiA9IHZvaWQgMDtcbi8vIEFkYXB0ZWQgRlJPTSBqc2ZpZGRsZSBoZXJlOiBodHRwczovL2pzZmlkZGxlLm5ldC9idWtzeS9yeHVjZzFnZC9cbmZ1bmN0aW9uIEZvcm1hdEhUTUxTdHJpbmdJbmRlbnRhdGlvbihjb2RlLCBsb2dnZXIpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgc3RyaXBXaGl0ZVNwYWNlcyA9IHRydWU7XG4gICAgdmFyIHN0cmlwRW1wdHlMaW5lcyA9IHRydWU7XG4gICAgdmFyIHdoaXRlc3BhY2UgPSBcIiBcIi5yZXBlYXQoMik7IC8vIERlZmF1bHQgaW5kZW50aW5nIDQgd2hpdGVzcGFjZXNcbiAgICB2YXIgY3VycmVudEluZGVudCA9IDA7XG4gICAgdmFyIG5ld2xpbmVDaGFyID0gXCJcXG5cIjtcbiAgICB2YXIgcHJldkNoYXIgPSBudWxsO1xuICAgIHZhciBjaGFyID0gbnVsbDtcbiAgICB2YXIgbmV4dENoYXIgPSBudWxsO1xuICAgIHZhciByZXN1bHQgPSBcIlwiO1xuICAgIGZvciAodmFyIHBvcyA9IDA7IHBvcyA8PSBjb2RlLmxlbmd0aDsgcG9zKyspIHtcbiAgICAgICAgcHJldkNoYXIgPSBjaGFyO1xuICAgICAgICBjaGFyID0gY29kZS5zdWJzdHIocG9zLCAxKTtcbiAgICAgICAgbmV4dENoYXIgPSBjb2RlLnN1YnN0cihwb3MgKyAxLCAxKTtcbiAgICAgICAgdmFyIGlzQnJUYWcgPSBjb2RlLnN1YnN0cihwb3MsIDQpID09PSBcIjxicj5cIjtcbiAgICAgICAgdmFyIGlzT3BlbmluZ1RhZyA9IGNoYXIgPT09IFwiPFwiICYmIG5leHRDaGFyICE9PSBcIi9cIiAmJiAhaXNCclRhZztcbiAgICAgICAgdmFyIGlzQ2xvc2luZ1RhZyA9IGNoYXIgPT09IFwiPFwiICYmIG5leHRDaGFyID09PSBcIi9cIiAmJiAhaXNCclRhZztcbiAgICAgICAgdmFyIGlzVGFnRW5kID0gcHJldkNoYXIgPT09IFwiPlwiICYmIGNoYXIgIT09IFwiPFwiICYmIGN1cnJlbnRJbmRlbnQgPiAwO1xuICAgICAgICB2YXIgaXNUYWdOZXh0ID0gIWlzQnJUYWcgJiZcbiAgICAgICAgICAgICFpc09wZW5pbmdUYWcgJiZcbiAgICAgICAgICAgICFpc0Nsb3NpbmdUYWcgJiZcbiAgICAgICAgICAgIGlzVGFnRW5kICYmXG4gICAgICAgICAgICBjb2RlLnN1YnN0cihwb3MsIGNvZGUuc3Vic3RyKHBvcykuaW5kZXhPZihcIjxcIikpLnRyaW0oKSA9PT0gXCJcIjtcbiAgICAgICAgaWYgKGlzQnJUYWcpIHtcbiAgICAgICAgICAgIC8vIElmIG9wZW5pbmcgdGFnLCBhZGQgbmV3bGluZSBjaGFyYWN0ZXIgYW5kIGluZGVudGlvblxuICAgICAgICAgICAgcmVzdWx0ICs9IG5ld2xpbmVDaGFyO1xuICAgICAgICAgICAgY3VycmVudEluZGVudC0tO1xuICAgICAgICAgICAgcG9zICs9IDQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzT3BlbmluZ1RhZykge1xuICAgICAgICAgICAgLy8gSWYgb3BlbmluZyB0YWcsIGFkZCBuZXdsaW5lIGNoYXJhY3RlciBhbmQgaW5kZW50aW9uXG4gICAgICAgICAgICByZXN1bHQgKz0gbmV3bGluZUNoYXIgKyB3aGl0ZXNwYWNlLnJlcGVhdChjdXJyZW50SW5kZW50KTtcbiAgICAgICAgICAgIGN1cnJlbnRJbmRlbnQrKztcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiBDbG9zaW5nIHRhZywgYWRkIG5ld2xpbmUgYW5kIGluZGVudGlvblxuICAgICAgICBlbHNlIGlmIChpc0Nsb3NpbmdUYWcpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3JlIG1vcmUgY2xvc2luZyB0YWdzIHRoYW4gb3BlbmluZ1xuICAgICAgICAgICAgaWYgKC0tY3VycmVudEluZGVudCA8IDApXG4gICAgICAgICAgICAgICAgY3VycmVudEluZGVudCA9IDA7XG4gICAgICAgICAgICByZXN1bHQgKz0gbmV3bGluZUNoYXIgKyB3aGl0ZXNwYWNlLnJlcGVhdChjdXJyZW50SW5kZW50KTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZW1vdmUgbXVsdGlwbGUgd2hpdGVzcGFjZXNcbiAgICAgICAgZWxzZSBpZiAoc3RyaXBXaGl0ZVNwYWNlcyA9PT0gdHJ1ZSAmJiBjaGFyID09PSBcIiBcIiAmJiBuZXh0Q2hhciA9PT0gXCIgXCIpXG4gICAgICAgICAgICBjaGFyID0gXCJcIjtcbiAgICAgICAgLy8gcmVtb3ZlIGVtcHR5IGxpbmVzXG4gICAgICAgIGVsc2UgaWYgKHN0cmlwRW1wdHlMaW5lcyA9PT0gdHJ1ZSAmJiBjaGFyID09PSBuZXdsaW5lQ2hhcikge1xuICAgICAgICAgICAgLy9kZWJ1Z2dlcjtcbiAgICAgICAgICAgIGlmIChjb2RlLnN1YnN0cihwb3MsIGNvZGUuc3Vic3RyKHBvcykuaW5kZXhPZihcIjxcIikpLnRyaW0oKSA9PT0gXCJcIilcbiAgICAgICAgICAgICAgICBjaGFyID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNUYWdFbmQgJiYgIWlzVGFnTmV4dCkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IG5ld2xpbmVDaGFyICsgd2hpdGVzcGFjZS5yZXBlYXQoY3VycmVudEluZGVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ICs9IGNoYXI7XG4gICAgfVxuICAgIGxvZ2dlci5sb2coXCJmb3JtYXRIVE1MXCIsIHtcbiAgICAgICAgYmVmb3JlOiBjb2RlLFxuICAgICAgICBhZnRlcjogcmVzdWx0LFxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLkZvcm1hdEhUTUxTdHJpbmdJbmRlbnRhdGlvbiA9IEZvcm1hdEhUTUxTdHJpbmdJbmRlbnRhdGlvbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuLypcbiAgRm9ybWF0cyB0aGUgdGhlIG91dHB1dCBmcm9tIHRoZSBwb3B1cCBzbyB0aGF0IHRoZSBxdWlsbCBlZGl0b3IgY2FuIHByb3Blcmx5IGRpc3BsYXkgaXRcbiovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbXBvc2UgPSBleHBvcnRzLkZpeFRhZ1NwYWNlQ2xvc2VUYWcgPSBleHBvcnRzLkZpeFRhZ1NwYWNlT3BlblRhZyA9IGV4cG9ydHMuUHJlc2VydmVOZXdsaW5lc1BUYWdzID0gZXhwb3J0cy5QcmVzZXJ2ZU5ld2xpbmVzQnIgPSBleHBvcnRzLkNvbnZlcnRNdWx0aXBsZVNwYWNlc1RvU2luZ2xlID0gZXhwb3J0cy5PdXRwdXRIVE1MUGFyc2VyID0gdm9pZCAwO1xuZnVuY3Rpb24gT3V0cHV0SFRNTFBhcnNlcihpbnB1dEh0bWxGcm9tUXVpbGxQb3B1cCkge1xuICAgIHJldHVybiBDb21wb3NlKFtcbiAgICAgICAgQ29udmVydE11bHRpcGxlU3BhY2VzVG9TaW5nbGUsXG4gICAgICAgIEZpeFRhZ1NwYWNlT3BlblRhZyxcbiAgICAgICAgRml4VGFnU3BhY2VDbG9zZVRhZyxcbiAgICAgICAgUHJlc2VydmVOZXdsaW5lc0JyLFxuICAgICAgICBQcmVzZXJ2ZU5ld2xpbmVzUFRhZ3MsXG4gICAgXSwgaW5wdXRIdG1sRnJvbVF1aWxsUG9wdXApO1xufVxuZXhwb3J0cy5PdXRwdXRIVE1MUGFyc2VyID0gT3V0cHV0SFRNTFBhcnNlcjtcbmZ1bmN0aW9uIENvbnZlcnRNdWx0aXBsZVNwYWNlc1RvU2luZ2xlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1xccysvZywgXCIgXCIpLnRyaW0oKTtcbn1cbmV4cG9ydHMuQ29udmVydE11bHRpcGxlU3BhY2VzVG9TaW5nbGUgPSBDb252ZXJ0TXVsdGlwbGVTcGFjZXNUb1NpbmdsZTtcbmZ1bmN0aW9uIFByZXNlcnZlTmV3bGluZXNCcihpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC88YnIoW1xcc10qW1xcL10/PikvZywgXCI8cD4gPC9wPlwiKTtcbn1cbmV4cG9ydHMuUHJlc2VydmVOZXdsaW5lc0JyID0gUHJlc2VydmVOZXdsaW5lc0JyO1xuZnVuY3Rpb24gUHJlc2VydmVOZXdsaW5lc1BUYWdzKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLzxwPjxcXC9wPi9nLCBcIjxwPiA8L3A+XCIpO1xufVxuZXhwb3J0cy5QcmVzZXJ2ZU5ld2xpbmVzUFRhZ3MgPSBQcmVzZXJ2ZU5ld2xpbmVzUFRhZ3M7XG5mdW5jdGlvbiBGaXhUYWdTcGFjZU9wZW5UYWcoaW5wdXQpIHtcbiAgICAvLyBPcGVuIHRhZyByZW1vdmUgc3BhY2Ugb24gaW5zaWRlXG4gICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLyg8KD8hXFwvKVtcXHc9XFwuXCInXFxzXSo+KSAvZywgXCIkMVwiKTtcbn1cbmV4cG9ydHMuRml4VGFnU3BhY2VPcGVuVGFnID0gRml4VGFnU3BhY2VPcGVuVGFnO1xuZnVuY3Rpb24gRml4VGFnU3BhY2VDbG9zZVRhZyhpbnB1dCkge1xuICAgIC8vIENsb3NlIHRhZyByZW1vdmUgc3BhY2Ugb24gaW5zaWRlXG4gICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLyAoPFxcL1tcXHddKz4pL2csIFwiJDFcIik7XG59XG5leHBvcnRzLkZpeFRhZ1NwYWNlQ2xvc2VUYWcgPSBGaXhUYWdTcGFjZUNsb3NlVGFnO1xuZnVuY3Rpb24gQ29tcG9zZShmdW5jdGlvbnMsIGlucHV0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY3VyKSB7IHJldHVybiBjdXIoYWNjKTsgfSwgaW5wdXQpO1xufVxuZXhwb3J0cy5Db21wb3NlID0gQ29tcG9zZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5RdWlsbEh0bWxMb2dnZXIgPSB2b2lkIDA7XG52YXIgUXVpbGxIdG1sTG9nZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFF1aWxsSHRtbExvZ2dlcigpIHtcbiAgICAgICAgdGhpcy5kZWJ1ZyA9IGZhbHNlO1xuICAgIH1cbiAgICBRdWlsbEh0bWxMb2dnZXIucHJvdG90eXBlLnNldERlYnVnID0gZnVuY3Rpb24gKGRlYnVnKSB7XG4gICAgICAgIHRoaXMuZGVidWcgPSBkZWJ1ZztcbiAgICB9O1xuICAgIFF1aWxsSHRtbExvZ2dlci5wcm90b3R5cGUucHJlZml4U3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCI8Lz4gcXVpbGwtaHRtbC1lZGl0LWJ1dHRvbjogXCI7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUXVpbGxIdG1sTG9nZ2VyLnByb3RvdHlwZSwgXCJsb2dcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5kZWJ1Zykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGJvdW5kTG9nRm4gPSBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUsIHRoaXMucHJlZml4U3RyaW5nKCkpO1xuICAgICAgICAgICAgcmV0dXJuIGJvdW5kTG9nRm47XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gUXVpbGxIdG1sTG9nZ2VyO1xufSgpKTtcbmV4cG9ydHMuUXVpbGxIdG1sTG9nZ2VyID0gUXVpbGxIdG1sTG9nZ2VyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaHRtbEVkaXRCdXR0b24gPSB2b2lkIDA7XG52YXIgbG9nZ2VyXzEgPSByZXF1aXJlKFwiLi9sb2dnZXJcIik7XG5yZXF1aXJlKFwiLi9zdHlsZXMuY3NzXCIpO1xudmFyIHF1aWxsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInF1aWxsXCIpKTtcbnZhciBodG1sX3BhcnNlcl8xID0gcmVxdWlyZShcIi4vaHRtbC1wYXJzZXJcIik7XG52YXIgaHRtbF9mb3JtYXR0ZXJfMSA9IHJlcXVpcmUoXCIuL2h0bWwtZm9ybWF0dGVyXCIpO1xuZnVuY3Rpb24gJGNyZWF0ZShlbE5hbWUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbE5hbWUpO1xufVxuZnVuY3Rpb24gJHNldEF0dHIoZWwsIGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xufVxudmFyIExvZ2dlciA9IG5ldyBsb2dnZXJfMS5RdWlsbEh0bWxMb2dnZXIoKTtcbnZhciBodG1sRWRpdEJ1dHRvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBodG1sRWRpdEJ1dHRvbihxdWlsbCwgb3B0aW9uc0lucHV0KSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gb3B0aW9uc0lucHV0IHx8IHt9O1xuICAgICAgICB2YXIgZGVidWcgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuZGVidWcpO1xuICAgICAgICBMb2dnZXIuc2V0RGVidWcoZGVidWcpO1xuICAgICAgICBMb2dnZXIubG9nKFwibG9nZ2luZyBlbmFibGVkXCIpO1xuICAgICAgICAvLyBBZGQgYnV0dG9uIHRvIGFsbCBxdWlsbCB0b29sYmFyIGluc3RhbmNlc1xuICAgICAgICB2YXIgdG9vbGJhck1vZHVsZSA9IHF1aWxsLmdldE1vZHVsZShcInRvb2xiYXJcIik7XG4gICAgICAgIGlmICghdG9vbGJhck1vZHVsZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdxdWlsbC5odG1sRWRpdEJ1dHRvbiByZXF1aXJlcyB0aGUgXCJ0b29sYmFyXCIgbW9kdWxlIHRvIGJlIGluY2x1ZGVkIHRvbycpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVnaXN0ZXJEaXZNb2R1bGUoKTtcbiAgICAgICAgdmFyIHRvb2xiYXJFbCA9IHRvb2xiYXJNb2R1bGUuY29udGFpbmVyO1xuICAgICAgICB2YXIgYnV0dG9uQ29udGFpbmVyID0gJGNyZWF0ZShcInNwYW5cIik7XG4gICAgICAgICRzZXRBdHRyKGJ1dHRvbkNvbnRhaW5lciwgXCJjbGFzc1wiLCBcInFsLWZvcm1hdHNcIik7XG4gICAgICAgIHZhciBidXR0b24gPSAkY3JlYXRlKFwiYnV0dG9uXCIpO1xuICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gb3B0aW9ucy5idXR0b25IVE1MIHx8IFwiJmx0OyZndDtcIjtcbiAgICAgICAgYnV0dG9uLnRpdGxlID0gb3B0aW9ucy5idXR0b25UaXRsZSB8fCBcIlNob3cgSFRNTCBzb3VyY2VcIjtcbiAgICAgICAgYnV0dG9uLnR5cGUgPSBcImJ1dHRvblwiO1xuICAgICAgICB2YXIgb25TYXZlID0gZnVuY3Rpb24gKGh0bWwpIHtcbiAgICAgICAgICAgIHF1aWxsLmNsaXBib2FyZC5kYW5nZXJvdXNseVBhc3RlSFRNTChodG1sKTtcbiAgICAgICAgfTtcbiAgICAgICAgYnV0dG9uLm9uY2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgbGF1bmNoUG9wdXBFZGl0b3IocXVpbGwsIG9wdGlvbnMsIG9uU2F2ZSk7XG4gICAgICAgIH07XG4gICAgICAgIGJ1dHRvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b24pO1xuICAgICAgICB0b29sYmFyRWwuYXBwZW5kQ2hpbGQoYnV0dG9uQ29udGFpbmVyKTtcbiAgICB9XG4gICAgaHRtbEVkaXRCdXR0b24ucHJvdG90eXBlLnJlZ2lzdGVyRGl2TW9kdWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUbyBhbGxvdyBkaXZzIHRvIGJlIGluc2VydGVkIGludG8gaHRtbCBlZGl0b3JcbiAgICAgICAgLy8gb2J0YWluZWQgZnJvbSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3F1aWxsanMvcXVpbGwvaXNzdWVzLzIwNDBcbiAgICAgICAgdmFyIEJsb2NrID0gcXVpbGxfMS5kZWZhdWx0LmltcG9ydChcImJsb3RzL2Jsb2NrXCIpO1xuICAgICAgICB2YXIgRGl2ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKERpdiwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIERpdigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gRGl2O1xuICAgICAgICB9KEJsb2NrKSk7XG4gICAgICAgIERpdi50YWdOYW1lID0gXCJkaXZcIjtcbiAgICAgICAgRGl2LmJsb3ROYW1lID0gXCJkaXZcIjtcbiAgICAgICAgRGl2LmFsbG93ZWRDaGlsZHJlbiA9IEJsb2NrLmFsbG93ZWRDaGlsZHJlbjtcbiAgICAgICAgRGl2LmFsbG93ZWRDaGlsZHJlbi5wdXNoKEJsb2NrKTtcbiAgICAgICAgcXVpbGxfMS5kZWZhdWx0LnJlZ2lzdGVyKERpdik7XG4gICAgfTtcbiAgICByZXR1cm4gaHRtbEVkaXRCdXR0b247XG59KCkpO1xuZXhwb3J0cy5odG1sRWRpdEJ1dHRvbiA9IGh0bWxFZGl0QnV0dG9uO1xuZnVuY3Rpb24gbGF1bmNoUG9wdXBFZGl0b3IocXVpbGwsIG9wdGlvbnMsIHNhdmVDYWxsYmFjaykge1xuICAgIHZhciBodG1sRnJvbUVkaXRvciA9IHF1aWxsLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiLnFsLWVkaXRvclwiKS5pbm5lckhUTUw7XG4gICAgdmFyIHBvcHVwQ29udGFpbmVyID0gJGNyZWF0ZShcImRpdlwiKTtcbiAgICB2YXIgb3ZlcmxheUNvbnRhaW5lciA9ICRjcmVhdGUoXCJkaXZcIik7XG4gICAgdmFyIG1zZyA9IG9wdGlvbnMubXNnIHx8XG4gICAgICAgICdFZGl0IEhUTUwgaGVyZSwgd2hlbiB5b3UgY2xpY2sgXCJPS1wiIHRoZSBxdWlsbCBlZGl0b3JcXCdzIGNvbnRlbnRzIHdpbGwgYmUgcmVwbGFjZWQnO1xuICAgIHZhciBjYW5jZWxUZXh0ID0gb3B0aW9ucy5jYW5jZWxUZXh0IHx8IFwiQ2FuY2VsXCI7XG4gICAgdmFyIG9rVGV4dCA9IG9wdGlvbnMub2tUZXh0IHx8IFwiT2tcIjtcbiAgICB2YXIgY2xvc2VPbkNsaWNrT3ZlcmxheSA9IG9wdGlvbnMuY2xvc2VPbkNsaWNrT3ZlcmxheSAhPT0gZmFsc2U7XG4gICAgJHNldEF0dHIob3ZlcmxheUNvbnRhaW5lciwgXCJjbGFzc1wiLCBcInFsLWh0bWwtb3ZlcmxheUNvbnRhaW5lclwiKTtcbiAgICAkc2V0QXR0cihwb3B1cENvbnRhaW5lciwgXCJjbGFzc1wiLCBcInFsLWh0bWwtcG9wdXBDb250YWluZXJcIik7XG4gICAgdmFyIHBvcHVwVGl0bGUgPSAkY3JlYXRlKFwic3BhblwiKTtcbiAgICAkc2V0QXR0cihwb3B1cFRpdGxlLCBcImNsYXNzXCIsIFwicWwtaHRtbC1wb3B1cFRpdGxlXCIpO1xuICAgIHBvcHVwVGl0bGUuaW5uZXJUZXh0ID0gbXNnO1xuICAgIHZhciB0ZXh0Q29udGFpbmVyID0gJGNyZWF0ZShcImRpdlwiKTtcbiAgICB0ZXh0Q29udGFpbmVyLmFwcGVuZENoaWxkKHBvcHVwVGl0bGUpO1xuICAgICRzZXRBdHRyKHRleHRDb250YWluZXIsIFwiY2xhc3NcIiwgXCJxbC1odG1sLXRleHRDb250YWluZXJcIik7XG4gICAgdmFyIGNvZGVCbG9jayA9ICRjcmVhdGUoXCJwcmVcIik7XG4gICAgJHNldEF0dHIoY29kZUJsb2NrLCBcImRhdGEtbGFuZ3VhZ2VcIiwgXCJ4bWxcIik7XG4gICAgY29kZUJsb2NrLmlubmVyVGV4dCA9ICgwLCBodG1sX2Zvcm1hdHRlcl8xLkZvcm1hdEhUTUxTdHJpbmdJbmRlbnRhdGlvbikoaHRtbEZyb21FZGl0b3IsIExvZ2dlcik7XG4gICAgdmFyIGh0bWxFZGl0b3IgPSAkY3JlYXRlKFwiZGl2XCIpO1xuICAgICRzZXRBdHRyKGh0bWxFZGl0b3IsIFwiY2xhc3NcIiwgXCJxbC1odG1sLXRleHRBcmVhXCIpO1xuICAgIHZhciBidXR0b25DYW5jZWwgPSAkY3JlYXRlKFwiYnV0dG9uXCIpO1xuICAgIGJ1dHRvbkNhbmNlbC5pbm5lckhUTUwgPSBjYW5jZWxUZXh0O1xuICAgICRzZXRBdHRyKGJ1dHRvbkNhbmNlbCwgXCJjbGFzc1wiLCBcInFsLWh0bWwtYnV0dG9uQ2FuY2VsXCIpO1xuICAgIHZhciBidXR0b25PayA9ICRjcmVhdGUoXCJidXR0b25cIik7XG4gICAgYnV0dG9uT2suaW5uZXJIVE1MID0gb2tUZXh0O1xuICAgICRzZXRBdHRyKGJ1dHRvbk9rLCBcImNsYXNzXCIsIFwicWwtaHRtbC1idXR0b25Pa1wiKTtcbiAgICB2YXIgYnV0dG9uR3JvdXAgPSAkY3JlYXRlKFwiZGl2XCIpO1xuICAgICRzZXRBdHRyKGJ1dHRvbkdyb3VwLCBcImNsYXNzXCIsIFwicWwtaHRtbC1idXR0b25Hcm91cFwiKTtcbiAgICB2YXIgcHJlcGVuZFNlbGVjdG9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvcHRpb25zLnByZXBlbmRTZWxlY3Rvcik7XG4gICAgYnV0dG9uR3JvdXAuYXBwZW5kQ2hpbGQoYnV0dG9uQ2FuY2VsKTtcbiAgICBidXR0b25Hcm91cC5hcHBlbmRDaGlsZChidXR0b25Payk7XG4gICAgaHRtbEVkaXRvci5hcHBlbmRDaGlsZChjb2RlQmxvY2spO1xuICAgIHRleHRDb250YWluZXIuYXBwZW5kQ2hpbGQoaHRtbEVkaXRvcik7XG4gICAgdGV4dENvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b25Hcm91cCk7XG4gICAgcG9wdXBDb250YWluZXIuYXBwZW5kQ2hpbGQodGV4dENvbnRhaW5lcik7XG4gICAgb3ZlcmxheUNvbnRhaW5lci5hcHBlbmRDaGlsZChwb3B1cENvbnRhaW5lcik7XG4gICAgaWYgKHByZXBlbmRTZWxlY3Rvcikge1xuICAgICAgICBwcmVwZW5kU2VsZWN0b3IucHJlcGVuZChvdmVybGF5Q29udGFpbmVyKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQob3ZlcmxheUNvbnRhaW5lcik7XG4gICAgfVxuICAgIHZhciBtb2R1bGVzID0gb3B0aW9ucyAmJiBvcHRpb25zLmVkaXRvck1vZHVsZXM7XG4gICAgdmFyIGhhc01vZHVsZXMgPSAhIW1vZHVsZXMgJiYgISFPYmplY3Qua2V5cyhtb2R1bGVzKS5sZW5ndGg7XG4gICAgdmFyIG1vZHVsZXNTYWZlID0gaGFzTW9kdWxlcyA/IG1vZHVsZXMgOiB7fTtcbiAgICAvLyBjb25zb2xlLnRpbWUoJ25ldyBRdWlsbCcpXG4gICAgdmFyIGVkaXRvciA9IG5ldyBxdWlsbF8xLmRlZmF1bHQoaHRtbEVkaXRvciwge1xuICAgICAgICBtb2R1bGVzOiBfX2Fzc2lnbih7IHN5bnRheDogb3B0aW9ucy5zeW50YXggfSwgbW9kdWxlc1NhZmUpLFxuICAgIH0pO1xuICAgIC8vIGNvbnNvbGUudGltZUVuZCgnbmV3IFF1aWxsJylcbiAgICBidXR0b25DYW5jZWwub25jbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHByZXBlbmRTZWxlY3Rvcikge1xuICAgICAgICAgICAgcHJlcGVuZFNlbGVjdG9yLnJlbW92ZUNoaWxkKG92ZXJsYXlDb250YWluZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChvdmVybGF5Q29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgaWYgKGNsb3NlT25DbGlja092ZXJsYXkpIHtcbiAgICAgICAgb3ZlcmxheUNvbnRhaW5lci5vbmNsaWNrID0gYnV0dG9uQ2FuY2VsLm9uY2xpY2s7XG4gICAgfVxuICAgIHBvcHVwQ29udGFpbmVyLm9uY2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfTtcbiAgICBidXR0b25Pay5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29udGFpbmVyID0gZWRpdG9yLmNvbnRhaW5lcjtcbiAgICAgICAgdmFyIHFsRWxlbWVudCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiLnFsLWVkaXRvclwiKTtcbiAgICAgICAgdmFyIGh0bWxJbnB1dEZyb21Qb3B1cCA9IHFsRWxlbWVudC5pbm5lclRleHQ7XG4gICAgICAgIHZhciBodG1sT3V0cHV0Rm9ybWF0dGVkID0gKDAsIGh0bWxfcGFyc2VyXzEuT3V0cHV0SFRNTFBhcnNlcikoaHRtbElucHV0RnJvbVBvcHVwKTtcbiAgICAgICAgTG9nZ2VyLmxvZyhcIk91dHB1dEhUTUxQYXJzZXJcIiwgeyBodG1sSW5wdXRGcm9tUG9wdXA6IGh0bWxJbnB1dEZyb21Qb3B1cCwgaHRtbE91dHB1dEZvcm1hdHRlZDogaHRtbE91dHB1dEZvcm1hdHRlZCB9KTtcbiAgICAgICAgc2F2ZUNhbGxiYWNrKGh0bWxPdXRwdXRGb3JtYXR0ZWQpO1xuICAgICAgICBpZiAocHJlcGVuZFNlbGVjdG9yKSB7XG4gICAgICAgICAgICBwcmVwZW5kU2VsZWN0b3IucmVtb3ZlQ2hpbGQob3ZlcmxheUNvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKG92ZXJsYXlDb250YWluZXIpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbndpbmRvd1tcImh0bWxFZGl0QnV0dG9uXCJdID0gaHRtbEVkaXRCdXR0b247XG5leHBvcnRzLmRlZmF1bHQgPSBodG1sRWRpdEJ1dHRvbjtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTkyMCk7XG4iXSwic291cmNlUm9vdCI6IiJ9